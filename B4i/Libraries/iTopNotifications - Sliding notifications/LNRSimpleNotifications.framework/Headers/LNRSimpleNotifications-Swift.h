// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import UIKit;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

SWIFT_CLASS("_TtC22LNRSimpleNotifications15LNRNotification")
@interface LNRNotification : NSObject
/**
  The title of this notification
*/
@property (nonatomic, copy) NSString * _Nonnull title;
/**
  The body of this notification
*/
@property (nonatomic, copy) NSString * _Nullable body;
/**
  The duration of the displayed notification. If it is 0.0 duration will default to the default notification display time
*/
@property (nonatomic) NSTimeInterval duration;
/**
  An optional callback to be triggered whan a notification is tapped in addition to dismissing the notification.
*/
@property (nonatomic, copy) void (^ _Nullable onTap)(void);
/**
  An optional callback to be triggered whan a notification times out without being tapped.
*/
@property (nonatomic, copy) void (^ _Nullable onTimeout)(void);
/**
  Initializer for a LNRNotification. this library.
  *  @param title The title of the notification view
  *  @param body The body of the notification view (optional)
  *  @param duration The duration this notification should be displayed (optional)
  *  @param onTap The block that should be executed when the user taps on the notification
  *  @param onTimeout A block that should be executed when the notification times out. If the notification duration is set to endless (-1) this block will never be called.
*/
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title body:(NSString * _Nullable)body duration:(NSTimeInterval)duration onTap:(void (^ _Nullable)(void))onTap onTimeout:(void (^ _Nullable)(void))onTimeout OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class LNRNotificationView;
@class UIColor;
@class UIFont;
@class UIImage;

SWIFT_CLASS("_TtC22LNRSimpleNotifications22LNRNotificationManager")
@interface LNRNotificationManager : NSObject
/**
  Shows a notification
  *  @param title The title of the notification view
  *  @param body The text that is displayed underneath the title
  *  @param onTap The block that should be executed when the user taps on the notification
*/
- (void)showNotificationWithNotification:(LNRNotification * _Nonnull)notification;
/**
  Dismisses the currently displayed notificationView with a completion block called after the notification disappears off screen
  *  @param completion The block that should be executed when the notification finishes dismissing
  *  @return true if notification dismissal was triggered, false if no notification was currently displayed.
*/
- (BOOL)dismissActiveNotificationWithCompletion:(void (^ _Nullable)(void))completion;
/**
  Dismisses the notificationView passed as an argument
  *  @param dismissAnimationCompletion The block that should be executed when the notification finishes dismissing
  *  @return true if notification dismissal was triggered, false if notification was not currently displayed.
*/
- (BOOL)dismissNotificationViewWithNotificationView:(LNRNotificationView * _Nonnull)notificationView dismissAnimationCompletion:(void (^ _Nullable)(void))dismissAnimationCompletion;
/**
  Indicates whether a notification is currently active.
  @return true if a notification is being displayed
*/
@property (nonatomic, readonly) BOOL isNotificationActive;
/**
  The active notification, if there is one. nil if no notification is currently active.
*/
@property (nonatomic, strong) LNRNotificationView * _Nullable activeNotification;
/**
  <ul>
    <li>
      Use to set the background color of notifications.
    </li>
  </ul>
*/
@property (nonatomic, strong) UIColor * _Nonnull notificationsBackgroundColor;
/**
  Use to set the title text color of notifications
*/
@property (nonatomic, strong) UIColor * _Nonnull notificationsTitleTextColor;
/**
  Use to set the body text color of notifications.
*/
@property (nonatomic, strong) UIColor * _Nonnull notificationsBodyTextColor;
/**
  Use to set the title font of notifications.
*/
@property (nonatomic, strong) UIFont * _Nonnull notificationsTitleFont;
/**
  Use to set the body font of notifications.
*/
@property (nonatomic, strong) UIFont * _Nonnull notificationsBodyFont;
/**
  Use to set the bottom/top seperator color.
*/
@property (nonatomic, strong) UIColor * _Nonnull notificationsSeperatorColor;
/**
  Use to set the icon displayed with notifications.
*/
@property (nonatomic, strong) UIImage * _Nullable notificationsIcon;
- (void)SetPositionWithTop:(BOOL)top;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC22LNRSimpleNotifications20LNRNotificationQueue")
@interface LNRNotificationQueue : NSObject
/**
  Initializes a LNRNotificationQueue
  @param notificationManager The LNRNotificationManager that will be used to display queued messages. You should not trigger notifications from this Notification Manager anywhere else in your app.
*/
- (nonnull instancetype)initWithNotificationManager:(LNRNotificationManager * _Nonnull)notificationManager OBJC_DESIGNATED_INITIALIZER;
/**
  Queues a notification to be displayed.
*/
- (void)queueNotificationWithNotification:(LNRNotification * _Nonnull)notification;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class NSCoder;

SWIFT_CLASS("_TtC22LNRSimpleNotifications19LNRNotificationView")
@interface LNRNotificationView : UIView <UIGestureRecognizerDelegate>
/**
  Set to YES by the Notification manager while the notification view is onscreen
*/
@property (nonatomic) BOOL isDisplayed;
/**
  The LNRNotification this LNRNotificationView represents
*/
@property (nonatomic, strong) LNRNotification * _Nonnull notification;
/**
  Required initializer ‘init(coder:)’ must be implemented by subclasses of UIView
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
/**
  Dismisses this notification if this notification is currently displayed.
  @param completion A block called after the completion of the dismiss animation. This block is only called if the notification was displayed on screen at the time dismissWithCompletion: was called.
  @return true if notification was displayed at the time dismissWithCompletion: was called, false if notification was not displayed.
*/
- (BOOL)dismissWithCompletion:(void (^ _Nullable)(void))completion;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

#pragma clang diagnostic pop
