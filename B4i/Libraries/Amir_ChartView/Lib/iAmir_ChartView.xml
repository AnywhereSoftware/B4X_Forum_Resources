<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<root>
    <doclet-version-NOT-library-version>1.00</doclet-version-NOT-library-version>
    <class>
        <name>iAmir_ChartView</name>
        <shortname>Amir_ChartView</shortname>
        <objectwrapper>HCLineChartView*</objectwrapper>
        <comment>iAmir_ChartView.h
  iAmir_ChartView

  Created by AmirHossein Aghajari on 5/16/20.
  Copyright Â© 2020 Amir Hossein Aghajari. All rights reserved.</comment>
        <event>Click</event>
        <event>LongClick</event>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="CalcRelativeKeyboardHeight">CalcRelativeKeyboardHeight:</name>
            <comment>Calculates the keyboard top point relative to the current view.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>KeyboardHeight</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetColorAnimated">SetColorAnimated::</name>
            <comment>Animates the view's background color.
DurationMS - Animation duration measured in milliseconds.
BackgroundColor - The new background color.
Note that Labels do not support this type of animation.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>BackgroundColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetAlphaAnimated">SetAlphaAnimated::</name>
            <comment>Animates the view's alpha level.
DurationMS - Animation duration measured in milliseconds.
Alpha - The new alpha level (0 - transparent, 1 - fully opaque).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Alpha</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetLayoutAnimated">SetLayoutAnimated::::::</name>
            <comment>Animates the view's layout.
DurationMS - Animation duration measured in milliseconds. Set to 0 to change the layout immediately.
DampingRatio - If smaller than 1 then a spring effect will be applied to the animation. The minimum value should be 0.1.
Set to 1 for no spring effect.
Left, Top, Width and Height - The new layout.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>DampingRatio</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBorder">SetBorder:::</name>
            <comment>Sets the view's border width, color and corner radius.
Note that the corner radius should be 0 if the view should show a shadow as well.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>CornerRadius</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetShadow">SetShadow:::::</name>
            <comment>Adds a shadow to to the view. The border corners radius should be set to 0 when adding shadows.
Colors - The shadow color.
OffsetX, OffsetY - The horizontal and vertical offsets.
Opacity - Sets the shadow opacity: 0 - transparent, 1 - opaque.
StaticRect - (optimization parameter) Set this parameter to True if the view's size is constant.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>OffsetX</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>OffsetY</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Opacity</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>StaticRect</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SizeToFit">SizeToFit</name>
            <comment>Resizes the view to make it fit its content.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="RequestFocus">RequestFocus</name>
            <comment>Tries to set the focus on the current view. Returns True if the focus was set. Most views are not focusable.
When a text view is focused the keyboard is shown.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="ResignFocus">ResignFocus</name>
            <comment>Removes the focus from the current view. Removing the focus from a text view will hide the keyboard.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="RemoveViewFromParent">RemoveViewFromParent</name>
            <comment>Removes the view from its parent (same as B4A View.RemoveView method).</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="BringToFront">BringToFront</name>
            <comment>Brings the view to front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SendToBack">SendToBack</name>
            <comment>Sends the view to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SetParallaxEffect">SetParallaxEffect::</name>
            <comment>Adds a parallax effect to the view. The view will slightly move when the device is tilted.
Vertical - Vertical offset. Can be a positive or negative value.
Horizontal - Horizontal offset. Can be a positive or negative value.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Vertical</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Horizontal</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Initialize">Initialize:</name>
            <returntype>void</returntype>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Initialize2">Initialize2::</name>
            <returntype>void</returntype>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>rect</name>
                <type>CGRect</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="DrawChart">DrawChart</name>
            <comment>/ Draws/redraws chart with current data and settings. Calling this method will call onDraw method</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="UpdateChartWithXElements">UpdateChartWithXElements:yElements:</name>
            <comment>/ Updates chart with new data
/ @param xElements Values for X axis.
/ @param yElements Values for Y axis.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>xElements</name>
                <type>NSArray*</type>
            </parameter>
            <parameter>
                <name>yElements</name>
                <type>NSArray*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setChartTransparentBackground">setChartTransparentBackground:</name>
            <comment>This property defines if chart background is transparent or not.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>value</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setChartGradient">setChartGradient:</name>
            <comment>This property defines if chart background has the gradient.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>value</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setBackgroundGradientTopColor">setBackgroundGradientTopColor:</name>
            <comment>This property defines the top color for background gradient. It is also the background color for the chart if chartGradient is set to NO.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>value</name>
                <type>UIColor*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setBackgroundGradientBottomColor">setBackgroundGradientBottomColor:</name>
            <comment>This property defines the bottom color for background gradient.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>value</name>
                <type>UIColor*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setChartWithRoundedCorners">setChartWithRoundedCorners:</name>
            <comment>This property defines if chart view should have rounded corners.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>value</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setChartTitle">setChartTitle:</name>
            <comment>This property defines chart title.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>value</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setChartTitleColor">setChartTitleColor:</name>
            <comment>This property defines chart title color.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>value</name>
                <type>UIColor*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setFontSizeForTitle">setFontSizeForTitle:</name>
            <comment>This property defines font size for chart title.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>value</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setShowSubtitle">setShowSubtitle:</name>
            <comment>This property defines if the chart has a subtitle.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>value</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setChartSubTitle">setChartSubTitle:</name>
            <comment>This property defines chart subtitle.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>value</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setFontSizeForSubTitle">setFontSizeForSubTitle:</name>
            <comment>This property defines font size for chart subtitle.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>value</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setChartSubtitleColor">setChartSubtitleColor:</name>
            <comment>This property defines chart subtitle color.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>value</name>
                <type>UIColor*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setChartAxisColor">setChartAxisColor:</name>
            <comment>This property defines chart axes color.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>value</name>
                <type>UIColor*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setFontSizeForAxis">setFontSizeForAxis:</name>
            <comment>This property defines font size for chart axes.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>value</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setShowXValueAsCurrency">setShowXValueAsCurrency:</name>
            <comment>This property defines if values on the X axis should be in currency format. It is useful in cases where we need to show exchange rate on chart</comment>
            <returntype>void</returntype>
            <parameter>
                <name>value</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setXAxisCurrencyCode">setXAxisCurrencyCode:</name>
            <comment>TThis property defines currency code for the X axis. It is relevant if showXValueAsCurrency parameter is set to YES. If you don't define currency code or currency code is not valid, the chart will display your local currency code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>value</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setShowYValueAsCurrency">setShowYValueAsCurrency:</name>
            <comment>This property defines if values on the Y axis should be in currency format. It is useful when we need to show exchange rate on the chart (if showXValueAsCurrency is also set to YES), or in any other case where we need to show Y values in currency format (price, saving, debt, surplus, deficit,...)</comment>
            <returntype>void</returntype>
            <parameter>
                <name>value</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setYAxisCurrencyCode">setYAxisCurrencyCode:</name>
            <comment>This property defines currency code for the Y axis. It is relevant if showYValueAsCurrency parameter is set to YES. If you don't define currency code or currency code is not valid, the chart will display your local currency code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>value</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setHorizontalValuesOnXAxis">setHorizontalValuesOnXAxis:</name>
            <comment>This property defines if values on X axis should be presented horizontally (vertically is default).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>value</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setDrawHorizontalLinesForYTicks">setDrawHorizontalLinesForYTicks:</name>
            <comment>This property defines if values on this axis should have horizontal orientation (default orientation is vertical)</comment>
            <returntype>void</returntype>
            <parameter>
                <name>value</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setChartLineWidth">setChartLineWidth:</name>
            <comment>This property defines chart line width.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>value</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setChartLineColor">setChartLineColor:</name>
            <comment>This property defines chart line color.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>value</name>
                <type>UIColor*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setChartLineWithCircles">setChartLineWithCircles:</name>
            <comment>This property defines if chart points should have circles</comment>
            <returntype>void</returntype>
            <parameter>
                <name>value</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setChartGradientUnderline">setChartGradientUnderline:</name>
            <comment>This property defines if the area under chart line should have gradient</comment>
            <returntype>void</returntype>
            <parameter>
                <name>value</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setUnderLineChartGradientTopColor">setUnderLineChartGradientTopColor:</name>
            <comment>This property defines if bottom gradient color for the area under chart line is transparent.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>value</name>
                <type>UIColor*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setUnderLineChartGradientBottomColorIsTransparent">setUnderLineChartGradientBottomColorIsTransparent:</name>
            <comment>This property defines if bottom gradient color for the area under chart line is transparent.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>value</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setUnderLineChartGradientBottomColor">setUnderLineChartGradientBottomColor:</name>
            <comment>This property defines bottom gradient color for the area under chart line. This parameter is valid only if chart itself isn't transparent</comment>
            <returntype>void</returntype>
            <parameter>
                <name>value</name>
                <type>UIColor*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setIsValueChartWithRealXAxisDistribution">setIsValueChartWithRealXAxisDistribution:</name>
            <comment>This property defines if the distribution of values on X axis should be value based.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>value</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setSortData">setSortData:</name>
            <comment>It is recommended to provide already sorted data before drawing the chart. If you don't have values for X axis sorted ascending, you can set this parameter to YES. In that case, provided values for X axis (xElements) will be sorted ascending, with the parallel sorting of paired values for Y axis (yElements). Sorting data could have a small impact on chart drawing performance.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>value</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setXElements">setXElements:</name>
            <comment>Array for storing values for the X axis. Only NSNumber and NSDate values are allowed.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>value</name>
                <type>NSMutableArray*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setYElements">setYElements:</name>
            <comment>Array for storing values for the Y axis. Only NSNumber values are allowed.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>value</name>
                <type>NSMutableArray*</type>
            </parameter>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>Left</name>
            <comment>Gets or sets the view's left position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Top</name>
            <comment>Gets or sets the view's top position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Width</name>
            <comment>Gets or sets the view's width.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Height</name>
            <comment>Gets or sets the view's height.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Color</name>
            <comment>Gets or sets the view's background color.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Alpha</name>
            <comment>Gets or sets the view's alpha level. 0 - transparent, 1 (default) - fully opaque.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>TintColor</name>
            <comment>Gets or sets the view's tint color. Some views use this color to change their appearance.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Visible</name>
            <comment>Gets or sets whether the view is visible.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>IsFocused</name>
            <comment>Returns true if the view is focused.</comment>
            <returntype>BOOL</returntype>
        </property>
        <property>
            <name>UserInteractionEnabled</name>
            <comment>Gets or sets whether the user can interact with this view. True by default.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>Parent</name>
            <comment>Returns the views parent. The returned view can be uninitialized (if there is no parent).</comment>
            <returntype>B4IViewWrapper*</returntype>
        </property>
    </class>
    <version>1</version>
    <dependsOn>AVFoundation.framework</dependsOn>
</root>
