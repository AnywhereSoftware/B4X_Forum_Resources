<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<root>
    <doclet-version-NOT-library-version>1.00</doclet-version-NOT-library-version>
    <class>
        <name>B4IWKWebViewWrapper</name>
        <shortname>WKWebView2</shortname>
        <objectwrapper>WKWebView*</objectwrapper>
        <comment>Improved version of WebView. It is based on the native WKWebView instead of UIWebView.
This is a custom view. It should be added from the designer.
OverrideUrl event allows you to cancel requests. Return True to cancel (override) the request.</comment>
        <event>PageFinished (Success As Boolean, Url As String)</event>
        <event>OverrideUrl (Url As String) As Boolean</event>
        <event>JSComplete (Success As Boolean, Tag As Object, Result As String)</event>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="LoadUrl">LoadUrl:</name>
            <comment>Loads a url. Note that you cannot use this method to load files from the Assets folder.
Example:&lt;code&gt;
WebView1.LoadUrl("http://www.google.com")&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Url</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="LoadHtml">LoadHtml:</name>
            <comment>Loads the given html code. The path is relative to the assets folder.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Html</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="CanGoBack">CanGoBack</name>
            <comment>Returns true if the WebView can navigate to the previous page.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="CanGoForward">CanGoForward</name>
            <comment>Returns true if the WebView can navigate forward.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="GoBack">GoBack</name>
            <comment>Navigates to the previous page.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="GoForward">GoForward</name>
            <comment>Navigates to the next page in the stack of pages.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="StopLoading">StopLoading</name>
            <comment>Stops loading the current page.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="Reload">Reload</name>
            <comment>Clear caches and reloads the current page.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SetBackgroundColor">SetBackgroundColor:</name>
            <comment>Set Background Color</comment>
            <returntype>void</returntype>
            <parameter>
                <name>color</name>
                <type>UIColor*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetOpacity">SetOpacity:</name>
            <comment>Set Opacity</comment>
            <returntype>void</returntype>
            <parameter>
                <name>opacity</name>
                <type>bool</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="EvaluateJavaScript">EvaluateJavaScript::</name>
            <comment>Asynchronously evaluates the JavaScript. The JSComplete event will be raised.
Tag - An object that will be included in the event.
Script - The JavaScript to evaluate.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Tag</name>
                <type>NSObject*</type>
            </parameter>
            <parameter>
                <name>Script</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Initialize">Initialize::</name>
            <comment>Initializes the object. The AuthorizationStatusChanged will be raised with the current status.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>Title</name>
            <comment>Returns the current page title.</comment>
            <returntype>NSString*</returntype>
        </property>
        <property>
            <name>EstimatedProgress</name>
            <comment>Returns the estimated loading progress. The returned value is between 0 to 1.</comment>
            <returntype>double</returntype>
        </property>
    </class>
    <version>0.9</version>
</root>
