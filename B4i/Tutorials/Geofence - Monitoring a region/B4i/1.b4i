Version=4.01
NumberOfModules=0
Build1=Default,b4i.example2
NumberOfFiles=1
File1=1.bil
NumberOfLibraries=2
Library1=icore
Library2=ilocation
@EndOfDesignText@
'Code module
#Region  Project Attributes 
	#ApplicationLabel: B4i Example
	#Version: 1.0.0 
	'Orientation possible values: Portrait, LandscapeLeft, LandscapeRight and PortraitUpsideDown
	#iPhoneOrientations: Portrait, LandscapeLeft, LandscapeRight
	#iPadOrientations: Portrait, LandscapeLeft, LandscapeRight, PortraitUpsideDown
	#PlistExtra:<key>NSLocationAlwaysUsageDescription</key><string>Monitor some region.</string>
	#PlistExtra:<key>NSLocationUsageDescription</key><string>Monitor some region.</string>
	#MinVersion: 8.0
#End Region

Sub Process_Globals
	Public App As Application
	Public NavControl As NavigationController
	Private Page1 As Page
	Private LocManager As LocationManager
	Private btnStart As Button
	Private btnStop As Button
	Private TextView1 As TextView
	Private CircularRegion As Object
End Sub

Private Sub Application_Start (Nav As NavigationController)
	NavControl = Nav
	Page1.Initialize("Page1")
	Page1.RootPanel.LoadLayout("1")
	NavControl.ShowPage(Page1)
	LocManager.Initialize("LocManager")
	LocManager_AuthorizationStatusChanged(0)
	App.RegisterUserNotifications(True, True, True)
End Sub

Private Sub LocManager_AuthorizationStatusChanged (Status As Int)
	If Not(LocManager.IsAuthorized Or LocManager.AuthorizationStatus = LocManager.AUTHORIZATION_NOT_DETERMINED) Then
		Log("Not authorized")
		btnStart.Enabled = False
	End If
End Sub

'Radius in meters
Sub CreateCircualRegion (Lat As Double, Lon As Double, Radius As Double, Identifier As String) As NativeObject
	Dim no As NativeObject = Me
	Return no.RunMethod("createCircularRegdion::::", Array(Lat, Lon, Radius, Identifier))
End Sub

Sub LocManager_RegionEnter(Region As NativeObject)
	Log("Enter")
	TextView1.Text = TextView1.Text  & CRLF & "Enter"
	ShowNotification("Enter")
End Sub

Sub LocManager_RegionExit(Region As NativeObject)
	Log("Exit")
	TextView1.Text = TextView1.Text  & CRLF & "Exit"
	ShowNotification("Exit")
End Sub

Sub ShowNotification(Text As String)
	Dim ln As Notification
	ln.Initialize(DateTime.Now)
	ln.AlertBody = Text
	ln.PlaySound = True
	ln.Register
End Sub

Sub btnStart_Click
	CircularRegion = CreateCircualRegion(32.8373001, 35.2697, 100, "region2")
	MonitorRegion(CircularRegion)
End Sub

Sub btnStop_Click
	If CircularRegion <> Null Then
		Dim no As NativeObject = LocManager
		no = no.GetField("manager")
		no.RunMethod("stopMonitoringForRegion:", Array(CircularRegion))
		btnStop.Enabled = False
		btnStart.Enabled = True
		CircularRegion = Null
	End If
End Sub

Sub LocManager_StateChanged(State As Int)
	'0 = unknown, 1 = inside, 2 = outside, 3 = error
	TextView1.Text = TextView1.Text  & CRLF & State
End Sub

Sub MonitorRegion(Region As Object)
	If LocManager.IsAuthorized Or LocManager.AuthorizationStatus = LocManager.AUTHORIZATION_NOT_DETERMINED Then
		Dim no As NativeObject = LocManager
		no = no.GetField("manager")
		If LocManager.AuthorizationStatus = LocManager.AUTHORIZATION_NOT_DETERMINED Then
			no.RunMethod("requestAlwaysAuthorization", Null)
		End If
		Dim br As NativeObject = Region
		br.SetField("notifyOnEntry", True)
		br.SetField("notifyOnExit", True)
		no.SetField("pausesLocationUpdatesAutomatically", False)
		no.RunMethod("startMonitoringForRegion:", Array(br))
		Sleep(1000)
		no.RunMethod("requestStateForRegion:", Array(br))
		btnStop.Enabled = True
		btnStart.Enabled = False
	Else
		Log("Not authorized!")
	End If
End Sub



#if objc
- (NSObject*)createCircularRegdion:(double)lat :(double)lon :(double)radius :(NSString*)identifier {
	return [[CLCircularRegion alloc] initWithCenter:CLLocationCoordinate2DMake(lat, lon) radius:(CLLocationDistance)radius identifier:identifier];
}
@end
@interface B4ILocationManager (beacon) 
@end

@implementation B4ILocationManager (beacon)

- (void)locationManager:(CLLocationManager *)manager 
          didExitRegion:(CLRegion *)region {
		  [B4IObjectWrapper raiseEvent:self :@"_regionexit:" :@[region]];
	}
- (void)locationManager:(CLLocationManager *)manager 
         didEnterRegion:(CLRegion *)region {
		 [B4IObjectWrapper raiseEvent:self :@"_regionenter:" :@[region]];
}
- (void)locationManager:(CLLocationManager *)manager 
monitoringDidFailForRegion:(CLRegion *)region 
              withError:(NSError *)error {
	NSLog(@"Error: %@", error);
	[B4IObjectWrapper raiseEvent:self :@"_statechanged:" :@[@(3)]];
}
- (void)locationManager:(CLLocationManager *)manager 
didStartMonitoringForRegion:(CLRegion *)region {
	NSLog(@"Start monitoring: %@", region);
}
- (void)locationManager:(CLLocationManager *)manager didDetermineState:(CLRegionState)State forRegion:(CLRegion *)region {
   NSLog(@"didDetermineState: %@", @(State));
   [B4IObjectWrapper raiseEvent:self :@"_statechanged:" :@[@(State)]];
}
#End If


Private Sub Application_Foreground
End Sub

Private Sub Application_Background
End Sub





