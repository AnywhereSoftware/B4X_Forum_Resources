AppType=StandardJava
Build1=Default,b4j.example.formatlakh
Group=Default Group
Library1=bignumbers
Library2=jcore
NumberOfFiles=0
NumberOfLibraries=2
NumberOfModules=0
Version=9.08
@EndOfDesignText@
'Non-UI application (console / server application)
#Region Project Attributes 
	#CommandLineArgs:
	#MergeLibraries: True 
#End Region

Sub Process_Globals
	
End Sub

Sub AppStart (Args() As String)
	Log("Test")
	Log(LakhFormat2("-91234567891245678912345678910.5553", 1, 2, 2, False))		' <-- 9,12,34,56,78,91,23,45,67,89,12,34,56,78,910.56	(30 digit)
	Log(LakhFormat2("-12345678912345678912345678910.5553", 1, 2, 2, False))		' <--   12,34,56,78,91,23,45,67,89,12,34,56,78,910.56 	(29 digit)
	Log(LakhFormat2("-2345678912345678912345678910.5553", 1, 2, 2, False))		' <--    2,34,56,78,91,23,45,67,89,12,34,56,78,910.56 	(28 digit)
	Log(LakhFormat2("-345678912345678912345678910.5553", 1, 2, 2, False))		' <--      34,56,78,91,23,45,67,89,12,34,56,78,910.56 	(27 digit)
	Log(LakhFormat2("-45678912345678912345678910.5553", 1, 2, 2, False))		' <--       4,56,78,91,23,45,67,89,12,34,56,78,910.56 	(26 digit)
	Log(LakhFormat2("-5678912345678912345678910.5553", 1, 2, 2, False))			' <--         56,78,91,23,45,67,89,12,34,56,78,910.56 	(25 digit)
	Log(LakhFormat2("-678912345678912345678910.5553", 1, 2, 2, False))			' <--          6,78,91,23,45,67,89,12,34,56,78,910.56 	(24 digit)
	Log(LakhFormat2("-78912345678912345678910.5553", 1, 2, 2, False))			' <--            78,91,23,45,67,89,12,34,56,78,910.56 	(23 digit)
	Log(LakhFormat2("-8912345678912345678910.5553", 1, 2, 2, False))			' <--             8,91,23,45,67,89,12,34,56,78,910.56 	(22 digit)
	Log(LakhFormat2("-912345678912345678910.5553", 1, 2, 2, False))				' <--               91,23,45,67,89,12,34,56,78,910.56 	(21 digit)
	Log(LakhFormat2("-12345678912345678910.5553", 1, 2, 2, False))				' <--                1,23,45,67,89,12,34,56,78,910.56	(20 digit)
	Log(LakhFormat2("-2345678912345678910.5553", 1, 2, 2, False))
	Log(LakhFormat2("-345678912345678910.5553", 1, 2, 2, False))
	Log(LakhFormat2("-45678912345678910.5553", 1, 2, 2, False))
	Log(LakhFormat2("-5678912345678910.5553", 1, 2, 2, False))
	Log(LakhFormat2("-678912345678910.5553", 1, 2, 2, False))
	Log(LakhFormat2("-78912345678910.5553", 1, 2, 2, False))
	Log(LakhFormat2("-8912345678910.5553", 1, 2, 2, False))
	Log(LakhFormat2("-912345678910.5553", 1, 2, 2, False))
	Log(LakhFormat2("-12345678910.5553", 1, 2, 2, False))
	Log(LakhFormat2("-2345678910.5553", 1, 2, 2, False))
	Log(LakhFormat2("-345678910.5553", 1, 2, 2, False))
	Log(LakhFormat2("-45678910.5553", 1, 2, 2, False))
	Log(LakhFormat2("-5678910.5553", 1, 2, 2, False))
	Log(LakhFormat2("-678910.5553", 1, 2, 2, False))
	Log(LakhFormat2("-78910.5553", 1, 2, 2, False))
	Log(LakhFormat2("-8910.5553", 1, 2, 2, False))
	Log(LakhFormat2("-910.5553", 1, 2, 2, False))
	Log(LakhFormat2("-10.5553", 1, 2, 2, False))
	Log(LakhFormat2("-1.5553", 1, 2, 2, False))
	Log(LakhFormat2("-0.5553", 1, 2, 2, False))
	Log(LakhFormat2("0", 1, 2, 2, False))
	Log(LakhFormat2("0.5553", 1, 2, 2, False))
	Log(LakhFormat2("1.5553", 1, 2, 2, False))
	Log(LakhFormat2("10.5553", 1, 2, 2, False))
	Log(LakhFormat2("910.5553", 1, 2, 2, False))
	Log(LakhFormat2("8910.5553", 1, 2, 2, False))
	Log(LakhFormat2("78910.5553", 1, 2, 2, False))
	Log(LakhFormat2("678910.5553", 1, 2, 2, False))
	Log(LakhFormat2("5678910.5553", 1, 2, 2, False))
	Log(LakhFormat2("45678910.5553", 1, 2, 2, False))
	Log(LakhFormat2("345678910.5553", 1, 2, 2, False))
	Log(LakhFormat2("2345678910.5553", 1, 2, 2, False))
	Log(LakhFormat2("12345678910.5553", 1, 2, 2, False))
	Log(LakhFormat2("912345678910.5553", 1, 2, 2, False))
	Log(LakhFormat2("8912345678910.5553", 1, 2, 2, False))
	Log(LakhFormat2("78912345678910.5553", 1, 2, 2, False))
	Log(LakhFormat2("678912345678910.5553", 1, 2, 2, False))
	Log(LakhFormat2("5678912345678910.5553", 1, 2, 2, False))
	Log(LakhFormat2("45678912345678910.5553", 1, 2, 2, False))
	Log(LakhFormat2("345678912345678910.5553", 1, 2, 2, False))
	Log(LakhFormat2("2345678912345678910.5553", 1, 2, 2, False))
	Log(LakhFormat2("12345678912345678910.5553", 1, 2, 2, False))				' <--                  1,23,45,67,89,12,34,56,78,910.56		(20 digit)
	Log(LakhFormat2("912345678912345678910.5553", 1, 2, 2, False))				' <--                 91,23,45,67,89,12,34,56,78,910.56 	(21 digit)
	Log(LakhFormat2("8912345678912345678910.5553", 1, 2, 2, False))				' <--             	8,91,23,45,67,89,12,34,56,78,910.56 	(22 digit)
	Log(LakhFormat2("78912345678912345678910.5553", 1, 2, 2, False))			' <--              78,91,23,45,67,89,12,34,56,78,910.56 	(23 digit)
	Log(LakhFormat2("678912345678912345678910.5553", 1, 2, 2, False))			' <--          	 6,78,91,23,45,67,89,12,34,56,78,910.56 	(24 digit)
	Log(LakhFormat2("5678912345678912345678910.5553", 1, 2, 2, False))			' <--           56,78,91,23,45,67,89,12,34,56,78,910.56 	(25 digit)
	Log(LakhFormat2("45678912345678912345678910.5553", 1, 2, 2, False))			' <--         4,56,78,91,23,45,67,89,12,34,56,78,910.56 	(26 digit)
	Log(LakhFormat2("345678912345678912345678910.5553", 1, 2, 2, False))		' <--      	 34,56,78,91,23,45,67,89,12,34,56,78,910.56 	(27 digit)
	Log(LakhFormat2("2345678912345678912345678910.5553", 1, 2, 2, False))		' <--      2,34,56,78,91,23,45,67,89,12,34,56,78,910.56 	(28 digit)
	Log(LakhFormat2("12345678912345678912345678910.5553", 1, 2, 2, False))		' <--     12,34,56,78,91,23,45,67,89,12,34,56,78,910.56 	(29 digit)
	Log(LakhFormat2("91234567891245678912345678910.5553", 1, 2, 2, False))		' <-- 	9,12,34,56,78,91,23,45,67,89,12,34,56,78,910.56		(30 digit)
	Log(" ")
	Log(LakhFormat2("-101010101010101500.5553", 1, 2, 2, False))				' <-- -1,01,01,01,01,01,01,01,500.56
	Log(LakhFormat2("-10010101010101500.5553", 1, 2, 2, False))					' <--   -10,01,01,01,01,01,01,500.56
	Log(LakhFormat2("-1010101010101500.5553", 1, 2, 2, False))					' <--    -1,01,01,01,01,01,01,500.56
	Log(LakhFormat2("-100101010101500.5553", 1, 2, 2, False))					' <--	   -10,01,01,01,01,01,500.56
	Log(LakhFormat2("-10101010101500.5553", 1, 2, 2, False))					' <--       -1,01,01,01,01,01,500.56
	Log(LakhFormat2("-1001010101500.5553", 1, 2, 2, False))
	Log(LakhFormat2("-101010101500.5553", 1, 2, 2, False))
	Log(LakhFormat2("-10010101500.5553", 1, 2, 2, False))
	Log(LakhFormat2("-1010101500.5553", 1, 2, 2, False))
	Log(LakhFormat2("-100101500.5553", 1, 2, 2, False))
	Log(LakhFormat2("-10101500.5553", 1, 2, 2, False))
	Log(LakhFormat2("-1001500.5553", 1, 2, 2, False))
	Log(LakhFormat2("-101500.5553", 1, 2, 2, False))
	Log(LakhFormat2("-10500.5553", 1, 2, 2, False))
	Log(LakhFormat2("-1500.5553", 1, 2, 2, False))
	Log(LakhFormat2("-1050.5553", 1, 2, 2, False))
	Log(LakhFormat2("-1005.5553", 1, 2, 2, False))
	Log(LakhFormat2("-1000.5553", 1, 2, 2, False))
	Log(LakhFormat2("-500.5553", 1, 2, 2, False))
	Log(LakhFormat2("-50.5553", 1, 2, 2, False))
	Log(LakhFormat2("-5.5553", 1, 2, 2, False))
	Log(LakhFormat2("0.5553", 1, 2, 2, False))
	Log(LakhFormat2("5.5553", 1, 2, 2, False))
	Log(LakhFormat2("50.5553", 1, 2, 2, False))
	Log(LakhFormat2("500.5553", 1, 2, 2, False))
	Log(LakhFormat2("1000.5553", 1, 2, 2, False))
	Log(LakhFormat2("1005.5553", 1, 2, 2, False))
	Log(LakhFormat2("1050.5553", 1, 2, 2, False))
	Log(LakhFormat2("1500.5553", 1, 2, 2, False))
	Log(LakhFormat2("10500.5553", 1, 2, 2, False))
	Log(LakhFormat2("101500.5553", 1, 2, 2, False))
	Log(LakhFormat2("1001500.5553", 1, 2, 2, False))
	Log(LakhFormat2("10101500.5553", 1, 2, 2, False))
	Log(LakhFormat2("100101500.5553", 1, 2, 2, False))
	Log(LakhFormat2("1010101500.5553", 1, 2, 2, False))
	Log(LakhFormat2("10010101500.5553", 1, 2, 2, False))
	Log(LakhFormat2("101010101500.5553", 1, 2, 2, False))
	Log(LakhFormat2("1001010101500.5553", 1, 2, 2, False))
	Log(LakhFormat2("10101010101500.5553", 1, 2, 2, False))				' <--       1,01,01,01,01,01,500.56
	Log(LakhFormat2("100101010101500.5553", 1, 2, 2, False))			' <--      10,01,01,01,01,01,500.56
	Log(LakhFormat2("1010101010101500.5553", 1, 2, 2, False))			' <--    1,01,01,01,01,01,01,500.50
	Log(LakhFormat2("10010101010101500.5553", 1, 2, 2, False))			' <--   10,01,01,01,01,01,01,500.56
	Log(LakhFormat2("101010101010101500.5553", 1, 2, 2, False))			' <-- 1,01,01,01,01,01,01,01,500.56
	Log(" ")
	Log(LakhFormat2("0.10", 1, 2, 2, False))
	Log(LakhFormat2("1.00", 1, 2, 2, False))
	Log(LakhFormat2("10.00", 1, 2, 2, False))
	Log(LakhFormat2("100.00", 1, 2, 2, False))
	Log(LakhFormat2("1000.00", 1, 2, 2, False))
	Log(LakhFormat2("1001.00", 1, 2, 2, False))
	Log(LakhFormat2("10000.00", 1, 2, 2, False))
	Log(LakhFormat2("100000.00", 1, 2, 2, False))
	Log(LakhFormat2("1000000.00", 1, 2, 2, False))
	Log(LakhFormat2("10000000.00", 1, 2, 2, False))
	Log(LakhFormat2("100000000.00", 1, 2, 2, False))
	Log(LakhFormat2("1000000000.00", 1, 2, 2, False))
	Log(LakhFormat2("10000000000.00", 1, 2, 2, False))
	Log(LakhFormat2("100000000000.00", 1, 2, 2, False))
	Log(LakhFormat2("1000000000000.00", 1, 2, 2, False))
	Log(LakhFormat2("10000000000000.00", 1, 2, 2, False))
	Log(LakhFormat2("100000000000000.00", 1, 2, 2, False))
	Log(LakhFormat2("1000000000000000.00", 1, 2, 2, False))
	Log(LakhFormat2("10000000000000000.00", 1, 2, 2, False))
	Log(LakhFormat2("100000000000000000.00", 1, 2, 2, False))
	Log(LakhFormat2("1000000000000000000.00", 1, 2, 2, False))			' <--   10,00,00,00,00,00,00,00,000.00
	Log(LakhFormat2("10000000000000000000.00", 1, 2, 2, False))			' <-- 1,00,00,00,00,00,00,00,00,000.00
	Log(" ")	
	
	Log(NumberFormat2(-67891245678912345678910.5553, 1, 2, 2, True))	' Input number converted to Double	-->     -67,891,245,678,912,340,000,000.00
	Log(LakhFormat2(-67891245678912345678910.5553, 1, 2, 2, True))		' Input number converted to Double	-->  -67,89,12,45,67,89,12,34,00,00,000.00
	Log(LakhFormat2("-67891245678912345678910.5553", 1, 2, 2, True))	' Input number as String			-->  -67,89,12,45,67,89,12,34,56,78,910.56
End Sub

' Using BigNumbers library (B4A, B4J)
' Library: https://www.b4x.com/android/forum/threads/bignumbers-library.9540/
' Note: The 5th parameter Unused can be removed. It's a dummy so that the function signature same as NumberFormat2 for quick replace.
Sub LakhFormat2(Number As String, MinIntegers As Int, MaxFractions As Int, MinFractions As Int, Unused As Boolean) As String
	Dim bi, si, mm, nn, threedigit, thousand, hundred, ten, zero As BigInteger
	Dim bd, sd, od, ad As BigDecimal
	thousand.Initialize3(1000)
	hundred.Initialize3(100)
	ten.Initialize3(10)
	zero.Initialize3(0)
	bd.Initialize(Number)
	od.Initialize5(bd)
	ad.Initialize5(bd)
	ad.Abs
	si.Initialize6(ad)
	mm.Initialize6(ad)
	nn.Initialize6(ad)
	nn.Divide(thousand)
	threedigit.Initialize7(mm)
	threedigit.Remainder(thousand)
	Dim id As Int = threedigit.LongValue
	bd.SetScale2(MaxFractions, bd.ROUND_HALF_UP)
	bi.Initialize6(bd)
	sd.Initialize6(bi)	
	Dim dd As Double = Abs(bd.Subtract(sd).DoubleValue)
	Unused = False
	Dim lakh As String = NumberFormat2(id + dd, MinIntegers, MaxFractions, MinFractions, Unused)
	Dim sb As StringBuilder
	sb.Initialize
	Do Until (nn.CompareTo(hundred) < 0)
		si.Initialize7(nn)
		si.Remainder(hundred)
		nn.Divide(hundred)
		If sb.Length > 0 Then sb.Insert(0, ",")
		If si.CompareTo(ten) < 0 Then sb.Insert(0, $"0${si.LongValue}"$) Else sb.Insert(0, $"${si.LongValue}"$)
	Loop
	If nn.CompareTo(zero) > 0 Then
		If id >= 10 And id < 100 Then lakh = $"0${lakh}"$
		If id < 10 Then lakh = $"00${lakh}"$
	End If
	If sb.Length > 0 Then lakh = $"${sb.ToString},${lakh}"$
	If nn.LongValue > 0 Then lakh = $"${nn.LongValue},${lakh}"$
	If od.DoubleValue < 0 Then lakh = $"-${lakh}"$
	Return lakh
End Sub