Build1=Default,b4a.example
File1=b4a.png
File2=b4i.png
File3=b4j.png
File4=Layout1.bal
FileGroup1=Default Group
FileGroup2=Default Group
FileGroup3=Default Group
FileGroup4=Default Group
Group=Default Group
Library1=core
Library2=xui
Library3=ime
Library4=sd_flexgrid
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: https://www.b4x.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="5" android:targetSdkVersion="26"/>~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~CreateResourceFromFile(Macro, Themes.DarkTheme)~\n~'End of default text.~\n~
Module1=Starter
NumberOfFiles=4
NumberOfLibraries=4
NumberOfModules=1
Version=10.6
@EndOfDesignText@
#Region  Project Attributes 
	#ApplicationLabel: FlexGrid Example
	#VersionCode: 1
	#VersionName: 
	'SupportedOrientations possible values: unspecified, landscape or portrait.
	#SupportedOrientations: unspecified
	#CanInstallToExternalStorage: False
#End Region

#Region  Activity Attributes 
	#FullScreen: False
	#IncludeTitle: True
#End Region

Sub Process_Globals
	'These global variables will be declared once when the application starts.
	'These variables can be accessed from all modules.
	
End Sub

Sub Globals
	'These global variables will be redeclared each time the activity is created.
	'These variables can only be accessed from this module.
	Dim xui As XUI
	Private FlexGrid1 As FlexGrid
	Private Ev As Eval
End Sub

Sub Activity_Create(FirstTime As Boolean)
	'Do not forget to load the layout file created with the visual designer. For example:
	Activity.LoadLayout("Layout1")
	Ev.Initialize(FlexGrid1)
	FlexGrid1.ColsName=Array As String("","N","On","Name","Img","Digit")
	FlexGrid1.ColsWidth=Array As Int(75dip,50dip,50dip,100dip,60dip,100dip)
	FlexGrid1.ColsType=Array As Int(FlexGrid1.TypeButton,FlexGrid1.TypeInt,FlexGrid1.TypeCheck,FlexGrid1.TypeString,FlexGrid1.TypeImage,FlexGrid1.TypeFloat)
	FlexGrid1.ColsAlignment=Array As String("CENTER","CENTER","CENTER","LEFT","LEFT","RIGHT")
	
	FlexGrid1.SetColCustomize(0,0xFF5BC17D,xui.Color_RGB(240,240,240),xui.CreateDefaultFont(14))

	Dim B As Boolean=False
	For i=1 To 100
		B=Not(B)
		FlexGrid1.AddRow(Array As Object("B" &i,i,B,"User " & i,Null,Rnd(50,10000)/100),True)
	Next
	
	Dim Cs As CSBuilder
	Cs.Initialize.Color(xui.Color_Red).Append("User").Pop.Color(xui.Color_Blue).Append(" 200").PopAll
	
	FlexGrid1.SetCellvalue(0,0,100)
	FlexGrid1.SetCellvalue(1,3,Cs)
	FlexGrid1.SetCellvalue(0,4,LoadBitmap(File.DirAssets,"b4a.png"))
	FlexGrid1.SetCellvalue(2,4,LoadBitmap(File.DirAssets,"b4j.png"))
	FlexGrid1.SetCellvalue(4,4,LoadBitmap(File.DirAssets,"b4i.png"))
	
	FlexGrid1.SetCellCustomize(0,3,xui.Color_Black,xui.Color_Cyan,xui.CreateDefaultBoldFont(16))
	For I=0 To 9
		FlexGrid1.SetCellCustomize(i,1,xui.Color_Blue,xui.Color_Yellow,xui.CreateDefaultBoldFont(16))
	Next

	Sleep(2000)
	
	FlexGrid1.SetCellValue(0,3,"Totale: " & Ev.Calculate("1+sum(0,1,9,1)"))
	Log(FlexGrid1.RowCount)
End Sub

Sub Activity_Resume

End Sub

Sub Activity_Pause (UserClosed As Boolean)

End Sub

Sub FlexGrid1_HeadClick(Index As Int)
	Log("Click Head Col: " & Index)
	FlexGrid1.Selectcol(Index)
End Sub

Sub FlexGrid1_CellClick(Row As Int, Col As Int)
	If Col=0 Then
		FlexGrid1.SelectRow(Row)
	Else
		Select FlexGrid1.GetTypeCol(Col)
			Case FlexGrid1.TypeCheck
				Dim B As Boolean = FlexGrid1.GetCellValue(Row,Col)
				Log("Cell content: " & B)
			Case FlexGrid1.TypeImage
				Dim Bm As Bitmap = FlexGrid1.GetCellValue(Row,Col)
				Log("Cell content: " & Bm.IsInitialized)
			Case FlexGrid1.TypeInt
				Dim I As String = FlexGrid1.GetCellValue(Row,Col)
				Log("Cell content: " & I)
				FlexGrid1.EditCellonsite(Row,Col)
			Case FlexGrid1.TypeFloat
				Dim F As String = FlexGrid1.GetCellValue(Row,Col)
				Log("Cell content: " & F)
			Case FlexGrid1.TypeDouble
				Dim D As String = FlexGrid1.GetCellValue(Row,Col)
				Log("Cell content: " & D)
			Case FlexGrid1.TypeString
				Dim S As String = FlexGrid1.GetCellValue(Row,Col)
				Log("Cell content: " & S)
				FlexGrid1.EditCellonsite(Row,Col)
		End Select
	End If
End Sub

Sub FlexGrid1_CellLongClick(Row As Int, Col As Int)
	FlexGrid1.SelectCell(Row,Col,True)
End Sub

Sub FlexGrid1_Modified(Row As Int, Col As Int)
	If Col=1 Then 
		Log(FlexGrid1.GetCellValue(Row,Col))
		FlexGrid1.SetCellValue(0,3,"Totale: " & Ev.Calculate("1+sum(0,1,9,1)"))
	End If
End Sub