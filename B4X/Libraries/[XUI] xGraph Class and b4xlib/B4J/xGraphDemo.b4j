AppType=JavaFX
Build1=Default,b4j.example
File1=Main.bjl
FileGroup1=Default Group
Group=Default Group
Library1=jcore
Library2=jfx
Library3=jxui
Library4=xui views
Module1=xGraph
NumberOfFiles=1
NumberOfLibraries=4
NumberOfModules=1
Version=9.8
@EndOfDesignText@
#Region Project Attributes 
	#MainFormWidth: 800
	#MainFormHeight: 660 
#End Region

Sub Process_Globals
	Private fx As JFX
	Private MainForm As Form
	Private xui As XUI
	
	Private SameScaleIndex = 1 As Int
	Private Samples As Int
	Private xGraph1, xGraph2, CurrentGraph As xGraph
	Private rbtAuto, rbtManu, rbtSameScales(), rbtSameScales0, rbtSameScales1, rbtSameScales2, rbtSameScales3, btnUnZoom As B4XView
	Private ckbDrawCursorValues As CheckBox
	Private btnAddCursor, btnRemoveCursor As B4XView
	Private cbxDisplayCurve, cbxSuperposCurves As B4XComboBox
	Private CurveIndexes() As Int
End Sub

Sub AppStart (Form1 As Form, Args() As String)
	MainForm = Form1
	MainForm.RootPane.LoadLayout("Main")
	MainForm.Show
	
	rbtSameScales = Array As B4XView (rbtSameScales0, rbtSameScales1, rbtSameScales2, rbtSameScales3)
	
	InitGraph(xGraph1)
	InitGraph(xGraph2)
	InitUI

	xGraph1.SetGraphToSynchronize(xGraph2, True, xui.Color_Red, False, True)	'synchronizes xGraph2 with xGraph1
	xGraph2.SetGraphToSynchronize(xGraph1, True, xui.Color_Blue, False, True)	'synchronizes xGraph1 with xGraph2
	xGraph1.SelectGraph(True)
	xGraph1.SetZoomIndexes(50, 195)
	
	CurrentGraph = xGraph1
End Sub

Private Sub InitUI
	cbxSuperposCurves.cmbBox.Items.Add("0, 1")
	cbxSuperposCurves.cmbBox.Items.Add("0, 1, 2")
	cbxSuperposCurves.cmbBox.Items.Add("0, 1, 2, 3")
	cbxSuperposCurves.cmbBox.Items.Add("0, 2")
	cbxSuperposCurves.cmbBox.Items.Add("0, 3")
	cbxSuperposCurves.cmbBox.Items.Add("1, 2, 3")
	cbxSuperposCurves.cmbBox.Items.Add("0, 1, 3")
	cbxSuperposCurves.cmbBox.Items.Add("5, 6, 7")
	cbxSuperposCurves.cmbBox.Items.Add("6, 8")
	cbxSuperposCurves.cmbBox.Items.Add("5, 9, 10, 11")
	cbxSuperposCurves.cmbBox.Items.Add("9, 10, 11, 12")
	cbxSuperposCurves.cmbBox.Items.Add("5, 9, 10, 11, 12")
	cbxSuperposCurves.cmbBox.Items.Add("14, 15, 18")
	cbxSuperposCurves.cmbBox.Items.Add("14, 18, 19")
	
	cbxSuperposCurves.SelectedIndex = 2
	
	rbtSameScales0.TextColor =  xui.Color_Red
	rbtSameScales1.TextColor =  xui.Color_Blue
	rbtSameScales2.TextColor =  xui.Color_Magenta
	rbtSameScales3.TextColor =  xui.Color_RGB(0, 153, 0)

	For i = 0 To xGraph1.NbMaxCurves - 1
		cbxDisplayCurve.cmbBox.Items.Add(i & " : " & xGraph1.CurveYName(i))
	Next
	cbxDisplayCurve.SelectedIndex = 0
End Sub

Private Sub InitGraph(Graph As xGraph)
	Private i, nc As Int
	
	Graph.CurveYName(0) = "Temperature"
	Graph.CurveYUnit(0) = "°C"
	Graph.CurveYName(1) = "Pressure"
	Graph.CurveYUnit(1) = "bar"
	Graph.CurveYName(2) = "Acceleration"
	Graph.CurveYUnit(2) = "m/s2"
	Graph.CurveYName(3) = "Speed"
	Graph.CurveYUnit(3) = "m/s"
	Graph.CurveYName(5) = "Acceleretion"
	Graph.CurveYUnit(5) = "m/s2"
	Graph.CurveYName(9) = "Acceleretion noisy"
	Graph.CurveYUnit(9) = "m/s2"
	
	Graph.CurveCustomColor(10) = xui.Color_Red
	Graph.CurveCustomWidth(10) = 1dip
	Graph.CurveCustomColor(11) = xui.Color_Blue
	Graph.CurveCustomWidth(11) = 1dip
	Graph.CurveCustomColor(12) = xui.Color_Black
	Graph.CurveCustomWidth(12) = 1dip
	Graph.CurveCustomColor(13) = xui.Color_DarkGray
	Graph.CurveCustomWidth(13) = 1dip
	Graph.CurveCustomColor(14) = xui.Color_Red
	Graph.CurveCustomWidth(14) = 1dip
	Graph.CurveCustomColor(15) = xui.Color_Blue
	Graph.CurveCustomWidth(15) = 1dip
	Graph.CurveCustomColor(16) = xui.Color_Green
	Graph.CurveCustomWidth(16) = 1dip
	Graph.CurveCustomColor(17) = xui.Color_Magenta
	Graph.CurveCustomWidth(17) = 1dip
	Graph.CurveCustomColor(18) = xui.Color_DarkGray
	Graph.CurveCustomWidth(18) = 1dip
	Graph.CurveCustomColor(19) = xui.Color_RGB(165, 42, 42)
	Graph.CurveCustomWidth(19) = 1dip
	

	
'	Graph.DisplayCurveIndex = False
'	Graph.CurvesToDisplay.Initialize2(Array As Int(0, 1, 2, 3))

'	Private x0 = -320 As Int
	Private x0 = 0 As Int
	Samples = 360
	Graph.NbSamples = Samples + 1
	For i = 0 To Samples
		Graph.CurveX(i) = (i + x0) * 0.001
		Graph.CurveY(0, i) = 90 * SinD(i * 9)
		Graph.CurveY(1, i) = 48 * CosD(i * 12) + 50
		Graph.CurveY(2, i) = 45 * -SinD(i * 6) - 50
		Graph.CurveY(3, i) = 45 * -CosD(i * 15)
		If i Mod 100 < 50 Then
			Graph.CurveY(5, i) = 30
		Else
			Graph.CurveY(5, i) = -30
		End If
	Next
		
	Graph.CalcSum2Curves(0, 1, 4, False)
	Graph.CurveYUnit(4) = ""
'	Graph.SetCurveUnit(4, "", False)
	
	Graph.CalcIntegral(5, 6, 0, False)
	Graph.CalcIntegral(6, 7, 0, False)
'	Graph.SetCurveName(6, "Velocity", False)
'	Graph.SetCurveUnit(6, "m/s", False)
	Graph.CurveYName(6) = "Velocity"
	Graph.CurveYUnit(6) = "m/s"
	Graph.CalcDerivative(7, 8, False)
	
	Graph.CopyCurve(5, 9)
	For i = 0 To Samples
		Graph.CurveY(9, i) = Graph.CurveY(9, i) + Rnd(-8, 8)
	Next

	'used to test graphs with missing data
	'a value of 100000000 represents a missing data
	Private mdv As Int
	mdv = Graph.MissingDataValue
	Graph.GraphWithMissingData = True
	nc = 9
	For i = 0 To 5
		Graph.CurveY(nc, i) = mdv
	Next
	For i = 30 To 39
		Graph.CurveY(nc, i) = mdv
	Next
	For i = 292 To 300
		Graph.CurveY(nc, i) = mdv
	Next
	
	Graph.CalcSmooth(9, 10, 3, False, "MEAN")
	Graph.CalcSmooth(9, 11, 7, False, "MEAN")
	Graph.CalcSmoothExponentialLag(9, 12, 0.3, False)
	Graph.CalcSmoothExponentialLead(9, 13, 0.3, False)
	
	Graph.CurveYName(14) = "Acceleretion"
	Graph.CurveYUnit(14) = "m/s2"
	Graph.CurveYName(15) = "Acceleretion noisy"
	Graph.CurveYUnit(15) = "m/s2"
	For i = 0 To Samples
		Graph.CurveY(14, i) = 50 + 40 * SinD(i * 9)
		Graph.CurveY(15, i) = Graph.CurveY(14, i) + Rnd(-8, 8)
	Next
	Graph.CalcSmooth(15, 16, 3, False, "RMS")
	Graph.CalcSmooth(15, 17, 5, False, "RMS")
	Graph.CalcSmooth(15, 18, 7, False, "RMS")
	Graph.CalcSmooth(15, 19, 7, False, "MEAN")
	Graph.SetScaleManu(14, 0, 100)
	Graph.SetScaleManu(15, 0, 100)
	Graph.SetScaleManu(16, 0, 100)
	Graph.SetScaleManu(17, 0, 100)
	Graph.SetScaleManu(18, 0, 100)
	Graph.SetScaleManu(19, 0, 100)
	
'	Graph.Title = "Test"
'	Graph.SetZoomIndexes(5, 295)
'	Graph.ScaleYValues = "1!3!10"
'	Graph.DisplayCurveUnit = False
'	Graph.DisplayCurveIndex = False
	
	Graph.SetCursor(30, 0, xui.Color_Gray)
	Graph.DrawGraph
'	Graph.SetCursor(30, 0, xui.Color_Gray)
	Graph.SetCursor(130, 1, xui.Color_RGB(165, 70, 70))
	Graph.DrawCursorValues = True 
End Sub

Private Sub rbtScale_SelectedChange(Selected As Boolean)
	Private rbt As RadioButton
	
	If Selected = True Then
		rbt = Sender
		Select rbt.Tag
			Case "Auto"
				CurrentGraph.AutomaticYScales = True
				rbtAuto.TextColor = xui.Color_RGB(50, 205, 50)
				rbtManu.TextColor = xui.Color_Red
			Case "Manu"
				CurrentGraph.AutomaticYScales = False
				rbtAuto.TextColor = xui.Color_Red
				rbtManu.TextColor = xui.Color_RGB(50, 205, 50)
		End Select
	End If
	SameScaleIndex = -1
End Sub

Private Sub rbtSameScales_SelectedChange(Selected As Boolean)
	Private rbt As RadioButton
	
	If Selected = True Then
		rbt = Sender
		SameScaleIndex = rbt.Tag
		CurrentGraph.SetSameScale(xGraph1.CurvesToDisplay.Get(SameScaleIndex))
	End If
End Sub

Private Sub cbxDisplayCurve_SelectedIndexChanged(Index As Int)
	Dim CurveIndexes(1) As Int
	
	CurveIndexes(0) = Index
	CurrentGraph.DrawCurve(Index)
	UpdateRadioButtons
End Sub

Private Sub cbxSuperposCurves_SelectedIndexChanged(Index As Int)
	Private i As Int
	Private Value, txt() As String
	
	Value = cbxSuperposCurves.GetItem(Index)
	txt = Regex.Split(", ", Value)
	Public CurveIndexes(txt.Length) As Int
	For i = 0 To txt.Length - 1
		CurveIndexes(i) = txt(i)
	Next
	
	CurrentGraph.DrawCurves(CurveIndexes)
	
	UpdateRadioButtons
End Sub

Private Sub UpdateRadioButtons
	Private i As Int
	
	For i = 0 To CurveIndexes.Length - 1
		rbtSameScales(i).Visible = True
	Next
	For i = CurveIndexes.Length To 3
		rbtSameScales(i).Visible = False
	Next
End Sub

Private Sub btnZoom_Click
	CurrentGraph.SetZoomMode
	btnUnZoom.Visible = True
End Sub

Private Sub btnUnZoom_Click
	CurrentGraph.UnZoom
	btnUnZoom.Visible = False
End Sub

Private Sub btnCurveUp_Click
	If cbxDisplayCurve.SelectedIndex > 0 Then
		cbxDisplayCurve.SelectedIndex = cbxDisplayCurve.SelectedIndex - 1
		cbxDisplayCurve_SelectedIndexChanged(cbxDisplayCurve.SelectedIndex)
	End If
End Sub

Private Sub btnCurveDown_Click
	If cbxDisplayCurve.SelectedIndex < cbxDisplayCurve.cmbBox.Items.Size - 1 Then
		cbxDisplayCurve.SelectedIndex = cbxDisplayCurve.SelectedIndex + 1
		cbxDisplayCurve_SelectedIndexChanged(cbxDisplayCurve.SelectedIndex)
	End If
End Sub

Private Sub btnSuperposUp_Click
	If cbxSuperposCurves.SelectedIndex > 0 Then
		cbxSuperposCurves.SelectedIndex = cbxSuperposCurves.SelectedIndex - 1
		cbxSuperposCurves_SelectedIndexChanged(cbxSuperposCurves.SelectedIndex)
	End If
End Sub

Private Sub btnSuperposDown_Click
	If cbxSuperposCurves.SelectedIndex < cbxSuperposCurves.cmbBox.Items.Size - 1 Then
		cbxSuperposCurves.SelectedIndex = cbxSuperposCurves.SelectedIndex + 1
		cbxSuperposCurves_SelectedIndexChanged(cbxSuperposCurves.SelectedIndex)
	End If
End Sub

'Add a cursor by touching the graph
Private Sub btnAddCursor_Click
	If CurrentGraph.NumberOfCursors = 0 Then
		CurrentGraph.AddCursor(xui.Color_Gray)
	Else
		CurrentGraph.AddCursor(xui.Color_RGB(165, 70, 70))
	End If
	If CurrentGraph.NumberOfCursors = 2 Then
		btnAddCursor.Visible = False
	End If
	btnRemoveCursor.Visible = True
End Sub

'Removes the last selected cu
Private Sub btnRemoveCursor_Click
	CurrentGraph.RemoveCursor(1)
	If CurrentGraph.NumberOfCursors = 0 Then
		btnRemoveCursor.Visible = False
	Else
		btnRemoveCursor.Visible = True
	End If
	btnAddCursor.Visible = True
End Sub

Private Sub ckbDrawCursorValues_CheckedChange(Checked As Boolean)
	CurrentGraph.DrawCursorValues = Checked
End Sub

Private Sub xGraph1_Touch (PT As TouchParameters)
	Select PT.Action
		Case 0	'Down
'			Log("Down")
			CurrentGraph = xGraph1
		Case 1	'Up
'			Log("Up")
		Case 2	'Move
'			Log(PT.XIndex)
'			Log("Move x = " & PT.X & " y = " & PT.Y)
			'you can also claulate the XIndex
'			Private Index As Int
'			Index = xGraph1.XIndexBegin + PT.X / xGraph1.GraphWidth * (xGraph1.XIndexEnd - xGraph1.XIndexBegin) + 0.5
'			Log(Index)
	End Select
End Sub

Private Sub xGraph2_Touch (PT As TouchParameters)
	Select PT.Action
		Case 0	'Down
'			Log("Down")
			CurrentGraph = xGraph2
		Case 1	'Up
		Case 2	'Move
'			Log(PT.XIndex)
'			Log("Move x = " & PT.X & " y = " & PT.Y)
			'you can also claulate the XIndex
'			Private Index As Int
'			Index = xGraph1.XIndexBegin + PT.X / xGraph1.GraphWidth * (xGraph1.XIndexEnd - xGraph1.XIndexBegin) + 0.5
'			Log(Index)
	End Select
End Sub

Private Sub Snapshot
	Private bmp As B4XBitmap
	Private Out As OutputStream
	xui.SetDataFolder("GraphDemo")
	Out = File.OpenOutput(xui.DefaultFolder, "Graph.jpg", False)
'	Log(xui.DefaultFolder)
	bmp = CurrentGraph.Snapshot
	bmp.WriteToStream(Out, 100, "JPEG")
	Out.Close
End Sub

