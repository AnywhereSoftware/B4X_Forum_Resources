Version=5.75
AppType=JavaFX
NumberOfModules=1
Module1=B4RSerializator
Build1=Default,b4j.example
NumberOfFiles=1
File1=1.bjl
NumberOfLibraries=5
Library1=jcore
Library2=jfx
Library3=jnetwork
Library4=jrandomaccessfile
Library5=jcontrolsfx
@EndOfDesignText@
#Region Project Attributes 
	#MainFormWidth: 600
	#MainFormHeight: 600 
#End Region

Sub Process_Globals
	Private fx As JFX
	Private MainForm As Form
	Private btnSet As Button
	Private btnGet As Button
	Private txtIP As TextField
	Private sheet As PropertySheet
	Private paneProps As Pane
	Type Record (BoardName As String, SSID As String, Password As String, MQTTBroker As String, MQTTPort As Int, _
		MQTTUsername As String, MQTTPassword As String)
	Private ser As B4RSerializator
	Private astream As AsyncStreams
	Private imgLoading As ImageView
	Private rec As Record
	Private meta As Map
	Private btnDisconnect As Button
	Private cutils As ControlsUtils
End Sub

Sub AppStart (Form1 As Form, Args() As String)
	MainForm = Form1
	MainForm.RootPane.LoadLayout("1") 'Load the layout file.
	sheet.Initialize("sheet")
	paneProps.AddNode(sheet, 0, 0, 400, 400)
	ser.Initialize
	MainForm.Show
	rec.Initialize
	CreateMeta
	sheet.Set(rec, meta)
	sheet.ModeSwitcherVisible = False
	SetBusy(False)
End Sub

Sub btnGet_Action
	Connect (True)
End Sub

Sub btnSet_Action
	Connect (False)
End Sub

Sub SetBusy(busy As Boolean)
	imgLoading.Visible = busy
	btnGet.Enabled = Not(busy)
	btnSet.Enabled = Not(busy)
	btnDisconnect.Enabled = busy
End Sub

Sub btnDisconnect_Action
	Disconnect
	SetBusy(False)
End Sub

Sub Connect (Get As Boolean)
	SetBusy(True)
	Try
		Disconnect
		Dim sock As Socket
		sock.Initialize("sock")
		sock.Connect(txtIP.Text, 51042, 10000)
		Wait For sock_Connected (Successful As Boolean)
		If Successful Then
			astream.InitializePrefix(sock.InputStream, False, sock.OutputStream, "astream")
			If Get Then
				Wait For astream_NewData (Buffer() As Byte)
				If Buffer(0) = 0 Then
					rec.BoardName = "Not available"
				Else
					Wait For astream_NewData (Buffer() As Byte)
					rec = ObjectsToRecord(ser.ConvertBytesToArray(Buffer))
				End If
				sheet.Set(rec, meta)
			Else
				astream.Write(ser.ConvertArrayToBytes(RecordToObjects(rec)))
				Sleep(2000)
			End If
		Else
			cutils.ShowNotification2("Failed to connect", "", cutils.ICON_ERROR, MainForm)
		End If
		Disconnect
	Catch
		Log(LastException)
	End Try
	SetBusy(False)
End Sub

Sub RecordToObjects (Record As Record) As Object()
	Return Array(Record.BoardName, Record.SSID, Record.Password, Record.MQTTBroker, _
		Record.MQTTPort, Record.MQTTUsername, Record.MQTTPassword)
End Sub

Sub CreateMeta
	meta.Initialize
	Dim itemIndex As Int
	For Each s As String In Array("BoardName", "SSID", "Password", "MQTTBroker", "MQTTPort", _
		"MQTTUsername", "MQTTPassword")
		meta.Put(s, sheet.CreateMeta($"${s} (${itemIndex})"$, "", ""))
		itemIndex = itemIndex + 1
	Next
End Sub

Sub ObjectsToRecord(Objects() As Object) As Record
	Dim r As Record
	r.Initialize
	r.BoardName = Objects(0)
	r.SSID = Objects(1)
	r.Password = Objects(2)
	r.MQTTBroker = Objects(3)
	r.MQTTPort = Objects(4)
	r.MQTTUsername = Objects(5)
	r.MQTTPassword = Objects(6)
	Return r
End Sub

Sub AStream_Error
	Log("Error")
End Sub

Sub AStream_Terminated
	Log("Terminated")
End Sub

Sub Disconnect
	Log("Disconnect")
	If astream.IsInitialized Then astream.Close
End Sub

'Return true to allow the default exceptions handler to handle the uncaught exception.
Sub Application_Error (Error As Exception, StackTrace As String) As Boolean
	Return True
End Sub



