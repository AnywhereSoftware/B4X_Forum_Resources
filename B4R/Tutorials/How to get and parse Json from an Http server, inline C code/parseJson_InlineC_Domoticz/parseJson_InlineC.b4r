Build1=Default,B4RDev
Group=Default Group
Library1=rcore
Library2=rrandomaccessfile
Library3=resp8266wifi
Module1=HttpJob
NumberOfFiles=0
NumberOfLibraries=3
NumberOfModules=1
Version=2.8
@EndOfDesignText@

#Region Project Attributes
	#AutoFlushLogs: True
	#CheckArrayBounds: True
	#StackBufferSize: 600
#End Region

#Region explanations
'	/********************************************************************************
'	This example show how to get data from an http server, Domoticz in this example,
'	who Return a Json and how to parse the data with ArduinoJson lib.
'	To do that, the steps are:
'	- Put your own SSID and password ;
'	- Put your own Domoticz IP and port ;
'	- Put the device Id for which device you want the values, be careful that the
'	  code need to be adapted if ever you try another device than a Temp/Humid sensor ;
'	- (Optional) Declare all the more values you want in Process_Globals ;
'	- (Optional) Don't forget to use the ArduinoJson assistant in the good version,
'	  depends the version of your ArduinoJson lib is, mine is v6.
'	  That's need to assign the good size to 'capacity' in InlineC, to parse all data
'	  in the Json, see in Inline C line 105.
'	- (Optional) Get all values you need in the part of inline C, for this example i
'	  implemented and took only 3 values. But you can take all what you need, all
'	  values are present in the Json. You can see it in the log ;
'	- (Optional) Increase/decrease the value of 'responseCache' in HttpJob module.
'	  Try it, i put 8000 bytes maybe it's too much. But with the original value 500,
'	   i loose many values.
'	That's all
'
'	The code is a 1st try, i'm quite sure it can be improved and maybe use less memory
'	**********************************************************************************/
#End Region

Sub Process_Globals
	Public Serial1 As Serial
	Private wifi As ESP8266WiFi
	Public mySSID As String = "XXXXXXXX"						'Your own Wifi SSID
	Public myPWD As String = "xxxxxyyyyyyzzzz"					'Your own Wifi key here
	' Values from Domoticz we use
	Dim	ExtHumidStatus As Int			'ignore
	Dim ExtHumid As Int					'ignore
	Dim ExtTemp As Double				'ignore
	' Domoticz settings
	' Change the IP & port To your own at home
	Public const hostDomo As String = "http://127.0.0.1"		'Domotics IP
	Public const portDomo As Int = 80							'Domoticz Port
	' Change the ID To your own device in Domoticz, can be found in "devices"
	Public const domoExtSensor As Int = 0		'Id of the real sensor in Domoticz To get external Temperature And Humidity
End Sub

Private Sub AppStart
	Serial1.Initialize(115200)
	Log("AppStart")
	If Not(wifi.Connect2(mySSID,myPWD)) Then
		Log("Failed to connect to Lan.")
		Return
	Else
		Log("Connected to wireless network.")
	End If
	HttpJob.Initialize("getDomodata")
	Private completeUrl As String = JoinStrings(Array As String(hostDomo,":",portDomo,"/json.htm?type=devices&rid=",domoExtSensor))
	Log("Url is: ", completeUrl)
	HttpJob.Download(completeUrl)
End Sub


Sub JobDone (Job As JobResult)
	Log("***************************************************************")
	Log("JobName: ", Job.JobName)
	If Job.Success Then
		If Job.JobName = "getDomodata" Then
			Dim bc As ByteConverter
			'Needed to parse the Json now
			Dim b() As Byte = Job.Response                                                      'convert the string to a byte array
			RunNative("parseJson", b)
			For Each s() As Byte In bc.Split(Job.Response, ",")
				Log(s)
			Next
		End If
		Log("Temperature extérieure: ", ExtTemp)
		Log("Humidité extérieure: ", ExtHumid)
		If ExtHumidStatus = 0 Then
			Log("Condition extérieure: Normale")
		Else If ExtHumidStatus = 1 Then
			Log("Condition extérieure: Confortable")
		Else If ExtHumidStatus = 2 Then
			Log("Condition extérieure: Sec")
		Else If ExtHumidStatus = 3 Then
			Log("Condition extérieure: Humide")
		End If
	Else
		Log("ErrorMessage: ", Job.ErrorMessage)
		Log("Status: ", Job.Status)
		Log(Job.Response)
	End If
	Log("***************************************************************")
End Sub

#If C
#include <ArduinoJson.h>

//ArduinoJson Lib part of code
void parseJson(B4R::Object* JsonString) {
    // Parsing, put the good size for the Json, see https://arduinojson.org/v6/assistant/
    const size_t capacity =
      2 * JSON_ARRAY_SIZE(1)
      + JSON_OBJECT_SIZE(16)
      + JSON_OBJECT_SIZE(37) + 910;
    DynamicJsonDocument doc(capacity);

    // Parse JSON
	B4R::Array* conversion = (B4R::Array*)B4R::Object::toPointer(JsonString);
	char* Payload = (char*)conversion->data;                                
    deserializeJson(doc, Payload);

    JsonObject result = doc["result"][0];
	
	int humid = result["Humidity"];
	float temp = result["Temp"];
	String condition = result["HumidityStatus"].as<String>();
	Serial.print("Humidity: ");
	Serial.println(humid);
	Serial.print("Température: ");
	Serial.println(temp);
	Serial.print("Condition: ");
	Serial.println(condition);
    b4r_main::_exthumid = humid;            // Humidity in int
    b4r_main::_exttemp = temp;              // Temperature in float
	// As i didn't found the good way to assign a C String to the B4R String,
	// compiler always complain :(
	// I transform the value of condition returned in string by Domoticz
	// to an integer, and no more error :p.
	int conditionTransform;
	if (condition == "Wet") {
		conditionTransform = 3;
	}
	else if(condition == "Dry") {
		conditionTransform = 2;
	}
	else if(condition == "Comfortable") {
		conditionTransform = 1;
	}
	else {
		conditionTransform = 0;
	}
	b4r_main::_exthumidstatus = conditionTransform;
}
#End If
