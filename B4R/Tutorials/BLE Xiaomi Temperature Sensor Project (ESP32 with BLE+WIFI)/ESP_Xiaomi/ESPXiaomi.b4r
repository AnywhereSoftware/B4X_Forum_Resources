Build1=Default,B4RDev
Group=Default Group
Library1=rcore
Library2=resp8266wifi
Library3=rhttputils2
NumberOfFiles=0
NumberOfLibraries=3
NumberOfModules=0
Version=3.71
@EndOfDesignText@

#Region Project Attributes
	#AutoFlushLogs: True
	#CheckArrayBounds: True
	#StackBufferSize: 300
#End Region
'Ctrl+Click to open the C code folder: ide://run?File=%WINDIR%\System32\explorer.exe&Args=%PROJECT%\Objects\Src

Sub Process_Globals
	Public Serial1 As Serial
	Private wifi As ESP8266WiFi
	Public Timer1 As Timer
	
	Private Temperature As Float = 99 'ignore
	Private Status As Int = -1
	Private counter As Int = 0
End Sub

Private Sub AppStart
	Serial1.Initialize(115200)
	Log("AppStart")
	
	'example of connecting to a local network
	If wifi.Connect2("WIFISID", "WIFIPASS") Then
		Log("Connected to network")
	Else
		Log("Failed to connect to network")
	End If
	
	RunNative("initBluetooth", Null)

	
	Timer1.Initialize("Timer1_Tick", 15000)
	Timer1.Enabled = True
End Sub

Sub Timer1_Tick
	counter = counter + 1
	
	If counter <= 4 Then
		'Log("Timer Scan")
		RunNative("Scan",Null)
	Else
		'Log("Timer Send Temperature")		
		counter = 0
		RunNative("setTemperature",Null)
		
		Log(Temperature)
		
		HttpJob.Initialize("X")
		HttpJob.ResponseTimeout = 1000
		
		If Temperature > 20 Then
			If Status = 0 Then Return
			Status = 0			
			HttpJob.Download("http://maker.ifttt.com/trigger/office_heater_off/with/key/APIKEY")
		End If
		
		If Temperature < 16 Then
			If Status = 1 Then Return
			Status = 1
			HttpJob.Download("http://maker.ifttt.com/trigger/office_heater_on/with/key/APIKEY")
		End If
	End If
End Sub

Sub JobDone (Job As JobResult)
	'Log("Job Done")	
End Sub

#if C
#include <sstream>

#include "NimBLEDevice.h"

NimBLEScan *pBLEScan;

float current_humidity = -100;
float current_temperature = -100;

class MyAdvertisedDeviceCallbacks : public NimBLEAdvertisedDeviceCallbacks {
    void onResult(NimBLEAdvertisedDevice *advertisedDevice)
    {
		//if (advertisedDevice->haveName())
      	//{
        //	Serial.print("Device name: ");
        //	Serial.println(advertisedDevice->getName().c_str());
        //	Serial.println("");
      	//}
		
        if (advertisedDevice->haveName() && advertisedDevice->haveServiceData() && !advertisedDevice->getName().compare("MJ_HT_V1"))
		{
            int serviceDataCount = advertisedDevice->getServiceDataCount();
            std::string strServiceData = advertisedDevice->getServiceData(0);

            uint8_t cServiceData[50];
            char charServiceData[50];

            strServiceData.copy((char *)cServiceData, strServiceData.length(), 0);

            //Serial.printf("\n\nAdvertised Device: %s\n", advertisedDevice.toString().c_str());

            for (int i=0;i<strServiceData.length();i++)
			{
                sprintf(&charServiceData[i*2], "%02x", cServiceData[i]);
            }

            std::stringstream ss;
            ss << "fe95" << charServiceData;
            
            //Serial.print("Payload:");
            //Serial.println(ss.str().c_str());

            unsigned long value, value2;			
            char charValue[5] = {0,};
			
            switch (cServiceData[11]) {
                case 0x04: // TEMPERATURE_EVENT
                    sprintf(charValue, "%02X%02X", cServiceData[15], cServiceData[14]);
                    value = strtol(charValue, 0, 16);
                    current_temperature = (float)value/10;                     
					//Serial.printf("TEMPERATURE_EVENT: %s, %d\n", charValue, value);
					break;
                case 0x06: // HUMIDITY_EVENT
                    sprintf(charValue, "%02X%02X", cServiceData[15], cServiceData[14]);
                    value = strtol(charValue, 0, 16);  
                    current_humidity = (float)value/10;
                    //Serial.printf("HUMIDITY_EVENT: %s, %d\n", charValue, value);
                    break;
                case 0x0A: // BATTERY_EVENT
                    sprintf(charValue, "%02X", cServiceData[14]);
                    value = strtol(charValue, 0, 16);                    
                    //Serial.printf("BATTERY_EVENT: %s, %d\n", charValue, value);
                    break;
                case 0x0D: // BOTH
                    sprintf(charValue, "%02X%02X", cServiceData[15], cServiceData[14]);
                    value = strtol(charValue, 0, 16);      
                    current_temperature = (float)value/10;                    
        
                    sprintf(charValue, "%02X%02X", cServiceData[17], cServiceData[16]);
                    value2 = strtol(charValue, 0, 16);
                    current_humidity = (float)value2/10;
                    break;
            }
        }
    }
};

void setTemperature(B4R::Object* o)
{
	b4r_main::_temperature = current_temperature;	
}

void initBluetooth(B4R::Object* o)
{
	pinMode(LED_BUILTIN, OUTPUT);
	
    NimBLEDevice::init("");
    pBLEScan = BLEDevice::getScan(); //create new scan
    pBLEScan->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks(),false);
    pBLEScan->setActiveScan(true); //active scan uses more power, but get results faster
    pBLEScan->setInterval(0x50);
    pBLEScan->setWindow(0x30);
}

void Scan(B4R::Object* o)
{
	digitalWrite(LED_BUILTIN, HIGH);
	NimBLEScan* pBLEScan = NimBLEDevice::getScan(); //create new scan
    pBLEScan->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks(),false);
    pBLEScan->setActiveScan(true); //active scan uses more power, but get results faster
    BLEScanResults foundDevices = pBLEScan->start(10);
    //int count = foundDevices.getCount();
	digitalWrite(LED_BUILTIN, LOW);
}
#End If