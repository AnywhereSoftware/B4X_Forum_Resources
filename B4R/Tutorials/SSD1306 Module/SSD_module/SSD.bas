B4R=true
Group=Default Group
ModulesStructureVersion=1
Type=StaticCode
Version=3.5
@EndOfDesignText@


'**************************   C O D D E D  F O R  E S P  ****************************************************
'Based on:
'OLED_I2C lib, Copyright (C)2015-2019 Rinky-Dink Electronics, Henning Karlsen.
'Adafruit SSD1306 lib, Written by Limor Fried/Ladyada for Adafruit Industries.
'Thanks to all members at B4X community for theire great support, especially:
'"Daestrum", pass B4R user defined var to inline C sub
'"tigrot", pass B4R array to inline C sub
'"Erel", providing rAdafruit_ssd1306 lib, and making this possible with B4R

'************************* F O N T S  C R E A T E D  BY  TFT F O N T  F A C T O R Y  B Y TSX ****************
'to add/delete fonts, just search TODO (ctrl+f then type TODO) and follow steps.

Sub Process_Globals
	'These global variables will be declared once when the application starts.
	'Public variables can be accessed from all modules.

	Private const SSD1306_SETCONTRAST As Byte = 0x81
	'Private const SSD1306_DISPLAYALLON_RESUME  As Byte = 0xA4
	'Private const SSD1306_DISPLAYALLON  As Byte = 0xA5
	Private const SSD1306_NORMALDISPLAY  As Byte = 0xA6
	Private const SSD1306_INVERTDISPLAY  As Byte = 0xA7
	Private const SSD1306_DISPLAYOFF  As Byte = 0xAE
	Private const SSD1306_DISPLAYON  As Byte = 0xAF
	Private const SSD1306_SETDISPLAYOFFSET  As Byte = 0xD3
	Private const SSD1306_SETCOMPINS  As Byte = 0xDA
	'Private const SSD1306_SETVCOMDETECT  As Byte = 0xDB
	Private const SSD1306_SETDISPLAYCLOCKDIV  As Byte = 0xD5
	'Private const SSD1306_SETPRECHARGE  As Byte = 0xD9
	Private const SSD1306_SETMULTIPLEX  As Byte = 0xA8
	'Private const SSD1306_SETLOWCOLUMN  As Byte = 0x00
	'Private const SSD1306_SETHIGHCOLUMN  As Byte = 0x10
	Private const SSD1306_SETSTARTLINE  As Byte = 0x40
	Private const SSD1306_MEMORYMODE  As Byte = 0x20
	Private const SSD1306_COLUMNADDR  As Byte = 0x21
	Private const SSD1306_PAGEADDR    As Byte = 0x22
	'Private const SSD1306_COMSCANINC  As Byte = 0xC0
	Private const SSD1306_COMSCANDEC  As Byte = 0xC8
	'Private const SSD1306_SEGREMAP  As Byte = 0xA0
	Private const SSD1306_CHARGEPUMP  As Byte = 0x8D
	'Private const SSD1306_EXTERNALVCC  As Byte = 0x1
	'Private const SSD1306_SWITCHCAPVCC  As Byte = 0x2
	
	Public const SSD1306_LCDHEIGHT As Byte = 64
	Public const SSD1306_LCDWIDTH As Byte = 128
	
	' Scrolling #defines
	Private const SSD1306_ACTIVATE_SCROLL  As Byte = 0x2F
	Private const SSD1306_DEACTIVATE_SCROLL  As Byte = 0x2E
	Private const SSD1306_SET_VERTICAL_SCROLL_AREA  As Byte = 0xA3
	Public const SSD1306_RIGHT_HORIZONTAL_SCROLL  As Byte = 0x26
	Public const SSD1306_LEFT_HORIZONTAL_SCROLL  As Byte = 0x27
	Public const SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL As Byte =  0x29
	Public const SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL  As Byte = 0x2A

	Public const REFLECT_BYTE_NONE As Byte = 0
	Public const REFLECT_BYTE As Byte = 1
	
	Private const BYTES_ORDER_LSB As Byte = 0
	Private const BYTES_ORDER_MSB As Byte = 1
	
	Private const FONT_STORAGE_MEM As Byte = 0
	Private const FONT_STORAGE_EXT_ROM As Byte = 1
	Private const FONT_STORAGE_SSD As Byte = 2
	
	Private FontROMaddress As Byte = 0x50
	Private OLEDaddress As Byte
	
	'TODO(1)declare font:
	Type UserFont(FontID As Byte,ASCIIindex As Int,FontCols As Byte,BytesPerCol As Byte,BytesOrder As Byte, _
	ByteReflection As Byte,ASCIIstartChar As Byte,ROMstartPage As UInt,FontFileName As String,FontStorage As Byte)
	
	Public Font5x8 As UserFont
	Public Font8x8 As UserFont
	Public Font8x16 As UserFont
	Public Font12x22 As UserFont
	Public Font16x16 As UserFont
	Public Font16x24 As UserFont
	Type mBuffer (Index As UInt, Val As Byte) 'buffer type
	Type mBitmap (X As Byte, Y As Byte, SizeX As Byte, SizeY As Byte, Bitmap() As Byte,Inverse As Boolean) 'bitmap type
End Sub

Public Sub Begin (Address As Byte )
	OLEDaddress = Address
	RunNative("startoled",Null)
	Delay(100)
	SetFontProperties
	Clear
End Sub

public Sub Update()
	RunNative ("sendbuffer",Null)
End Sub

public Sub SetPixel(X As Byte, Y As Byte)
	RunNative ("B4RsetPixel",Array As Byte (X,Y))
End Sub

public Sub ClearPixel(X As Byte, Y As Byte)
	RunNative ("B4RclrPixel",Array As Byte (X,Y))
End Sub

Public Sub DrawHline (X As Byte, Y As Byte ,Length As Byte)
	RunNative ("B4RdrawHLine",Array As Byte (X,Y,Length))
End Sub

public Sub ClearHline(X As Byte, Y As Byte ,Length As Byte)
	RunNative ("B4RclrHLine",Array As Byte (X,Y,Length))
End Sub

Public Sub DrawVline (X As Byte, Y As Byte ,Length As Byte)
	RunNative ("B4RdrawVLine",Array As Byte (X,Y,Length))
End Sub

public Sub ClearVline(X As Byte, Y As Byte ,Length As Byte)
	RunNative ("B4RclrVLine",Array As Byte (X,Y,Length))
End Sub

public Sub DrawLine(X1 As Byte, Y1 As Byte, X2 As Byte, Y2 As Byte)
	RunNative ("B4RdrawLine",Array As Byte (X1,Y1,X2,Y2))
End Sub

public Sub ClearLine(X1 As Byte, Y1 As Byte, X2 As Byte, Y2 As Byte)
	RunNative ("B4RclrLine",Array As Byte (X1,Y1,X2,Y2))
End Sub

public Sub DrawTriangle(X1 As Byte, Y1 As Byte, X2 As Byte, Y2 As Byte, X3 As Byte, Y3 As Byte)
	RunNative ("B4RdrawLine",Array As Byte (X1,Y1,X2,Y2)) 'from point A to point B
	RunNative ("B4RdrawLine",Array As Byte (X2,Y2,X3,Y3)) 'from Point B to point C
	RunNative ("B4RdrawLine",Array As Byte (X3,Y3,X1,Y1)) 'from point C to point A
End Sub

public Sub ClearTriangle(X1 As Byte, Y1 As Byte, X2 As Byte, Y2 As Byte, X3 As Byte, Y3 As Byte)
	RunNative ("B4RclrLine",Array As Byte (X1,Y1,X2,Y2))
	RunNative ("B4RclrLine",Array As Byte (X2,Y2,X3,Y3))
	RunNative ("B4RclrLine",Array As Byte (X3,Y3,X1,Y1))
End Sub


Public Sub DrawRect(X1 As Byte, Y1 As Byte, X2 As Byte, Y2 As Byte)
	RunNative ("B4RdrawRect",Array As Byte (X1,Y1,X2,Y2))
End Sub

Public Sub ClearRect(X1 As Byte, Y1 As Byte, X2 As Byte, Y2 As Byte)
	RunNative ("B4RclrRect",Array As Byte (X1,Y1,X2,Y2))
End Sub

Public Sub DrawRoundRect(X1 As Byte, Y1 As Byte, X2 As Byte, Y2 As Byte)
	RunNative ("B4RdrawRoundRect",Array As Byte (X1,Y1,X2,Y2))
End Sub

Public Sub ClearRoundRect(X1 As Byte, Y1 As Byte, X2 As Byte, Y2 As Byte)
	RunNative ("B4RclrRoundRect",Array As Byte (X1,Y1,X2,Y2))
End Sub

public Sub DrawCircle(X As Byte, Y As Byte, Radius As Byte)
	RunNative ("B4RdrawCircle",Array As Byte (X,Y,Radius))
End Sub

public Sub ClearCircle(X As Byte, Y As Byte, Radius As Byte)
	RunNative ("B4RclrCircle",Array As Byte (X,Y,Radius))
End Sub

Public Sub LoadImageMEM(putCol As Byte, putRow As Byte, WidthPixels As Byte,HeightPixels As Byte,ImageArray() As Byte,Inverse As Boolean) 
	'display image from bytes array at Col-Row, you can create images by lcd assistance software,
	'use Nokia or KS0108 vertial addressing format
	Dim mb As mBitmap 'set properties of bitmap object
	mb.Bitmap = ImageArray
	mb.SizeX = WidthPixels
	mb.SizeY = HeightPixels
	mb.X = putCol
	mb.Y = putRow
	mb.Inverse = Inverse
	RunNative("B4RdrawBitmap",mb) 'call c code, pass bitmap object
End Sub

public Sub LoadAnimated(putCol As Byte, putRow As Byte, WidthPixels As Byte,HeightPixels As Byte,AnimationArray() As Byte,Inverse As Boolean,Delayms As Byte) 
	'display animated image from animation bitmap array, this array simply contains x number of frames(images) at fixed size
	'this sub displays them frame by frame
	Dim NumFrames As Int
	Dim FrameLength As Int 
	Dim HeightBytes As Int = (HeightPixels / 8) 'get number of bytes vertical
	Dim R As Byte = HeightPixels Mod 8 'if fraction then add one more byte
	If R > 0 Then HeightBytes = HeightBytes +1
	FrameLength = (WidthPixels * HeightBytes) 'get number of bytes for each frame, chunck size
	NumFrames = AnimationArray.Length / FrameLength
	Dim BC As ByteConverter
	Dim buffer(FrameLength) As Byte 'tmp buffer to hold one frame only
	For M = 0 To NumFrames - 1
		BC.ArrayCopy2(AnimationArray, (M * FrameLength),buffer,0,FrameLength) 'get chunck of bytes and load it into tmp buffer
		LoadImageMEM(putCol,putRow,WidthPixels,HeightPixels,buffer,Inverse) ' the frame now is a bitmap array, display it as image, frame by frame
		Update
		Delay(Delayms) 'delay between frames
	Next
End Sub

Public Sub ScrollVertical(StartPage As Byte, EndPage As Byte,Direction As Byte)
	'scroll vertical / (left or right) diagoal
	'start and end pgae range 0 To 7
	'use direction const:
	'SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL (0x29)
	'SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL (0x2A)
	RunNative("command", Array As Byte (0x00,SSD1306_DEACTIVATE_SCROLL))
	RunNative("command", Array As Byte (0x00,SSD1306_SET_VERTICAL_SCROLL_AREA))
	RunNative("command", Array As Byte (0x00,0x00)) 'dummy
	RunNative("command", Array As Byte (0x00,SSD1306_LCDHEIGHT))
	RunNative("command", Array As Byte (0x00,Direction))
	RunNative("command", Array As Byte (0x00,0x00))
	RunNative("command", Array As Byte (0x00,StartPage))
	RunNative("command", Array As Byte (0x00,0x00))
	RunNative("command", Array As Byte (0x00,EndPage))
	RunNative("command", Array As Byte (0x00,0x01))
	RunNative("command", Array As Byte (0x00,SSD1306_ACTIVATE_SCROLL))
End Sub

public Sub ScrollHorizontal(StartPage As Byte, EndPage As Byte,Direction As Byte)
	'scroll horizontal (left or right)
	'start and end pgae range 0 To 7
	'use direction const:
	'SSD1306_RIGHT_HORIZONTAL_SCROLL (0x26)
	'SSD1306_LEFT_HORIZONTAL_SCROLL (0x27)
	RunNative("command", Array As Byte (0x00,SSD1306_DEACTIVATE_SCROLL))
	RunNative("command", Array As Byte (0x00,Direction))
	RunNative("command", Array As Byte (0x00,0x00)) 'dummy
	RunNative("command", Array As Byte (0x00,StartPage))
	RunNative("command", Array As Byte (0x00,0x00))
	RunNative("command", Array As Byte (0x00,EndPage))
	RunNative("command", Array As Byte (0x00,0x00))
	RunNative("command", Array As Byte (0x00,0xFF))
	RunNative("command", Array As Byte (0x00,SSD1306_ACTIVATE_SCROLL))
End Sub

Public Sub ScrollOFF()
	RunNative("command", Array As Byte (0x00,SSD1306_DEACTIVATE_SCROLL))
End Sub

Public Sub DisplayON()
	RunNative("command", Array As Byte (0x00,SSD1306_DISPLAYON))
End Sub

public Sub DisplayOFF()
	RunNative("command", Array As Byte (0x00,SSD1306_DISPLAYOFF))
End Sub

public Sub DisplayInverse(Inverse As Boolean)
	If Inverse Then
		RunNative("command", Array As Byte (0x00,SSD1306_INVERTDISPLAY))
	Else
		RunNative("command", Array As Byte (0x00,SSD1306_NORMALDISPLAY))
	End If
End Sub

Public Sub Clear()
	RunNative("clrScreen",Null)
	Update
End Sub

Public Sub Contrast(Level As Byte)
	'oled contrast level 0x00 to 0xFF
	RunNative("command", Array As Byte (0x00,SSD1306_SETCONTRAST))
	RunNative("command", Array As Byte (0x00,Level))
End Sub

Private Sub SetFontProperties()
	'TODO(2) Add font properties:
	'font source: unknown
	Font5x8.FontID = 1
	Font5x8.FontCols = 5 'char width in pixels
	Font5x8.BytesPerCol = 1 'char bytes(pages) in each col
	Font5x8.BytesOrder = BYTES_ORDER_LSB 'bytes order in col
	Font5x8.ByteReflection = REFLECT_BYTE_NONE 'bits order in each byte
	Font5x8.ASCIIstartChar = 32 'start ascii char in font array (offset)
	Font5x8.FontStorage = FONT_STORAGE_MEM 'font array storage, memory, external I2C EEPROM or SSD card
	Font5x8.FontFileName = "" 'ignore
	Font5x8.ROMstartPage = 0 'ignore
	'generated by pixel font editor, font bitmap should be mirrored vertically and then rotated 270
	Font8x8.FontID = 2
	Font8x8.FontCols = 8
	Font8x8.BytesPerCol = 1
	Font8x8.BytesOrder = BYTES_ORDER_MSB
	Font8x8.ByteReflection = REFLECT_BYTE
	Font8x8.ASCIIstartChar = 0 'this char set starts from char 0 and it has some extra icons and arabic chars
	Font8x8.FontStorage = FONT_STORAGE_MEM
	Font8x8.FontFileName = "" 'ignore
	Font8x8.ROMstartPage = 0 'ignore
	'font source: unknown
	Font8x16.FontID = 3
	Font8x16.FontCols = 8
	Font8x16.BytesPerCol = 2
	Font8x16.BytesOrder = BYTES_ORDER_LSB
	Font8x16.ByteReflection = REFLECT_BYTE_NONE
	Font8x16.ASCIIstartChar = 32
	Font8x16.FontStorage = FONT_STORAGE_MEM
	Font8x16.FontFileName = "" 'ignore
	Font8x16.ROMstartPage = 0 'ignore
	'generated by TTF font factory
	Font12x22.FontID = 4
	Font12x22.FontCols = 12
	Font12x22.BytesPerCol = 3
	Font12x22.BytesOrder = BYTES_ORDER_MSB
	Font12x22.ByteReflection = REFLECT_BYTE
	Font12x22.ASCIIstartChar = 32
	Font12x22.FontStorage = FONT_STORAGE_MEM
	Font12x22.FontFileName = "" 'ignore
	Font12x22.ROMstartPage = 0 'ignore
	'generated by TTF font factory
	Font16x16.FontID = 5
	Font16x16.FontCols = 16
	Font16x16.BytesPerCol = 2
	Font16x16.BytesOrder = BYTES_ORDER_MSB
	Font16x16.ByteReflection = REFLECT_BYTE
	Font16x16.ASCIIstartChar = 32
	Font16x16.FontStorage = FONT_STORAGE_MEM
	Font16x16.FontFileName = "" 'ignore
	Font16x16.ROMstartPage = 0 'ignore
	'generated by TTF font factory, TTF font Modern LCD by Da Font www.dafont.com
	Font16x24.FontID = 6
	Font16x24.FontCols = 16
	Font16x24.BytesPerCol = 3
	Font16x24.BytesOrder = BYTES_ORDER_MSB
	Font16x24.ByteReflection = REFLECT_BYTE
	Font16x24.ASCIIstartChar = 32
	Font16x24.FontStorage = FONT_STORAGE_MEM
	Font16x24.FontFileName = "" 'ignore
	Font16x24.ROMstartPage = 0 'ignore
End Sub

Public Sub PutString(Col As Byte, Page As Byte, PrnString () As Byte,Font As UserFont,Inverse As Boolean,Centered As Boolean)
	'col from 0 to 127, page from 0 to 7
	'for non printable ascii i.e. smilies or symbols or when printing char by ascii code use this call:
	'SSD.PutString(0,0,Array As Byte(1,2,3),SSD.Font8x8,False,False) 'print symbols 1,2 and 3
	Dim MaxCharPerLine As Byte
	Dim SrtLen As Byte = PrnString.length
	Dim CharWidth As Byte = Font.FontCols
	MaxCharPerLine = SSD1306_LCDWIDTH / CharWidth
	If SrtLen > MaxCharPerLine Then SrtLen = MaxCharPerLine 'adjust to max characters per line
	
	Dim StartCol As Byte
	If Centered Then
		Dim totalCols As UInt = SrtLen * CharWidth ' get total cols required
		StartCol = (SSD1306_LCDWIDTH - totalCols) / 2 'set start center col
	Else
		StartCol = Col
	End If
	
	Dim R = 0 As Byte
	Do While( SrtLen > R)
		If Font.BytesOrder = BYTES_ORDER_LSB Then PutCharLSB(StartCol , Page, (PrnString(R)),Font,Inverse)
		If Font.BytesOrder = BYTES_ORDER_MSB Then PutCharMSB(StartCol , Page, (PrnString(R)),Font,Inverse)
		R = R + 1
		StartCol = StartCol + CharWidth
	Loop

End Sub

Private Sub PutCharLSB(putCol As Byte, putPage As Byte,cData As Byte,Font As UserFont,Inverse As Boolean)
	Dim FontColByte As Byte		'one single byte to be read from font array
	Dim ColAddress As Byte		'the X and Y coordinates at which we will start writing FontColByte
	Dim PageAddress As Byte
	Dim ColCounter As Byte		'columns and rows loops counter
	Dim ASCIIindex As UInt
	
	ASCIIindex = (cData - Font.ASCIIstartChar) * (Font.FontCols * Font.BytesPerCol) 'FontCols * BytesPerCol = bytes per char
	For ColCounter = 0 To Font.FontCols - 1 'loop columns
		ColAddress = putCol + ColCounter 'set column address
		putPage = putPage + Font.BytesPerCol 'LSB font bytes order should be written from down-up (LSB first), goto most down row(page)
		For RowCounter = 0 To Font.BytesPerCol -1 'loop rows
			Font.ASCIIindex = ASCIIindex
			FontColByte =  GetFontByte(Font) 'get byte from font array
			putPage = putPage - 1 'go one row up
			PageAddress = putPage 'set row address
			If Inverse Then
				WriteByte(ColAddress,PageAddress,Bit.Xor(FontColByte,0xFF),Font.ByteReflection)
			Else
				WriteByte(ColAddress,PageAddress,FontColByte,Font.ByteReflection)
			End If
			'Log (ColAddress,"-",RowAddress,"-",ASCIIindex)
			'Log(StackBufferUsage)
			ASCIIindex = ASCIIindex + 1
		Next
	Next
End Sub

Private Sub PutCharMSB(putCol As Byte, putPage As Byte,cData As Byte,Font As UserFont,Inverse As Boolean)
	Dim FontColByte As Byte		'one single byte to be read from font array
	Dim ColAddress As Byte		'the X and Y coordinates at which we will start writing FontColByte
	Dim PageAddress As Byte
	Dim ColCounter As Byte		'columns and rows loops counter
	Dim ASCIIindex As UInt
	ASCIIindex = (cData - Font.ASCIIstartChar) * (Font.FontCols * Font.BytesPerCol) 'FontCols * BytesPerCol = bytes per char
	'same as BYTES_ORDER_LSB with minor changes, in MSB mode we write char bytes from up down, we go down as row counter increases
	For ColCounter = 0 To Font.FontCols - 1
		ColAddress = putCol + ColCounter
		For RowCounter = 0 To Font.BytesPerCol - 1
			Font.ASCIIindex = ASCIIindex
			FontColByte =  GetFontByte(Font)
			PageAddress = putPage + RowCounter
			If Inverse Then
				WriteByte(ColAddress,PageAddress,Bit.Xor(FontColByte,0xFF),Font.ByteReflection)
			Else
				WriteByte(ColAddress,PageAddress,FontColByte,Font.ByteReflection)
			End If
			'Log (ColAddress,"-",RowAddress,"-",ASCIIindex)
			'Log(StackBufferUsage)
			ASCIIindex = ASCIIindex + 1
		Next
	Next
End Sub

Private Sub WriteByte(Col As Byte, Page As Byte, cByte As Byte,RotationDir As Byte )
	'write byte to display buffer
	Dim tmB As Byte = 0
	Select RotationDir
		Case REFLECT_BYTE_NONE
			tmB = cByte
		Case REFLECT_BYTE
			For B = 0 To 7
				If Bit.Get(cByte,B) = 1 Then Bit.Set(tmB,7 - B)
			Next
	End Select

	Dim Index As UInt = (Page * SSD1306_LCDWIDTH) + Col
	Dim buff As mBuffer
	buff.Index = Index
	buff.Val = tmB
	RunNative("B4RwriteBuffer",buff)
End Sub

Private Sub GetFontByte(Font As UserFont) As Byte
	
	Dim fByte As Byte
	Select Font.FontStorage
		Case FONT_STORAGE_MEM
			fByte = RunNative("getfontbyte",Font)
		Case FONT_STORAGE_EXT_ROM 'for future use
		Case FONT_STORAGE_SSD 'for future use
	End Select
	
	Return fByte
End Sub

#if C
#include <Wire.h>
#define BUFFER_SIZE	0x0400 // change buffer size as needed for any other LCD.

void startoled(B4R::Object* o)
{
 Wire.begin();        // init i2c bus
    Wire.setClock(400000);  //400khz
    //oled init.
    Wire.beginTransmission(b4r_ssd::_oledaddress);
    Wire.write(0x00);   
    Wire.write(b4r_ssd::_ssd1306_displayoff);
    Wire.endTransmission();
	
	//mostez ******************
	Wire.beginTransmission(b4r_ssd::_oledaddress);
    Wire.write(0x00);  
    Wire.write(b4r_ssd::_ssd1306_setdisplayclockdiv);
    Wire.endTransmission();    
    Wire.beginTransmission(b4r_ssd::_oledaddress);
    Wire.write(0x00);   
    Wire.write(0x80);
    Wire.endTransmission();     
	
	Wire.beginTransmission(b4r_ssd::_oledaddress);
    Wire.write(0x00);  
    Wire.write(b4r_ssd::_ssd1306_setmultiplex);
    Wire.endTransmission();    
    Wire.beginTransmission(b4r_ssd::_oledaddress);
    Wire.write(0x00);   
    Wire.write(b4r_ssd::_ssd1306_lcdheight - 1);
    Wire.endTransmission();     
	
	Wire.beginTransmission(b4r_ssd::_oledaddress);
    Wire.write(0x00);  
    Wire.write(b4r_ssd::_ssd1306_setdisplayoffset);
    Wire.endTransmission();    
    Wire.beginTransmission(b4r_ssd::_oledaddress);
    Wire.write(0x00);   
    Wire.write(0x00);
    Wire.endTransmission();     
	
	Wire.beginTransmission(b4r_ssd::_oledaddress);
    Wire.write(0x00);  
    Wire.write(b4r_ssd::_ssd1306_setstartline | 0x00);
    Wire.endTransmission();    
	
	Wire.beginTransmission(b4r_ssd::_oledaddress);
    Wire.write(0x00);  
    Wire.write(b4r_ssd::_ssd1306_normaldisplay);
    Wire.endTransmission();    
	
	// ******** MOSTEZ *****************
	
    Wire.beginTransmission(b4r_ssd::_oledaddress);
    Wire.write(0x00);   
    Wire.write(b4r_ssd::_ssd1306_chargepump);
    Wire.endTransmission();
    Wire.beginTransmission(b4r_ssd::_oledaddress);
    Wire.write(0x00);   
    Wire.write(0x14);
    Wire.endTransmission();  
    Wire.beginTransmission(b4r_ssd::_oledaddress);
    Wire.write(0x00);  
    Wire.write(b4r_ssd::_ssd1306_memorymode);
    Wire.endTransmission();    
    Wire.beginTransmission(b4r_ssd::_oledaddress);
    Wire.write(0x00);   
    Wire.write(0x00);
    Wire.endTransmission();     
    Wire.beginTransmission(b4r_ssd::_oledaddress);
    Wire.write(0x00);   
    Wire.write(0xA1);
    Wire.endTransmission();
    Wire.beginTransmission(b4r_ssd::_oledaddress);
    Wire.write(0x00);   
    Wire.write(b4r_ssd::_ssd1306_comscandec);
    Wire.endTransmission();
    Wire.beginTransmission(b4r_ssd::_oledaddress);
    Wire.write(0x00);   
    Wire.write(b4r_ssd::_ssd1306_setcompins);
    Wire.endTransmission();    
    Wire.beginTransmission(b4r_ssd::_oledaddress);
    Wire.write(0x00);   
    Wire.write(0x12);
    Wire.endTransmission();     
    Wire.beginTransmission(b4r_ssd::_oledaddress);
    Wire.write(0x00);   
    Wire.write(b4r_ssd::_ssd1306_setcontrast);
    Wire.endTransmission();
    Wire.beginTransmission(b4r_ssd::_oledaddress);
    Wire.write(0x00);   
    Wire.write(0x9F);
    Wire.endTransmission();   
    Wire.beginTransmission(b4r_ssd::_oledaddress);     //on
    Wire.write(0x00);   
    Wire.write(b4r_ssd::_ssd1306_displayon);
    Wire.endTransmission();   
}

void cleararea(B4R::Object* o) {
B4R::Array* b = (B4R::Array*)B4R::Object::toPointer(o);
char* cr = (char*)b->data;
unsigned char putcol = (cr[0]); // five parameters sent as array or bytes
unsigned char putpage = (cr[1]); 
unsigned char widthpixels = (cr[2]); 
unsigned char heightpages = (cr[3]); 
unsigned char bytewrite = (cr[4]); 

unsigned char rowcounter;
unsigned char colcounter;

        for (rowcounter = putpage; rowcounter < (putpage + heightpages);++rowcounter){
           for (colcounter = putcol; colcounter < (putcol + widthpixels);++colcounter){
				Wire.beginTransmission(b4r_ssd::_oledaddress); 
				Wire.write(0x00);   
				Wire.write(b4r_ssd::_ssd1306_columnaddr);
				Wire.endTransmission();

				Wire.beginTransmission(b4r_ssd::_oledaddress); 
				Wire.write(0x00);   
				Wire.write(colcounter);
				Wire.endTransmission();

				Wire.beginTransmission(b4r_ssd::_oledaddress); 
				Wire.write(0x00);   
				Wire.write(colcounter);
				Wire.endTransmission();

				Wire.beginTransmission(b4r_ssd::_oledaddress); 
				Wire.write(0x00);   
				Wire.write(b4r_ssd::_ssd1306_pageaddr);
				Wire.endTransmission();

				Wire.beginTransmission(b4r_ssd::_oledaddress); 
				Wire.write(0x00);   
				Wire.write(rowcounter);
				Wire.endTransmission();

				Wire.beginTransmission(b4r_ssd::_oledaddress); 
				Wire.write(0x00);   
				Wire.write(rowcounter);
				Wire.endTransmission();

				Wire.beginTransmission(b4r_ssd::_oledaddress); 
				Wire.write(b4r_ssd::_ssd1306_setstartline);   
				Wire.write(bytewrite);
				Wire.endTransmission();
           }
        }       
}

void command(B4R::Object* o) {
B4R::Array* b = (B4R::Array*)B4R::Object::toPointer(o);
char* c = (char*)b->data;
unsigned char cmd = (c[0]); 
unsigned char cbyte = (c[1]);
Wire.beginTransmission(b4r_ssd::_oledaddress); 
Wire.write(cmd);   
Wire.write(cbyte);
Wire.endTransmission();
}

//TODO(4) insert font array declaration
const byte FontDots5x8Array[] = { //change the data here
0x00, 0x00, 0x00, 0x00, 0x00, // sp
0x00, 0x00, 0x2f, 0x00, 0x00, // !
0x00, 0x07, 0x00, 0x07, 0x00, // "
0x14, 0x7f, 0x14, 0x7f, 0x14, //' #
0x24, 0x2a, 0x7f, 0x2a, 0x12, //$
0xc4, 0xc8, 0x10, 0x26, 0x46, //'%
0x36, 0x49, 0x55, 0x22, 0x50, //'&
0x00, 0x05, 0x03, 0x00, 0x00, //''
0x00, 0x1c, 0x22, 0x41, 0x00, //'(
0x00, 0x41, 0x22, 0x1c, 0x00, //')
0x14, 0x08, 0x3E, 0x08, 0x14, // *
0x08, 0x08, 0x3E, 0x08, 0x08, //'+
0x00, 0x00, 0x50, 0x30, 0x00, //',
0x10, 0x10, 0x10, 0x10, 0x10, //'-
0x00, 0x60, 0x60, 0x00, 0x00, // .
0x20, 0x10, 0x08, 0x04, 0x02, //'/
0x3E, 0x51, 0x49, 0x45, 0x3E, //'0
0x00, 0x42, 0x7F, 0x40, 0x00, //'1
0x42, 0x61, 0x51, 0x49, 0x46, //'2
0x21, 0x41, 0x45, 0x4B, 0x31, //'3
0x18, 0x14, 0x12, 0x7F, 0x10, //'4
0x27, 0x45, 0x45, 0x45, 0x39, //'5
0x3C, 0x4A, 0x49, 0x49, 0x30, //'6
0x01, 0x71, 0x09, 0x05, 0x03, // 7
0x36, 0x49, 0x49, 0x49, 0x36, //'8
0x06, 0x49, 0x49, 0x29, 0x1E, //'9
0x00, 0x36, 0x36, 0x00, 0x00, //':
0x00, 0x56, 0x36, 0x00, 0x00, //';
0x08, 0x14, 0x22, 0x41, 0x00, //'<
0x14, 0x14, 0x14, 0x14, 0x14, //'=
0x00, 0x41, 0x22, 0x14, 0x08, //'>
0x02, 0x01, 0x51, 0x09, 0x06, //'?
0x32, 0x49, 0x59, 0x51, 0x3E, //'@
0x7E, 0x11, 0x11, 0x11, 0x7E, //'A
0x7F, 0x49, 0x49, 0x49, 0x36, //'B
0x3E, 0x41, 0x41, 0x41, 0x22, //'C
0x7F, 0x41, 0x41, 0x22, 0x1C, //'D
0x7F, 0x49, 0x49, 0x49, 0x41, //'E
0x7F, 0x09, 0x09, 0x09, 0x01, //'F
0x3E, 0x41, 0x49, 0x49, 0x7A, //'G
0x7F, 0x08, 0x08, 0x08, 0x7F, //'H
0x00, 0x41, 0x7F, 0x41, 0x00, //'I
0x20, 0x40, 0x41, 0x3F, 0x01, //'J
0x7F, 0x08, 0x14, 0x22, 0x41, //'K
0x7F, 0x40, 0x40, 0x40, 0x40, //'L
0x7F, 0x02, 0x0C, 0x02, 0x7F, //M
0x7F, 0x04, 0x08, 0x10, 0x7F, //'N
0x3E, 0x41, 0x41, 0x41, 0x3E, //'O
0x7F, 0x09, 0x09, 0x09, 0x06, //'P
0x3E, 0x41, 0x51, 0x21, 0x5E, //'Q
0x7F, 0x09, 0x19, 0x29, 0x46, //'R
0x46, 0x49, 0x49, 0x49, 0x31, //'S
0x01, 0x01, 0x7F, 0x01, 0x01, // T
0x3F, 0x40, 0x40, 0x40, 0x3F, //'U
0x1F, 0x20, 0x40, 0x20, 0x1F, //'V
0x3F, 0x40, 0x38, 0x40, 0x3F, //'W
0x63, 0x14, 0x08, 0x14, 0x63, //'X
0x07, 0x08, 0x70, 0x08, 0x07, //'Y
0x61, 0x51, 0x49, 0x45, 0x43, //'Z
0x00, 0x7F, 0x41, 0x41, 0x00, //'[
0x55, 0x2A, 0x55, 0x2A, 0x55, //'55
0x00, 0x41, 0x41, 0x7F, 0x00, //']
0x04, 0x02, 0x01, 0x02, 0x04, //'^
0x40, 0x40, 0x40, 0x40, 0x40, //_
0x00, 0x01, 0x02, 0x04, 0x00, //''
0x20, 0x54, 0x54, 0x54, 0x78, //'a
0x7F, 0x48, 0x44, 0x44, 0x38, //'b
0x38, 0x44, 0x44, 0x44, 0x20, //'c
0x38, 0x44, 0x44, 0x48, 0x7F, //'d
0x38, 0x54, 0x54, 0x54, 0x18, //'e
0x08, 0x7E, 0x09, 0x01, 0x02, //'f
0x0C, 0x52, 0x52, 0x52, 0x3E, //'g
0x7F, 0x08, 0x04, 0x04, 0x78, // h
0x00, 0x44, 0x7D, 0x40, 0x00, //'i
0x20, 0x40, 0x44, 0x3D, 0x00, //'j
0x7F, 0x10, 0x28, 0x44, 0x00, // k
0x00, 0x41, 0x7F, 0x40, 0x00, // l
0x7C, 0x04, 0x18, 0x04, 0x78, // m
0x7C, 0x08, 0x04, 0x04, 0x78, //'n
0x38, 0x44, 0x44, 0x44, 0x38, //'o
0x7C, 0x14, 0x14, 0x14, 0x08, // p
0x08, 0x14, 0x14, 0x18, 0x7C, //'q
0x7C, 0x08, 0x04, 0x04, 0x08, //'r
0x48, 0x54, 0x54, 0x54, 0x20, //'s
0x04, 0x3F, 0x44, 0x40, 0x20, //'t
0x3C, 0x40, 0x40, 0x20, 0x7C, //'u
0x1C, 0x20, 0x40, 0x20, 0x1C, //'v
0x3C, 0x40, 0x30, 0x40, 0x3C, // w
0x44, 0x28, 0x10, 0x28, 0x44, //'x
0x0C, 0x50, 0x50, 0x50, 0x3C, //'y
0x44, 0x64, 0x54, 0x4C, 0x44 //  'z
};

const byte FontDots8x8Array[] = { 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// Char 000 (.)
0x7E, 0x81, 0xA9, 0x8D, 0x8D, 0xA9, 0x81, 0x7E,	// Char 001 (.)
0x7E, 0xFF, 0xD7, 0xF3, 0xF3, 0xD7, 0xFF, 0x7E,	// Char 002 (.)
0x70, 0xF8, 0xFC, 0x7E, 0xFC, 0xF8, 0x70, 0x00,	// Char 003 (.)
0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x10, 0x00,	// Char 004 (.)
0x18, 0x5D, 0xFF, 0xFF, 0xFF, 0x5D, 0x18, 0x00,	// Char 005 (.)
0x08, 0x1D, 0x3F, 0xFF, 0x3F, 0x1D, 0x08, 0x00,	// Char 006 (.)
0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00,	// Char 007 (.)
0xFF, 0xFF, 0xE7, 0xC3, 0xC3, 0xE7, 0xFF, 0xFF,	// Char 008 (.)
0x00, 0x3C, 0x66, 0x42, 0x42, 0x66, 0x3C, 0x00,	// Char 009 (.)
0xFF, 0xC3, 0x99, 0xBD, 0xBD, 0x99, 0xC3, 0xFF,	// Char 010 (.)
0x0E, 0x1F, 0x11, 0x11, 0xBF, 0xFE, 0xE0, 0xF0,	// Char 011 (.)
0x00, 0x72, 0xFA, 0x8F, 0x8F, 0xFA, 0x72, 0x00,	// Char 012 (.)
0x03, 0x07, 0xFF, 0xFE, 0xA0, 0xA0, 0xE0, 0xE0,	// Char 013 (.)
0x03, 0xFF, 0xFE, 0xA0, 0xA0, 0xA6, 0xFE, 0xFC,	// Char 014 (.)
0x99, 0x5A, 0x3C, 0xE7, 0xE7, 0x3C, 0x5A, 0x99,	// Char 015 (.)
0xFE, 0x7C, 0x7C, 0x38, 0x38, 0x10, 0x10, 0x00,	// Char 016 (.)
0x10, 0x10, 0x38, 0x38, 0x7C, 0x7C, 0xFE, 0x00,	// Char 017 (.)
0x00, 0x24, 0x66, 0xFF, 0xFF, 0x66, 0x24, 0x00,	// Char 018 (.)
0x00, 0xFA, 0xFA, 0x00, 0x00, 0xFA, 0xFA, 0x00,	// Char 019 (.)
0x60, 0xF0, 0x90, 0xFE, 0xFE, 0x80, 0xFE, 0xFE,	// Char 020 (.)
0x02, 0x5B, 0xFD, 0xA5, 0xBF, 0xDA, 0x40, 0x00,	// Char 021 (.)
0x00, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x00,	// Char 022 (.)
0x01, 0x29, 0x6D, 0xFF, 0xFF, 0x6D, 0x29, 0x01,	// Char 023 (.)
0x00, 0x20, 0x60, 0xFE, 0xFE, 0x60, 0x20, 0x00,	// Char 024 (.)
0x00, 0x08, 0x0C, 0xFE, 0xFE, 0x0C, 0x08, 0x00,	// Char 025 (.)
0x10, 0x10, 0x10, 0x54, 0x7C, 0x38, 0x10, 0x00,	// Char 026 (.)
0x10, 0x38, 0x7C, 0x54, 0x10, 0x10, 0x10, 0x00,	// Char 027 (.)
0x3C, 0x3C, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00,	// Char 028 (.)
0x10, 0x38, 0x7C, 0x10, 0x10, 0x7C, 0x38, 0x10,	// Char 029 (.)
0x0C, 0x1C, 0x3C, 0x7C, 0x7C, 0x3C, 0x1C, 0x0C,	// Char 030 (.)
0x60, 0x70, 0x78, 0x7C, 0x7C, 0x78, 0x70, 0x60,	// Char 031 (.)
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// Char 032 ( )
0x00, 0x60, 0xFA, 0xFA, 0x60, 0x00, 0x00, 0x00,	// Char 033 (!)
0x00, 0xE0, 0xE0, 0x00, 0xE0, 0xE0, 0x00, 0x00,	// Char 034 (")
0x28, 0xFE, 0xFE, 0x28, 0xFE, 0xFE, 0x28, 0x00,	// Char 035 (#)
0x24, 0x74, 0xD6, 0xD6, 0x5C, 0x48, 0x00, 0x00,	// Char 036 ($)
0x62, 0x66, 0x0C, 0x18, 0x30, 0x66, 0x46, 0x00,	// Char 037 (%)
0x0C, 0x5E, 0xF2, 0xBA, 0xEC, 0x5E, 0x12, 0x00,	// Char 038 (&)
0x20, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,	// Char 039 (')
0x00, 0x38, 0x7C, 0xC6, 0x82, 0x00, 0x00, 0x00,	// Char 040 (()
0x00, 0x82, 0xC6, 0x7C, 0x38, 0x00, 0x00, 0x00,	// Char 041 ())
0x10, 0x54, 0x7C, 0x38, 0x38, 0x7C, 0x54, 0x10,	// Char 042 (*)
0x10, 0x10, 0x7C, 0x7C, 0x10, 0x10, 0x00, 0x00,	// Char 043 (+)
0x00, 0x01, 0x07, 0x06, 0x00, 0x00, 0x00, 0x00,	// Char 044 (,)
0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00,	// Char 045 (-)
0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00,	// Char 046 (.)
0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00,	// Char 047 (/)
0x7C, 0xFE, 0x8E, 0x9A, 0xB2, 0xFE, 0x7C, 0x00,	// Char 048 (0)
0x00, 0x40, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00,	// Char 049 (1)
0x46, 0xCE, 0x9A, 0x92, 0xF2, 0x62, 0x00, 0x00,	// Char 050 (2)
0x44, 0xC6, 0x92, 0x92, 0xFE, 0x6C, 0x00, 0x00,	// Char 051 (3)
0x18, 0x38, 0x68, 0xC8, 0xFE, 0xFE, 0x08, 0x00,	// Char 052 (4)
0xE4, 0xE6, 0xA2, 0xA2, 0xBE, 0x9C, 0x00, 0x00,	// Char 053 (5)
0x3C, 0x7E, 0xD2, 0x92, 0x9E, 0x0C, 0x00, 0x00,	// Char 054 (6)
0x80, 0x80, 0x8E, 0x9E, 0xF0, 0xE0, 0x00, 0x00,	// Char 055 (7)
0x6C, 0xFE, 0x92, 0x92, 0xFE, 0x6C, 0x00, 0x00,	// Char 056 (8)
0x60, 0xF2, 0x92, 0x96, 0xFC, 0x78, 0x00, 0x00,	// Char 057 (9)
0x00, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,	// Char 058 (:)
0x00, 0x01, 0x67, 0x66, 0x00, 0x00, 0x00, 0x00,	// Char 059 (;)
0x10, 0x38, 0x6C, 0xC6, 0x82, 0x00, 0x00, 0x00,	// Char 060 (<)
0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x00, 0x00,	// Char 061 (=)
0x00, 0x82, 0xC6, 0x6C, 0x38, 0x10, 0x00, 0x00,	// Char 062 (>)
0x40, 0xC0, 0x8A, 0x9A, 0xF0, 0x60, 0x00, 0x00,	// Char 063 (?)
0x7C, 0xFE, 0x82, 0xBA, 0xBA, 0xF8, 0x78, 0x00,	// Char 064 (@)
0x00, 0x3E, 0x7E, 0xC8, 0xC8, 0x7E, 0x3E, 0x00,	// Char 065 (A)
0x00, 0xFE, 0xFE, 0x92, 0x92, 0xFE, 0x6C, 0x00,	// Char 066 (B)
0x38, 0x7C, 0xC6, 0x82, 0x82, 0xC6, 0x44, 0x00,	// Char 067 (C)
0x00, 0xFE, 0xFE, 0x82, 0xC6, 0x7C, 0x38, 0x00,	// Char 068 (D)
0x00, 0xFE, 0xFE, 0x92, 0x92, 0x82, 0x82, 0x00,	// Char 069 (E)
0x00, 0xFE, 0xFE, 0x90, 0x90, 0x80, 0x80, 0x00,	// Char 070 (F)
0x38, 0x7C, 0xC6, 0x82, 0x8A, 0xCE, 0x4E, 0x00,	// Char 071 (G)
0x00, 0xFE, 0xFE, 0x10, 0x10, 0xFE, 0xFE, 0x00,	// Char 072 (H)
0x00, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0x00, 0x00,	// Char 073 (I)
0x00, 0x0C, 0x0E, 0x02, 0x02, 0xFE, 0xFC, 0x00,	// Char 074 (J)
0x00, 0xFE, 0xFE, 0x10, 0x38, 0xEE, 0xC6, 0x00,	// Char 075 (K)
0x00, 0xFE, 0xFE, 0x02, 0x02, 0x02, 0x02, 0x00,	// Char 076 (L)
0xFE, 0xFE, 0x70, 0x38, 0x70, 0xFE, 0xFE, 0x00,	// Char 077 (M)
0xFE, 0xFE, 0x60, 0x30, 0x18, 0xFE, 0xFE, 0x00,	// Char 078 (N)
0x00, 0x7C, 0xFE, 0x82, 0x82, 0xFE, 0x7C, 0x00,	// Char 079 (O)
0x00, 0xFE, 0xFE, 0x90, 0x90, 0xF0, 0x60, 0x00,	// Char 080 (P)
0x00, 0x78, 0xFC, 0x84, 0x8E, 0xFE, 0x7A, 0x00,	// Char 081 (Q)
0x00, 0xFE, 0xFE, 0x90, 0x98, 0xFE, 0x66, 0x00,	// Char 082 (R)
0x00, 0x64, 0xF6, 0xB2, 0x9A, 0xCE, 0x4C, 0x00,	// Char 083 (S)
0x00, 0x80, 0x80, 0xFE, 0xFE, 0x80, 0x80, 0x00,	// Char 084 (T)
0x00, 0xFC, 0xFE, 0x02, 0x02, 0xFE, 0xFE, 0x00,	// Char 085 (U)
0x00, 0xF8, 0xFC, 0x06, 0x06, 0xFC, 0xF8, 0x00,	// Char 086 (V)
0xFE, 0xFE, 0x0C, 0x18, 0x0C, 0xFE, 0xFE, 0x00,	// Char 087 (W)
0x00, 0xC6, 0xEE, 0x38, 0x38, 0xEE, 0xC6, 0x00,	// Char 088 (X)
0x00, 0xE0, 0xF0, 0x1E, 0x1E, 0xF0, 0xE0, 0x00,	// Char 089 (Y)
0x82, 0x86, 0x8E, 0x9A, 0xB2, 0xE2, 0xC2, 0x00,	// Char 090 (Z)
0x00, 0xFE, 0xFE, 0x82, 0x82, 0x00, 0x00, 0x00,	// Char 091 ([)
0x80, 0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x00,	// Char 092 (\)
0x00, 0x82, 0x82, 0xFE, 0xFE, 0x00, 0x00, 0x00,	// Char 093 (])
0x10, 0x30, 0x60, 0xC0, 0x60, 0x30, 0x10, 0x00,	// Char 094 (^)
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,	// Char 095 (_)
0x00, 0x00, 0xC0, 0xE0, 0x20, 0x00, 0x00, 0x00,	// Char 096 (`)
0x00, 0x04, 0x2E, 0x2A, 0x2A, 0x3C, 0x1E, 0x00,	// Char 097 (a)
0x00, 0xFE, 0xFC, 0x12, 0x12, 0x1E, 0x0C, 0x00,	// Char 098 (b)
0x00, 0x1C, 0x3E, 0x22, 0x22, 0x36, 0x14, 0x00,	// Char 099 (c)
0x00, 0x0C, 0x1E, 0x12, 0x12, 0xFC, 0xFE, 0x00,	// Char 100 (d)
0x00, 0x1C, 0x3E, 0x2A, 0x2A, 0x3A, 0x18, 0x00,	// Char 101 (e)
0x00, 0x10, 0x7E, 0xFE, 0x90, 0xC0, 0x40, 0x00,	// Char 102 (f)
0x00, 0x18, 0x3D, 0x25, 0x25, 0x1F, 0x3E, 0x00,	// Char 103 (g)
0x00, 0xFE, 0xFE, 0x10, 0x20, 0x3E, 0x1E, 0x00,	// Char 104 (h)
0x00, 0x00, 0x00, 0xBE, 0xBE, 0x00, 0x00, 0x00,	// Char 105 (i)
0x06, 0x07, 0x01, 0x01, 0xBF, 0xBE, 0x00, 0x00,	// Char 106 (j)
0x00, 0xFE, 0xFE, 0x08, 0x1C, 0x36, 0x22, 0x00,	// Char 107 (k)
0x00, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0x00, 0x00,	// Char 108 (l)
0x3E, 0x3E, 0x18, 0x0C, 0x18, 0x3E, 0x3E, 0x00,	// Char 109 (m)
0x00, 0x3E, 0x3E, 0x20, 0x20, 0x3E, 0x1E, 0x00,	// Char 110 (n)
0x00, 0x1C, 0x3E, 0x22, 0x22, 0x3E, 0x1C, 0x00,	// Char 111 (o)
0x00, 0x3F, 0x1F, 0x24, 0x24, 0x3C, 0x18, 0x00,	// Char 112 (p)
0x00, 0x18, 0x3C, 0x24, 0x24, 0x1F, 0x3F, 0x00,	// Char 113 (q)
0x00, 0x3E, 0x1E, 0x30, 0x20, 0x30, 0x10, 0x00,	// Char 114 (r)
0x00, 0x12, 0x3A, 0x2A, 0x2A, 0x2E, 0x24, 0x00,	// Char 115 (s)
0x00, 0x20, 0xFC, 0xFE, 0x22, 0x24, 0x00, 0x00,	// Char 116 (t)
0x00, 0x3C, 0x3E, 0x02, 0x02, 0x3C, 0x3E, 0x00,	// Char 117 (u)
0x00, 0x38, 0x3C, 0x06, 0x06, 0x3C, 0x38, 0x00,	// Char 118 (v)
0x3C, 0x3E, 0x0E, 0x1C, 0x0E, 0x3E, 0x3C, 0x00,	// Char 119 (w)
0x22, 0x36, 0x1C, 0x08, 0x1C, 0x36, 0x22, 0x00,	// Char 120 (x)
0x00, 0x38, 0x3D, 0x05, 0x05, 0x3F, 0x3E, 0x00,	// Char 121 (y)
0x00, 0x22, 0x26, 0x2E, 0x3A, 0x32, 0x22, 0x00,	// Char 122 (z)
0x10, 0x10, 0x7C, 0xEE, 0x82, 0x82, 0x00, 0x00,	// Char 123 ({)
0x00, 0x00, 0x00, 0xEE, 0xEE, 0x00, 0x00, 0x00,	// Char 124 (|)
0x82, 0x82, 0xEE, 0x7C, 0x10, 0x10, 0x00, 0x00,	// Char 125 (})
0x40, 0xC0, 0x80, 0xC0, 0x40, 0xC0, 0x80, 0x00,	// Char 126 (~)
0x0E, 0x1E, 0x32, 0x62, 0x32, 0x1E, 0x0E, 0x00,	// Char 127 (.)
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78,	// Char 128 (.)
0x00, 0x18, 0x08, 0x08, 0x0A, 0x08, 0x08, 0x18,	// Char 129 (.)
0x00, 0x18, 0x08, 0x28, 0x08, 0x28, 0x08, 0x18,	// Char 130 (.)
0x00, 0x18, 0x08, 0x28, 0x48, 0x28, 0x08, 0x18,	// Char 131 (.)
0x00, 0x18, 0x12, 0x15, 0x19, 0x11, 0x14, 0x10,	// Char 132 (.)
0x00, 0x18, 0x12, 0x15, 0x19, 0x11, 0x10, 0x10,	// Char 133 (.)
0x00, 0x18, 0x12, 0x15, 0x59, 0x11, 0x10, 0x10,	// Char 134 (.)
0x00, 0x00, 0x00, 0x42, 0x42, 0x66, 0x3C, 0x18,	// Char 135 (.)
0x00, 0x40, 0x00, 0x42, 0x42, 0x66, 0x3C, 0x18,	// Char 136 (.)
0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x06, 0x0C,	// Char 137 (.)
0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x06, 0x2C,	// Char 138 (.)
0x00, 0x0F, 0x01, 0x1F, 0x08, 0x18, 0x08, 0x18,	// Char 139 (.)
0x00, 0x0F, 0x41, 0x2F, 0x48, 0x18, 0x08, 0x18,	// Char 140 (.)
0x00, 0x0F, 0x01, 0x0F, 0x18, 0x28, 0x28, 0x18,	// Char 141 (.)
0x00, 0x0F, 0x01, 0x4F, 0x18, 0x28, 0x28, 0x18,	// Char 142 (.)
0x08, 0x08, 0x78, 0x18, 0x28, 0x28, 0x28, 0x18,	// Char 143 (.)
0x04, 0x04, 0x7C, 0x0C, 0x14, 0x54, 0x14, 0x0C,	// Char 144 (.)
0x00, 0x00, 0x02, 0x05, 0x09, 0x09, 0x38, 0x28,	// Char 145 (.)
0x00, 0x00, 0x02, 0x45, 0x09, 0x09, 0x38, 0x28,	// Char 146 (.)
0x00, 0x0C, 0x04, 0x04, 0x04, 0x1C, 0x54, 0x1C,	// Char 147 (.)
0x00, 0x0E, 0x01, 0x01, 0x01, 0x5D, 0x15, 0x5F,	// Char 148 (.)
0x00, 0x18, 0x08, 0x08, 0x08, 0x28, 0x68, 0x58,	// Char 149 (.)
0x00, 0x06, 0x03, 0x01, 0x01, 0x01, 0x03, 0x7E,	// Char 150 (.)
0x00, 0x1F, 0x10, 0x10, 0x10, 0x1C, 0x14, 0x1C,	// Char 151 (.)
0x00, 0x0E, 0x03, 0x01, 0x09, 0x01, 0x03, 0x0E,	// Char 152 (.)
0x00, 0x0C, 0x16, 0x22, 0x42, 0x22, 0x16, 0x0C,	// Char 153 (.)
0x00, 0x48, 0x68, 0x38, 0x18, 0x08, 0x08, 0x78,	// Char 154 (.)
0x00, 0x00, 0x00, 0x00, 0x01, 0x39, 0x2B, 0x3E,	// Char 155 (.)
0x00, 0x06, 0x09, 0x01, 0x05, 0x0A, 0x08, 0x08,	// Char 156 (.)
0x08, 0x08, 0x08, 0x08, 0x0A, 0x08, 0x08, 0x18,	// Char 157 (.)
0x08, 0x08, 0x08, 0x28, 0x08, 0x28, 0x08, 0x18,	// Char 158 (.)
0x08, 0x08, 0x08, 0x28, 0x48, 0x28, 0x08, 0x18,	// Char 159 (.)
0x08, 0x08, 0x28, 0x68, 0x4A, 0x68, 0x38, 0x18,	// Char 160 (.)
0x08, 0x08, 0x08, 0x28, 0x68, 0x48, 0x78, 0x38,	// Char 161 (.)
0x08, 0x48, 0x08, 0x08, 0x68, 0x48, 0x78, 0x18,	// Char 162 (.)
0x08, 0x08, 0x08, 0x18, 0x08, 0x18, 0x08, 0x18,	// Char 163 (.)
0x08, 0x08, 0x48, 0x18, 0x48, 0x18, 0x48, 0x18,	// Char 164 (.)
0x08, 0x18, 0x08, 0x08, 0x18, 0x28, 0x28, 0x18,	// Char 165 (.)
0x08, 0x18, 0x08, 0x48, 0x18, 0x28, 0x28, 0x18,	// Char 166 (.)
0x00, 0x20, 0x50, 0x50, 0x78, 0x08, 0x08, 0x08,	// Char 167 (.)
0x08, 0x08, 0x0A, 0x09, 0x0A, 0x18, 0x08, 0x08,	// Char 168 (.)
0x08, 0x08, 0x08, 0x08, 0x18, 0x28, 0x28, 0x28,	// Char 169 (.)
0x08, 0x08, 0x08, 0x48, 0x18, 0x28, 0x28, 0x28,	// Char 170 (.)
0x08, 0x08, 0x08, 0x08, 0x48, 0x18, 0x28, 0x18,	// Char 171 (.)
0x08, 0x08, 0x48, 0x08, 0x48, 0x18, 0x28, 0x18,	// Char 172 (.)
0x08, 0x08, 0x08, 0x08, 0x28, 0x78, 0x58, 0x08,	// Char 173 (.)
0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x18, 0x70,	// Char 174 (.)
0x08, 0x08, 0x08, 0x08, 0x08, 0x1C, 0x14, 0x1C,	// Char 175 (.)
0x08, 0x08, 0x08, 0x48, 0x08, 0x08, 0x18, 0x70,	// Char 176 (.)
0x08, 0x08, 0x0A, 0x08, 0x0A, 0x08, 0x18, 0x30,	// Char 177 (.)
0x00, 0x00, 0x00, 0x00, 0x01, 0x23, 0x46, 0x2C,	// Char 178 (.)
0x00, 0x0E, 0x71, 0x31, 0x61, 0x31, 0x71, 0x0E,	// Char 179 (.)
0x08, 0x08, 0x08, 0x0A, 0x08, 0x18, 0x08, 0x08,	// Char 180 (.)
0x08, 0x28, 0x08, 0x28, 0x08, 0x38, 0x38, 0x08,	// Char 181 (.)
0x08, 0x28, 0x48, 0x28, 0x08, 0x18, 0x08, 0x08,	// Char 182 (.)
0x08, 0x08, 0x28, 0x48, 0x28, 0x48, 0x08, 0x38,	// Char 183 (.)
0x08, 0x08, 0x28, 0x68, 0x48, 0x28, 0x78, 0x58,	// Char 184 (.)
0x08, 0x08, 0x08, 0x28, 0x68, 0x48, 0x08, 0x08,	// Char 185 (.)
0x00, 0x38, 0x45, 0x02, 0x7F, 0x02, 0x45, 0x38,	// Char 186 (.)
0x00, 0x9D, 0x36, 0x6B, 0x55, 0x6B, 0x36, 0x9D,	// Char 187 (.)
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// Char 188 (.)
0x08, 0x08, 0x08, 0x28, 0x38, 0x30, 0x38, 0x28,	// Char 189 (.)
0x08, 0x48, 0x08, 0x28, 0x38, 0x30, 0x38, 0x28,	// Char 190 (.)
0x08, 0x48, 0x18, 0x38, 0x28, 0x38, 0x18, 0x08,	// Char 191 (.)
0x08, 0x48, 0x18, 0x38, 0x28, 0x38, 0x18, 0x48,	// Char 192 (.)
0x08, 0x08, 0x08, 0x08, 0x28, 0x78, 0x58, 0x08,	// Char 193 (.)
0x08, 0x08, 0x08, 0x08, 0x78, 0x08, 0x08, 0x08,	// Char 194 (.)
0x08, 0x08, 0x48, 0x08, 0x08, 0x38, 0x08, 0x08,	// Char 195 (.)
0x08, 0x1C, 0x3E, 0x6B, 0x5D, 0x7F, 0x2A, 0x08,	// Char 196 (.)
0x08, 0x08, 0x0A, 0x08, 0x0A, 0x18, 0x08, 0x08,	// Char 197 (.)
0x08, 0x28, 0x68, 0x28, 0x48, 0x18, 0x08, 0x08,	// Char 198 (.)
0x08, 0x09, 0x03, 0x0E, 0x0C, 0x00, 0x08, 0x08,	// Char 199 (.)
0x00, 0x00, 0xFF, 0xFF, 0x01, 0xFD, 0xFD, 0x05,	// Char 200 (.)
0x00, 0x00, 0x07, 0x07, 0x04, 0x05, 0x05, 0x05,	// Char 201 (.)
0x05, 0x05, 0xFD, 0xFD, 0x01, 0xFD, 0xFD, 0x05,	// Char 202 (.)
0x00, 0x20, 0x40, 0x20, 0x40, 0x00, 0x78, 0x08,	// Char 203 (.)
0x00, 0x00, 0x08, 0x12, 0x04, 0x00, 0x78, 0x08,	// Char 204 (.)
0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14,	// Char 205 (.)
0x18, 0x08, 0x08, 0x0A, 0x09, 0x0A, 0x08, 0x18,	// Char 206 (.)
0x00, 0x00, 0x00, 0x12, 0x37, 0x25, 0x3C, 0x09,	// Char 207 (.)
0x00, 0x00, 0x00, 0x02, 0x37, 0x25, 0x39, 0x08,	// Char 208 (.)
0x00, 0x40, 0x52, 0x37, 0x25, 0x39, 0x1B, 0x08,	// Char 209 (.)
0x00, 0x02, 0x07, 0x05, 0x01, 0x05, 0x0E, 0x08,	// Char 210 (.)
0x00, 0x00, 0x78, 0x78, 0x08, 0x78, 0x78, 0x08,	// Char 211 (.)
0x00, 0x30, 0x60, 0x00, 0x30, 0x60, 0x00, 0x00,	// Char 212 (.)
0x00, 0x70, 0x10, 0x10, 0x70, 0x10, 0x10, 0x70,	// Char 213 (.)
0x00, 0x42, 0x24, 0x18, 0x18, 0x24, 0x42, 0x00,	// Char 214 (.)
0x00, 0x00, 0x00, 0x00, 0x10, 0x30, 0x60, 0x00,	// Char 215 (.)
0x00, 0x10, 0x70, 0x40, 0x10, 0x30, 0x60, 0x00,	// Char 216 (.)
0x00, 0x00, 0x68, 0x70, 0x00, 0x68, 0x70, 0x00,	// Char 217 (.)
0x00, 0x00, 0x06, 0x0D, 0x29, 0x38, 0x28, 0x08,	// Char 218 (.)
0x00, 0x42, 0x47, 0x0D, 0x29, 0x38, 0x28, 0x08,	// Char 219 (.)
0x00, 0x00, 0x00, 0x00, 0x10, 0x30, 0x60, 0x00,	// Char 220 (.)
0x00, 0x18, 0x08, 0x68, 0x48, 0x28, 0x78, 0x48,	// Char 221 (.)
0x00, 0x32, 0x67, 0x4D, 0x68, 0x39, 0x1A, 0x09,	// Char 222 (.)
0x00, 0x32, 0x67, 0x4D, 0x68, 0x39, 0x1A, 0x09,	// Char 223 (.)
0x08, 0x28, 0x6A, 0x48, 0x69, 0x38, 0x1A, 0x08,	// Char 224 (.)
0x08, 0x08, 0x0A, 0x08, 0x09, 0x08, 0x0A, 0x18,	// Char 225 (.)
0x00, 0x70, 0x50, 0x70, 0x38, 0x08, 0x08, 0x08,	// Char 226 (.)
0x08, 0x68, 0x38, 0x18, 0x38, 0x68, 0x48, 0x08,	// Char 227 (.)
0x00, 0x00, 0x00, 0x10, 0x39, 0x2B, 0x3E, 0x08,	// Char 228 (.)
0x00, 0x0E, 0x0B, 0x01, 0x01, 0x0D, 0x0D, 0x0A,	// Char 229 (.)
0x08, 0x08, 0x68, 0x28, 0x68, 0x28, 0x68, 0x08,	// Char 230 (.)
0x08, 0x08, 0x28, 0x68, 0x08, 0x28, 0x68, 0x08,	// Char 231 (.)
0x00, 0x00, 0x00, 0x7F, 0x7F, 0x00, 0x00, 0x00,	// Char 232 (.)
0x00, 0x7F, 0x7F, 0x10, 0x70, 0x60, 0x00, 0x00,	// Char 233 (.)
0x00, 0x7F, 0x7F, 0x10, 0x70, 0x10, 0x70, 0x00,	// Char 234 (.)
0x00, 0x1F, 0x1F, 0x10, 0x70, 0x70, 0x50, 0x50,	// Char 235 (.)
0x00, 0x0E, 0x1B, 0x32, 0x64, 0x32, 0x1B, 0x0E,	// Char 236 (.)
0x00, 0x00, 0x01, 0x03, 0x76, 0x5C, 0x18, 0x30,	// Char 237 (.)
0x00, 0x70, 0x38, 0x0C, 0x06, 0x0C, 0x38, 0x70,	// Char 238 (.)
0x00, 0x03, 0x0E, 0x38, 0x60, 0x38, 0x0E, 0x03,	// Char 239 (.)
0x00, 0x20, 0x70, 0x50, 0x7F, 0x3F, 0x00, 0x00,	// Char 240 (.)
0x00, 0x00, 0x00, 0x7D, 0x7D, 0x00, 0x00, 0x00,	// Char 241 (.)
0x00, 0x00, 0x20, 0x60, 0x4F, 0x6F, 0x20, 0x60,	// Char 242 (.)
0x00, 0x00, 0x7F, 0x7F, 0x00, 0x0D, 0x0B, 0x00,	// Char 243 (.)
0x00, 0x36, 0x6C, 0x00, 0x7F, 0x7F, 0x00, 0x00,	// Char 244 (.)
0x00, 0x10, 0x38, 0x6A, 0x4E, 0x0C, 0x00, 0x00,	// Char 245 (.)
0x00, 0x06, 0x2F, 0x49, 0x21, 0x4D, 0x0F, 0x0A,	// Char 246 (.)
0x00, 0x68, 0x58, 0x01, 0x01, 0x39, 0x2B, 0x3E,	// Char 247 (.)
0x08, 0x08, 0x08, 0x08, 0x58, 0x68, 0x08, 0x08,	// Char 248 (.)
0x00, 0x30, 0x78, 0x4D, 0x45, 0x60, 0x30, 0x00,	// Char 249 (.)
0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,	// Char 250 (.)
0x08, 0x08, 0x58, 0x68, 0x08, 0x58, 0x68, 0x08,	// Char 251 (.)
0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,	// Char 252 (.)
0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x18, 0x00,	// Char 253 (.)
0x08, 0x18, 0x3C, 0x2E, 0x3A, 0x1E, 0x30, 0x00,	// Char 254 (.)
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	// Char 255 (.)
};

const byte FontArial8x16Array[] = { 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ' space
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0xfe, 0x19, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // !
0x00, 0x00, 0x00, 0x7e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x7e, 0x00, 0x00, // "
0x01, 0x98, 0x07, 0xfe, 0x07, 0xfe, 0x01, 0x98, 0x01, 0x98, 0x07, 0xfe, 0x07, 0xfe, 0x00, 0x00, // #
0x00, 0x00, 0x06, 0x3c, 0x06, 0x7e, 0x1e, 0x67, 0x1e, 0x67, 0x07, 0xe6, 0x03, 0xc6, 0x00, 0x00, // $
0x00, 0x00, 0x06, 0x0e, 0x07, 0x8e, 0x01, 0xe0, 0x00, 0x78, 0x07, 0x1e, 0x07, 0x06, 0x00, 0x00, // %
0x0f, 0x80, 0x1f, 0xe7, 0x18, 0x7f, 0x19, 0xf9, 0x0f, 0x9f, 0x1f, 0x87, 0x19, 0x80, 0x00, 0x00, // &
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // '
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf8, 0x0f, 0xfc, 0x1c, 0x0e, 0x10, 0x02, 0x00, 0x00, // (
0x00, 0x00, 0x10, 0x02, 0x1c, 0x0e, 0x0f, 0xfc, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // )
0x00, 0x60, 0x06, 0x66, 0x07, 0xfe, 0x01, 0xf8, 0x01, 0xf8, 0x07, 0xfe, 0x06, 0x66, 0x00, 0x00, // *
0x00, 0x00, 0x00, 0x60, 0x00, 0x60, 0x03, 0xfc, 0x03, 0xfc, 0x00, 0x60, 0x00, 0x60, 0x00, 0x00, // +
0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x3e, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ,
0x00, 0x00, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x00, // -
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .
0x00, 0x00, 0x1c, 0x00, 0x1f, 0x00, 0x03, 0xc0, 0x00, 0xf0, 0x00, 0x3e, 0x00, 0x0e, 0x00, 0x00, // /
0x00, 0x00, 0x0f, 0xfc, 0x1f, 0xfe, 0x18, 0x86, 0x18, 0x46, 0x1f, 0xfe, 0x0f, 0xfc, 0x00, 0x00, // 0
0x00, 0x00, 0x18, 0x00, 0x18, 0x18, 0x1f, 0xfe, 0x1f, 0xfe, 0x18, 0x00, 0x18, 0x00, 0x00, 0x00, // 1
0x00, 0x00, 0x18, 0x1c, 0x1e, 0x1e, 0x1f, 0x86, 0x19, 0xe6, 0x18, 0x7e, 0x18, 0x1c, 0x00, 0x00, // 2
0x00, 0x00, 0x0e, 0x06, 0x1e, 0x06, 0x18, 0x66, 0x19, 0xfe, 0x1f, 0x9e, 0x0e, 0x06, 0x00, 0x00, // 3
0x00, 0x00, 0x07, 0x80, 0x07, 0xe0, 0x06, 0x78, 0x1f, 0xfe, 0x1f, 0xfe, 0x06, 0x00, 0x00, 0x00, // 4
0x00, 0x00, 0x0c, 0x7e, 0x1c, 0x7e, 0x18, 0x66, 0x18, 0x66, 0x1f, 0xe6, 0x0f, 0xc6, 0x00, 0x00, // 5
0x00, 0x00, 0x0f, 0xf8, 0x1f, 0xfc, 0x18, 0xce, 0x18, 0xc6, 0x1f, 0xc6, 0x0f, 0x80, 0x00, 0x00, // 6
0x00, 0x00, 0x00, 0x06, 0x1e, 0x06, 0x1f, 0x86, 0x01, 0xe6, 0x00, 0x7e, 0x00, 0x1e, 0x00, 0x00, // 7
0x00, 0x00, 0x0f, 0x9c, 0x1f, 0xfe, 0x18, 0x66, 0x18, 0x66, 0x1f, 0xfe, 0x0f, 0x9c, 0x00, 0x00, // 8
0x00, 0x00, 0x00, 0x3c, 0x18, 0x7e, 0x18, 0x66, 0x1c, 0x66, 0x0f, 0xfe, 0x07, 0xfc, 0x00, 0x00, // 9
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x78, 0x1e, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // :
0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x3e, 0x78, 0x1e, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ;
0x00, 0x40, 0x00, 0xe0, 0x01, 0xf0, 0x03, 0xb8, 0x07, 0x1c, 0x06, 0x0c, 0x04, 0x04, 0x00, 0x00, // <
0x00, 0x00, 0x01, 0x98, 0x01, 0x98, 0x01, 0x98, 0x01, 0x98, 0x01, 0x98, 0x01, 0x98, 0x00, 0x00, // =
0x04, 0x04, 0x06, 0x0c, 0x07, 0x1c, 0x03, 0xb8, 0x01, 0xf0, 0x00, 0xe0, 0x00, 0x40, 0x00, 0x00, // >
0x00, 0x00, 0x00, 0x1c, 0x00, 0x1e, 0x1b, 0x86, 0x1b, 0xe6, 0x00, 0x7e, 0x00, 0x1c, 0x00, 0x00, // ?
0x07, 0xf8, 0x0f, 0xfc, 0x1c, 0x0e, 0x19, 0xe6, 0x19, 0x26, 0x19, 0xcc, 0x0c, 0xf8, 0x00, 0x00, // @
0x00, 0x00, 0x1f, 0xf8, 0x1f, 0xfc, 0x01, 0x8e, 0x01, 0x8e, 0x1f, 0xfc, 0x1f, 0xf8, 0x00, 0x00, // A
0x00, 0x00, 0x1f, 0xfe, 0x1f, 0xfe, 0x18, 0x66, 0x18, 0x66, 0x1f, 0xfe, 0x0f, 0xbc, 0x00, 0x00, // B
0x00, 0x00, 0x0f, 0xfc, 0x1f, 0xfe, 0x18, 0x06, 0x18, 0x06, 0x1e, 0x1e, 0x0e, 0x1c, 0x00, 0x00, // C
0x00, 0x00, 0x1f, 0xfe, 0x1f, 0xfe, 0x18, 0x06, 0x1c, 0x0e, 0x0f, 0xfc, 0x07, 0xf8, 0x00, 0x00, // D
0x00, 0x00, 0x1f, 0xfe, 0x1f, 0xfe, 0x18, 0x66, 0x18, 0x66, 0x18, 0x66, 0x18, 0x06, 0x00, 0x00, // E
0x00, 0x00, 0x1f, 0xfe, 0x1f, 0xfe, 0x00, 0x66, 0x00, 0x66, 0x00, 0x66, 0x00, 0x06, 0x00, 0x00, // F
0x00, 0x00, 0x0f, 0xfc, 0x1f, 0xfe, 0x18, 0x06, 0x18, 0x66, 0x1f, 0xe6, 0x0f, 0xe6, 0x00, 0x00, // G
0x00, 0x00, 0x1f, 0xfe, 0x1f, 0xfe, 0x00, 0x60, 0x00, 0x60, 0x1f, 0xfe, 0x1f, 0xfe, 0x00, 0x00, // H
0x00, 0x00, 0x18, 0x06, 0x18, 0x06, 0x1f, 0xfe, 0x1f, 0xfe, 0x18, 0x06, 0x18, 0x06, 0x00, 0x00, // I
0x00, 0x00, 0x0e, 0x00, 0x1e, 0x00, 0x18, 0x00, 0x18, 0x00, 0x1f, 0xfe, 0x0f, 0xfe, 0x00, 0x00, // J
0x1f, 0xfe, 0x1f, 0xfe, 0x00, 0x60, 0x01, 0xf8, 0x07, 0x9e, 0x1e, 0x06, 0x18, 0x00, 0x00, 0x00, // K
0x00, 0x00, 0x1f, 0xfe, 0x1f, 0xfe, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x00, 0x00, // L
0x1f, 0xfe, 0x1f, 0xfe, 0x00, 0x38, 0x00, 0xe0, 0x00, 0x38, 0x1f, 0xfe, 0x1f, 0xfe, 0x00, 0x00, // M
0x00, 0x00, 0x1f, 0xfe, 0x1f, 0xfe, 0x00, 0xf0, 0x03, 0xc0, 0x1f, 0xfe, 0x1f, 0xfe, 0x00, 0x00, // N
0x00, 0x00, 0x0f, 0xfc, 0x1f, 0xfe, 0x18, 0x06, 0x18, 0x06, 0x1f, 0xfe, 0x0f, 0xfc, 0x00, 0x00, // O
0x00, 0x00, 0x1f, 0xfe, 0x1f, 0xfe, 0x01, 0x86, 0x01, 0x86, 0x01, 0xfe, 0x00, 0xfc, 0x00, 0x00, // P
0x00, 0x00, 0x0f, 0xfc, 0x1f, 0xfe, 0x18, 0x06, 0x0c, 0x06, 0x1b, 0xfe, 0x17, 0xfc, 0x00, 0x00, // Q
0x1f, 0xfe, 0x1f, 0xfe, 0x00, 0xc6, 0x01, 0xc6, 0x07, 0xfe, 0x1e, 0x7c, 0x18, 0x00, 0x00, 0x00, // R
0x00, 0x00, 0x18, 0x3c, 0x18, 0x7e, 0x18, 0xe6, 0x19, 0xc6, 0x1f, 0x86, 0x0f, 0x06, 0x00, 0x00, // S
0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x1f, 0xfe, 0x1f, 0xfe, 0x00, 0x06, 0x00, 0x06, 0x00, 0x00, // T
0x00, 0x00, 0x0f, 0xfe, 0x1f, 0xfe, 0x18, 0x00, 0x18, 0x00, 0x1f, 0xfe, 0x0f, 0xfe, 0x00, 0x00, // U
0x00, 0x00, 0x01, 0xfe, 0x07, 0xfe, 0x1e, 0x00, 0x1e, 0x00, 0x07, 0xfe, 0x01, 0xfe, 0x00, 0x00, // V
0x1f, 0xfe, 0x0f, 0xfe, 0x07, 0x00, 0x03, 0xc0, 0x07, 0x00, 0x0f, 0xfe, 0x1f, 0xfe, 0x00, 0x00, // W
0x00, 0x00, 0x1c, 0x0e, 0x1f, 0x3e, 0x03, 0xf0, 0x03, 0xf0, 0x1f, 0x3e, 0x1c, 0x0e, 0x00, 0x00, // X
0x00, 0x00, 0x00, 0x1e, 0x00, 0x7e, 0x1f, 0xe0, 0x1f, 0xe0, 0x00, 0x7e, 0x00, 0x1e, 0x00, 0x00, // Y
0x00, 0x00, 0x1e, 0x06, 0x1f, 0x86, 0x19, 0xe6, 0x18, 0x7e, 0x18, 0x1e, 0x18, 0x06, 0x00, 0x00, // Z
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfe, 0x1f, 0xfe, 0x18, 0x06, 0x18, 0x06, 0x00, 0x00, // [
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ¥
0x00, 0x00, 0x18, 0x06, 0x18, 0x06, 0x1f, 0xfe, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ]
0x00, 0xc0, 0x00, 0xf0, 0x00, 0x3c, 0x00, 0x0f, 0x00, 0x3c, 0x00, 0xf0, 0x00, 0xc0, 0x00, 0x00, // ^
0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x00, 0x00, // _
0x00, 0x00, 0x00, 0x03, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x1c, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, // `
0x00, 0x00, 0x0f, 0x00, 0x1f, 0xb0, 0x19, 0xb0, 0x19, 0xb0, 0x1f, 0xf0, 0x1f, 0xe0, 0x00, 0x00, // a
0x00, 0x00, 0x1f, 0xfe, 0x1f, 0xfe, 0x18, 0x30, 0x18, 0x30, 0x1f, 0xf0, 0x0f, 0xe0, 0x00, 0x00, // b
0x00, 0x00, 0x0f, 0xe0, 0x1f, 0xf0, 0x18, 0x30, 0x18, 0x30, 0x18, 0x30, 0x18, 0x00, 0x00, 0x00, // c
0x00, 0x00, 0x0f, 0xe0, 0x1f, 0xf0, 0x18, 0x30, 0x18, 0x30, 0x1f, 0xfe, 0x1f, 0xfe, 0x00, 0x00, // d
0x00, 0x00, 0x0f, 0xe0, 0x1f, 0xf0, 0x19, 0x30, 0x19, 0x30, 0x19, 0xf0, 0x19, 0xe0, 0x00, 0x00, // e
0x00, 0x00, 0x00, 0x60, 0x00, 0x60, 0x1f, 0xfc, 0x1f, 0xfe, 0x00, 0x66, 0x00, 0x66, 0x00, 0x00, // f
0x00, 0x00, 0x67, 0xe0, 0x6f, 0xf0, 0x6c, 0x30, 0x6c, 0x30, 0x7f, 0xf0, 0x3f, 0xf0, 0x00, 0x00, // g
0x00, 0x00, 0x1f, 0xfe, 0x1f, 0xfe, 0x00, 0x30, 0x00, 0x30, 0x1f, 0xf0, 0x1f, 0xe0, 0x00, 0x00, // h
0x00, 0x00, 0x00, 0x00, 0x18, 0x30, 0x1f, 0xf6, 0x1f, 0xf6, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, // i
0x00, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x7f, 0xf6, 0x3f, 0xf6, 0x00, 0x00, 0x00, 0x00, // j
0x1f, 0xfe, 0x1f, 0xfe, 0x01, 0xc0, 0x03, 0xe0, 0x0f, 0x70, 0x1c, 0x30, 0x18, 0x00, 0x00, 0x00, // k
0x00, 0x00, 0x00, 0x00, 0x18, 0x06, 0x1f, 0xfe, 0x1f, 0xfe, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, // l
0x1f, 0xe0, 0x1f, 0xf0, 0x00, 0x70, 0x03, 0xe0, 0x00, 0x70, 0x1f, 0xf0, 0x1f, 0xe0, 0x00, 0x00, // m
0x00, 0x00, 0x1f, 0xe0, 0x1f, 0xf0, 0x00, 0x30, 0x00, 0x30, 0x1f, 0xf0, 0x1f, 0xe0, 0x00, 0x00, // n
0x00, 0x00, 0x0f, 0xe0, 0x1f, 0xf0, 0x18, 0x30, 0x18, 0x30, 0x1f, 0xf0, 0x0f, 0xe0, 0x00, 0x00, // o
0x00, 0x00, 0x7f, 0xf0, 0x7f, 0xf0, 0x18, 0x30, 0x18, 0x30, 0x1f, 0xf0, 0x0f, 0xe0, 0x00, 0x00, // p
0x00, 0x00, 0x0f, 0xe0, 0x1f, 0xf0, 0x18, 0x30, 0x18, 0x30, 0x7f, 0xf0, 0x7f, 0xf0, 0x00, 0x00, // q
0x00, 0x00, 0x1f, 0xf0, 0x1f, 0xf0, 0x00, 0x30, 0x00, 0x30, 0x00, 0x70, 0x00, 0x60, 0x00, 0x00, // r
0x00, 0x00, 0x18, 0xe0, 0x19, 0xf0, 0x19, 0xb0, 0x1b, 0x30, 0x1f, 0x30, 0x0e, 0x30, 0x00, 0x00, // s
0x00, 0x00, 0x00, 0x30, 0x00, 0x30, 0x0f, 0xfc, 0x1f, 0xfc, 0x18, 0x30, 0x18, 0x30, 0x00, 0x00, // t
0x00, 0x00, 0x0f, 0xf0, 0x1f, 0xf0, 0x18, 0x00, 0x18, 0x00, 0x1f, 0xf0, 0x1f, 0xf0, 0x00, 0x00, // u
0x00, 0x00, 0x01, 0xf0, 0x07, 0xf0, 0x1e, 0x00, 0x1e, 0x00, 0x07, 0xf0, 0x01, 0xf0, 0x00, 0x00, // v
0x1f, 0xf0, 0x0f, 0xf0, 0x07, 0x00, 0x03, 0xc0, 0x07, 0x00, 0x0f, 0xf0, 0x1f, 0xf0, 0x00, 0x00, // w
0x00, 0x00, 0x18, 0x30, 0x1e, 0xf0, 0x07, 0xc0, 0x07, 0xc0, 0x1e, 0xf0, 0x18, 0x30, 0x00, 0x00, // x
0x00, 0x00, 0x67, 0xf0, 0x6f, 0xf0, 0x6c, 0x00, 0x6c, 0x00, 0x7f, 0xf0, 0x3f, 0xf0, 0x00, 0x00, // y
0x00, 0x00, 0x18, 0x30, 0x1e, 0x30, 0x1f, 0xb0, 0x19, 0xf0, 0x18, 0x70, 0x18, 0x30, 0x00, 0x00, // z
0x00, 0xc0, 0x00, 0xc0, 0x01, 0xe0, 0x1f, 0xfe, 0x3f, 0x3f, 0x20, 0x01, 0x20, 0x01, 0x00, 0x00, // {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // |
0x20, 0x01, 0x20, 0x01, 0x3f, 0x3f, 0x1f, 0xfe, 0x01, 0xe0, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0x00, // , _
0x00, 0xe0, 0x00, 0x30, 0x00, 0x70, 0x00, 0xe0, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0x70, 0x00, 0x00, // ~
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  // °
};

const byte FontDigital12x22Array[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #32
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFC, 0xC0, 0x0F, 0xFC, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #33
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #34
0x00, 0x00, 0x00, 0x00, 0xC6, 0x00, 0x00, 0xC6, 0x00, 0x07, 0xFF, 0x80, 0x07, 0xFF, 0x80, 0x01, 0x8C, 0x00, 0x01, 0x8C, 0x00, 0x0F, 0xFF, 0x00, 0x0F, 0xFF, 0x00, 0x03, 0x18, 0x00, 0x03, 0x18, 0x00, 0x00, 0x00, 0x00, // #35
0x00, 0x00, 0x00, 0x01, 0xC6, 0x00, 0x03, 0xE7, 0x00, 0x07, 0x73, 0x80, 0x06, 0x31, 0x80, 0x0F, 0xFF, 0xC0, 0x0F, 0xFF, 0xC0, 0x06, 0x31, 0x80, 0x07, 0x3B, 0x80, 0x03, 0x9F, 0x00, 0x01, 0x8E, 0x00, 0x00, 0x00, 0x00, // #36
0x00, 0x00, 0x00, 0x07, 0x83, 0xC0, 0x0F, 0xC7, 0xC0, 0x0C, 0xCE, 0x00, 0x0F, 0xDC, 0x00, 0x07, 0xB8, 0x00, 0x00, 0x77, 0x80, 0x00, 0xEF, 0xC0, 0x01, 0xCC, 0xC0, 0x0F, 0x8F, 0xC0, 0x0F, 0x07, 0x80, 0x00, 0x00, 0x00, // #37
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #38
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #39
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFE, 0x00, 0x0F, 0xFF, 0x00, 0x18, 0x01, 0x80, 0x30, 0x00, 0xC0, 0x20, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #40
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x40, 0x30, 0x00, 0xC0, 0x18, 0x01, 0x80, 0x0F, 0xFF, 0x00, 0x07, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #41
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x60, 0x00, 0x0C, 0x60, 0x00, 0x03, 0x80, 0x00, 0x1F, 0xF0, 0x00, 0x1F, 0xF0, 0x00, 0x03, 0x80, 0x00, 0x0C, 0x60, 0x00, 0x0C, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #42
0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x03, 0xFF, 0x00, 0x03, 0xFF, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, // #43
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0xC0, 0x00, 0x03, 0x80, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #44
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #45
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #46
0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x07, 0xC0, 0x00, 0x0E, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x38, 0x00, 0x00, 0x70, 0x00, 0x00, 0xE0, 0x00, 0x01, 0xC0, 0x00, 0x0F, 0x80, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, // #47
0x00, 0x00, 0x00, 0x03, 0xFF, 0x00, 0x07, 0xFF, 0x80, 0x0C, 0x1D, 0xC0, 0x0C, 0x3C, 0xC0, 0x0C, 0x78, 0xC0, 0x0C, 0xF0, 0xC0, 0x0D, 0xE0, 0xC0, 0x0D, 0xC1, 0xC0, 0x07, 0xFF, 0x80, 0x03, 0xFF, 0x00, 0x00, 0x00, 0x00, // #48
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0xC0, 0x07, 0x00, 0xC0, 0x0F, 0xFF, 0xC0, 0x0F, 0xFF, 0xC0, 0x00, 0x00, 0xC0, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #49
0x00, 0x00, 0x00, 0x03, 0x0F, 0xC0, 0x07, 0x1F, 0xC0, 0x0C, 0x38, 0xC0, 0x0C, 0x30, 0xC0, 0x0C, 0x30, 0xC0, 0x0C, 0x30, 0xC0, 0x0C, 0x30, 0xC0, 0x0C, 0x70, 0xC0, 0x07, 0xE0, 0xC0, 0x03, 0xC0, 0xC0, 0x00, 0x00, 0x00, // #50
0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x07, 0x03, 0x80, 0x0C, 0x01, 0xC0, 0x0C, 0x00, 0xC0, 0x0C, 0x30, 0xC0, 0x0C, 0x30, 0xC0, 0x0C, 0x30, 0xC0, 0x0C, 0x79, 0xC0, 0x07, 0xFF, 0x80, 0x03, 0xCF, 0x00, 0x00, 0x00, 0x00, // #51
0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x7C, 0x00, 0x00, 0xEC, 0x00, 0x01, 0xCC, 0x00, 0x03, 0x8C, 0x00, 0x07, 0x0C, 0x00, 0x0F, 0xFF, 0xC0, 0x0F, 0xFF, 0xC0, 0x00, 0x0C, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, // #52
0x00, 0x00, 0x00, 0x0F, 0xC3, 0x00, 0x0F, 0xC3, 0x80, 0x0C, 0xC1, 0xC0, 0x0C, 0xC0, 0xC0, 0x0C, 0xC0, 0xC0, 0x0C, 0xC0, 0xC0, 0x0C, 0xC0, 0xC0, 0x0C, 0xE1, 0xC0, 0x0C, 0x7F, 0x80, 0x0C, 0x3F, 0x00, 0x00, 0x00, 0x00, // #53
0x00, 0x00, 0x00, 0x03, 0xFF, 0x00, 0x07, 0xFF, 0x80, 0x0C, 0x31, 0xC0, 0x0C, 0x30, 0xC0, 0x0C, 0x30, 0xC0, 0x0C, 0x30, 0xC0, 0x0C, 0x30, 0xC0, 0x0C, 0x39, 0xC0, 0x07, 0x1F, 0x80, 0x03, 0x0F, 0x00, 0x00, 0x00, 0x00, // #54
0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x0C, 0x1F, 0xC0, 0x0C, 0x3F, 0xC0, 0x0C, 0x70, 0x00, 0x0C, 0xE0, 0x00, 0x0F, 0xC0, 0x00, 0x0F, 0x80, 0x00, 0x00, 0x00, 0x00, // #55
0x00, 0x00, 0x00, 0x03, 0xCF, 0x00, 0x07, 0xFF, 0x80, 0x0C, 0x79, 0xC0, 0x0C, 0x30, 0xC0, 0x0C, 0x30, 0xC0, 0x0C, 0x30, 0xC0, 0x0C, 0x30, 0xC0, 0x0C, 0x79, 0xC0, 0x07, 0xFF, 0x80, 0x03, 0xCF, 0x00, 0x00, 0x00, 0x00, // #56
0x00, 0x00, 0x00, 0x03, 0xC3, 0x00, 0x07, 0xE3, 0x80, 0x0C, 0x71, 0xC0, 0x0C, 0x30, 0xC0, 0x0C, 0x30, 0xC0, 0x0C, 0x30, 0xC0, 0x0C, 0x30, 0xC0, 0x0C, 0x31, 0xC0, 0x07, 0xFF, 0x80, 0x03, 0xFF, 0x00, 0x00, 0x00, 0x00, // #57
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #58
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0xC0, 0x03, 0x03, 0x80, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #59
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0xF8, 0x00, 0x01, 0xDC, 0x00, 0x03, 0x8E, 0x00, 0x07, 0x07, 0x80, 0x0E, 0x03, 0x80, 0x1C, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #60
0x00, 0x00, 0x00, 0x00, 0xCC, 0x00, 0x00, 0xCC, 0x00, 0x00, 0xCC, 0x00, 0x00, 0xCC, 0x00, 0x00, 0xCC, 0x00, 0x00, 0xCC, 0x00, 0x00, 0xCC, 0x00, 0x00, 0xCC, 0x00, 0x00, 0xCC, 0x00, 0x00, 0xCC, 0x00, 0x00, 0x00, 0x00, // #61
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0xC0, 0x1C, 0x01, 0xC0, 0x0E, 0x03, 0x80, 0x07, 0x07, 0x00, 0x01, 0xDC, 0x00, 0x01, 0xDC, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #62
0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x0C, 0x18, 0xC0, 0x0C, 0x38, 0xC0, 0x0C, 0x70, 0x00, 0x0C, 0xE0, 0x00, 0x07, 0xC0, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, // #63
0x00, 0x00, 0x00, 0x03, 0xF8, 0x00, 0x03, 0xF8, 0x00, 0x0C, 0xF7, 0x80, 0x0C, 0xF7, 0x80, 0x0C, 0x8D, 0x80, 0x0C, 0x8D, 0x80, 0x0C, 0xFD, 0x80, 0x0C, 0xF1, 0x80, 0x03, 0x1E, 0x00, 0x03, 0xFE, 0x00, 0x00, 0x00, 0x00, // #64
0x00, 0x00, 0x00, 0x00, 0xFF, 0xC0, 0x03, 0xFF, 0xC0, 0x03, 0x8C, 0x00, 0x07, 0x0C, 0x00, 0x0C, 0x0C, 0x00, 0x0C, 0x0C, 0x00, 0x07, 0x0C, 0x00, 0x03, 0x8C, 0x00, 0x03, 0xFF, 0xC0, 0x00, 0xFF, 0xC0, 0x00, 0x00, 0x00, // #65
0x00, 0x00, 0x00, 0x0F, 0xFF, 0xC0, 0x0F, 0xFF, 0xC0, 0x0C, 0x30, 0xC0, 0x0C, 0x30, 0xC0, 0x0C, 0x30, 0xC0, 0x0C, 0x30, 0xC0, 0x0C, 0x30, 0xC0, 0x0E, 0x79, 0xC0, 0x07, 0xFF, 0x80, 0x03, 0xCF, 0x00, 0x00, 0x00, 0x00, // #66
0x00, 0x00, 0x00, 0x03, 0xFF, 0x00, 0x07, 0xFF, 0x80, 0x0C, 0x01, 0xC0, 0x0C, 0x00, 0xC0, 0x0C, 0x00, 0xC0, 0x0C, 0x00, 0xC0, 0x0C, 0x00, 0xC0, 0x0C, 0x01, 0xC0, 0x07, 0x03, 0x80, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, // #67
0x00, 0x00, 0x00, 0x0F, 0xFF, 0xC0, 0x0F, 0xFF, 0xC0, 0x0C, 0x00, 0xC0, 0x0C, 0x00, 0xC0, 0x0C, 0x00, 0xC0, 0x0C, 0x00, 0xC0, 0x0C, 0x00, 0xC0, 0x0E, 0x01, 0xC0, 0x07, 0xFF, 0x80, 0x03, 0xFF, 0x00, 0x00, 0x00, 0x00, // #68
0x00, 0x00, 0x00, 0x0F, 0xFF, 0xC0, 0x0F, 0xFF, 0xC0, 0x0C, 0x30, 0xC0, 0x0C, 0x30, 0xC0, 0x0C, 0x30, 0xC0, 0x0C, 0x30, 0xC0, 0x0C, 0x30, 0xC0, 0x0C, 0x30, 0xC0, 0x0C, 0x00, 0xC0, 0x0C, 0x00, 0xC0, 0x00, 0x00, 0x00, // #69
0x00, 0x00, 0x00, 0x0F, 0xFF, 0xC0, 0x0F, 0xFF, 0xC0, 0x0C, 0x30, 0x00, 0x0C, 0x30, 0x00, 0x0C, 0x30, 0x00, 0x0C, 0x30, 0x00, 0x0C, 0x30, 0x00, 0x0C, 0x30, 0x00, 0x0C, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, // #70
0x00, 0x00, 0x00, 0x03, 0xFF, 0x00, 0x07, 0xFF, 0x80, 0x0C, 0x01, 0xC0, 0x0C, 0x00, 0xC0, 0x0C, 0x00, 0xC0, 0x0C, 0x30, 0xC0, 0x0C, 0x30, 0xC0, 0x0C, 0x31, 0xC0, 0x07, 0x3F, 0x80, 0x03, 0x3F, 0x00, 0x00, 0x00, 0x00, // #71
0x00, 0x00, 0x00, 0x0F, 0xFF, 0xC0, 0x0F, 0xFF, 0xC0, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x0F, 0xFF, 0xC0, 0x0F, 0xFF, 0xC0, 0x00, 0x00, 0x00, // #72
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0xC0, 0x0C, 0x00, 0xC0, 0x0F, 0xFF, 0xC0, 0x0F, 0xFF, 0xC0, 0x0C, 0x00, 0xC0, 0x0C, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #73
0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03, 0x80, 0x00, 0x01, 0xC0, 0x00, 0x00, 0xC0, 0x0C, 0x00, 0xC0, 0x0C, 0x01, 0xC0, 0x0F, 0xFF, 0x80, 0x0F, 0xFF, 0x00, 0x0C, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, // #74
0x00, 0x00, 0x00, 0x0F, 0xFF, 0xC0, 0x0F, 0xFF, 0xC0, 0x00, 0x30, 0x00, 0x00, 0x78, 0x00, 0x01, 0xCE, 0x00, 0x03, 0x87, 0x00, 0x03, 0x87, 0x00, 0x0F, 0x03, 0xC0, 0x0C, 0x00, 0xC0, 0x04, 0x00, 0x80, 0x00, 0x00, 0x00, // #75
0x00, 0x00, 0x00, 0x0F, 0xFF, 0xC0, 0x0F, 0xFF, 0xC0, 0x00, 0x00, 0xC0, 0x00, 0x00, 0xC0, 0x00, 0x00, 0xC0, 0x00, 0x00, 0xC0, 0x00, 0x00, 0xC0, 0x00, 0x00, 0xC0, 0x00, 0x00, 0xC0, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, // #76
0x00, 0x00, 0x00, 0x0F, 0xFF, 0xC0, 0x0F, 0xFF, 0xC0, 0x03, 0x80, 0x00, 0x01, 0xC0, 0x00, 0x00, 0xF0, 0x00, 0x00, 0xF0, 0x00, 0x01, 0xC0, 0x00, 0x03, 0x80, 0x00, 0x0F, 0xFF, 0xC0, 0x0F, 0xFF, 0xC0, 0x00, 0x00, 0x00, // #77
0x00, 0x00, 0x00, 0x0F, 0xFF, 0xC0, 0x0F, 0xFF, 0xC0, 0x01, 0xC0, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x70, 0x00, 0x00, 0x38, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x0E, 0x00, 0x0F, 0xFF, 0xC0, 0x0F, 0xFF, 0xC0, 0x00, 0x00, 0x00, // #78
0x00, 0x00, 0x00, 0x03, 0xFF, 0x00, 0x07, 0xFF, 0x80, 0x0C, 0x01, 0xC0, 0x0C, 0x00, 0xC0, 0x0C, 0x00, 0xC0, 0x0C, 0x00, 0xC0, 0x0C, 0x00, 0xC0, 0x0C, 0x01, 0xC0, 0x07, 0xFF, 0x80, 0x03, 0xFF, 0x00, 0x00, 0x00, 0x00, // #79
0x00, 0x00, 0x00, 0x0F, 0xFF, 0xC0, 0x0F, 0xFF, 0xC0, 0x0C, 0x30, 0x00, 0x0C, 0x30, 0x00, 0x0C, 0x30, 0x00, 0x0C, 0x30, 0x00, 0x0C, 0x30, 0x00, 0x0E, 0x70, 0x00, 0x07, 0xE0, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, // #80
0x00, 0x00, 0x00, 0x03, 0xFF, 0x00, 0x07, 0xFF, 0x80, 0x0C, 0x01, 0xC0, 0x0C, 0x00, 0xC0, 0x0C, 0x04, 0xC0, 0x0C, 0x06, 0xC0, 0x0C, 0x03, 0x80, 0x0C, 0x01, 0x80, 0x07, 0xFF, 0xC0, 0x03, 0xFE, 0xC0, 0x00, 0x00, 0x00, // #81
0x00, 0x00, 0x00, 0x0F, 0xFF, 0xC0, 0x0F, 0xFF, 0xC0, 0x0C, 0x30, 0x00, 0x0C, 0x38, 0x00, 0x0C, 0x3C, 0x00, 0x0C, 0x3E, 0x00, 0x0C, 0x37, 0x00, 0x0E, 0x73, 0x80, 0x07, 0xE1, 0xC0, 0x03, 0xC0, 0xC0, 0x00, 0x00, 0x00, // #82
0x00, 0x00, 0x00, 0x03, 0xC3, 0x00, 0x07, 0xE3, 0x80, 0x0C, 0x71, 0xC0, 0x0C, 0x30, 0xC0, 0x0C, 0x30, 0xC0, 0x0C, 0x30, 0xC0, 0x0C, 0x30, 0xC0, 0x0C, 0x39, 0xC0, 0x07, 0x1F, 0x80, 0x03, 0x0F, 0x00, 0x00, 0x00, 0x00, // #83
0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x0F, 0xFF, 0xC0, 0x0F, 0xFF, 0xC0, 0x0C, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, // #84
0x00, 0x00, 0x00, 0x0F, 0xFF, 0x00, 0x0F, 0xFF, 0x80, 0x00, 0x01, 0xC0, 0x00, 0x00, 0xC0, 0x00, 0x00, 0xC0, 0x00, 0x00, 0xC0, 0x00, 0x00, 0xC0, 0x00, 0x01, 0xC0, 0x0F, 0xFF, 0x80, 0x0F, 0xFF, 0x00, 0x00, 0x00, 0x00, // #85
0x00, 0x00, 0x00, 0x0F, 0xFC, 0x00, 0x0F, 0xFE, 0x00, 0x00, 0x07, 0x00, 0x00, 0x03, 0x80, 0x00, 0x01, 0xC0, 0x00, 0x01, 0xC0, 0x00, 0x03, 0x80, 0x00, 0x07, 0x00, 0x0F, 0xFE, 0x00, 0x0F, 0xFC, 0x00, 0x00, 0x00, 0x00, // #86
0x00, 0x00, 0x00, 0x0F, 0xFF, 0x00, 0x0F, 0xFF, 0x80, 0x00, 0x01, 0xC0, 0x00, 0x01, 0xC0, 0x00, 0x3F, 0x80, 0x00, 0x3F, 0x80, 0x00, 0x01, 0xC0, 0x00, 0x01, 0xC0, 0x0F, 0xFF, 0x80, 0x0F, 0xFF, 0x00, 0x00, 0x00, 0x00, // #87
0x00, 0x00, 0x00, 0x0F, 0x03, 0xC0, 0x0F, 0x87, 0xC0, 0x01, 0xC6, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x78, 0x00, 0x00, 0x78, 0x00, 0x00, 0xFC, 0x00, 0x01, 0xC6, 0x00, 0x0F, 0x87, 0xC0, 0x0F, 0x03, 0xC0, 0x00, 0x00, 0x00, // #88
0x00, 0x00, 0x00, 0x0F, 0xC0, 0x00, 0x0F, 0xE0, 0x00, 0x00, 0x70, 0x00, 0x00, 0x38, 0x00, 0x00, 0x1F, 0xC0, 0x00, 0x1F, 0xC0, 0x00, 0x38, 0x00, 0x00, 0x70, 0x00, 0x0F, 0xE0, 0x00, 0x0F, 0xC0, 0x00, 0x00, 0x00, 0x00, // #89
0x00, 0x00, 0x00, 0x0C, 0x03, 0xC0, 0x0C, 0x07, 0xC0, 0x0C, 0x0E, 0xC0, 0x0C, 0x1C, 0xC0, 0x0C, 0x38, 0xC0, 0x0C, 0x70, 0xC0, 0x0C, 0xE0, 0xC0, 0x0D, 0xC0, 0xC0, 0x0F, 0x80, 0xC0, 0x0F, 0x00, 0xC0, 0x00, 0x00, 0x00, // #90
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xC0, 0x3F, 0xFF, 0xC0, 0x30, 0x00, 0xC0, 0x30, 0x00, 0xC0, 0x30, 0x00, 0xC0, 0x30, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #91
0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x0F, 0x80, 0x00, 0x01, 0xC0, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x70, 0x00, 0x00, 0x38, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x07, 0xC0, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, // #92
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0xC0, 0x30, 0x00, 0xC0, 0x30, 0x00, 0xC0, 0x30, 0x00, 0xC0, 0x3F, 0xFF, 0xC0, 0x3F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #93
0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x03, 0x80, 0x00, 0x03, 0x80, 0x00, 0x0E, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x03, 0x80, 0x00, 0x03, 0x80, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, // #94
0x00, 0x00, 0x60, 0x00, 0x00, 0x60, 0x00, 0x00, 0x60, 0x00, 0x00, 0x60, 0x00, 0x00, 0x60, 0x00, 0x00, 0x60, 0x00, 0x00, 0x60, 0x00, 0x00, 0x60, 0x00, 0x00, 0x60, 0x00, 0x00, 0x60, 0x00, 0x00, 0x60, 0x00, 0x00, 0x60, // #95
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x06, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #96
0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x1F, 0x80, 0x03, 0x39, 0xC0, 0x03, 0x30, 0xC0, 0x03, 0x30, 0xC0, 0x03, 0x30, 0xC0, 0x03, 0x30, 0xC0, 0x03, 0x99, 0x80, 0x01, 0xFF, 0xC0, 0x00, 0xFF, 0xC0, 0x00, 0x00, 0x00, // #97
0x00, 0x00, 0x00, 0x0F, 0xFF, 0xC0, 0x0F, 0xFF, 0xC0, 0x00, 0x7F, 0x00, 0x00, 0xE3, 0x80, 0x01, 0xC1, 0xC0, 0x01, 0x80, 0xC0, 0x01, 0xC1, 0xC0, 0x00, 0xE3, 0x80, 0x00, 0x7F, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, // #98
0x00, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0xFF, 0x80, 0x01, 0xC1, 0xC0, 0x01, 0x80, 0xC0, 0x01, 0x80, 0xC0, 0x01, 0x80, 0xC0, 0x01, 0x80, 0xC0, 0x01, 0xC1, 0xC0, 0x00, 0xE3, 0x80, 0x00, 0x63, 0x00, 0x00, 0x00, 0x00, // #99
0x00, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x7F, 0x00, 0x00, 0xE3, 0x80, 0x01, 0xC1, 0xC0, 0x01, 0xC1, 0xC0, 0x00, 0xE3, 0x80, 0x00, 0xE3, 0x80, 0x0F, 0xFF, 0xC0, 0x0F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #100
0x00, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0xFF, 0x80, 0x01, 0xD9, 0xC0, 0x01, 0x98, 0xC0, 0x01, 0x98, 0xC0, 0x01, 0x98, 0xC0, 0x01, 0x98, 0xC0, 0x01, 0xD9, 0xC0, 0x00, 0xF9, 0x80, 0x00, 0x71, 0x00, 0x00, 0x00, 0x00, // #101
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x01, 0x80, 0x00, 0x01, 0x80, 0x00, 0x07, 0xFF, 0xC0, 0x0F, 0xFF, 0xC0, 0x0D, 0x80, 0x00, 0x0D, 0x80, 0x00, 0x0D, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #102
0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x01, 0xF1, 0x80, 0x03, 0xB9, 0xC0, 0x03, 0x18, 0xC0, 0x03, 0x18, 0xC0, 0x03, 0x18, 0xC0, 0x03, 0x18, 0xC0, 0x03, 0xB1, 0xC0, 0x01, 0xFF, 0x80, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, // #103
0x00, 0x00, 0x00, 0x0F, 0xFF, 0xC0, 0x0F, 0xFF, 0xC0, 0x00, 0x70, 0x00, 0x00, 0xE0, 0x00, 0x01, 0xC0, 0x00, 0x01, 0x80, 0x00, 0x01, 0xC0, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x7F, 0xC0, 0x00, 0x3F, 0xC0, 0x00, 0x00, 0x00, // #104
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x60, 0x00, 0x06, 0x7F, 0x00, 0x06, 0x7F, 0x80, 0x00, 0x01, 0xC0, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #105
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0xC0, 0x01, 0x80, 0xC0, 0x01, 0x81, 0xC0, 0x19, 0xFF, 0x80, 0x19, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #106
0x00, 0x00, 0x00, 0x0F, 0xFF, 0xC0, 0x0F, 0xFF, 0xC0, 0x00, 0x07, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x77, 0x00, 0x00, 0xE3, 0x80, 0x01, 0xC1, 0xC0, 0x01, 0x80, 0xC0, 0x00, 0x00, 0x00, // #107
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xC0, 0x0F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #108
0x00, 0x00, 0x00, 0x01, 0xFF, 0xC0, 0x01, 0xFF, 0xC0, 0x00, 0xC0, 0x00, 0x01, 0x80, 0x00, 0x01, 0xFF, 0xC0, 0x01, 0xFF, 0xC0, 0x01, 0x80, 0x00, 0x01, 0xC0, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x7F, 0xC0, 0x00, 0x00, 0x00, // #109
0x00, 0x00, 0x00, 0x01, 0xFF, 0xC0, 0x01, 0xFF, 0xC0, 0x00, 0xC0, 0x00, 0x01, 0x80, 0x00, 0x01, 0x80, 0x00, 0x01, 0x80, 0x00, 0x01, 0x80, 0x00, 0x01, 0xC0, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x7F, 0xC0, 0x00, 0x00, 0x00, // #110
0x00, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0xFF, 0x80, 0x01, 0xC1, 0xC0, 0x01, 0x80, 0xC0, 0x01, 0x80, 0xC0, 0x01, 0x80, 0xC0, 0x01, 0x80, 0xC0, 0x01, 0xC1, 0xC0, 0x00, 0xFF, 0x80, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, // #111
0x00, 0x00, 0x00, 0x03, 0xFF, 0xC0, 0x03, 0xFF, 0xC0, 0x01, 0xFC, 0x00, 0x03, 0x86, 0x00, 0x03, 0x06, 0x00, 0x03, 0x06, 0x00, 0x03, 0x06, 0x00, 0x03, 0x86, 0x00, 0x01, 0xFC, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, // #112
0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x01, 0xFC, 0x00, 0x03, 0x8E, 0x00, 0x03, 0x06, 0x00, 0x03, 0x06, 0x00, 0x03, 0x06, 0x00, 0x03, 0x8C, 0x00, 0x01, 0xFE, 0x00, 0x03, 0xFF, 0xC0, 0x03, 0xFF, 0xC0, 0x00, 0x00, 0x00, // #113
0x00, 0x00, 0x00, 0x01, 0xFF, 0xC0, 0x01, 0xFF, 0xC0, 0x00, 0x70, 0x00, 0x00, 0xE0, 0x00, 0x01, 0xC0, 0x00, 0x01, 0x80, 0x00, 0x01, 0x80, 0x00, 0x01, 0xC0, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, // #114
0x00, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0xF3, 0x80, 0x01, 0xF1, 0xC0, 0x01, 0x98, 0xC0, 0x01, 0x98, 0xC0, 0x01, 0x9C, 0xC0, 0x01, 0x8C, 0xC0, 0x01, 0xCF, 0xC0, 0x00, 0xE7, 0x80, 0x00, 0x63, 0x00, 0x00, 0x00, 0x00, // #115
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x01, 0x80, 0x00, 0x0F, 0xFF, 0x00, 0x0F, 0xFF, 0x80, 0x01, 0x81, 0xC0, 0x01, 0x80, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #116
0x00, 0x00, 0x00, 0x01, 0xFF, 0x00, 0x01, 0xFF, 0x80, 0x00, 0x01, 0xC0, 0x00, 0x00, 0xC0, 0x00, 0x00, 0xC0, 0x00, 0x00, 0xC0, 0x00, 0x00, 0xC0, 0x00, 0x01, 0xC0, 0x01, 0xFF, 0x80, 0x01, 0xFF, 0x00, 0x00, 0x00, 0x00, // #117
0x00, 0x00, 0x00, 0x01, 0xFC, 0x00, 0x01, 0xFE, 0x00, 0x00, 0x07, 0x00, 0x00, 0x03, 0x80, 0x00, 0x01, 0xC0, 0x00, 0x01, 0xC0, 0x00, 0x03, 0x80, 0x00, 0x07, 0x00, 0x01, 0xFE, 0x00, 0x01, 0xFC, 0x00, 0x00, 0x00, 0x00, // #118
0x00, 0x00, 0x00, 0x01, 0xFF, 0x00, 0x01, 0xFF, 0x80, 0x00, 0x01, 0xC0, 0x00, 0x00, 0xC0, 0x00, 0x1F, 0x80, 0x00, 0x1F, 0x80, 0x00, 0x00, 0xC0, 0x00, 0x01, 0xC0, 0x01, 0xFF, 0x80, 0x01, 0xFF, 0x00, 0x00, 0x00, 0x00, // #119
0x00, 0x00, 0x00, 0x01, 0x80, 0xC0, 0x01, 0xC1, 0xC0, 0x00, 0xE3, 0x80, 0x00, 0x77, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x77, 0x00, 0x00, 0xE3, 0x80, 0x01, 0xC1, 0xC0, 0x01, 0x80, 0xC0, 0x00, 0x00, 0x00, // #120
0x00, 0x00, 0x00, 0x03, 0xF0, 0x00, 0x03, 0xF8, 0x00, 0x00, 0x1C, 0xC0, 0x00, 0x0C, 0xC0, 0x00, 0x0C, 0xC0, 0x00, 0x1C, 0xC0, 0x00, 0x38, 0xC0, 0x00, 0xF1, 0xC0, 0x03, 0xFF, 0x80, 0x03, 0xFF, 0x00, 0x00, 0x00, 0x00, // #121
0x00, 0x00, 0x00, 0x01, 0x80, 0xC0, 0x01, 0x81, 0xC0, 0x01, 0x83, 0xC0, 0x01, 0x87, 0xC0, 0x01, 0x8E, 0xC0, 0x01, 0x9C, 0xC0, 0x01, 0xB8, 0xC0, 0x01, 0xF0, 0xC0, 0x01, 0xE0, 0xC0, 0x01, 0xC0, 0xC0, 0x00, 0x00, 0x00, // #122
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x60, 0x00, 0x0F, 0xFF, 0x00, 0x3F, 0x9F, 0xC0, 0x38, 0x01, 0xC0, 0x38, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #123
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xC0, 0x3F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #124
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x01, 0xC0, 0x38, 0x01, 0xC0, 0x3F, 0x9F, 0xC0, 0x0F, 0xFF, 0x00, 0x00, 0x60, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #125
0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x30, 0x00, 0x00, 0x60, 0x00, 0x00, 0x60, 0x00, 0x00, 0x70, 0x00, 0x00, 0x38, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x30, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00 // #126
};

const byte FontDigital16x16Array[] = { 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #32
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xE6, 0x7F, 0xE6, 0x7F, 0xE6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #33
0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x78, 0x00, 0x78, 0x00, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x78, 0x00, 0x78, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #34
0x00, 0x00, 0x06, 0x30, 0x06, 0x30, 0x3F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFC, 0x0C, 0x60, 0x7F, 0xF8, 0x7F, 0xF8, 0x7F, 0xF8, 0x18, 0xC0, 0x18, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #35
0x00, 0x00, 0x0E, 0x30, 0x1F, 0x38, 0x3F, 0xBC, 0x3B, 0x9C, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x39, 0xDC, 0x3D, 0xFC, 0x1C, 0xF8, 0x0C, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #36
0x00, 0x00, 0x3C, 0x1E, 0x7E, 0x3E, 0x7E, 0x7E, 0x7E, 0xF0, 0x7F, 0xE0, 0x3F, 0xFC, 0x07, 0xFE, 0x0F, 0x7E, 0x7E, 0x7E, 0x7C, 0x7E, 0x78, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #37
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #38
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x78, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #39
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xF0, 0x7F, 0xF8, 0xFF, 0xFC, 0xC0, 0x0E, 0x80, 0x06, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #40
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x80, 0x06, 0xC0, 0x0E, 0xFF, 0xFC, 0x7F, 0xF8, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #41
0x00, 0x00, 0x00, 0x00, 0x63, 0x00, 0x63, 0x00, 0x7F, 0x00, 0xFF, 0x80, 0xFF, 0x80, 0xFF, 0x80, 0x7F, 0x00, 0x63, 0x00, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #42
0x00, 0x00, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x1F, 0xF8, 0x1F, 0xF8, 0x1F, 0xF8, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #43
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x06, 0x00, 0x1E, 0x00, 0x1C, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #44
0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #45
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #46
0x00, 0x00, 0x00, 0x1E, 0x00, 0x3E, 0x00, 0x7E, 0x00, 0xF0, 0x01, 0xE0, 0x03, 0xC0, 0x07, 0x80, 0x0F, 0x00, 0x7E, 0x00, 0x7C, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #47
0x00, 0x00, 0x1F, 0xF8, 0x3F, 0xFC, 0x7F, 0xFE, 0x61, 0xEE, 0x63, 0xE6, 0x67, 0xC6, 0x6F, 0x86, 0x6F, 0x0E, 0x7F, 0xFE, 0x3F, 0xFC, 0x1F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #48
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x06, 0x38, 0x06, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x00, 0x06, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #49
0x00, 0x00, 0x18, 0x7E, 0x38, 0xFE, 0x79, 0xFE, 0x61, 0xC6, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x63, 0x86, 0x7F, 0x86, 0x3F, 0x06, 0x1E, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #50
0x00, 0x00, 0x18, 0x18, 0x38, 0x1C, 0x78, 0x1E, 0x60, 0x0E, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x63, 0xCE, 0x7F, 0xFE, 0x3F, 0xFC, 0x1E, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #51
0x00, 0x00, 0x01, 0xE0, 0x03, 0xE0, 0x07, 0xE0, 0x0F, 0x60, 0x1E, 0x60, 0x3C, 0x60, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x00, 0x60, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #52
0x00, 0x00, 0x7E, 0x18, 0x7E, 0x1C, 0x7E, 0x1E, 0x66, 0x0E, 0x66, 0x06, 0x66, 0x06, 0x66, 0x06, 0x67, 0x0E, 0x67, 0xFE, 0x63, 0xFC, 0x61, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #53
0x00, 0x00, 0x1F, 0xF8, 0x3F, 0xFC, 0x7F, 0xFE, 0x61, 0x8E, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0xCE, 0x79, 0xFE, 0x38, 0xFC, 0x18, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #54
0x00, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0xFE, 0x61, 0xFE, 0x63, 0xFE, 0x67, 0x80, 0x7F, 0x00, 0x7E, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #55
0x00, 0x00, 0x1E, 0x78, 0x3F, 0xFC, 0x7F, 0xFE, 0x63, 0xCE, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x63, 0xCE, 0x7F, 0xFE, 0x3F, 0xFC, 0x1E, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #56
0x00, 0x00, 0x1E, 0x18, 0x3F, 0x1C, 0x7F, 0x9E, 0x63, 0x8E, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x8E, 0x7F, 0xFE, 0x3F, 0xFC, 0x1F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #57
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #58
0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x06, 0x18, 0x1E, 0x18, 0x1C, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #59
0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x07, 0xC0, 0x0F, 0xE0, 0x1E, 0xF0, 0x3C, 0x7C, 0x78, 0x3C, 0xF0, 0x1E, 0xE0, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #60
0x00, 0x00, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #61
0x00, 0x00, 0x00, 0x00, 0xC0, 0x06, 0xE0, 0x0E, 0xF0, 0x1E, 0x78, 0x3C, 0x3E, 0xF8, 0x0E, 0xE0, 0x0F, 0xE0, 0x07, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #62
0x00, 0x00, 0x18, 0x00, 0x38, 0x00, 0x78, 0x00, 0x60, 0x00, 0x60, 0xC6, 0x61, 0xC6, 0x63, 0xC6, 0x67, 0x80, 0x7F, 0x00, 0x3E, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #63
0x00, 0x00, 0x1F, 0xC0, 0x1F, 0xC0, 0x7F, 0xFC, 0x67, 0xBC, 0x67, 0xFC, 0x64, 0x6C, 0x67, 0xEC, 0x67, 0xEC, 0x7F, 0xFC, 0x1F, 0xF0, 0x1F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #64
0x00, 0x00, 0x07, 0xFE, 0x1F, 0xFE, 0x1F, 0xFE, 0x3C, 0x60, 0x78, 0x60, 0x60, 0x60, 0x78, 0x60, 0x3C, 0x60, 0x1F, 0xFE, 0x1F, 0xFE, 0x07, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #65
0x00, 0x00, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x73, 0xCE, 0x7F, 0xFE, 0x3F, 0xFC, 0x1E, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #66
0x00, 0x00, 0x1F, 0xF8, 0x3F, 0xFC, 0x7F, 0xFE, 0x60, 0x0E, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x0E, 0x78, 0x1E, 0x38, 0x1C, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #67
0x00, 0x00, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x70, 0x0E, 0x7F, 0xFE, 0x3F, 0xFC, 0x1F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #68
0x00, 0x00, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x60, 0x06, 0x60, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #69
0x00, 0x00, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x61, 0x80, 0x61, 0x80, 0x61, 0x80, 0x61, 0x80, 0x61, 0x80, 0x61, 0x80, 0x60, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #70
0x00, 0x00, 0x1F, 0xF8, 0x3F, 0xFC, 0x7F, 0xFE, 0x60, 0x0E, 0x60, 0x06, 0x61, 0x86, 0x61, 0x86, 0x61, 0x8E, 0x79, 0xFE, 0x39, 0xFC, 0x19, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #71
0x00, 0x00, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #72
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x06, 0x60, 0x06, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x60, 0x06, 0x60, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #73
0x00, 0x00, 0x00, 0x18, 0x00, 0x1C, 0x00, 0x1E, 0x00, 0x0E, 0x60, 0x06, 0x60, 0x0E, 0x7F, 0xFE, 0x7F, 0xFC, 0x7F, 0xF8, 0x60, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #74
0x00, 0x00, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x03, 0xC0, 0x0F, 0xF0, 0x1E, 0x78, 0x1C, 0x38, 0x7C, 0x3E, 0x78, 0x1E, 0x60, 0x06, 0x20, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #75
0x00, 0x00, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #76
0x00, 0x00, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x1E, 0x00, 0x0F, 0x80, 0x07, 0x80, 0x0F, 0x80, 0x1E, 0x00, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #77
0x00, 0x00, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x0F, 0x00, 0x07, 0x80, 0x03, 0xC0, 0x01, 0xE0, 0x00, 0xF0, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #78
0x00, 0x00, 0x1F, 0xF8, 0x3F, 0xFC, 0x7F, 0xFE, 0x60, 0x0E, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x0E, 0x7F, 0xFE, 0x3F, 0xFC, 0x1F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #79
0x00, 0x00, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x61, 0x80, 0x61, 0x80, 0x61, 0x80, 0x61, 0x80, 0x73, 0x80, 0x7F, 0x80, 0x3F, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #80
0x00, 0x00, 0x1F, 0xF8, 0x3F, 0xFC, 0x7F, 0xFE, 0x60, 0x0E, 0x60, 0x26, 0x60, 0x36, 0x60, 0x3E, 0x60, 0x1C, 0x7F, 0xFE, 0x3F, 0xFE, 0x1F, 0xF6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #81
0x00, 0x00, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x61, 0xC0, 0x61, 0xE0, 0x61, 0xF0, 0x61, 0xF8, 0x73, 0xBC, 0x7F, 0x9E, 0x3F, 0x0E, 0x1E, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #82
0x00, 0x00, 0x1E, 0x18, 0x3F, 0x1C, 0x7F, 0x9E, 0x63, 0x8E, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0xCE, 0x79, 0xFE, 0x38, 0xFC, 0x18, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #83
0x00, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #84
0x00, 0x00, 0x7F, 0xF8, 0x7F, 0xFC, 0x7F, 0xFE, 0x00, 0x0E, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x0E, 0x7F, 0xFE, 0x7F, 0xFC, 0x7F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #85
0x00, 0x00, 0x7F, 0xE0, 0x7F, 0xF0, 0x7F, 0xF8, 0x00, 0x3C, 0x00, 0x1E, 0x00, 0x0E, 0x00, 0x1E, 0x00, 0x3C, 0x7F, 0xF8, 0x7F, 0xF0, 0x7F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #86
0x00, 0x00, 0x7F, 0xF8, 0x7F, 0xFC, 0x7F, 0xFE, 0x00, 0x0E, 0x01, 0xFE, 0x01, 0xFC, 0x01, 0xFE, 0x00, 0x0E, 0x7F, 0xFE, 0x7F, 0xFC, 0x7F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #87
0x00, 0x00, 0x78, 0x1E, 0x7C, 0x3E, 0x7E, 0x3E, 0x0F, 0xF0, 0x07, 0xE0, 0x03, 0xC0, 0x07, 0xE0, 0x0F, 0xF0, 0x7E, 0x3E, 0x7C, 0x3E, 0x78, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #88
0x00, 0x00, 0x7E, 0x00, 0x7F, 0x00, 0x7F, 0x80, 0x03, 0xC0, 0x01, 0xFE, 0x00, 0xFE, 0x01, 0xFE, 0x03, 0xC0, 0x7F, 0x80, 0x7F, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #89
0x00, 0x00, 0x60, 0x1E, 0x60, 0x3E, 0x60, 0x7E, 0x60, 0xF6, 0x61, 0xE6, 0x63, 0xC6, 0x67, 0x86, 0x6F, 0x06, 0x7E, 0x06, 0x7C, 0x06, 0x78, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #90
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0x80, 0x06, 0x80, 0x06, 0x80, 0x06, 0x80, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #91
0x00, 0x00, 0x78, 0x00, 0x7C, 0x00, 0x7E, 0x00, 0x0F, 0x00, 0x07, 0x80, 0x03, 0xC0, 0x01, 0xE0, 0x00, 0xF0, 0x00, 0x7E, 0x00, 0x3E, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #92
0x00, 0x00, 0x00, 0x00, 0x80, 0x06, 0x80, 0x06, 0x80, 0x06, 0x80, 0x06, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #93
0x00, 0x00, 0x0C, 0x00, 0x1C, 0x00, 0x1C, 0x00, 0x7C, 0x00, 0x70, 0x00, 0x60, 0x00, 0x70, 0x00, 0x7C, 0x00, 0x1C, 0x00, 0x1C, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #94
0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #95
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x60, 0x00, 0x60, 0x00, 0x70, 0x00, 0x30, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #96
0x00, 0x00, 0x00, 0x78, 0x00, 0xFC, 0x19, 0xFE, 0x19, 0xCE, 0x19, 0x86, 0x19, 0x86, 0x19, 0x86, 0x1D, 0xCE, 0x1F, 0xFE, 0x0F, 0xFE, 0x07, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #97
0x00, 0x00, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x07, 0xFC, 0x0F, 0x1E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x1E, 0x07, 0xFC, 0x03, 0xF8, 0x01, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #98
0x00, 0x00, 0x03, 0xF8, 0x07, 0xFC, 0x0F, 0xFE, 0x0E, 0x0E, 0x0C, 0x06, 0x0C, 0x06, 0x0C, 0x06, 0x0E, 0x0E, 0x0F, 0x1E, 0x07, 0x1C, 0x03, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #99
0x00, 0x00, 0x01, 0xF0, 0x03, 0xF8, 0x07, 0xFC, 0x0F, 0x1E, 0x0E, 0x0E, 0x0F, 0x1E, 0x07, 0x1C, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #100
0x00, 0x00, 0x03, 0xF8, 0x07, 0xFC, 0x0F, 0xFE, 0x0E, 0xCE, 0x0C, 0xC6, 0x0C, 0xC6, 0x0C, 0xC6, 0x0E, 0xCE, 0x0F, 0xCE, 0x07, 0xCC, 0x03, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #101
0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x3F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x6C, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #102
0x00, 0x00, 0x07, 0x00, 0x0F, 0x8C, 0x1F, 0xCE, 0x1D, 0xCE, 0x18, 0xC6, 0x18, 0xC6, 0x18, 0xC6, 0x1D, 0xCE, 0x1F, 0xFE, 0x0F, 0xFC, 0x07, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #103
0x00, 0x00, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x07, 0x80, 0x0F, 0x00, 0x0E, 0x00, 0x0E, 0x00, 0x0F, 0x00, 0x07, 0xFE, 0x03, 0xFE, 0x01, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #104
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x33, 0xF8, 0x33, 0xFC, 0x33, 0xFE, 0x00, 0x0E, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #105
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x0C, 0x06, 0x0C, 0x0E, 0xCF, 0xFE, 0xCF, 0xFC, 0xCF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #106
0x00, 0x00, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x00, 0x78, 0x00, 0xF0, 0x01, 0xF0, 0x03, 0xF8, 0x07, 0xBC, 0x0F, 0x1E, 0x0E, 0x0E, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #107
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #108
0x00, 0x00, 0x0F, 0xFE, 0x0F, 0xFE, 0x0F, 0xFE, 0x0E, 0x00, 0x0F, 0xFE, 0x0F, 0xFE, 0x0F, 0xFE, 0x0E, 0x00, 0x0F, 0xFE, 0x07, 0xFE, 0x03, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #109
0x00, 0x00, 0x0F, 0xFE, 0x0F, 0xFE, 0x0F, 0xFE, 0x0E, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0E, 0x00, 0x0F, 0xFE, 0x07, 0xFE, 0x03, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #110
0x00, 0x00, 0x03, 0xF8, 0x07, 0xFC, 0x0F, 0xFE, 0x0E, 0x0E, 0x0C, 0x06, 0x0C, 0x06, 0x0C, 0x06, 0x0E, 0x0E, 0x0F, 0xFE, 0x07, 0xFC, 0x03, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #111
0x00, 0x00, 0x1F, 0xFE, 0x1F, 0xFE, 0x1F, 0xFE, 0x1F, 0xF0, 0x1C, 0x30, 0x18, 0x30, 0x18, 0x30, 0x1C, 0x30, 0x1F, 0xF0, 0x0F, 0xE0, 0x07, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #112
0x00, 0x00, 0x07, 0xC0, 0x0F, 0xE0, 0x1F, 0xF0, 0x1C, 0x70, 0x18, 0x30, 0x18, 0x30, 0x1C, 0x70, 0x1F, 0xF0, 0x1F, 0xFE, 0x1F, 0xFE, 0x1F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #113
0x00, 0x00, 0x0F, 0xFE, 0x0F, 0xFE, 0x0F, 0xFE, 0x07, 0x80, 0x0F, 0x00, 0x0E, 0x00, 0x0C, 0x00, 0x0E, 0x00, 0x0F, 0x00, 0x07, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #114
0x00, 0x00, 0x03, 0x18, 0x07, 0x9C, 0x0F, 0x9E, 0x0F, 0xCE, 0x0C, 0xC6, 0x0C, 0xE6, 0x0C, 0xE6, 0x0E, 0x7E, 0x0F, 0x7E, 0x07, 0x3C, 0x03, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #115
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x7F, 0xF8, 0x7F, 0xFC, 0x7F, 0xFE, 0x0C, 0x0E, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #116
0x00, 0x00, 0x0F, 0xF8, 0x0F, 0xFC, 0x0F, 0xFE, 0x00, 0x0E, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x0E, 0x0F, 0xFE, 0x0F, 0xFC, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #117
0x00, 0x00, 0x0F, 0xE0, 0x0F, 0xF0, 0x0F, 0xF8, 0x00, 0x3C, 0x00, 0x1E, 0x00, 0x0E, 0x00, 0x1E, 0x00, 0x3C, 0x0F, 0xF8, 0x0F, 0xF0, 0x0F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #118
0x00, 0x00, 0x0F, 0xF8, 0x0F, 0xFC, 0x0F, 0xFE, 0x00, 0x0E, 0x00, 0xFE, 0x00, 0xFC, 0x00, 0xFE, 0x00, 0x0E, 0x0F, 0xFE, 0x0F, 0xFC, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #119
0x00, 0x00, 0x0C, 0x06, 0x0E, 0x0E, 0x0F, 0x1E, 0x07, 0xBC, 0x03, 0xF8, 0x01, 0xF0, 0x03, 0xF8, 0x07, 0xBC, 0x0F, 0x1E, 0x0E, 0x0E, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #120
0x00, 0x00, 0x1F, 0x80, 0x1F, 0xC0, 0x1F, 0xE6, 0x00, 0xE6, 0x00, 0x66, 0x00, 0xE6, 0x01, 0xE6, 0x07, 0xCE, 0x1F, 0xFE, 0x1F, 0xFC, 0x1F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #121
0x00, 0x00, 0x0C, 0x06, 0x0C, 0x0E, 0x0C, 0x1E, 0x0C, 0x3E, 0x0C, 0x7E, 0x0C, 0xF6, 0x0D, 0xE6, 0x0F, 0xC6, 0x0F, 0x86, 0x0F, 0x06, 0x0E, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #122
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x7F, 0xF8, 0xFF, 0xFE, 0xFC, 0xFE, 0xC0, 0x0E, 0xC0, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #123
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #124
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x0E, 0xC0, 0x0E, 0xFC, 0xFE, 0xFF, 0xFE, 0x7F, 0xF8, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #125
0x00, 0x00, 0x00, 0xC0, 0x01, 0xC0, 0x03, 0x80, 0x03, 0x00, 0x03, 0x80, 0x03, 0xC0, 0x01, 0xC0, 0x00, 0xC0, 0x01, 0xC0, 0x03, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // #126
};

const byte FontDigital16x24Array[] = { 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #32
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0x1C, 0xFF, 0xEF, 0x1C, 0xFF, 0xDF, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #33
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0xFC, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #34
0x03, 0x03, 0x00, 0x07, 0x03, 0x80, 0x07, 0x03, 0x80, 0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0x07, 0x03, 0x80, 0x07, 0x03, 0x80, 0x07, 0x03, 0x80, 0xFF, 0xFF, 0xFC, 0x7F, 0xFF, 0xF8, 0x07, 0x03, 0x80, 0x07, 0x03, 0x80, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #35
0x1F, 0xF0, 0x18, 0x3F, 0xE8, 0x1C, 0x7F, 0xD8, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE7, 0xBF, 0xDC, 0xEF, 0xBF, 0xDC, 0xEF, 0xBF, 0x9C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x1F, 0xF8, 0xE0, 0x0F, 0xF0, 0x60, 0x0F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #36
0x78, 0x00, 0xF8, 0xFC, 0x01, 0xFC, 0xCC, 0x03, 0xFC, 0xCC, 0x07, 0x80, 0xFC, 0x0F, 0x00, 0x78, 0x0E, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x38, 0x00, 0x00, 0xD8, 0x00, 0x03, 0xE0, 0xFC, 0x07, 0x80, 0xCC, 0xFF, 0x00, 0xCC, 0xFE, 0x00, 0xFC, 0x7C, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #37
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #38
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0xFC, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #39
0x1F, 0xFF, 0xE0, 0x3F, 0xEF, 0xF0, 0x7F, 0xDF, 0xF8, 0xF0, 0x00, 0x3C, 0xE0, 0x00, 0x1C, 0xC0, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #40
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x0C, 0xF0, 0x00, 0x3C, 0x7F, 0xDF, 0xF8, 0x3F, 0xEF, 0xF0, 0x1F, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #41
0x00, 0x00, 0x00, 0x03, 0x1B, 0x00, 0x07, 0xBF, 0x80, 0x07, 0xBF, 0x80, 0x03, 0xBF, 0x00, 0x00, 0x38, 0x00, 0x03, 0xFF, 0x80, 0x07, 0xFF, 0x80, 0x07, 0xFF, 0x00, 0x03, 0xBF, 0x00, 0x07, 0xBF, 0x80, 0x07, 0xBF, 0x80, 0x03, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #42
0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x03, 0xFF, 0x80, 0x07, 0xFF, 0x80, 0x07, 0xFF, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #43
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #44
0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #45
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #46
0x00, 0x00, 0xF8, 0x00, 0x01, 0xFC, 0x00, 0x03, 0xFC, 0x00, 0x07, 0x80, 0x00, 0x0F, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x38, 0x00, 0x00, 0xD8, 0x00, 0x03, 0xE0, 0x00, 0x07, 0x80, 0x00, 0xFF, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #47
0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xFF, 0xDF, 0xFC, 0xFF, 0xEF, 0xFC, 0x7F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #48
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0xE0, 0x00, 0x00, 0xE0, 0x00, 0x00, 0xE0, 0x00, 0x00, 0xE0, 0x00, 0x00, 0xFF, 0xDF, 0xFC, 0xFF, 0xEF, 0xFC, 0x7F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #49
0x60, 0x0F, 0xF8, 0xE0, 0x0F, 0xFC, 0xE0, 0x1F, 0xFC, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xFF, 0xD8, 0x1C, 0xFF, 0xE8, 0x1C, 0x7F, 0xF0, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #50
0x60, 0x00, 0x18, 0xE0, 0x08, 0x1C, 0xE0, 0x18, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xFF, 0xDF, 0xFC, 0xFF, 0xEF, 0xFC, 0x7F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #51
0x7F, 0xF0, 0x00, 0xFF, 0xE8, 0x00, 0xFF, 0xD8, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0xFF, 0xDF, 0xFC, 0xFF, 0xEF, 0xFC, 0x7F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #52
0x7F, 0xF0, 0x18, 0xFF, 0xE8, 0x1C, 0xFF, 0xD8, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x1F, 0xFC, 0xE0, 0x0F, 0xFC, 0x60, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #53
0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x1F, 0xFC, 0xE0, 0x0F, 0xFC, 0x60, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #54
0x7F, 0xF0, 0x00, 0xFF, 0xE0, 0x00, 0xFF, 0xC0, 0x00, 0xE0, 0x00, 0x00, 0xE0, 0x00, 0x00, 0xE0, 0x00, 0x00, 0xE0, 0x00, 0x00, 0xE0, 0x00, 0x00, 0xE0, 0x00, 0x00, 0xE0, 0x00, 0x00, 0xE0, 0x00, 0x00, 0xFF, 0xDF, 0xFC, 0xFF, 0xEF, 0xFC, 0x7F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #55
0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xFF, 0xDF, 0xFC, 0xFF, 0xEF, 0xFC, 0x7F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #56
0x7F, 0xF0, 0x18, 0xFF, 0xE8, 0x1C, 0xFF, 0xD8, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xFF, 0xDF, 0xFC, 0xFF, 0xEF, 0xFC, 0x7F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #57
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x03, 0x80, 0x07, 0x03, 0x80, 0x07, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #58
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x38, 0x07, 0x00, 0x3C, 0x07, 0x00, 0x3E, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #59
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x38, 0x00, 0x00, 0x78, 0x00, 0x00, 0xBC, 0x00, 0x01, 0xDE, 0x00, 0x03, 0xEF, 0x00, 0x0F, 0xCF, 0xC0, 0x0F, 0x03, 0xC0, 0x0E, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #60
0x00, 0x00, 0x00, 0x00, 0xCC, 0x00, 0x01, 0xCE, 0x00, 0x01, 0xCE, 0x00, 0x01, 0xCE, 0x00, 0x01, 0xCE, 0x00, 0x01, 0xCE, 0x00, 0x01, 0xCE, 0x00, 0x01, 0xCE, 0x00, 0x01, 0xCE, 0x00, 0x01, 0xCE, 0x00, 0x01, 0xCE, 0x00, 0x00, 0xCC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #61
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x01, 0xC0, 0x0F, 0x03, 0xC0, 0x0F, 0x87, 0xC0, 0x07, 0xCF, 0x80, 0x03, 0xEF, 0x00, 0x01, 0xFE, 0x00, 0x00, 0x78, 0x00, 0x00, 0x38, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #62
0x7C, 0x00, 0x00, 0xFC, 0x00, 0x00, 0xF8, 0x00, 0x00, 0xE0, 0x00, 0x00, 0xE0, 0x00, 0x00, 0xE0, 0x00, 0x00, 0xE0, 0x1F, 0x1C, 0xE0, 0x3F, 0x1C, 0xE0, 0x3F, 0x1C, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xFF, 0xD8, 0x00, 0xFF, 0xE8, 0x00, 0x7F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #63
0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE1, 0xFE, 0x1C, 0xE3, 0xEF, 0x1C, 0xE3, 0xDF, 0x1C, 0xE3, 0x87, 0x1C, 0xE0, 0x07, 0x1C, 0xFF, 0xDF, 0x1C, 0xFF, 0xEF, 0x1C, 0x7F, 0xFE, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #64
0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xFF, 0xDF, 0xFC, 0xFF, 0xEF, 0xFC, 0x7F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #65
0xFF, 0xFF, 0xFC, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0x7F, 0xDF, 0xF8, 0x3F, 0xEF, 0xF0, 0x1F, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #66
0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0x60, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #67
0xFF, 0xFF, 0xFC, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0x7F, 0xDF, 0xF8, 0x3F, 0xEF, 0xF0, 0x1F, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #68
0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x18, 0x1C, 0xE0, 0x08, 0x1C, 0x60, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #69
0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x18, 0x00, 0xE0, 0x08, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #70
0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x18, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x1F, 0xFC, 0xE0, 0x0F, 0xFC, 0x60, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #71
0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0xFF, 0xDF, 0xFC, 0xFF, 0xEF, 0xFC, 0x7F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #72
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x18, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xFF, 0xFF, 0xFC, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0x60, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #73
0x60, 0x03, 0xF8, 0xE0, 0x07, 0xFC, 0xE0, 0x0F, 0xFC, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xFF, 0xDF, 0xFC, 0xFF, 0xEF, 0xFC, 0x7F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #74
0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0x00, 0x38, 0x00, 0x00, 0x5C, 0x00, 0x00, 0xEE, 0x00, 0x01, 0xEF, 0x00, 0x03, 0xC7, 0x80, 0x07, 0x83, 0xC0, 0x1F, 0x01, 0xF0, 0x3C, 0x00, 0x78, 0x78, 0x00, 0x3C, 0xF0, 0x00, 0x1C, 0xE0, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #75
0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #76
0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x78, 0x00, 0x00, 0x38, 0x00, 0x00, 0x78, 0x00, 0x01, 0xF0, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xDF, 0xFC, 0xFF, 0xEF, 0xFC, 0x7F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #77
0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0x00, 0x00, 0x00, 0x03, 0xE0, 0x00, 0x01, 0xF0, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x78, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xDF, 0xFC, 0xFF, 0xEF, 0xFC, 0x7F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #78
0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xFF, 0xDF, 0xFC, 0xFF, 0xEF, 0xFC, 0x7F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #79
0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xFF, 0xD8, 0x00, 0xFF, 0xE8, 0x00, 0x7F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #80
0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0xFC, 0xE0, 0x00, 0x78, 0xFF, 0xDF, 0xBC, 0xFF, 0xEF, 0xDC, 0x7F, 0xFF, 0xEC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #81
0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0xE0, 0x38, 0x00, 0xE0, 0x3C, 0x00, 0xE0, 0x3E, 0x00, 0xE0, 0x3F, 0x00, 0xE0, 0x3F, 0x80, 0xE0, 0x3B, 0xC0, 0xE0, 0x39, 0xF0, 0xE0, 0x38, 0x78, 0xFF, 0xD8, 0x3C, 0xFF, 0xE8, 0x1C, 0x7F, 0xF0, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #82
0x1F, 0xF0, 0x18, 0x3F, 0xE8, 0x1C, 0x7F, 0xD8, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x1F, 0xF8, 0xE0, 0x0F, 0xF0, 0x60, 0x0F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #83
0x60, 0x00, 0x00, 0xE0, 0x00, 0x00, 0xE0, 0x00, 0x00, 0xE0, 0x00, 0x00, 0xE0, 0x00, 0x00, 0xE0, 0x00, 0x00, 0xFF, 0xFF, 0xFC, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xF8, 0xE0, 0x00, 0x00, 0xE0, 0x00, 0x00, 0xE0, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #84
0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0xFF, 0xDF, 0xFC, 0xFF, 0xEF, 0xFC, 0x7F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #85
0x7F, 0xFF, 0x00, 0xFF, 0xEF, 0x80, 0xFF, 0xDF, 0xC0, 0x00, 0x01, 0xE0, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x78, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x3C, 0x00, 0x00, 0xF8, 0x00, 0x01, 0xE0, 0xFF, 0xDF, 0xC0, 0xFF, 0xEF, 0x80, 0x7F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #86
0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x01, 0xFF, 0xFC, 0x03, 0xFF, 0xFC, 0x01, 0xFF, 0xFC, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0xFF, 0xDF, 0xFC, 0xFF, 0xEF, 0xFC, 0x7F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #87
0x7C, 0x00, 0xF8, 0xFE, 0x01, 0xFC, 0xFF, 0x03, 0xFC, 0x07, 0x87, 0x80, 0x03, 0xCF, 0x00, 0x01, 0xEE, 0x00, 0x00, 0xDC, 0x00, 0x00, 0xBC, 0x00, 0x00, 0xDC, 0x00, 0x03, 0xEF, 0x00, 0x07, 0x87, 0x80, 0xFF, 0x03, 0xFC, 0xFE, 0x01, 0xFC, 0x7C, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #88
0x7F, 0xF0, 0x18, 0xFF, 0xE8, 0x1C, 0xFF, 0xD8, 0x1C, 0x00, 0x38, 0x1C, 0x00, 0x38, 0x1C, 0x00, 0x38, 0x1C, 0x00, 0x38, 0x1C, 0x00, 0x38, 0x1C, 0x00, 0x38, 0x1C, 0x00, 0x38, 0x1C, 0x00, 0x38, 0x1C, 0xFF, 0xDF, 0xFC, 0xFF, 0xEF, 0xFC, 0x7F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #89
0x60, 0x00, 0xF8, 0xE0, 0x01, 0xFC, 0xE0, 0x03, 0xFC, 0xE0, 0x07, 0x9C, 0xE0, 0x0F, 0x1C, 0xE0, 0x0E, 0x1C, 0xE0, 0x1C, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0xD8, 0x1C, 0xE3, 0xE0, 0x1C, 0xE7, 0x80, 0x1C, 0xFF, 0x00, 0x1C, 0xFE, 0x00, 0x1C, 0x7C, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #90
0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xC0, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #91
0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0xFE, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x07, 0x80, 0x00, 0x03, 0xC0, 0x00, 0x01, 0xE0, 0x00, 0x00, 0xD8, 0x00, 0x00, 0x38, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x07, 0x80, 0x00, 0x03, 0xFC, 0x00, 0x01, 0xFC, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, // #92
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xFF, 0xDF, 0xFC, 0xFF, 0xEF, 0xFC, 0x7F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #93
0x00, 0xE0, 0x00, 0x01, 0xE0, 0x00, 0x03, 0xE0, 0x00, 0x07, 0xC0, 0x00, 0x0F, 0x80, 0x00, 0x17, 0x00, 0x00, 0x3A, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x3A, 0x00, 0x00, 0x1F, 0x80, 0x00, 0x07, 0xC0, 0x00, 0x03, 0xE0, 0x00, 0x01, 0xE0, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #94
0x00, 0x00, 0x18, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #95
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0xF0, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x78, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #96
0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xFF, 0xDF, 0xFC, 0xFF, 0xEF, 0xFC, 0x7F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #97
0xFF, 0xFF, 0xFC, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0x7F, 0xDF, 0xF8, 0x3F, 0xEF, 0xF0, 0x1F, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #98
0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0x60, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #99
0xFF, 0xFF, 0xFC, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0x7F, 0xDF, 0xF8, 0x3F, 0xEF, 0xF0, 0x1F, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #100
0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x18, 0x1C, 0xE0, 0x08, 0x1C, 0x60, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #101
0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x18, 0x00, 0xE0, 0x08, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #102
0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x18, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x1F, 0xFC, 0xE0, 0x0F, 0xFC, 0x60, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #103
0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0xFF, 0xDF, 0xFC, 0xFF, 0xEF, 0xFC, 0x7F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #104
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x18, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xFF, 0xFF, 0xFC, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0x60, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #105
0x60, 0x03, 0xF8, 0xE0, 0x07, 0xFC, 0xE0, 0x0F, 0xFC, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xFF, 0xDF, 0xFC, 0xFF, 0xEF, 0xFC, 0x7F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #106
0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0x00, 0x38, 0x00, 0x00, 0x5C, 0x00, 0x00, 0xEE, 0x00, 0x01, 0xEF, 0x00, 0x03, 0xC7, 0x80, 0x07, 0x83, 0xC0, 0x1F, 0x01, 0xF0, 0x3C, 0x00, 0x78, 0x78, 0x00, 0x3C, 0xF0, 0x00, 0x1C, 0xE0, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #107
0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #108
0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x78, 0x00, 0x00, 0x38, 0x00, 0x00, 0x78, 0x00, 0x01, 0xF0, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xDF, 0xFC, 0xFF, 0xEF, 0xFC, 0x7F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #109
0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0x00, 0x00, 0x00, 0x03, 0xE0, 0x00, 0x01, 0xF0, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x78, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xDF, 0xFC, 0xFF, 0xEF, 0xFC, 0x7F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #110
0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xFF, 0xDF, 0xFC, 0xFF, 0xEF, 0xFC, 0x7F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #111
0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xE0, 0x38, 0x00, 0xFF, 0xD8, 0x00, 0xFF, 0xE8, 0x00, 0x7F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #112
0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0xFC, 0xE0, 0x00, 0x78, 0xFF, 0xDF, 0xBC, 0xFF, 0xEF, 0xDC, 0x7F, 0xFF, 0xEC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #113
0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0xE0, 0x38, 0x00, 0xE0, 0x3C, 0x00, 0xE0, 0x3E, 0x00, 0xE0, 0x3F, 0x00, 0xE0, 0x3F, 0x80, 0xE0, 0x3B, 0xC0, 0xE0, 0x39, 0xF0, 0xE0, 0x38, 0x78, 0xFF, 0xD8, 0x3C, 0xFF, 0xE8, 0x1C, 0x7F, 0xF0, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #114
0x1F, 0xF0, 0x18, 0x3F, 0xE8, 0x1C, 0x7F, 0xD8, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0x1F, 0xF8, 0xE0, 0x0F, 0xF0, 0x60, 0x0F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #115
0x60, 0x00, 0x00, 0xE0, 0x00, 0x00, 0xE0, 0x00, 0x00, 0xE0, 0x00, 0x00, 0xE0, 0x00, 0x00, 0xE0, 0x00, 0x00, 0xFF, 0xFF, 0xFC, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xF8, 0xE0, 0x00, 0x00, 0xE0, 0x00, 0x00, 0xE0, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #116
0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0xFF, 0xDF, 0xFC, 0xFF, 0xEF, 0xFC, 0x7F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #117
0x7F, 0xFF, 0x00, 0xFF, 0xEF, 0x80, 0xFF, 0xDF, 0xC0, 0x00, 0x01, 0xE0, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x78, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x3C, 0x00, 0x00, 0xF8, 0x00, 0x01, 0xE0, 0xFF, 0xDF, 0xC0, 0xFF, 0xEF, 0x80, 0x7F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #118
0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x01, 0xFF, 0xFC, 0x03, 0xFF, 0xFC, 0x01, 0xFF, 0xFC, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0xFF, 0xDF, 0xFC, 0xFF, 0xEF, 0xFC, 0x7F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #119
0x7C, 0x00, 0xF8, 0xFE, 0x01, 0xFC, 0xFF, 0x03, 0xFC, 0x07, 0x87, 0x80, 0x03, 0xCF, 0x00, 0x01, 0xEE, 0x00, 0x00, 0xDC, 0x00, 0x00, 0xBC, 0x00, 0x00, 0xDC, 0x00, 0x03, 0xEF, 0x00, 0x07, 0x87, 0x80, 0xFF, 0x03, 0xFC, 0xFE, 0x01, 0xFC, 0x7C, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #120
0x7F, 0xF0, 0x18, 0xFF, 0xE8, 0x1C, 0xFF, 0xD8, 0x1C, 0x00, 0x38, 0x1C, 0x00, 0x38, 0x1C, 0x00, 0x38, 0x1C, 0x00, 0x38, 0x1C, 0x00, 0x38, 0x1C, 0x00, 0x38, 0x1C, 0x00, 0x38, 0x1C, 0x00, 0x38, 0x1C, 0xFF, 0xDF, 0xFC, 0xFF, 0xEF, 0xFC, 0x7F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #121
0x60, 0x00, 0xF8, 0xE0, 0x01, 0xFC, 0xE0, 0x03, 0xFC, 0xE0, 0x07, 0x9C, 0xE0, 0x0F, 0x1C, 0xE0, 0x0E, 0x1C, 0xE0, 0x1C, 0x1C, 0xE0, 0x38, 0x1C, 0xE0, 0xD8, 0x1C, 0xE3, 0xE0, 0x1C, 0xE7, 0x80, 0x1C, 0xFF, 0x00, 0x1C, 0xFE, 0x00, 0x1C, 0x7C, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #122
0x00, 0x38, 0x00, 0x00, 0x78, 0x00, 0x7F, 0xFF, 0xF8, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xFC, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xC0, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #123
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFC, 0xFF, 0xEF, 0xFC, 0xFF, 0xDF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #124
0xC0, 0x00, 0x0C, 0xE0, 0x00, 0x1C, 0xE0, 0x00, 0x1C, 0xFF, 0xDF, 0xFC, 0xFF, 0xEF, 0xFC, 0x7F, 0xFF, 0xF8, 0x00, 0x38, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #125
0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x38, 0x00, 0x00, 0x78, 0x00, 0x00, 0xB8, 0x00, 0x01, 0xD0, 0x00, 0x03, 0xE0, 0x00, 0x01, 0xD0, 0x00, 0x00, 0xB8, 0x00, 0x00, 0xF8, 0x00, 0x01, 0xD0, 0x00, 0x03, 0xE0, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // #126
};


//TODO(5) insert font lookup here, font ID should be related to array name
B4R::Object beo;
B4R::Object* getfontbyte(B4R::Object* o) {
    _userfont* font = (_userfont*)B4R::Object::toPointer(o);
	unsigned char fid = (font->FontID);
    int index = (font->ASCIIindex);
	
	switch (fid) {
    case 1: 											 // font 5x8 ID = 1, font array name is FontDots5x8Array
      return beo.wrapNumber(FontDots5x8Array[index]);
      break;
    case 2: 
	  return beo.wrapNumber(FontDots8x8Array[index]);
      break;
    case 3:
      return beo.wrapNumber(FontArial8x16Array[index]);
      break;
    case 4: 
     return beo.wrapNumber(FontDigital12x22Array[index]);
     break;	 
	case 5: 
     return beo.wrapNumber(FontDigital16x16Array[index]);
     break;
    case 6: 
     return beo.wrapNumber(FontDigital16x24Array[index]);
     break;
  }
}

//----------------------------------------------------------------------------------
//the lcd display area is devided into 8 pages vertically, so we have 64 dots height
//each page contains 128 cols, so we have 8 gropus of pages, the first byte in page
//is the first col in this page
//for example page 1, col 2 is byte number 130 in buffer array (1 * 128) + 2
//the last byte in array (1023) is:  page 7, col 127 (7 * 128) + 127 = 1023

unsigned char buffer [BUFFER_SIZE]; 
//----------------------------------------------------------------------------------

void clrScreen(B4R::Object* o){
	memset(buffer,0,sizeof(buffer));
}

void sendbuffer(B4R::Object* o) {
	Wire.beginTransmission(b4r_ssd::_oledaddress);
	Wire.write(0x00);
	Wire.write(b4r_ssd::_ssd1306_columnaddr);
	Wire.endTransmission();

	Wire.beginTransmission(b4r_ssd::_oledaddress);
	Wire.write(0x00);
	Wire.write(0x00);
	Wire.endTransmission();

	Wire.beginTransmission(b4r_ssd::_oledaddress);
	Wire.write(0x00);
	Wire.write(b4r_ssd::_ssd1306_lcdwidth - 1);
	Wire.endTransmission();
  
	Wire.beginTransmission(b4r_ssd::_oledaddress);
	Wire.write(0x00);
	Wire.write(b4r_ssd::_ssd1306_pageaddr);
	Wire.endTransmission();
 
	Wire.beginTransmission(b4r_ssd::_oledaddress);
	Wire.write(0x00);
	Wire.write(0x00);
	Wire.endTransmission();
 
	Wire.beginTransmission(b4r_ssd::_oledaddress);
	Wire.write(0x00);
	Wire.write((b4r_ssd::_ssd1306_lcdheight / 8) - 1);
	Wire.endTransmission();

for (uint16_t i=0; i<(sizeof (buffer)); i++) {
	 Wire.beginTransmission(b4r_ssd::_oledaddress); 
	 Wire.write(b4r_ssd::_ssd1306_setstartline);   
	 for (uint8_t x=0; x<16; x++) {
         Wire.write(buffer[i]);
        i++;
      }
      i--;
	 Wire.endTransmission();
}	  
}
// GRAPHICS ROUTIES //-------------------------------------------
void setPixel(uint16_t x, uint16_t y)
{
	uint16_t by, bi;
	if ((x<b4r_ssd::_ssd1306_lcdwidth) and (y<b4r_ssd::_ssd1306_lcdheight))
	{
		by=((y/8)*b4r_ssd::_ssd1306_lcdwidth)+x;
		bi=y % 8;
		buffer[by]=buffer[by] | (1<<bi);
	}
}
//-------------------------------------------------------------
void clrPixel(uint16_t x, uint16_t y)
{
	uint16_t by, bi;
	if ((x<b4r_ssd::_ssd1306_lcdwidth) and (y<b4r_ssd::_ssd1306_lcdheight))
	{
		by=((y/8)*b4r_ssd::_ssd1306_lcdwidth)+x;
		bi=y % 8;
		buffer[by]=buffer[by] & ~(1<<bi);
	}
}
//-------------------------------------------------------------
void drawHLine(int x, int y, int l){
	int by, bi;
	if ((x>=0) and (x<b4r_ssd::_ssd1306_lcdwidth) and (y>=0) and (y<b4r_ssd::_ssd1306_lcdheight))
	{
		for (int cx=0; cx<l; cx++)
		{
			by=((y/8)*b4r_ssd::_ssd1306_lcdwidth)+x;
			bi=y % 8;
			buffer[by+cx] |= (1<<bi);
		}
	}
}
//-------------------------------------------------------------
void clrHLine(int x, int y, int l)
{
	int by, bi;
	if ((x>=0) and (x<b4r_ssd::_ssd1306_lcdwidth) and (y>=0) and (y<b4r_ssd::_ssd1306_lcdheight))
	{
		for (int cx=0; cx<l; cx++)
		{
			by=((y/8)*b4r_ssd::_ssd1306_lcdwidth)+x;
			bi=y % 8;
			buffer[by+cx] &= ~(1<<bi);
		}
	}
}
//---------------------------------------------------------------
void drawVLine(int x, int y, int l){
	if ((x>=0) and (x<b4r_ssd::_ssd1306_lcdwidth) and (y>=0) and (y<b4r_ssd::_ssd1306_lcdheight))
	{
		for (int cy=0; cy<l; cy++)
		{
			setPixel(x, y+cy);
		}
	}
}
//---------------------------------------------------------------
void clrVLine(int x, int y, int l){
	if ((x>=0) and (x<b4r_ssd::_ssd1306_lcdwidth) and (y>=0) and (y<b4r_ssd::_ssd1306_lcdheight))
	{
		for (int cy=0; cy<l; cy++)
		{
			clrPixel(x, y+cy);
		}
	}
}
//---------------------B4R CALLS-------------------------------
B4R::Object* B4RwriteBuffer(B4R::Object* o) {
    _mbuffer* bf = (_mbuffer*)B4R::Object::toPointer(o);
	unsigned char vbyte = (bf->Val);
    uint index = (bf->Index);
	buffer[index] = vbyte;
}
//---------------------------------------------------------------
void B4RsetPixel(B4R::Object* o){ 
B4R::Array* b = (B4R::Array*)B4R::Object::toPointer(o);
char* c = (char*)b->data;
int x = (c[0]); 
int y = (c[1]); 
	setPixel(x,y);
}
//---------------------------------------------------------------
void B4RclrPixel(B4R::Object* o){ 
B4R::Array* b = (B4R::Array*)B4R::Object::toPointer(o);
char* c = (char*)b->data;
int x = (c[0]); 
int y = (c[1]); 
	clrPixel(x,y);
}
//---------------------------------------------------------------
void B4RdrawHLine(B4R::Object* o){ 
B4R::Array* b = (B4R::Array*)B4R::Object::toPointer(o);
char* c = (char*)b->data;
int x = (c[0]); 
int y = (c[1]); 
int l = (c[2]); 
	drawHLine(x,y,l);
}
//---------------------------------------------------------------
void B4RclrHLine(B4R::Object* o){ 
B4R::Array* b = (B4R::Array*)B4R::Object::toPointer(o);
char* c = (char*)b->data;
int x = (c[0]); 
int y = (c[1]); 
int l = (c[2]); 
	clrHLine(x,y,l);
}
//---------------------------------------------------------------
void B4RdrawVLine(B4R::Object* o){ 
B4R::Array* b = (B4R::Array*)B4R::Object::toPointer(o);
char* c = (char*)b->data;
int x = (c[0]); 
int y = (c[1]); 
int l = (c[2]); 
	drawVLine(x,y,l);
}
//---------------------------------------------------------------
void B4RclrVLine(B4R::Object* o){ 
B4R::Array* b = (B4R::Array*)B4R::Object::toPointer(o);
char* c = (char*)b->data;
int x = (c[0]); 
int y = (c[1]); 
int l = (c[2]); 
	clrVLine(x,y,l);
}
//---------------------------------------------------------------
void B4RdrawLine(B4R::Object* o){ 
B4R::Array* b = (B4R::Array*)B4R::Object::toPointer(o);
char* c = (char*)b->data;
int x1 = (c[0]); 
int y1 = (c[1]); 
int x2 = (c[2]); 
int y2 = (c[3]); 

	int tmp;
	double delta, tx, ty;
	
	if (((x2-x1)<0))
	{
		tmp=x1;
		x1=x2;
		x2=tmp;
		tmp=y1;
		y1=y2;
		y2=tmp;
	}
    if (((y2-y1)<0))
	{
		tmp=x1;
		x1=x2;
		x2=tmp;
		tmp=y1;
		y1=y2;
		y2=tmp;
	}

	if (y1==y2)
	{
		if (x1>x2)
		{
			tmp=x1;
			x1=x2;
			x2=tmp;
		}
		drawHLine(x1, y1, x2-x1);
	}
	else if (x1==x2)
	{
		if (y1>y2)
		{
			tmp=y1;
			y1=y2;
			y2=tmp;
		}
		drawVLine(x1, y1, y2-y1);
	}
	else if (abs(x2-x1)>abs(y2-y1))
	{
		delta=(double(y2-y1)/double(x2-x1));
		ty=double(y1);
		if (x1>x2)
		{
			for (int i=x1; i>=x2; i--)
			{
				setPixel(i, int(ty+0.5));
        		ty=ty-delta;
			}
		}
		else
		{
			for (int i=x1; i<=x2; i++)
			{
				setPixel(i, int(ty+0.5));
        		ty=ty+delta;
			}
		}
	}
	else
	{
		delta=(float(x2-x1)/float(y2-y1));
		tx=float(x1);
        if (y1>y2)
        {
			for (int i=y2+1; i>y1; i--)
			{
		 		setPixel(int(tx+0.5), i);
        		tx=tx+delta;
			}
        }
        else
        {
			for (int i=y1; i<y2+1; i++)
			{
		 		setPixel(int(tx+0.5), i);
        		tx=tx+delta;
			}
        }
	}

}
//---------------------------------------------------------------
void B4RclrLine(B4R::Object* o){ 
B4R::Array* b = (B4R::Array*)B4R::Object::toPointer(o);
char* c = (char*)b->data;
int x1 = (c[0]); 
int y1 = (c[1]); 
int x2 = (c[2]); 
int y2 = (c[3]); 
	int tmp;
	double delta, tx, ty;
	
	if (((x2-x1)<0))
	{
		tmp=x1;
		x1=x2;
		x2=tmp;
		tmp=y1;
		y1=y2;
		y2=tmp;
	}
    if (((y2-y1)<0))
	{
		tmp=x1;
		x1=x2;
		x2=tmp;
		tmp=y1;
		y1=y2;
		y2=tmp;
	}

	if (y1==y2)
	{
		if (x1>x2)
		{
			tmp=x1;
			x1=x2;
			x2=tmp;
		}
		clrHLine(x1, y1, x2-x1);
	}
	else if (x1==x2)
	{
		if (y1>y2)
		{
			tmp=y1;
			y1=y2;
			y2=tmp;
		}
		clrVLine(x1, y1, y2-y1);
	}
	else if (abs(x2-x1)>abs(y2-y1))
	{
		delta=(double(y2-y1)/double(x2-x1));
		ty=double(y1);
		if (x1>x2)
		{
			for (int i=x1; i>=x2; i--)
			{
				clrPixel(i, int(ty+0.5));
        		ty=ty-delta;
			}
		}
		else
		{
			for (int i=x1; i<=x2; i++)
			{
				clrPixel(i, int(ty+0.5));
        		ty=ty+delta;
			}
		}
	}
	else
	{
		delta=(float(x2-x1)/float(y2-y1));
		tx=float(x1);
        if (y1>y2)
        {
			for (int i=y2+1; i>y1; i--)
			{
		 		clrPixel(int(tx+0.5), i);
        		tx=tx+delta;
			}
        }
        else
        {
			for (int i=y1; i<y2+1; i++)
			{
		 		clrPixel(int(tx+0.5), i);
        		tx=tx+delta;
			}
        }
	}

}

//---------------------------------------------------------------
void B4RdrawRect(B4R::Object* o){ 
B4R::Array* b = (B4R::Array*)B4R::Object::toPointer(o);
char* c = (char*)b->data;
int x1 = (c[0]); 
int y1 = (c[1]); 
int x2 = (c[2]); 
int y2 = (c[3]); 
	int tmp;

	if (x1>x2)
	{
		tmp=x1;
		x1=x2;
		x2=tmp;
	}
	if (y1>y2)
	{
		tmp=y1;
		y1=y2;
		y2=tmp;
	}

	drawHLine(x1, y1, x2-x1);
	drawHLine(x1, y2, x2-x1);
	drawVLine(x1, y1, y2-y1);
	drawVLine(x2, y1, y2-y1+1);
}
//---------------------------------------------------------------
void B4RclrRect(B4R::Object* o){ 
B4R::Array* b = (B4R::Array*)B4R::Object::toPointer(o);
char* c = (char*)b->data;
int x1 = (c[0]); 
int y1 = (c[1]); 
int x2 = (c[2]); 
int y2 = (c[3]); 
	int tmp;

	if (x1>x2)
	{
		tmp=x1;
		x1=x2;
		x2=tmp;
	}
	if (y1>y2)
	{
		tmp=y1;
		y1=y2;
		y2=tmp;
	}

	clrHLine(x1, y1, x2-x1);
	clrHLine(x1, y2, x2-x1);
	clrVLine(x1, y1, y2-y1);
	clrVLine(x2, y1, y2-y1+1);
}
//---------------------------------------------------------------
void B4RdrawRoundRect(B4R::Object* o){ 
B4R::Array* b = (B4R::Array*)B4R::Object::toPointer(o);
char* c = (char*)b->data;
int x1 = (c[0]); 
int y1 = (c[1]); 
int x2 = (c[2]); 
int y2 = (c[3]); 
	int tmp;

	if (x1>x2)
	{
		tmp=x1;
		x1=x2;
		x2=tmp;
	}
	if (y1>y2)
	{
		tmp=y1;
		y1=y2;
		y2=tmp;
	}
	if ((x2-x1)>4 && (y2-y1)>4)
	{
		setPixel(x1+1,y1+1);
		setPixel(x2-1,y1+1);
		setPixel(x1+1,y2-1);
		setPixel(x2-1,y2-1);
		drawHLine(x1+2, y1, x2-x1-3);
		drawHLine(x1+2, y2, x2-x1-3);
		drawVLine(x1, y1+2, y2-y1-3);
		drawVLine(x2, y1+2, y2-y1-3);
	}
}
//---------------------------------------------------------------
void B4RclrRoundRect(B4R::Object* o){ 
B4R::Array* b = (B4R::Array*)B4R::Object::toPointer(o);
char* c = (char*)b->data;
int x1 = (c[0]); 
int y1 = (c[1]); 
int x2 = (c[2]); 
int y2 = (c[3]); 
	int tmp;

	if (x1>x2)
	{
		tmp=x1;
		x1=x2;
		x2=tmp;
	}
	if (y1>y2)
	{
		tmp=y1;
		y1=y2;
		y2=tmp;
	}
	if ((x2-x1)>4 && (y2-y1)>4)
	{
		clrPixel(x1+1,y1+1);
		clrPixel(x2-1,y1+1);
		clrPixel(x1+1,y2-1);
		clrPixel(x2-1,y2-1);
		clrHLine(x1+2, y1, x2-x1-3);
		clrHLine(x1+2, y2, x2-x1-3);
		clrVLine(x1, y1+2, y2-y1-3);
		clrVLine(x2, y1+2, y2-y1-3);
	}
}
//---------------------------------------------------------------
void B4RdrawCircle(B4R::Object* o){ 
B4R::Array* b = (B4R::Array*)B4R::Object::toPointer(o);
char* c = (char*)b->data;
int x = (c[0]); 
int y = (c[1]); 
int radius = (c[2]); 

	int f = 1 - radius;
	int ddF_x = 1;
	int ddF_y = -2 * radius;
	int x1 = 0;
	int y1 = radius;
	
	setPixel(x, y + radius);
	setPixel(x, y - radius);
	setPixel(x + radius, y);
	setPixel(x - radius, y);
 
	while(x1 < y1)
	{
		if(f >= 0) 
		{
			y1--;
			ddF_y += 2;
			f += ddF_y;
		}
		x1++;
		ddF_x += 2;
		f += ddF_x;    
		setPixel(x + x1, y + y1);
		setPixel(x - x1, y + y1);
		setPixel(x + x1, y - y1);
		setPixel(x - x1, y - y1);
		setPixel(x + y1, y + x1);
		setPixel(x - y1, y + x1);
		setPixel(x + y1, y - x1);
		setPixel(x - y1, y - x1);
	}
}
//---------------------------------------------------------------
void B4RclrCircle(B4R::Object* o){ 
B4R::Array* b = (B4R::Array*)B4R::Object::toPointer(o);
char* c = (char*)b->data;
int x = (c[0]); 
int y = (c[1]); 
int radius = (c[2]); 

	int f = 1 - radius;
	int ddF_x = 1;
	int ddF_y = -2 * radius;
	int x1 = 0;
	int y1 = radius;
	
	clrPixel(x, y + radius);
	clrPixel(x, y - radius);
	clrPixel(x + radius, y);
	clrPixel(x - radius, y);
 
	while(x1 < y1)
	{
		if(f >= 0) 
		{
			y1--;
			ddF_y += 2;
			f += ddF_y;
		}
		x1++;
		ddF_x += 2;
		f += ddF_x;    
		clrPixel(x + x1, y + y1);
		clrPixel(x - x1, y + y1);
		clrPixel(x + x1, y - y1);
		clrPixel(x - x1, y - y1);
		clrPixel(x + y1, y + x1);
		clrPixel(x - y1, y + x1);
		clrPixel(x + y1, y - x1);
		clrPixel(x - y1, y - x1);
	}
}
//------------------------------------------------------------------
B4R::Object* B4RdrawBitmap(B4R::Object* o) {
    _mbitmap* bm = (_mbitmap*)B4R::Object::toPointer(o);
	unsigned char x = (bm->X);
	unsigned char y = (bm->Y);
	unsigned char sx = (bm->SizeX);
	unsigned char sy = (bm->SizeY);
	bool inv = (bm->Inverse);
	B4R::Array* b = bm->Bitmap;  
	byte* bitmab = (byte*)b->data; 
	
	int bit;
	byte data;
	int addr;
	for (int cy=0; cy<sy; cy++){
		bit= cy % 8;
		for(int cx=0; cx<sx; cx++){
			addr =(cx+((cy/8)*sx));
			data = bitmab[addr];
			if (inv) {
  				data = data ^ 0xFF;
			}
			if ((data & (1<<bit))>0)
				setPixel(x+cx, y+cy);
			else
				clrPixel(x+cx, y+cy);
		}
	}      
}

#end if