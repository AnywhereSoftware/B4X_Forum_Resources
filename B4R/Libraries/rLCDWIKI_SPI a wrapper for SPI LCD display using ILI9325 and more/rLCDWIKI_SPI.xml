<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<root>
    <doclet-version-NOT-library-version>1.00</doclet-version-NOT-library-version>
    <class>
        <name>B4R::B4RLCDWIKI_SPI</name>
        <shortname>LCDWIKI_SPI</shortname>
        <method>
            <name DesignerName="Initialize">Initialize</name>
<comment>
 Constructor for software spi.
 if modules is unreadable or you don't know the width and height of modules, you can use this constructor.
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>model</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>cs</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>cd</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>miso</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>mosi</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>reset</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>clk</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>led</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Initialize1">Initialize1</name>
<comment>
 Constructor for hardware spi.
 if modules is unreadable or you don't know the width and height of modules, you can use this constructor.
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>model</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>cs</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>cd</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>reset</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>led</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Initialize2">Initialize2</name>
<comment>
 Constructor for software spi.
 if modules is readable or you know the width and height of modules, you can use this constructor.
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>wid</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>heg</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>cs</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>cd</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>miso</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>mosi</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>reset</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>clk</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>led</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Initialize3">Initialize3</name>
<comment>
 Constructor for hardware spi.
 if modules is readable or you know the width and height of modules, you can use this constructor.
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>wid</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>heg</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>cs</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>cd</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>reset</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>led</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Init_LCD">Init_LCD</name>
<comment>
 Initialization lcd modules
</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="reset">reset</name>
<comment>
 Initialization common to both shield and breakout configs
</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="start">start</name>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>ID</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Draw_Pixe">Draw_Pixe</name>
<comment>
set x,y  coordinate and color to draw a pixel point
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Spi_Write">Spi_Write</name>
<comment>
spi write for hardware and software
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>data</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Spi_Read">Spi_Read</name>
<comment>
spi read for hardware and software
</comment>
                 <returntype>Byte</returntype>
        </method>
        <method>
            <name DesignerName="Write_Cmd">Write_Cmd</name>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>cmd</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Write_Data">Write_Data</name>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>data</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Write_Cmd_Data">Write_Cmd_Data</name>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>cmd</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>data</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="init_table8">init_table8</name>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>table</name>
                <type>Byte[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="init_table16">init_table16</name>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>table</name>
                <type>UInt[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Push_Command">Push_Command</name>
<comment>
Write a command and N datas
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>cmd</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>block</name>
                <type>Byte[]</type>
            </parameter>
            <parameter>
                <name>N</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Color_To_565">Color_To_565</name>
<comment>
Pass 8-bit (each) R,G,B, get back 16-bit packed color
</comment>
                 <returntype>UInt</returntype>
            <parameter>
                <name>r</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>g</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>b</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Read_ID">Read_ID</name>
<comment>
read LCD controller chip ID
</comment>
                 <returntype>UInt</returntype>
        </method>
        <method>
            <name DesignerName="Fill_Rect">Fill_Rect</name>
<comment>
fill area from x to x+w,y to y+h
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Set_Rotation">Set_Rotation</name>
<comment>
set clockwise rotation
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>r</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Get_Rotation">Get_Rotation</name>
<comment>
get current rotation
0  :  0 degree
1  :  90 degree
2  :  180 degree
3  :  270 degree
</comment>
                 <returntype>Byte</returntype>
        </method>
        <method>
            <name DesignerName="Invert_Display">Invert_Display</name>
<comment>
Anti color display
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>i</name>
                <type>Bool</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Read_Reg">Read_Reg</name>
<comment>
read value from lcd register
</comment>
                 <returntype>UInt</returntype>
            <parameter>
                <name>reg</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>index</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Read_GRAM">Read_GRAM</name>
<comment>
read graph RAM data
</comment>
                 <returntype>Int</returntype>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>block</name>
                <type>UInt[]</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Set_Addr_Window">Set_Addr_Window</name>
<comment>
 Sets the LCD address window
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x1</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y1</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>x2</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y2</name>
                <type>Int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Push_Any_Color">Push_Any_Color</name>
<comment>
push color table for 16bits
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>block</name>
                <type>UInt[]</type>
            </parameter>
            <parameter>
                <name>n</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>first</name>
                <type>Bool</type>
            </parameter>
            <parameter>
                <name>flags</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Push_Any_Color1">Push_Any_Color1</name>
<comment>
push color table for 8bits
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>block</name>
                <type>Byte[]</type>
            </parameter>
            <parameter>
                <name>n</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>first</name>
                <type>Bool</type>
            </parameter>
            <parameter>
                <name>flags</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Vert_Scroll">Vert_Scroll</name>
<comment>
Scroll display
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>top</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>scrollines</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>offset</name>
                <type>Int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Get_Height">Get_Height</name>
<comment>
get lcd height
</comment>
                 <returntype>Int</returntype>
        </method>
        <method>
            <name DesignerName="Get_Width">Get_Width</name>
<comment>
get lcd width
</comment>
                 <returntype>Int</returntype>
        </method>
        <method>
            <name DesignerName="Set_LR">Set_LR</name>
<comment>
 Unlike the 932X drivers that set the address window to the full screen
 by default (using the address counter for drawPixel operations), the
 7575 needs the address window set on all graphics operations.  In order
 to save a few register writes on each pixel drawn, the lower-right
 corner of the address window is reset after most fill operations, so
 that drawPixel only needs to change the upper left each time.
</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="Led_control">Led_control</name>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>i</name>
                <type>Bool</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Set_Draw_color">Set_Draw_color</name>
<comment>
set 16bits draw color
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>color</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Set_Draw_color1">Set_Draw_color1</name>
<comment>
set 8bits r,g,b color
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>r</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>g</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>b</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Get_Draw_color">Get_Draw_color</name>
<comment>
get draw color
</comment>
                 <returntype>UInt</returntype>
        </method>
        <method>
            <name DesignerName="Draw_Pixel">Draw_Pixel</name>
<comment>
draw a pixel point
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Read_Pixel">Read_Pixel</name>
<comment>
read color data for point(x,y)
</comment>
                 <returntype>UInt</returntype>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Draw_Fast_VLine">Draw_Fast_VLine</name>
<comment>
draw a vertical line
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Draw_Fast_HLine">Draw_Fast_HLine</name>
<comment>
draw a horizontal line
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Fill_Screen">Fill_Screen</name>
<comment>
Fill the full screen with color
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>color</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Fill_Screen1">Fill_Screen1</name>
<comment>
Fill the full screen with r,g,b
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>r</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>g</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>b</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Draw_Line">Draw_Line</name>
<comment>
draw an arbitrary line from (x1,y1) to (x2,y2)
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x1</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y1</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>x2</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y2</name>
                <type>Int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Draw_Rectangle">Draw_Rectangle</name>
<comment>
draw a rectangle
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x1</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y1</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>x2</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y2</name>
                <type>Int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Fill_Rectangle">Fill_Rectangle</name>
<comment>
fill a round rectangle
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x1</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y1</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>x2</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y2</name>
                <type>Int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Draw_Round_Rectangle">Draw_Round_Rectangle</name>
<comment>
draw a round rectangle
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x1</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y1</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>x2</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y2</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>radius</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Fill_Round_Rectangle">Fill_Round_Rectangle</name>
<comment>
fill a round rectangle
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x1</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y1</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>x2</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y2</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>radius</name>
                <type>Int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Draw_Circle">Draw_Circle</name>
<comment>
draw a circle
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>radius</name>
                <type>Int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Draw_Circle_Helper">Draw_Circle_Helper</name>
<comment>
draw a circular bead
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x0</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y0</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>radius</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>cornername</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Fill_Circle">Fill_Circle</name>
<comment>
fill a circle
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>radius</name>
                <type>Int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Fill_Circle_Helper">Fill_Circle_Helper</name>
<comment>
fill a semi-circle
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x0</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y0</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>r</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>cornername</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>delta</name>
                <type>Int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Draw_Triangle">Draw_Triangle</name>
<comment>
draw a triangle
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x0</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y0</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>x1</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y1</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>x2</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y2</name>
                <type>Int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Fill_Triangle">Fill_Triangle</name>
<comment>
fill a triangle
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x0</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y0</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>x1</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y1</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>x2</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y2</name>
                <type>Int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Draw_Bit_Map">Draw_Bit_Map</name>
<comment>
draw a bit map
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>sx</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>sy</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>data</name>
                <type>UInt[]</type>
            </parameter>
            <parameter>
                <name>scale</name>
                <type>Int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Set_Text_Cousur">Set_Text_Cousur</name>
<comment>
set text coordinate
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Get_Text_X_Cousur">Get_Text_X_Cousur</name>
<comment>
get text x coordinate
</comment>
                 <returntype>Int</returntype>
        </method>
        <method>
            <name DesignerName="Get_Text_Y_Cousur">Get_Text_Y_Cousur</name>
<comment>
get text y coordinate
</comment>
                 <returntype>Int</returntype>
        </method>
        <method>
            <name DesignerName="Set_Text_colour">Set_Text_colour</name>
<comment>
set text colour with 16bit color
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>color</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Set_Text_colour1">Set_Text_colour1</name>
<comment>
set text colour with 8bits r,g,b
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>r</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>g</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>b</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Get_Text_colour">Get_Text_colour</name>
<comment>
get text colour
</comment>
                 <returntype>UInt</returntype>
        </method>
        <method>
            <name DesignerName="Set_Text_Back_colour">Set_Text_Back_colour</name>
<comment>
set text background colour with 16bits color
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>color</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Set_Text_Back_colour1">Set_Text_Back_colour1</name>
<comment>
set text background colour with 8bits r,g,b
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>r</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>g</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>b</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Get_Text_Back_colour">Get_Text_Back_colour</name>
<comment>
get text background colour
</comment>
                 <returntype>UInt</returntype>
        </method>
        <method>
            <name DesignerName="Set_Text_Size">Set_Text_Size</name>
<comment>
set text size
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>s</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Get_Text_Size">Get_Text_Size</name>
<comment>
get text size
</comment>
                 <returntype>Byte</returntype>
        </method>
        <method>
            <name DesignerName="Set_Text_Mode">Set_Text_Mode</name>
<comment>
set text mode
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>mode</name>
                <type>Bool</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Get_Text_Mode">Get_Text_Mode</name>
<comment>
get text mode
</comment>
                 <returntype>Bool</returntype>
        </method>
        <method>
            <name DesignerName="Print">Print</name>
<comment>
print string
</comment>
                 <returntype>UInt</returntype>
            <parameter>
                <name>st</name>
                <type>Byte[]</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Print_String">Print_String</name>
<comment>
print string
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>st</name>
                <type>Byte[]</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Print_String1">Print_String1</name>
<comment>
print string
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>st</name>
                <type>Byte[]</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Print_String2">Print_String2</name>
<comment>
print string
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>st</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Print_Number_Int">Print_Number_Int</name>
<comment>
print int number
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>num</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>length</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>filler</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>system</name>
                <type>Int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Print_Number_Float">Print_Number_Float</name>
<comment>
print float number
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>num</name>
                <type>Double</type>
            </parameter>
            <parameter>
                <name>dec</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>divider</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>length</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>filler</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Draw_Char">Draw_Char</name>
<comment>
draw a char
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>c</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>bg</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>size</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>mode</name>
                <type>Bool</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="write">write</name>
<comment>
write a char
</comment>
                 <returntype>UInt</returntype>
            <parameter>
                <name>c</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Get_Display_Width">Get_Display_Width</name>
<comment>
get lcd width
</comment>
                 <returntype>Int</returntype>
        </method>
        <method>
            <name DesignerName="Get_Display_Height">Get_Display_Height</name>
<comment>
get lcd height
</comment>
                 <returntype>Int</returntype>
        </method>
        <field>
            <name DefineMethod="true" DesignerName="ILI9325">B4RILI9325</name>
<comment>
LCD controller chip mode identifiers
</comment>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ILI9328">B4RILI9328</name>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ILI9341">B4RILI9341</name>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="HX8357D">B4RHX8357D</name>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="HX8347G">B4RHX8347G</name>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="HX8347I">B4RHX8347I</name>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ILI9486">B4RILI9486</name>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ST7735S">B4RST7735S</name>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="SSD1283A">B4RSSD1283A</name>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="BLACK">B4RBLACK</name>
            <returntype>Int</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="BLUE">B4RBLUE</name>
            <returntype>Int</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="RED">B4RRED</name>
            <returntype>Int</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="GREEN">B4RGREEN</name>
            <returntype>Int</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="CYAN">B4RCYAN</name>
            <returntype>Int</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="MAGENTA">B4RMAGENTA</name>
            <returntype>Int</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="YELLOW">B4RYELLOW</name>
            <returntype>Int</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="WHITE">B4RWHITE</name>
            <returntype>Int</returntype>
        </field>
    </class>
    <version>1</version>
</root>
