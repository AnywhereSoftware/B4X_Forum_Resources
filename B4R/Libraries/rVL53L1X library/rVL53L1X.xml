<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<root>
    <doclet-version-NOT-library-version>1.00</doclet-version-NOT-library-version>
    <class>
        <name>B4R::B4RVL53L1X</name>
        <shortname>VL53L1X</shortname>
        <comment>This is a library that helps interface with ST's VL53L1X time-of-flight distance sensor.
It wraps this library :
https://github.com/sparkfun/SparkFun_VL53L1X_Arduino_Library
The library makes it simple to configure the sensor and read range data from it via IÂ²C.
https://www.st.com/resource/en/datasheet/vl53l1x.pdf
You must use Arduino to install the VL53L1X library by SparkFun
You must have a Wiremaster initialized.
Example: &lt;code&gt;
Sub Process_Globals
	Private Master As WireMaster
	Private VL53 As VL53L1X
End Sub

Private Sub AppStart
	Master.Initialize
	VL53.Initialize
End Sub
&lt;/code&gt;</comment>
        <method>
            <name DesignerName="Initialize">Initialize</name>
            <comment>Initialization of sensor</comment>
            <returntype>bool</returntype>
        </method>
        <method>
            <name DesignerName="SetI2CAddress">SetI2CAddress</name>
            <comment>Set the I2C address</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>addr</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetI2CAddress">GetI2CAddress</name>
            <comment>Get the I2C address</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name DesignerName="ClearInterrupt">ClearInterrupt</name>
            <comment>Clear the interrupt flag</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="SetInterruptPolarityHigh">SetInterruptPolarityHigh</name>
            <comment>Set the polarity of an active interrupt to High</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="SetInterruptPolarityLow">SetInterruptPolarityLow</name>
            <comment>Set the polarity of an active interrupt to Low</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="GetInterruptPolarity">GetInterruptPolarity</name>
            <comment>get the current interrupt polarity</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name DesignerName="StartRanging">StartRanging</name>
            <comment>Begins taking measurements</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="StopRanging">StopRanging</name>
            <comment>Stops taking measurements</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="CheckForDataReady">CheckForDataReady</name>
            <comment>Checks the to see if data is ready</comment>
            <returntype>bool</returntype>
        </method>
        <method>
            <name DesignerName="SetTimingBudgetInMs">SetTimingBudgetInMs</name>
            <comment>Set the timing budget for a measurement</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>timingBudget</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetTimingBudgetInMs">GetTimingBudgetInMs</name>
            <comment>Get the timing budget for a measurement</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name DesignerName="SetDistanceModeLong">SetDistanceModeLong</name>
            <comment>Set to 4M range</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="SetDistanceModeShort">SetDistanceModeShort</name>
            <comment>Set to 1.3M range</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="GetDistanceMode">GetDistanceMode</name>
            <comment>Get the distance mode, returns 1 for short and 2 for long</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name DesignerName="SetIntermeasurementPeriod">SetIntermeasurementPeriod</name>
            <comment>Set time between measurements in ms
Intermeasurement period must be &gt;= timing budget.</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>intermeasurement</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetIntermeasurementPeriod">GetIntermeasurementPeriod</name>
            <comment>Get time between measurements in ms</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name DesignerName="GetDistance">GetDistance</name>
            <comment>Returns distance</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name DesignerName="GetSignalRate">GetSignalRate</name>
            <comment>Returns the signal rate in kcps. All SPADs combined.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name DesignerName="GetAmbientRate">GetAmbientRate</name>
            <comment>Returns the total ambinet rate in kcps. All SPADs combined.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name DesignerName="GetRangeStatus">GetRangeStatus</name>
            <comment>Returns the range status, which can be any of the following.
0 = no error
1 = signal fail
2 = sigma fail
7 = wrapped target fail</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name DesignerName="SetOffset">SetOffset</name>
            <comment>Manually set an offset in mm</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>offset</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetOffset">GetOffset</name>
            <comment>Get the current offset in mm</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name DesignerName="SetXTalk">SetXTalk</name>
            <comment>Manually set the value of crosstalk in counts per second (cps),
which is interference from any sort of window in front of your sensor.</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>xTalk</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetXTalk">GetXTalk</name>
            <comment>Returns the current crosstalk value in cps.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name DesignerName="SetDistanceThreshold">SetDistanceThreshold</name>
            <comment>Set bounds for the interrupt.
lowThresh and hiThresh are the bounds of your interrupt
while window decides when the interrupt should fire.
The options for window are :
0: Interrupt triggered on measured distance below lowThresh.
1: Interrupt triggered on measured distance above hiThresh.
2: Interrupt triggered on measured distance outside of bounds.
3: Interrupt triggered on measured distance inside of bounds.</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>lowThresh</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>hiThresh</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>window</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetDistanceThresholdWindow">GetDistanceThresholdWindow</name>
            <comment>Returns distance threshold window option</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name DesignerName="GetDistanceThresholdLow">GetDistanceThresholdLow</name>
            <comment>Returns lower bound in mm.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name DesignerName="GetDistanceThresholdHigh">GetDistanceThresholdHigh</name>
            <comment>Returns upper bound in mm</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name DesignerName="SetSignalThreshold">SetSignalThreshold</name>
            <comment>Programs the necessary threshold to trigger a measurement.
Default is 1024 kcps.</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>signalThreshold</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetSignalThreshold">GetSignalThreshold</name>
            <comment>Returns the signal threshold in kcps</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name DesignerName="SetSigmaThreshold">SetSigmaThreshold</name>
            <comment>Programs a new sigma threshold in mm.
default=15 mm</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>sigmaThreshold</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetSigmaThreshold">GetSigmaThreshold</name>
            <comment>Returns the current sigma threshold.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name DesignerName="StartTemperatureUpdate">StartTemperatureUpdate</name>
            <comment>Recalibrates the sensor for temperature changes.
Run this any time the temperature has changed by more than 8Â°C</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="CalibrateOffset">CalibrateOffset</name>
            <comment>Autocalibrate the offset by placing a target a known distance away from the sensor
and passing this known distance into the setOffset() function.</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>targetDistanceInMm</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="CalibrateXTalk">CalibrateXTalk</name>
            <comment>Autocalibrate the crosstalk by placing a target a known distance away from the sensor
and passing this known distance into the SetXTalk() function.</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>targetDistanceInMm</name>
                <type>int</type>
            </parameter>
        </method>
    </class>
    <version>1.01</version>
    <author>JanDerKan</author>
</root>
