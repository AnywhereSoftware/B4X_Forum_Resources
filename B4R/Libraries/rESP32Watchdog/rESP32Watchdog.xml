<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<root>
    <doclet-version-NOT-library-version>1.00</doclet-version-NOT-library-version>
    <class>
        <name>B4R::B4RESP32WATCHDOG</name>
        <shortname>ESP32Watchdog</shortname>
        <comment>Callback reset reason event</comment>
        <event>ResetReason (reason As Int)</event>
        <method>
            <name DesignerName="Initialize">Initialize</name>
            <comment>Initializes the watchdog with reset reason event.
timeout - Timeout in ms, i.e. ESP waits timeoutms till reboot.
ResetReasonSub (SubVoidResetReason) - Name of the reaset reason event.</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>timeoutms</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>ResetReasonSub</name>
                <type>SubVoidResetReason</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="DeInitialize">DeInitialize</name>
            <comment>Deinitialize the watchdog.
It might be not initialized, check and log.</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="Feed">Feed</name>
            <comment>Feed the watchdog to indicate the task is responsive.
Resets the timer to prevent a system reset.</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="ResetReason">ResetReason</name>
            <comment>When the ESP crashes or reboots, the system fully restarts.
Calling ResetReason() from B4R at AppStart is the only reliable place to check why the ESP32 restarted.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name DesignerName="ReasonName">ReasonName</name>
            <comment>Get the reason code as short string.</comment>
            <returntype>B4R::B4RString*</returntype>
            <parameter>
                <name>code</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="StringToB4R">StringToB4R</name>
            <comment>Convert C string to B4R String
~hide</comment>
            <returntype>B4R::B4RString*</returntype>
            <parameter>
                <name>o</name>
                <type>B4R::String*</type>
            </parameter>
        </method>
        <field>
            <name DefineMethod="true" DesignerName="ESP_RST_UNKNOWN">B4RESP32WATCHDOG_ESP_RST_UNKNOWN</name>
            <comment>Reset Reason Codes (ULong)</comment>
            <returntype>ULong</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ESP_RST_POWERON">B4RESP32WATCHDOG_ESP_RST_POWERON</name>
            <returntype>ULong</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ESP_RST_EXT">B4RESP32WATCHDOG_ESP_RST_EXT</name>
            <returntype>ULong</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ESP_RST_SW">B4RESP32WATCHDOG_ESP_RST_SW</name>
            <returntype>ULong</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ESP_RST_PANIC">B4RESP32WATCHDOG_ESP_RST_PANIC</name>
            <returntype>ULong</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ESP_RST_INT_WDT">B4RESP32WATCHDOG_ESP_RST_INT_WDT</name>
            <returntype>ULong</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ESP_RST_TASK_WDT">B4RESP32WATCHDOG_ESP_RST_TASK_WDT</name>
            <returntype>ULong</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ESP_RST_WDT">B4RESP32WATCHDOG_ESP_RST_WDT</name>
            <returntype>ULong</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ESP_RST_DEEPSLEEP">B4RESP32WATCHDOG_ESP_RST_DEEPSLEEP</name>
            <returntype>ULong</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ESP_RST_BROWNOUT">B4RESP32WATCHDOG_ESP_RST_BROWNOUT</name>
            <returntype>ULong</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ESP_RST_SDIO">B4RESP32WATCHDOG_ESP_RST_SDIO</name>
            <returntype>ULong</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ESP_RST_USB">B4RESP32WATCHDOG_ESP_RST_USB</name>
            <returntype>ULong</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ESP_RST_JTAG">B4RESP32WATCHDOG_ESP_RST_JTAG</name>
            <returntype>ULong</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ESP_RST_EFUSE">B4RESP32WATCHDOG_ESP_RST_EFUSE</name>
            <returntype>ULong</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ESP_RST_PWR_GLITCH">B4RESP32WATCHDOG_ESP_RST_PWR_GLITCH</name>
            <returntype>ULong</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ESP_RST_CPU_LOCKUP">B4RESP32WATCHDOG_ESP_RST_CPU_LOCKUP</name>
            <returntype>ULong</returntype>
        </field>
    </class>
    <version>0.25</version>
</root>
