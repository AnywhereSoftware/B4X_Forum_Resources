Build1=Default,B4RDev
Group=Default Group
Library1=rcore
Library2=rdfrobot_multigassensor
Library3=rtm1637ex
NumberOfFiles=0
NumberOfLibraries=3
NumberOfModules=0
Version=4
@EndOfDesignText@
#Region Project Header
'==============================================
' Project:		rDFRobot_MultiGasSensor
' Brief:		Example reading CO concentration in ppm from sensor DFRobot SEN0466 via I2C.
' Reference:	http:// wiki.dfrobot.com/SKU_SEN0465toSEN0476_Gravity_Gas_Sensor_Calibrated_I2C_UART
' Author: 		Robert W.B. Linn
' Created: 		2025-10-06
' License:		MIT — see LICENSE file.
'
' Hardware
' MCU:			Arduino UNO
' Sensor:		DFRobot Gravity CO Gas Sensor SEN0466
'
' Wiring:
' SEN0466	= Arduino UNO / ESP32
' VCC 		= 3V3 / 3V3
' GND 		= GND / GND
' D/T SDA 	= A4 / GPIO21 (Green)
' C/R SCL 	= A5 / GPIO22 (Blue)
' I2C 		= 0x74
'
' TM1637	= Arduino
' CLK		= D2 
' DIO		= D3 
' GND		= GND
' VCC 		= 5v
'
'==============================================
#End Region

#Region Project Attributes
	#AutoFlushLogs: True
	#CheckArrayBounds: True
	#StackBufferSize: 300
#End Region

Sub Process_Globals
    Public Serial1 As Serial
	
	' SEN0466
	Private Sensor As DFRobot_MultiGasSensor
	Private CO_THRESHOLD As ULong = 100				' Set threshold and indicate on display as COHi

	' TM1637
	Private Display As TM1637Display
	Private PIN_CLK As Byte = 2
	Private PIN_DIO As Byte = 3
	Private BRIGHTNESS As Byte = 5

	' Samle Timer	
	Private TimerSampler As Timer
	Private TIMERSAMPLER_INTERVAL As ULong = 15000	' Every 15 seconds
End Sub

Private Sub AppStart
	Serial1.Initialize(115200)
	Log(CRLF, "==========================")    
	Log(CRLF, "[Main.AppStart] Initialize")

	' Init display with pin clk and dio
	Display.Initialize(PIN_CLK, PIN_DIO)
	Display.Clear
	Display.ShowText("COGo", 0, 0)

	' Init the sensor with default I2C address
	If Not(Sensor.Initialize) Then
		Log(CRLF, "[Main.AppStart] Initialize Error. Check device connected or I2C address set to 0x74")
		Display.ShowText("Err", 0, 0)
		Return
	Else
		Log(CRLF, "[Main.AppStart] Sensor initialize OK")
	End If

	' Init the timer
	TimerSampler.Initialize("TimerSampler_Tick", TIMERSAMPLER_INTERVAL)
	TimerSampler.Enabled = True

	Log("[Main.AppStart] Waiting for data ", TIMERSAMPLER_INTERVAL/1000, "s", CRLF)
	' CallSubPlus("ReadData", 500, 5)
	
	Log("[Main.AppStart] Done", CRLF)
End Sub

Private Sub TimerSampler_Tick
	ReadData(0)
End Sub

Private Sub ReadData(Tag As Byte)
	Private concentration As Float
	Private concentrationlong As Long
		
	' Read the gas concentration
	concentration = Sensor.ReadConcentrationPPM
	concentrationlong = Round(concentration)
	
	' Set the TM1637 gas concentration 0-1000ppm
	Display.SetBrightness(BRIGHTNESS, True)
	Display.Clear

	If concentrationlong > CO_THRESHOLD Then
		Display.ShowText("COHi", 0, 0)
	Else
		Display.ShowNumberDec2(concentrationlong, True, 4, 0)
	End If

	' Log to the IDE
	Log("[ReadData] ReadGasType=", Sensor.ReadGasType)
	Log("[ReadData] ReadConcentrationPPM=", concentration, " ppm")
	Log("[ReadData] ReadTemperatureC=", Sensor.ReadTemperatureC)
	Log("[ReadData] ReadVoltage=", Sensor.ReadVoltage)

End Sub
