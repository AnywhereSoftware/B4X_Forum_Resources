<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<root>
    <doclet-version-NOT-library-version>1.00</doclet-version-NOT-library-version>
    <class>
        <name>B4R::B4RBLESimpleAdvertiser</name>
        <shortname>BLESimpleAdvertiser</shortname>
<comment>
~Version: 1
~Author -
~Libray from https://github.com/peterk54/ESP32BLESimpleAdvertiser
~shortname:BLESimpleAdvertiser
</comment>
        <method>
            <name DesignerName="Initialize">Initialize</name>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="begin">begin</name>
                 <returntype>Bool</returntype>
            <parameter>
                <name>localName</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="manufacturerDataAdvertise">manufacturerDataAdvertise</name>
<comment>
 manufacturer data advertise string
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>data</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="manufacturerDataAdvertise1">manufacturerDataAdvertise1</name>
<comment>
 manufacturer data advertise bytes
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>data</name>
                <type>Byte[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="serviceDataAdvertise">serviceDataAdvertise</name>
<comment>
 service data advertise string
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>data</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="serviceDataAdvertise1">serviceDataAdvertise1</name>
<comment>
 service data advertise string with service data uuid
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>uuid</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>data</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="serviceDataAdvertise2">serviceDataAdvertise2</name>
<comment>
 service data advertise string with service data uuid as string parameter
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>uuid</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>data</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="serviceDataAdvertise3">serviceDataAdvertise3</name>
<comment>
 service data advertise bytes
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>data</name>
                <type>Byte[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="serviceDataAdvertise4">serviceDataAdvertise4</name>
<comment>
 service data advertise bytes with service data uuid
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>uuid</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>data</name>
                <type>Byte[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="serviceDataAdvertise5">serviceDataAdvertise5</name>
<comment>
 service data advertise bytes with service data uuid as string parameter
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>uuid</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>data</name>
                <type>Byte[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="end">end</name>
            <returntype>B4R::void</returntype>
        </method>
    </class>
    <class>
        <name>B4R::B4RBLEDevice</name>
        <shortname>BLEDevice</shortname>
<comment>
~Version: 1
~Author -
~Libray from Arduino
~shortname:BLEDevice
</comment>
        <method>
            <name DesignerName="createServer">createServer</name>
<comment>
 @brief Create a new instance of a client.
 @return A new instance of the client. (return ServerID)
</comment>
                 <returntype>ULong</returntype>
        </method>
        <method>
            <name DesignerName="createClient">createClient</name>
<comment>
 @brief Create a new instance of a server.
 @return A new instance of the server. (return ClientID)
</comment>
                 <returntype>ULong</returntype>
        </method>
        <property>
            <name>Address</name>
<comment>
 @brief Get the BLE device address.
 @return The BLE device address.
</comment>
            <returntype>B4R::B4RString*</returntype>
        </property>
        <method>
            <name DesignerName="getScan">getScan</name>
                 <returntype>ULong</returntype>
        </method>
        <method>
            <name DesignerName="getValue">getValue</name>
<comment>
 @brief Get the value of a characteristic of a service on a remote device.
 @param [in] bdAddress
 @param [in] serviceUUID
 @param [in] characteristicUUID
</comment>
                 <returntype>B4R::B4RString*</returntype>
            <parameter>
                <name>address</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>serviceUUID</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>characteristicUUID</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="init">init</name>
<comment>
 @brief Initialize the %BLE environment.
 @param deviceName The device name of the device.
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>deviceName</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setPower">setPower</name>
<comment>
 @brief Set the transmission power. (powerLevel=0 to 7 and powerType=0 to 12)
 The power level can be one of:
 * ESP_PWR_LVL_N14 or ESP_PWR_LVL_N11 or ESP_PWR_LVL_N8 or ESP_PWR_LVL_N5
 * ESP_PWR_LVL_N2 or ESP_PWR_LVL_P1 or ESP_PWR_LVL_P4 or ESP_PWR_LVL_P7

 The power types can be one of:
 * ESP_BLE_PWR_TYPE_CONN_HDL0 or ESP_BLE_PWR_TYPE_CONN_HDL1 or ESP_BLE_PWR_TYPE_CONN_HDL2 or ESP_BLE_PWR_TYPE_CONN_HDL3
 * ESP_BLE_PWR_TYPE_CONN_HDL4 or ESP_BLE_PWR_TYPE_CONN_HDL5 or ESP_BLE_PWR_TYPE_CONN_HDL6 or ESP_BLE_PWR_TYPE_CONN_HDL7
 * ESP_BLE_PWR_TYPE_CONN_HDL8 or ESP_BLE_PWR_TYPE_ADV or ESP_BLE_PWR_TYPE_SCAN or ESP_BLE_PWR_TYPE_DEFAULT
 @param [in] powerType.
 @param [in] powerLevel.
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>powerLevel</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>powerType</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setValue">setValue</name>
<comment>
 @brief Set the value of a characteristic of a service on a remote device.
 @param [in] bdAddress
 @param [in] serviceUUID
 @param [in] characteristicUUID
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>address</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>serviceUUID</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>characteristicUUID</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="toString">toString</name>
<comment>
 @brief Return a string representation of the nature of this device.
 @return A string representation of the nature of this device.
</comment>
                 <returntype>B4R::B4RString*</returntype>
        </method>
        <method>
            <name DesignerName="whiteListAdd">whiteListAdd</name>
<comment>
 @brief Add an entry to the BLE white list.
 @param [in] address The address to add to the white list.
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>address</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="whiteListRemove">whiteListRemove</name>
<comment>
 @brief Remove an entry from the BLE white list.
 @param [in] address The address to remove from the white list.
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>address</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setEncryptionLevel">setEncryptionLevel</name>
<comment>
 @brief Set encryption level that will be negotiated with peer device durng connection
 @param [in] level Requested encryption level  (level = 1 to 3)
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>level</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setMTU">setMTU</name>
<comment>
 @brief Setup local mtu that will be used to negotiate mtu during request from client peer
 @param [in] mtu Value to set local mtu, should be larger than 23 and lower or equal to 517
</comment>
                 <returntype>UInt</returntype>
            <parameter>
                <name>mtu</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getMTU">getMTU</name>
<comment>
 @brief Get local MTU value set during mtu request or default value
</comment>
                 <returntype>UInt</returntype>
        </method>
        <method>
            <name DesignerName="getInitialized">getInitialized</name>
                 <returntype>Bool</returntype>
        </method>
        <method>
            <name DesignerName="getAdvertising">getAdvertising</name>
<comment>
 get advertID
</comment>
                 <returntype>ULong</returntype>
        </method>
        <method>
            <name DesignerName="startAdvertising">startAdvertising</name>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="stopAdvertising">stopAdvertising</name>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="m_appId">m_appId</name>
                 <returntype>UInt</returntype>
        </method>
    </class>
    <class>
        <name>B4R::B4RBLEScan</name>
        <shortname>BLEScan</shortname>
<comment>
 @brief Perform and manage %BLE scans.

 Scanning is associated with a %BLE client that is attempting to locate BLE servers.
</comment>
        <method>
            <name DesignerName="setActiveScan">setActiveScan</name>
<comment>
        static BLEScan* scanner;
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>scanID</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>active</name>
                <type>Bool</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setAdvertisedDeviceCallbacks">setAdvertisedDeviceCallbacks</name>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>scanID</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>OnAdvertisedDeviceSub</name>
                <type>Subvoid_ulong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setInterval">setInterval</name>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>scanID</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>intervalMSecs</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setWindow">setWindow</name>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>scanID</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>windowMSecs</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="start">start</name>
<comment>
 get ScanResID
</comment>
                 <returntype>ULong</returntype>
            <parameter>
                <name>scanID</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>duration</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>is_continue</name>
                <type>Bool</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="stop">stop</name>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>scanID</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="erase">erase</name>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>scanID</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>address</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getResults">getResults</name>
<comment>
 get ScanResID
</comment>
                 <returntype>ULong</returntype>
            <parameter>
                <name>scanID</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="clearResults">clearResults</name>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>scanID</name>
                <type>ULong</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>B4R::B4RBLEScanResults</name>
        <shortname>BLEScanResults</shortname>
<comment>
 @brief The result of having performed a scan.
 When a scan completes, we have a set of found devices.  Each device is described
 by a BLEAdvertisedDevice object.  The number of items in the set is given by
 getCount().  We can retrieve a device by calling getDevice() passing in the
 index (starting at 0) of the desired device.
</comment>
        <method>
            <name DesignerName="getCount">getCount</name>
                 <returntype>Int</returntype>
            <parameter>
                <name>scanresID</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getDevice">getDevice</name>
<comment>
 get advDevID
</comment>
                 <returntype>ULong</returntype>
            <parameter>
                <name>scanresID</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>i</name>
                <type>ULong</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>B4R::B4RBLEAdvertisedDevice</name>
        <shortname>BLEAdvertisedDevice</shortname>
         <event>On_AdvertisedDeviceSub(ulong advDev)</event>
        <method>
            <name DesignerName="getAddress">getAddress</name>
<comment>
 @brief Get the address.

 Every %BLE device exposes an address that is used to identify it and subsequently connect to it.
 Call this function to obtain the address of the advertised device.

 @return The address of the advertised device.
</comment>
                 <returntype>B4R::B4RString*</returntype>
            <parameter>
                <name>advDevID</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getAppearance">getAppearance</name>
<comment>
 @brief Get the appearance.

 A %BLE device can declare its own appearance.  The appearance is how it would like to be shown to an end user
 typcially in the form of an icon.

 @return The appearance of the advertised device.
</comment>
                 <returntype>UInt</returntype>
            <parameter>
                <name>advDevID</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getManufacturerData">getManufacturerData</name>
<comment>
 @brief Get the manufacturer data.
 @return The manufacturer data of the advertised device.
</comment>
                 <returntype>B4R::B4RString*</returntype>
            <parameter>
                <name>advDevID</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getName">getName</name>
<comment>
 @brief Get the name.
 @return The name of the advertised device.
</comment>
                 <returntype>B4R::B4RString*</returntype>
            <parameter>
                <name>advDevID</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getRSSI">getRSSI</name>
<comment>
 @brief Get the RSSI.
 @return The RSSI of the advertised device.
</comment>
                 <returntype>Int</returntype>
            <parameter>
                <name>advDevID</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getScan">getScan</name>
<comment>
 @brief Get the scan object that created this advertisement.
 @return The scan object. (scanID)
</comment>
                 <returntype>ULong</returntype>
            <parameter>
                <name>advDevID</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getServiceData">getServiceData</name>
<comment>
 @brief Get the service data.
 @return The ServiceData of the advertised device.
</comment>
                 <returntype>B4R::B4RString*</returntype>
            <parameter>
                <name>advDevID</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getServiceData1">getServiceData1</name>
<comment>
 @brief Get the service data.
 @return The ServiceData of the advertised device.
</comment>
                 <returntype>B4R::B4RString*</returntype>
            <parameter>
                <name>advDevID</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>i</name>
                <type>Int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getServiceDataUUID">getServiceDataUUID</name>
<comment>
 @brief Get the service data UUID.
 @return The service data UUID.
</comment>
                 <returntype>B4R::B4RString*</returntype>
            <parameter>
                <name>advDevID</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getServiceDataUUID1">getServiceDataUUID1</name>
<comment>
 @brief Get the service data UUID.
 @return The service data UUID.
</comment>
                 <returntype>B4R::B4RString*</returntype>
            <parameter>
                <name>advDevID</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>i</name>
                <type>Int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getServiceUUID">getServiceUUID</name>
<comment>
 @brief Get the Service UUID.
 @return The Service UUID of the advertised device.
</comment>
                 <returntype>B4R::B4RString*</returntype>
            <parameter>
                <name>advDevID</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getServiceUUID1">getServiceUUID1</name>
<comment>
 @brief Get the Service UUID.
 @return The Service UUID of the advertised device.
</comment>
                 <returntype>B4R::B4RString*</returntype>
            <parameter>
                <name>advDevID</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>i</name>
                <type>Int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getServiceDataCount">getServiceDataCount</name>
<comment>
 @brief Get the number of service data.
 @return Number of service data discovered.
</comment>
                 <returntype>Int</returntype>
            <parameter>
                <name>advDevID</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getServiceDataUUIDCount">getServiceDataUUIDCount</name>
<comment>
 @brief Get the number of service data UUIDs.
 @return Number of service data UUIDs discovered.
</comment>
                 <returntype>Int</returntype>
            <parameter>
                <name>advDevID</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getServiceUUIDCount">getServiceUUIDCount</name>
<comment>
 @brief Get the number of service UUIDs.
 @return Number of service UUIDs discovered.
</comment>
                 <returntype>Int</returntype>
            <parameter>
                <name>advDevID</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getTXPower">getTXPower</name>
<comment>
 @brief Get the TX Power.
 @return The TX Power of the advertised device.
</comment>
                 <returntype>Byte</returntype>
            <parameter>
                <name>advDevID</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getPayload">getPayload</name>
                 <returntype>Byte[]</returntype>
            <parameter>
                <name>advDevID</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getPayloadLength">getPayloadLength</name>
                 <returntype>UInt</returntype>
            <parameter>
                <name>advDevID</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getAddressType">getAddressType</name>
<comment>
BLE device address type = 0 to 3
</comment>
                 <returntype>Byte</returntype>
            <parameter>
                <name>advDevID</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setAddressType">setAddressType</name>
<comment>
 address type = 0 to 3
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>advDevID</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>type</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="isAdvertisingService">isAdvertisingService</name>
                 <returntype>Bool</returntype>
            <parameter>
                <name>advDevID</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>uuid</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="haveAppearance">haveAppearance</name>
                 <returntype>Bool</returntype>
            <parameter>
                <name>advDevID</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="haveManufacturerData">haveManufacturerData</name>
                 <returntype>Bool</returntype>
            <parameter>
                <name>advDevID</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="haveName">haveName</name>
                 <returntype>Bool</returntype>
            <parameter>
                <name>advDevID</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="haveRSSI">haveRSSI</name>
                 <returntype>Bool</returntype>
            <parameter>
                <name>advDevID</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="haveServiceData">haveServiceData</name>
                 <returntype>Bool</returntype>
            <parameter>
                <name>advDevID</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="haveServiceUUID">haveServiceUUID</name>
                 <returntype>Bool</returntype>
            <parameter>
                <name>advDevID</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="haveTXPower">haveTXPower</name>
                 <returntype>Bool</returntype>
            <parameter>
                <name>advDevID</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="toString">toString</name>
                 <returntype>B4R::B4RString*</returntype>
            <parameter>
                <name>advDevID</name>
                <type>ULong</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>B4R::B4RBLEAddress</name>
        <shortname>BLEAddress</shortname>
        <method>
            <name DesignerName="getNative">getNative</name>
<comment>
 get an address 6 * bytes [0] to[5] from a hex string in the format: 00:00:00:00:00:00  which is 17 characters in length.
</comment>
                 <returntype>Byte[]</returntype>
            <parameter>
                <name>address</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="equals">equals</name>
<comment>
 compare 2 address in format: 00:00:00:00:00:00  which is 17 characters in length.
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>address</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>otheraddress</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="toString">toString</name>
<comment>
 get an hex string in the format: 00:00:00:00:00:00  which is 17 characters in length from an address 6 * bytes [0] to [5]
</comment>
                 <returntype>B4R::B4RString*</returntype>
            <parameter>
                <name>address</name>
                <type>Byte[]</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>B4R::B4RBLEUUID</name>
        <shortname>BLEUUID</shortname>
        <method>
            <name DesignerName="setUUID1">setUUID1</name>
<comment>
 Create a UUID from a string.  There will be two possible stories here.
 Either the string represents a binary data field or the string represents a hex encoding of a UUID.
 For the hex encoding, here is an example:
 "beb5483e-36e1-4688-b7f5-ea07361b26a8"
  0 1 2 3  4 5  6 7  8 9  0 1 2 3 4 5
  12345678-90ab-cdef-1234-567890abcdef
 ```
 This has a length of 36 characters.  We need to parse this into 16 bytes.
 @param [in] value The string to build a UUID from.
</comment>
                 <returntype>B4R::B4RString*</returntype>
            <parameter>
                <name>uuid</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setUUID2">setUUID2</name>
<comment>
 @brief Create a UUID from the 16bit value.

 @param [in] uuid The 16bit short form UUID.
</comment>
                 <returntype>B4R::B4RString*</returntype>
            <parameter>
                <name>uuid</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setUUID3">setUUID3</name>
<comment>
 @brief Create a UUID from the 32bit value.

 @param [in] uuid The 32bit short form UUID.
</comment>
                 <returntype>B4R::B4RString*</returntype>
            <parameter>
                <name>uuid</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setUUID4">setUUID4</name>
<comment>
Create a UUID from -128 bytes of memory.
 @param [in] pData The pointer to the start of the UUID.
 @param [in] size The size of the data.
 @param [in] msbFirst Is the MSB first in pData memory?
</comment>
                 <returntype>B4R::B4RString*</returntype>
            <parameter>
                <name>uuid</name>
                <type>Byte[]</type>
            </parameter>
            <parameter>
                <name>msbFirst</name>
                <type>Bool</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="bitSize">bitSize</name>
<comment>
 Get the number of bits in this uuid.
 return The number of bits in the UUID.  One of 16, 32 or 128.
</comment>
                 <returntype>Byte</returntype>
            <parameter>
                <name>uuid</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="equals">equals</name>
<comment>
 Compare a UUID against this UUID.
 param [in] uuid The UUID to compare against.
 return True if the UUIDs are equal and false otherwise.
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>uuid1</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>uuid2</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getNative">getNative</name>
<comment>
 Get the native UUID value.
 return The native UUID value or NULL if not set.
</comment>
                 <returntype>Byte[]</returntype>
            <parameter>
                <name>uuid</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="to128">to128</name>
<comment>
 Convert a UUID to its 128 bit representation.
 A UUID can be internally represented as 16bit, 32bit or the full 128bit.
 This method will convert 16 or 32 bit representations to the full 128bit.
</comment>
                 <returntype>B4R::B4RString*</returntype>
            <parameter>
                <name>uuid</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="fromString">fromString</name>
<comment>
 Create a BLEUUID from a string of the form:
 0xNNNN
 0xNNNNNNNN
 0x-UUID-
 NNNN
 NNNNNNNN
 -UUID-
</comment>
                 <returntype>Byte[]</returntype>
            <parameter>
                <name>uuid</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
    </class>
    <version>1</version>
</root>
