<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<root>
    <doclet-version-NOT-library-version>1.00</doclet-version-NOT-library-version>
    <class>
        <name>B4R::B4RM5StickCPlus2</name>
        <shortname>M5StickCPlus2</shortname>
        <comment>@class B4RM5StickCPlus2
@brief Wrapper class that exposes the M5Unified library for the M5 StickC-Plus2 to B4R.

Provides access to display, button, and power functionality of the M5StickC Plus2
via simple B4R-compatible methods and constants.</comment>
        <event>KeyPressed (Key As String)</event>
        <property>
            <name>Rotation</name>
            <comment>@brief Sets/gets the display rotation.

@param rotation Rotation value (0–3). Use predefined constants (e.g., M5_ROTATION_LANDSCAPE).</comment>
            <returntype>Byte</returntype>
            <parameter>
                <name>rotation</name>
                <type>Byte</type>
            </parameter>
        </property>
        <method>
            <name DesignerName="Initialize">Initialize</name>
            <comment>@brief Initializes the M5 core and power module.

@note Performs display and power subsystem setup. Clears the display after initialization.

@return True if initialization succeeded, False otherwise.</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="InitializeWithButtonEvent">InitializeWithButtonEvent</name>
            <comment>@brief Initializes the M5 core and power module with button event.

@note Performs display and power subsystem setup. Clears the display after initialization.
@note Enables to use the 3 buttons BtnA, BtnB, BtnPWR with event.

@param String Callback method defined in the B4R code.</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>KeyPressedSub</name>
                <type>SubVoidByte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="InitializeWithRTC">InitializeWithRTC</name>
            <comment>@brief Initializes the RTC, M5 core and power module.

@note Performs NTP sync, display and power subsystem setup. Clears the display after initialization.

@param String timezone Local timezone. See list of timezones github.com/nayarsystems/posix_tz_db/blob/master/zones.csv
@note Europe/Berlin "CET-1CEST,M3.5.0,M10.5.0/3"

@return True if initialization succeeded, False otherwise.</comment>
            <returntype>bool</returntype>
            <parameter>
                <name>timezone</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Clear">Clear</name>
            <comment>@brief Clears the LCD screen using the default background color.</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="ClearColor">ClearColor</name>
            <comment>@brief Clears the LCD screen and sets a new color.

@param int bgColor Background color</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>bgColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ClearArea">ClearArea</name>
            <comment>@brief Clears a rectangular area with the current background color</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ClearTextArea">ClearTextArea</name>
            <comment>@brief Clears a rectangular area with the current background color</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>text</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>textSize</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBrightness">SetBrightness</name>
            <comment>@brief Set the backlight brightness in the range 0-255.

@param Byte Brightness value (0–255).</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>brightness</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetCursor">SetCursor</name>
            <comment>@brief Sets the text cursor position.

@param x X-coordinate in pixels.
@param y Y-coordinate in pixels.</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetTextSize">SetTextSize</name>
            <comment>@brief Sets the text size multiplier &gt; only affects bitmap fonts.

@param size Float text size multiplier (1 = normal size).</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>size</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetTextColor">SetTextColor</name>
            <comment>@brief Sets the text color for all subsequent prints.

@param color TFT color constant (e.g., TFT_WHITE).</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Print">Print</name>
            <comment>@brief Prints a string at the current cursor position.

@param text Pointer to a B4RString object containing the text to print.</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>text</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="PrintCentered">PrintCentered</name>
            <comment>Print text centered at (xCenter, y) with optional background.
@param xCenter X center position
@param y Y position
@param text Text to print
@param textSize Text size (1–7). If negative, keeps current size
@param textColor Text color
@param bgColor Optional background color. If negative, background is NOT drawn</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>xCenter</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>text</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>textSize</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>textColor</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>bgColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="PrintNum">PrintNum</name>
            <comment>@brief Prints a floating-point number with 2 decimal places.

@param value Float value to print.</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>value</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="PrintNumDecimals">PrintNumDecimals</name>
            <comment>@brief Prints a floating-point number with the given decimal places.

@param value Float value to print.</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>value</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>decimals</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetTextAt">SetTextAt</name>
            <comment>@brief Prints a string at a specific screen position.

@param x X-coordinate in pixels.
@param y Y-coordinate in pixels.
@param text Pointer to a B4RString object containing the text to print.
@param textSize The text size (1–7 typical for the M5.Lcd). If negative (-1), current size is used.
@param textColor The text color in RGB565 format.</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>text</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>textSize</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>textColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetTextLengthInPixel">GetTextLengthInPixel</name>
            <comment>@brief Get the length of a string in pixel.

@param text Pointer to a B4RString object containing the text to measure.

@note Example: text length in pixel for the text "Hello World" and text size 3.
@note 198 = 11 characters * font width 18 pixel.

@return int Length of the string in pixel.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>text</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetHeader">SetHeader</name>
            <comment>@brief Displays a header text at the top of the screen, with optional background clearing.

@param text The text to display.
@param int textSize The text size (1–7 typical for M5.Lcd).
@param int alignment Text alignment: 0 = left, 1 = center, 2 = right.
@param int fgColor Foreground (text) color in RGB565 format.
@param int bgColor Background color in RGB565 format.
@param bool clear The background is cleared when true.</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>text</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>textSize</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>alignment</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>fgColor</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>bgColor</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>clear</name>
                <type>bool</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetFooter">SetFooter</name>
            <comment>@brief Displays a footer text at the bottom of the screen, with optional background clearing.

@param text The text to display.
@param int textSize The text size (1–7 typical for M5.Lcd).
@param int alignment Text alignment: 0 = left, 1 = center, 2 = right.
@param int fgColor Foreground (text) color in RGB565 format.
@param int bgColor Background color in RGB565 format. If negative (-1), the background is not cleared.
@param bool clear The background is cleared when true.</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>text</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>textSize</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>alignment</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>fgColor</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>bgColor</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>clear</name>
                <type>bool</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetHorLine">SetHorLine</name>
            <comment>@brief Draws a horizontal line at the specified Y position.

@param int y Y position in pixels.
@param int color Line color in RGB565 format.
@param int thickness Line thickness in pixels.</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>y</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>thickness</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="UpdateFontMetrics">UpdateFontMetrics</name>
            <comment>@brief Updates the current font metrics.

@details
Retrieves reliable width, height, and baseline metrics for the active font.
Handles special cases where built-in digit or proportional fonts report
width = 0 by using fallback measurement.

@note Should be called after changing the font or text size.</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="GetFontWidth">GetFontWidth</name>
            <comment>@brief Get the approximate width of the current font in pixels.

@details
For built-in bitmap fonts (ID 1–4), this returns the exact monospace character width.
For proportional or digit fonts (ID 6–8) and FreeFonts, the internal width may be undefined
and reported as 0. In that case, a fallback is used that measures the width of the digit '0'.

@note
This function provides an approximate average character width.
Use `textWidth(const char*)` for accurate text length measurement.

@return Average character width in pixels (never 0).</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name DesignerName="GetFontHeight">GetFontHeight</name>
            <comment>@brief Get the height of the current font in pixels.

@details
For most built-in fonts, this returns the font’s nominal pixel height.
For proportional or FreeFonts, this value may vary depending on the glyph.

@note
This value is usually correct even when `fontWidth()` returns 0.

@return Font height in pixels.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name DesignerName="SetFreeFont">SetFreeFont</name>
            <comment>@brief Sets the free font &gt; ignores SetTextSize and has a fixed scale.

@note FreeSansBold24pt7b, Large, Big numbers (e.g., battery %)
@note FreeSansBold18pt7b, Medium, Headers
@note FreeMono12pt7b, Small, Data labels
@note Default, default , UI text

@param int id value (0–3). Use predefined constants (e.g., UI_FONT_MONO12).</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>fontId</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetTextFont">SetTextFont</name>
            <comment>@brief Sets the current text font (1–4) and scaling factor.

This method configures one of the standard built-in bitmap fonts (1–4)
used for general UI text. Font 1 is the default small monospace font,
while Font 4 provides a larger, more readable size for headings.

@param fontId    Font ID in the range [1–4]. Values outside the range
                 are clamped automatically to valid limits.
@param textSize  Text scaling factor (zoom). Values outside the range
                 [UI_TEXTSIZE_MIN–UI_TEXTSIZE_MAX] are clamped automatically.

@note FreeFont is disabled internally before applying the new font.
@see SetDigitFont
@see SetFontDefault</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>fontId</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>textSize</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetDigitFont">SetDigitFont</name>
            <comment>@brief Sets a large numeric font (6–8) optimized for displaying digits.

This method configures one of the built-in large fonts (6–8) that are
optimized for numeric displays such as voltages, temperatures, or
other dashboards. These fonts typically support digits only (0–9)
and are fixed-size (not scalable).

FONT6 = Bold rounded numeric font, clean, modern look.
FONT7 = 7-segment LED style, perfect for clock or power meters.
FONT8 = Very large block digits, ideal for full-screen readings, Keep size 1 to display 4 digits.

@param fontId  Font ID in the range [6–8]. Values outside the range
               are clamped automatically to valid limits.
@param textSize  Text scaling factor (zoom).
                 Min value is 1.

@note FreeFont is disabled internally before applying the new font.
@see SetTextFont
@see SetFontDefault</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>fontId</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>textSize</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetFontDefault">SetFontDefault</name>
            <comment>@brief Reset the LCD to the default font.

This disables any active FreeFont and sets the built-in FONT 1
with default text size (1). Useful to return to a known state.

@note After calling this, any previously set FreeFont or custom
      bitmap font is cleared.</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="DrawRect">DrawRect</name>
            <comment>@brief Drawing functions (self explain).</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="FillRect">FillRect</name>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="DrawRoundRect">DrawRoundRect</name>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>r</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="FillRoundRect">FillRoundRect</name>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>r</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="DrawCircle">DrawCircle</name>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>r</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="FillCircle">FillCircle</name>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>r</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="DrawLine">DrawLine</name>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>x0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>y0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>x1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>y1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="StartWrite">StartWrite</name>
            <comment>@brief Start or end writing to the LCD.</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="EndWrite">EndWrite</name>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="GetWidth">GetWidth</name>
            <comment>@brief Get the width of the LCD.

@return int Width in pixel of the LCD in pixel.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name DesignerName="GetHeight">GetHeight</name>
            <comment>@brief Get the heigth of the LCD.

@return int Height in pixel of the LCD in pixel.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name DesignerName="GetCenterX">GetCenterX</name>
            <comment>@brief Get the center X position of the LCD.

@return int Center X.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name DesignerName="GetCenterY">GetCenterY</name>
            <comment>@brief Get the center Y position of the LCD.

@return int Center Y.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name DesignerName="IsPortrait">IsPortrait</name>
            <comment>@brief Checks if the display is in portrait mode.

@return true Portrait mode else false Landscape mode.</comment>
            <returntype>bool</returntype>
        </method>
        <method>
            <name DesignerName="ButtonA_Pressed">ButtonA_Pressed</name>
            <comment>@brief Checks whether Button A is currently pressed.

@return True if Button A is pressed, False otherwise.</comment>
            <returntype>bool</returntype>
        </method>
        <method>
            <name DesignerName="ButtonB_Pressed">ButtonB_Pressed</name>
            <comment>@brief Checks whether Button B is currently pressed.

@return True if Button B is pressed, False otherwise.</comment>
            <returntype>bool</returntype>
        </method>
        <method>
            <name DesignerName="BatteryLevel">BatteryLevel</name>
            <comment>@brief Returns the battery charge level.

@return int Battery level in percentage )0-100).</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name DesignerName="BatteryVoltage">BatteryVoltage</name>
            <comment>@brief Returns the current battery voltage.

@return float Battery voltage in millivolts (0-5000).</comment>
            <returntype>float</returntype>
        </method>
        <method>
            <name DesignerName="IsBatteryLow">IsBatteryLow</name>
            <comment>@brief Checks whether the battery is considered low.

Compares current voltage against @ref M5_BATTERY_LOW.

@return True if battery voltage is below threshold.</comment>
            <returntype>bool</returntype>
        </method>
        <method>
            <name DesignerName="IsBatteryCritical">IsBatteryCritical</name>
            <comment>@brief Checks whether the battery is considered critical.

Compares current voltage against @ref M5_BATTERY_CRITICAL.

@return True if battery voltage is below critical threshold.</comment>
            <returntype>bool</returntype>
        </method>
        <method>
            <name DesignerName="BatteryCheck">BatteryCheck</name>
            <comment>@brief Perform battery health check and optionally power off if voltage too low.

@param thresholdMv Minimum safe voltage (in mV).
@note Default uses M5_BATTERY_LOW constant.
@param delayMs Optional delay before power off to display warning (default 3000 ms).

@return true if shutdown was triggered, false if battery is OK</comment>
            <returntype>bool</returntype>
            <parameter>
                <name>thresholdMv</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>delayMs</name>
                <type>Long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="DrawBattery">DrawBattery</name>
            <comment>@brief Draw small battery icon at top right with optional percentage and tiny outlined battery level bar.
@note Bar colors: Green full (greater 3.8 V), Yellow mid-level, Red for low (less 3.55 V)

@param int voltage Measure battery voltage in mV.
@param bool showPercent to display battery level in percentage 0-100%.</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>voltage</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>showPercent</name>
                <type>bool</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetLed">SetLed</name>
            <comment>@brief Set the state of the power LED.</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>state</name>
                <type>bool</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="PowerOff">PowerOff</name>
            <comment>@brief Power the device off.</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="RTC_IsEnabled">RTC_IsEnabled</name>
            <comment>@brief Check if the RTC is enabled.

@return bool True = enabled, False disabled.</comment>
            <returntype>bool</returntype>
        </method>
        <method>
            <name DesignerName="RTC_SetDateTime">RTC_SetDateTime</name>
            <comment>@brief Set the RTC date and time.

@param int year, Byte month, Byte day, Byte hour, Byte minute, Byte second.</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>year</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>month</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>day</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>hour</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>minute</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>second</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="RTC_SetDate">RTC_SetDate</name>
            <comment>@brief Set the RTC date.

@param int year, Byte month, Byte day.</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>year</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>month</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>day</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="RTC_SetTime">RTC_SetTime</name>
            <comment>@brief Set the RTC time.

@param Byte hour, Byte minute, Byte second.</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>hour</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>minute</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>second</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="RTC_UpdateDateTime">RTC_UpdateDateTime</name>
            <comment>@brief Update internal date and time variables from the RTC.</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="RTC_Date">RTC_Date</name>
            <comment>@brief Get the current date (1–31).</comment>
            <returntype>Byte</returntype>
        </method>
        <method>
            <name DesignerName="RTC_Month">RTC_Month</name>
            <comment>@brief Get the current month (1–12).</comment>
            <returntype>Byte</returntype>
        </method>
        <method>
            <name DesignerName="RTC_Year">RTC_Year</name>
            <comment>@brief Get the current year (2000 + NNN).</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name DesignerName="RTC_Hour">RTC_Hour</name>
            <comment>@brief Get the current hour (0–23).</comment>
            <returntype>Byte</returntype>
        </method>
        <method>
            <name DesignerName="RTC_Minute">RTC_Minute</name>
            <comment>@brief Get the current minute (0–59).</comment>
            <returntype>Byte</returntype>
        </method>
        <method>
            <name DesignerName="RTC_Second">RTC_Second</name>
            <comment>@brief Get the current second (0–59).</comment>
            <returntype>Byte</returntype>
        </method>
        <method>
            <name DesignerName="RTC_DayOfWeek">RTC_DayOfWeek</name>
            <comment>@brief Get the current day of week (0-6).</comment>
            <returntype>Byte</returntype>
        </method>
        <method>
            <name DesignerName="RTC_GetTimeString">RTC_GetTimeString</name>
            <comment>@brief Get the current time as formatted string.

@return Time string in format "HH:MM:SS"</comment>
            <returntype>B4R::B4RString*</returntype>
        </method>
        <method>
            <name DesignerName="RTC_GetDateString">RTC_GetDateString</name>
            <comment>@brief Get the current date as formatted string.

@return string Date in format "DD/MM/YYYY"</comment>
            <returntype>B4R::B4RString*</returntype>
        </method>
        <method>
            <name DesignerName="RTC_SetDateTimeFromNTP">RTC_SetDateTimeFromNTP</name>
            <comment>@brief Get the date and time from the NTP server and set the class vars.
@note List of timezones: https://github.com/nayarsystems/posix_tz_db/blob/master/zones.csv

@param timezone See list of timezones github.com/nayarsystems/posix_tz_db/blob/master/zones.csv

@return true if datetime obtained, false if error</comment>
            <returntype>bool</returntype>
            <parameter>
                <name>timezone</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="DrawIconBattery">DrawIconBattery</name>
            <comment>Draw a battery icon with level indicator
@param startX, startY: top-left corner of the icon
@param voltage: battery voltage</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>startX</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>startY</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>voltage</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="DrawIconWiFi">DrawIconWiFi</name>
            <comment>Draw a Wi-Fi signal icon
@param strength: 0–3 bars</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>startX</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>startY</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>strength</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="DrawIconSolar">DrawIconSolar</name>
            <comment>Draw a simple solar icon
@param level: 0–100%</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>startX</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>startY</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>level</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="DrawIconGrid">DrawIconGrid</name>
            <comment>Draw a grid (power) icon
@param active: true = red, false = white</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>startX</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>startY</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>active</name>
                <type>bool</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="DrawIconTemp">DrawIconTemp</name>
            <comment>Draw a temperature icon
@param tempCelsius: temperature in °C</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>startX</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>startY</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>tempCelsius</name>
                <type>float</type>
            </parameter>
        </method>
        <field>
            <name DesignerName="M5_LCD_WIDTH">M5_LCD_WIDTH</name>
            <comment>@name Display Constants
@brief Defines LCD dimensions in pixels.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name DesignerName="M5_LCD_HEIGHT">M5_LCD_HEIGHT</name>
            <returntype>int</returntype>
        </field>
        <field>
            <name DesignerName="M5_ROTATION_PORTRAIT">M5_ROTATION_PORTRAIT</name>
            <comment>@name Rotation Constants
@brief Display rotation modes (0–3).
@note Portrait, Landscape, Inverted portrait, Inverted landscape</comment>
            <returntype>Byte</returntype>
        </field>
        <field>
            <name DesignerName="M5_ROTATION_LANDSCAPE">M5_ROTATION_LANDSCAPE</name>
            <returntype>Byte</returntype>
        </field>
        <field>
            <name DesignerName="M5_ROTATION_PORTRAIT_INV">M5_ROTATION_PORTRAIT_INV</name>
            <returntype>Byte</returntype>
        </field>
        <field>
            <name DesignerName="M5_ROTATION_LANDSCAPE_INV">M5_ROTATION_LANDSCAPE_INV</name>
            <returntype>Byte</returntype>
        </field>
        <field>
            <name DesignerName="UI_ALIGN_LEFT">UI_ALIGN_LEFT</name>
            <comment>@name UI Text Align Constants
@brief Set align value for SetHeader, SetFooter.</comment>
            <returntype>Byte</returntype>
        </field>
        <field>
            <name DesignerName="UI_ALIGN_CENTER">UI_ALIGN_CENTER</name>
            <returntype>Byte</returntype>
        </field>
        <field>
            <name DesignerName="UI_ALIGN_RIGHT">UI_ALIGN_RIGHT</name>
            <returntype>Byte</returntype>
        </field>
        <field>
            <name DesignerName="UI_FREEFONT_DEFAULT">UI_FREEFONT_DEFAULT</name>
            <comment>@name UI Free Font Constants (fix scale)
@brief Set free font type used to display text. These are fixed scaled.

@note FreeFonts (fixed size, not scaled by SetTextSize)</comment>
            <returntype>Byte</returntype>
            <parameter>
                <name>built</name>
                <type>B4R::fallback</type>
            </parameter>
            <parameter>
                <name>font</name>
                <type>B4R::in</type>
            </parameter>
        </field>
        <field>
            <name DesignerName="UI_FREEFONT_SANS9">UI_FREEFONT_SANS9</name>
            <returntype>Byte</returntype>
        </field>
        <field>
            <name DesignerName="UI_FREEFONT_SANS12">UI_FREEFONT_SANS12</name>
            <returntype>Byte</returntype>
        </field>
        <field>
            <name DesignerName="UI_FREEFONT_SANS18">UI_FREEFONT_SANS18</name>
            <returntype>Byte</returntype>
        </field>
        <field>
            <name DesignerName="UI_FREEFONT_SANS24">UI_FREEFONT_SANS24</name>
            <returntype>Byte</returntype>
        </field>
        <field>
            <name DesignerName="UI_FREEFONT_MONO9">UI_FREEFONT_MONO9</name>
            <returntype>Byte</returntype>
        </field>
        <field>
            <name DesignerName="UI_FREEFONT_MONO12">UI_FREEFONT_MONO12</name>
            <returntype>Byte</returntype>
        </field>
        <field>
            <name DesignerName="UI_FREEFONT_MONO18">UI_FREEFONT_MONO18</name>
            <returntype>Byte</returntype>
        </field>
        <field>
            <name DesignerName="UI_FREEFONT_SERIF12">UI_FREEFONT_SERIF12</name>
            <returntype>Byte</returntype>
        </field>
        <field>
            <name DesignerName="UI_FREEFONT_SERIF18">UI_FREEFONT_SERIF18</name>
            <returntype>Byte</returntype>
        </field>
        <field>
            <name DesignerName="UI_TEXTFONT_1">UI_TEXTFONT_1</name>
            <comment>Font ID: 1, Name: FONT 1, Pixel size (WxH): 5×7, Notes: Default font, monospace, very compact, classic 5×7 look.</comment>
            <returntype>Byte</returntype>
        </field>
        <field>
            <name DesignerName="UI_TEXTFONT_2">UI_TEXTFONT_2</name>
            <comment>Font ID: 2, Name: FONT 2, Pixel size (WxH): 7×13, Notes: Slightly larger, monospace, good for small labels.</comment>
            <returntype>Byte</returntype>
        </field>
        <field>
            <name DesignerName="UI_TEXTFONT_4">UI_TEXTFONT_4</name>
            <comment>Font ID: 4, Name: FONT 4, Pixel size (WxH): 11×18, Notes: Medium size, more readable, standard for UI text.</comment>
            <returntype>Byte</returntype>
        </field>
        <field>
            <name DesignerName="UI_TEXTFONT_DEFAULT">UI_TEXTFONT_DEFAULT</name>
            <comment>Default Text (same as Font ID 1)</comment>
            <returntype>Byte</returntype>
        </field>
        <field>
            <name DesignerName="UI_TEXTFONT_6">UI_TEXTFONT_6</name>
            <comment>Font ID: 6, Name: FONT 6, Pixel size (WxH): 16×26, Notes: Large font, clear, good for headings or numeric displays.</comment>
            <returntype>Byte</returntype>
        </field>
        <field>
            <name DesignerName="UI_DIGITFONT_LARGE">UI_DIGITFONT_LARGE</name>
            <returntype>Byte</returntype>
            <parameter>
                <name>for</name>
                <type>B4R::Alias</type>
            </parameter>
        </field>
        <field>
            <name DesignerName="UI_TEXTFONT_7">UI_TEXTFONT_7</name>
            <comment>Font ID: 7, Name: FONT 7, Pixel size (WxH): 26×40, Notes: 7-segment style, mostly used for big numbers or indicators.</comment>
            <returntype>Byte</returntype>
        </field>
        <field>
            <name DesignerName="UI_DIGITFONT_LCD">UI_DIGITFONT_LCD</name>
            <returntype>Byte</returntype>
            <parameter>
                <name>for</name>
                <type>B4R::Alias</type>
            </parameter>
            <parameter>
                <name>style</name>
                <type>B4R::LCD</type>
            </parameter>
        </field>
        <field>
            <name DesignerName="UI_TEXTFONT_8">UI_TEXTFONT_8</name>
            <comment>Font ID: 8, Name: FONT 8, Pixel size (WxH): 32×53, Notes: Extra-large font, best for big numeric displays (like dashboards).</comment>
            <returntype>Byte</returntype>
        </field>
        <field>
            <name DesignerName="UI_DIGITFONT_XL">UI_DIGITFONT_XL</name>
            <returntype>Byte</returntype>
            <parameter>
                <name>for</name>
                <type>B4R::Alias</type>
            </parameter>
        </field>
        <field>
            <name DesignerName="UI_TEXTSIZE_MIN">UI_TEXTSIZE_MIN</name>
            <comment>@name UI Textsize Constants (bitmap fonts) for TEXTFONT1-4
@brief Set min and max text size (1-10) for only bitmap fonts, not FreeFonts.

@note Test max 9 or 10.
@note Default size 1 is used when no size specified.</comment>
            <returntype>Byte</returntype>
        </field>
        <field>
            <name DesignerName="UI_TEXTSIZE_MAX">UI_TEXTSIZE_MAX</name>
            <returntype>Byte</returntype>
        </field>
        <field>
            <name DesignerName="UI_TEXTSIZE_DEFAULT">UI_TEXTSIZE_DEFAULT</name>
            <returntype>Byte</returntype>
        </field>
        <field>
            <name DesignerName="COLOR_BLACK">COLOR_BLACK</name>
            <comment>@name Color Constants
@brief Common color definitions for the LCD.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name DesignerName="COLOR_NAVY">COLOR_NAVY</name>
            <returntype>int</returntype>
        </field>
        <field>
            <name DesignerName="COLOR_DARKGREEN">COLOR_DARKGREEN</name>
            <returntype>int</returntype>
        </field>
        <field>
            <name DesignerName="COLOR_DARKCYAN">COLOR_DARKCYAN</name>
            <returntype>int</returntype>
        </field>
        <field>
            <name DesignerName="COLOR_MAROON">COLOR_MAROON</name>
            <returntype>int</returntype>
        </field>
        <field>
            <name DesignerName="COLOR_PURPLE">COLOR_PURPLE</name>
            <returntype>int</returntype>
        </field>
        <field>
            <name DesignerName="COLOR_OLIVE">COLOR_OLIVE</name>
            <returntype>int</returntype>
        </field>
        <field>
            <name DesignerName="COLOR_LIGHTGREY">COLOR_LIGHTGREY</name>
            <returntype>int</returntype>
        </field>
        <field>
            <name DesignerName="COLOR_DARKGREY">COLOR_DARKGREY</name>
            <returntype>int</returntype>
        </field>
        <field>
            <name DesignerName="COLOR_BLUE">COLOR_BLUE</name>
            <returntype>int</returntype>
        </field>
        <field>
            <name DesignerName="COLOR_GREEN">COLOR_GREEN</name>
            <returntype>int</returntype>
        </field>
        <field>
            <name DesignerName="COLOR_CYAN">COLOR_CYAN</name>
            <returntype>int</returntype>
        </field>
        <field>
            <name DesignerName="COLOR_RED">COLOR_RED</name>
            <returntype>int</returntype>
        </field>
        <field>
            <name DesignerName="COLOR_MAGENTA">COLOR_MAGENTA</name>
            <returntype>int</returntype>
        </field>
        <field>
            <name DesignerName="COLOR_YELLOW">COLOR_YELLOW</name>
            <returntype>int</returntype>
        </field>
        <field>
            <name DesignerName="COLOR_WHITE">COLOR_WHITE</name>
            <returntype>int</returntype>
        </field>
        <field>
            <name DesignerName="COLOR_ORANGE">COLOR_ORANGE</name>
            <returntype>int</returntype>
        </field>
        <field>
            <name DesignerName="COLOR_GREENYELLOW">COLOR_GREENYELLOW</name>
            <returntype>int</returntype>
        </field>
        <field>
            <name DesignerName="COLOR_PINK">COLOR_PINK</name>
            <returntype>int</returntype>
        </field>
        <field>
            <name DesignerName="COLOR_BROWN">COLOR_BROWN</name>
            <returntype>int</returntype>
        </field>
        <field>
            <name DesignerName="COLOR_GOLD">COLOR_GOLD</name>
            <returntype>int</returntype>
        </field>
        <field>
            <name DesignerName="COLOR_SILVER">COLOR_SILVER</name>
            <returntype>int</returntype>
        </field>
        <field>
            <name DesignerName="COLOR_SKYBLUE">COLOR_SKYBLUE</name>
            <returntype>int</returntype>
        </field>
        <field>
            <name DesignerName="COLOR_VIOLET">COLOR_VIOLET</name>
            <returntype>int</returntype>
        </field>
        <field>
            <name DesignerName="COLOR_TRANSPARENT">COLOR_TRANSPARENT</name>
            <returntype>int</returntype>
        </field>
        <field>
            <name DesignerName="M5_BUTTON_A">M5_BUTTON_A</name>
            <comment>@name Button Constants
@brief Define 3 buttons to be used by the button event.
@note BtnA GPIO37, BtnB GPIO39, BtnPWR GPIO35.</comment>
            <returntype>Byte</returntype>
        </field>
        <field>
            <name DesignerName="M5_BUTTON_B">M5_BUTTON_B</name>
            <returntype>Byte</returntype>
        </field>
        <field>
            <name DesignerName="M5_BUTTON_PWR">M5_BUTTON_PWR</name>
            <returntype>Byte</returntype>
        </field>
        <field>
            <name DesignerName="BTN_A">BTN_A</name>
            <comment>Aliases for developer comfort for those familiar with Arduino M5 APIs (BtnA, BtnB)</comment>
            <returntype>Byte</returntype>
        </field>
        <field>
            <name DesignerName="BTN_B">BTN_B</name>
            <returntype>Byte</returntype>
        </field>
        <field>
            <name DesignerName="BTN_PWR">BTN_PWR</name>
            <returntype>Byte</returntype>
        </field>
        <field>
            <name DesignerName="M5_ON">M5_ON</name>
            <comment>@name ON/OFF Constants
@brief Define ON or OFF constants.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name DesignerName="M5_OFF">M5_OFF</name>
            <returntype>int</returntype>
        </field>
        <field>
            <name DesignerName="M5_BATTERY_FULL">M5_BATTERY_FULL</name>
            <comment>@name Battery Level Constants
@brief Define 4 battery levels in mV.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name DesignerName="M5_BATTERY_MID">M5_BATTERY_MID</name>
            <returntype>int</returntype>
        </field>
        <field>
            <name DesignerName="M5_BATTERY_LOW">M5_BATTERY_LOW</name>
            <returntype>int</returntype>
        </field>
        <field>
            <name DesignerName="M5_BATTERY_CRITICAL">M5_BATTERY_CRITICAL</name>
            <returntype>int</returntype>
        </field>
        <field>
            <name DesignerName="M5STICKCPLUS2_VERSION">M5STICKCPLUS2_VERSION</name>
            <comment>@name Library version.
@brief Define the library version.
@note Keep as last constant entry for easy update.</comment>
            <returntype>int</returntype>
        </field>
    </class>
    <version>0.4</version>
</root>
