<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<root>
    <doclet-version-NOT-library-version>1.00</doclet-version-NOT-library-version>
    <class>
        <name>B4R::B4RESPWiFi</name>
        <shortname>ESP8266WiFi</shortname>
        <event>Connected (Success As Boolean)</event>
        <property>
            <name>LocalIp</name>
            <comment>Returns the local ip address as a string.</comment>
            <returntype>B4R::B4RString*</returntype>
        </property>
        <property>
            <name>AccessPointIp</name>
            <comment>Returns the board ip when the board acts as an access point.</comment>
            <returntype>B4R::B4RString*</returntype>
        </property>
        <property>
            <name>IsConnected</name>
            <comment>Returns true if WiFi is connected.</comment>
            <returntype>bool</returntype>
        </property>
        <method>
            <name DesignerName="Scan">Scan</name>
            <comment>Scans for wireless networks. Returns the number of networks found.</comment>
            <returntype>Byte</returntype>
        </method>
        <method>
            <name DesignerName="ScannedSSID">ScannedSSID</name>
            <comment>Returns the SSID of the network. Make sure to call Scan before calling this method.
Index - The index of the network in the internal list.</comment>
            <returntype>B4R::B4RString*</returntype>
            <parameter>
                <name>Index</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ScannedBSSID">ScannedBSSID</name>
            <comment>Returns the BSSID (MAC address) of the network. Make sure to call Scan before calling this method.
Index - The index of the network in the internal list</comment>
            <returntype>Byte[]</returntype>
            <parameter>
                <name>Index</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ScannedRSSI">ScannedRSSI</name>
            <comment>Returns the RSSI of the network. Make sure to call Scan before calling this method.
Index - The index of the network in the internal list.</comment>
            <returntype>Long</returntype>
            <parameter>
                <name>Index</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Connect">Connect</name>
            <comment>Tries to connect to the open network. Return True if successful.</comment>
            <returntype>bool</returntype>
            <parameter>
                <name>SSID</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Connect2">Connect2</name>
            <comment>Tries to connect to the secured network. Returns True if successful.</comment>
            <returntype>bool</returntype>
            <parameter>
                <name>SSID</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>Password</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Connect3">Connect3</name>
            <comment>Tries to connect to the network. Returns True if successful.
SSID - Network ssid.
Password - Network password. Pass an empty string if not needed.
Channel - Network ap channel. Pass 0 if not needed.
BSSID - Network bssid (Mac address). Pass Null if not needed.</comment>
            <returntype>bool</returntype>
            <parameter>
                <name>SSID</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>Password</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>Channel</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>BSSID</name>
                <type>Byte[]</type>
            </parameter>
        </method>

        <method>
            <name DesignerName="Connect4">Connect4</name>
            <comment>Tries to connect to the network. Returns True if successful.
SSID - Network ssid.
Password - Network password. Pass an empty string if not needed.
Channel - Network ap channel. Pass 0 if not needed.
BSSID - Network bssid (Mac address). Pass Null if not needed.
timeoutsecs - timeout in seconds to wait for WiFi-connection, starting 2 secs.</comment>
            <returntype>bool</returntype>
            <parameter>
                <name>SSID</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>Password</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>Channel</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>BSSID</name>
                <type>Byte[]</type>
            </parameter>
            <parameter>
                <name>timeoutsecs</name>
                <type>Byte</type>
            </parameter>
        </method>


        <method>
            <name DesignerName="ConnectAsync">ConnectAsync</name>
            <comment>Tries to connect to the network. Raises the Connected event.
SSID - Network ssid.
Password - Network password. Pass an empty string if not needed.
Channel - Network ap channel. Pass 0 if not needed.
BSSID - Network bssid (Mac address). Pass Null if not needed.</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>SSID</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>Password</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>Channel</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>BSSID</name>
                <type>Byte[]</type>
            </parameter>
            <parameter>
                <name>ConnectedSub</name>
                <type>SubVoidBool</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="StartAccessPoint">StartAccessPoint</name>
            <comment>Starts the soft access point.
SSID - The network name.</comment>
            <returntype>bool</returntype>
            <parameter>
                <name>SSID</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="StartAccessPoint2">StartAccessPoint2</name>
            <comment>Starts the soft access point.
SSID - The network name.
Password - Network password.</comment>
            <returntype>bool</returntype>
            <parameter>
                <name>SSID</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>Password</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Disconnect">Disconnect</name>
            <returntype>B4R::void</returntype>
        </method>
    </class>
    <class>
        <name>B4R::WiFiSocket</name>
        <shortname>WiFiSocket</shortname>
        <comment>A client socket implementation. Usage is identical to the usage of EthernetSocket.</comment>
        <property>
            <name>Stream</name>
            <comment>Gets the network stream. Can be used together with AsyncStreams.</comment>
            <returntype>B4R::B4RStream*</returntype>
        </property>
        <property>
            <name>Connected</name>
            <comment>Tests whether the client is connected.</comment>
            <returntype>bool</returntype>
        </property>
        <property>
            <name>RemoteIp</name>
            <comment>Returns the remote client ip address as a string.
Useful in server solutions.</comment>
            <returntype>B4R::B4RString*</returntype>
        </property>
        <property>
            <name>RemotePort</name>
            <comment>Returns the remote client port.</comment>
            <returntype>UInt</returntype>
        </property>
        <method>
            <name DesignerName="ConnectIP">ConnectIP</name>
            <comment>Tries to connect to the server. Returns true if connection was successful.
IP - Server ip address as an array of bytes.
Port - Server port.</comment>
            <returntype>bool</returntype>
            <parameter>
                <name>IP</name>
                <type>Byte[]</type>
            </parameter>
            <parameter>
                <name>Port</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ConnectHost">ConnectHost</name>
            <comment>Tries to connect to the server. Returns true if connection was successful.
Host - Host name.
Port - Server port.</comment>
            <returntype>bool</returntype>
            <parameter>
                <name>Host</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>Port</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Close">Close</name>
            <comment>Closes the connection.</comment>
            <returntype>B4R::void</returntype>
        </method>
    </class>
    <class>
        <name>B4R::WiFiSSLSocket</name>
        <shortname>WiFiSSLSocket</shortname>
        <comment>A client SSL socket implementation. Similar to WiFiSocket. Can only make SSL connections.
Note that the server certificate is not verified unless you explicitly verify it with the VerifyCertificate method.</comment>
        <property>
            <name>Stream</name>
            <comment>Gets the network stream. Can be used together with AsyncStreams.</comment>
            <returntype>B4R::B4RStream*</returntype>
        </property>
        <property>
            <name>Connected</name>
            <comment>Tests whether the client is connected.</comment>
            <returntype>bool</returntype>
        </property>
        <method>
            <name DesignerName="ConnectIP">ConnectIP</name>
            <comment>Tries to connect to the server. Returns true if connection was successful.
IP - Server ip address as an array of bytes.
Port - Server port.</comment>
            <returntype>bool</returntype>
            <parameter>
                <name>IP</name>
                <type>Byte[]</type>
            </parameter>
            <parameter>
                <name>Port</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="VerifyCertificate">VerifyCertificate</name>
            <comment>Doesn't do anything.</comment>
            <returntype>bool</returntype>
            <parameter>
                <name>FingerPrint</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>Host</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ConnectHost">ConnectHost</name>
            <comment>Tries to connect to the server. Returns true if connection was successful.
Host - Host name.
Port - Server port.</comment>
            <returntype>bool</returntype>
            <parameter>
                <name>Host</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>Port</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Close">Close</name>
            <comment>Closes the connection.</comment>
            <returntype>B4R::void</returntype>
        </method>
    </class>
    <class>
        <name>B4R::WiFiServerSocket</name>
        <shortname>WiFiServerSocket</shortname>
        <comment>A server socket implementation. Usage is identical to the usage of EthernetServerSocket.</comment>
        <event>NewConnection (NewSocket As WiFiSocket)</event>
        <property>
            <name>Socket</name>
            <comment>Returns the last connected socket.</comment>
            <returntype>B4R::WiFiSocket*</returntype>
        </property>
        <method>
            <name DesignerName="Initialize">Initialize</name>
            <comment>Initializes the server.
Port - The server port.
NewConnectionSub - The sub that will handle the NewConnection event.</comment>
            <returntype>B4R::void</returntype>
            <parameter>
                <name>Port</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>NewConnectionSub</name>
                <type>SubVoidWiFiSocket</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Listen">Listen</name>
            <comment>Starts listening for connections.
The NewConnection event will be raised when a client connects.
You should call Listen again after the connection has broken. AsyncStreams_Error is a good place for this call.</comment>
            <returntype>B4R::void</returntype>
        </method>
    </class>
    <class>
        <name>B4R::B4RWiFiUDP</name>
        <shortname>WiFiUDP</shortname>
        <comment>Allows receiving and sending UDP packets. Usage is identical to the usage of EthernetUDP.</comment>
        <event>PacketArrived (Data() As Byte, IP() As Byte, Port As UInt)</event>
        <method>
            <name DesignerName="Initialize">Initialize</name>
            <comment>Initializes the object. Returns True if successful.
Port - The UDP socket will be bound to this port.
PacketArrivedSub - The sub that handles the PacketArrived event.</comment>
            <returntype>bool</returntype>
            <parameter>
                <name>Port</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>PacketArrivedSub</name>
                <type>SubPacketArrived</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="BeginPacket">BeginPacket</name>
            <comment>Starts sending a packet. The packet will be sent when SendPacket is called.
IP - Target ip address.
Port - Target port address.</comment>
            <returntype>bool</returntype>
            <parameter>
                <name>IP</name>
                <type>Byte[]</type>
            </parameter>
            <parameter>
                <name>Port</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Write">Write</name>
            <comment>Writes data to the packet. Returns the number of bytes that were written successfully.
This method should only be called between a call to BeginPacket and SendPacket.
You can call Write multiple times.</comment>
            <returntype>Int</returntype>
            <parameter>
                <name>Data</name>
                <type>Byte[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SendPacket">SendPacket</name>
            <comment>Sends the packet.</comment>
            <returntype>bool</returntype>
        </method>
        <method>
            <name DesignerName="Close">Close</name>
            <comment>Closes the socket.</comment>
            <returntype>B4R::void</returntype>
        </method>
    </class>
    <version>1.61</version>
</root>
