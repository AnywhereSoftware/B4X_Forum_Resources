<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<root>
    <doclet-version-NOT-library-version>1.00</doclet-version-NOT-library-version>
    <class>
        <name>B4R::B4RFile</name>
        <shortname>File</shortname>
        <property>
            <name>Size</name>
<comment>
Returns the file size (number of bytes).
</comment>
            <returntype>ULong</returntype>
        </property>
        <property>
            <name>Name</name>
<comment>
Returns the file name.
</comment>
            <returntype>B4R::B4RString*</returntype>
        </property>
        <property>
            <name>IsDirectory</name>
<comment>
Returns true if this file entry is a directory.
</comment>
            <returntype>Bool</returntype>
        </property>
    </class>
    <class>
        <name>B4R::B4RSD32</name>
        <shortname>SD32</shortname>
        <method>
            <name DesignerName="Initialize">Initialize</name>
<comment>
Initializes SPI system on SPI by default and with all SD parameters by default. Returns True if successful.
Default Initialize : spi=SPI, ssPin= -1, sck=-1, miso=-1, mosi=-1, frequency=4000000, mountpoint="/sd", max_files=5, format_if_empty=false
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>format_if_empty</name>
                <type>Bool</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Initialize1">Initialize1</name>
<comment>
Initializes file system on SPI configured(default if not configured). SDss=SPI_CS configured. With more parameters for SD. Returns True if successful.
Default Initialize : spi=SPI, ssPin= -1, sck=-1, miso=-1, mosi=-1, frequency=4000000, mountpoint="/sd", max_files=5, format_if_empty=false
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>spi</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>SDss</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>frequency</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>max_files</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>format_if_empty</name>
                <type>Bool</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Initialize2">Initialize2</name>
<comment>
Initializes file system on SPI configuration provided. SDss=SPI_CS. Returns True if successful.
Default Initialize : spi=SPI, ssPin= -1, sck=-1, miso=-1, mosi=-1, frequency=4000000, mountpoint="/sd", max_files=5, format_if_empty=false
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>spi</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>SDss</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>SCLK</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>MISO</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>MOSI</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>format_if_empty</name>
                <type>Bool</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Initialize3">Initialize3</name>
<comment>
Initializes file system on SPI configurationprovided. SDss=SPI_CS. With more parameters for SD Returns True if successful.
Default Initialize : spi=SPI, ssPin= -1, sck=-1, miso=-1, mosi=-1, frequency=4000000, mountpoint="/sd", max_files=5, format_if_empty=false
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>spi</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>SDss</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>SCLK</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>MISO</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>MOSI</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>frequency</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>max_files</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>format_if_empty</name>
                <type>Bool</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="end">end</name>
            <returntype>B4R::void</returntype>
        </method>
        <property>
            <name>cardType</name>
            <returntype>Byte</returntype>
        </property>
        <property>
            <name>cardSize</name>
            <returntype>ULong</returntype>
        </property>
        <property>
            <name>totalBytes</name>
            <returntype>ULong</returntype>
        </property>
        <property>
            <name>usedBytes</name>
            <returntype>ULong</returntype>
        </property>
        <method>
            <name DesignerName="readRAW">readRAW</name>
                 <returntype>Bool</returntype>
            <parameter>
                <name>buffer</name>
                <type>Byte[]</type>
            </parameter>
            <parameter>
                <name>sector</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="writeRAW">writeRAW</name>
                 <returntype>Bool</returntype>
            <parameter>
                <name>buffer</name>
                <type>Byte[]</type>
            </parameter>
            <parameter>
                <name>sector</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="OpenRead">OpenRead</name>
<comment>
Opens a file in read only mode. Returns true if the file was opened successfully.
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>FileName</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="OpenReadWrite">OpenReadWrite</name>
<comment>
Opens a file in read and write mode. Returns true if the file was opened successfully.
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>FileName</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="OpenAppend">OpenAppend</name>
<comment>
Opens a file in append mode. Returns true if the file was opened successfully.
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>FileName</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <property>
            <name>CurrentFile</name>
<comment>
Returns the current open file.
</comment>
            <returntype>B4R::B4RFile*</returntype>
        </property>
        <property>
            <name>Stream</name>
<comment>
Returns the stream of the current open file.
</comment>
            <returntype>B4R::B4RStream*</returntype>
        </property>
        <property>
            <name>Position</name>
<comment>
Gets or sets the position in the current open file.
</comment>
            <returntype>ULong</returntype>
        </property>
        <method>
            <name DesignerName="SetPosition">SetPosition</name>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>p</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Close">Close</name>
<comment>
Closes the current open file.
</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="Exists">Exists</name>
<comment>
Checks whether the given file or directory exist.
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>FileName</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Remove">Remove</name>
<comment>
Deletes the given file. Returns true if the file was successfully deleted.
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>FileName</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Rename">Rename</name>
<comment>
Rename a file Returns true if rename is successfull.
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>FileName1</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>FileName2</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <property>
            <name>IsDirectory</name> 
<comment>
check if directory or file
</comment>
            <returntype>Bool</returntype>
        </property>
        <method>
            <name DesignerName="MKDir">MKDir</name>
                 <returntype>Bool</returntype>
            <parameter>
                <name>DIRName</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="RMDir">RMDir</name>
                 <returntype>Bool</returntype>
            <parameter>
                <name>DIRName</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ListFiles">ListFiles</name>
<comment>
Can be used in a For Each loop to iterate over the files in the folder.
Example:-code-
For Each f As File In fs.ListFiles("/")
    Log("Name: ", f.Name, ", Size: ", f.Size)
Next-/code-
</comment>
                 <returntype>FileIterator*</returntype>
            <parameter>
                <name>DirName</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <field>
            <name DefineMethod="true" DesignerName="ESP32_FSPI">B4R_FSPI</name>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ESP32_HSPI">B4R_HSPI</name>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ESP32_VSPI">B4R_VSPI</name>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ESP32C3_FSPI">B4RC3_FSPI</name>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ESP32C3_HSPI">B4RC3_HSPI</name>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ESP32S2_FSPI">B4RS2_FSPI</name>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ESP32S2_HSPI">B4RS2_HSPI</name>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ESP32S3_FSPI">B4RS3_FSPI</name>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ESP32S3_HSPI">B4RS3_HSPI</name>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="CARD_NONE">B4R_CARD_NONE</name>
            <returntype>Byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="CARD_MMC">B4R_CARD_MMC</name>
            <returntype>Byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="CARD_SD">B4R_CARD_SD</name>
            <returntype>Byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="CARD_SDHC">B4R_CARD_SDHC</name>
            <returntype>Byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="CARD_UNKNOWN">B4R_CARD_UNKNOWN</name>
            <returntype>Byte</returntype>
        </field>
    </class>
    <version>1.02</version>
</root>
