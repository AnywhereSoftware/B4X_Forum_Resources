Build1=Default,B4RDev
Group=Default Group
Library1=rcore
Library2=rirremoteex
Library3=rrandomaccessfile
NumberOfFiles=0
NumberOfLibraries=3
NumberOfModules=0
Version=4
@EndOfDesignText@
#Region Project Info
'B4R Library:	rIrRemoteEx
'Example:		IR Receiver to test receiving unknown protocols.
'Date: 			See globals VERSION
'Author:		Robert W.B. Linn
'Pins:			The TX default pin is used as defined in PinDefinitionsAndMore.h are used.
'Hardware:		Arduino UNO
'				KEYES IR-Receiver KY-022 with CHQ1838 Sensor (carrier frequency 38 kHz, distance max 18m).
'Software:		B4R 4.00 (64 bit), Arduino-CLI 1.2.2, JDK 14.
'Hints:			Set LONG DELAY after receive to avoid noise or multiple receives.

'Log Example
'[rIRRemoteEx irreceiver Looper] Received noise Or an unknown (Or Not yet enabled) protocol
'rawData[102]: 
' -3276750
' + 150,-1350
' + 200,-1250 + 150,- 200 +5500,-4550 + 200,-1050
' + 200,-1200 + 200,-1700 + 200,- 200 + 250,- 550
' + 200,- 100 + 250,- 550 + 250,-1000 + 250,-1100
' + 200,-1750 + 150,- 150 + 200,-1700 + 200,- 150
' + 200,-1700 + 200,- 150 + 250,-1600 + 200,- 200
' + 250,-1600 + 200,- 150 + 200,-1650 + 250,- 150
' + 200,-1650 + 200,- 200 + 200,-1600 + 200,- 200
' + 250,-1600 + 200,- 200 + 200,- 550 + 200,-2000
' + 250,-2000 + 200,- 200 + 200,- 550 + 250,-1100
' + 250,-1800 + 250,- 150 + 250,- 550 + 200,- 150
' + 200,-1650 + 200,-1050 + 200,-1100 + 200,-1800
' + 200,-2000 + 200,- 200 + 150,-1650 + 250,-2000
' + 150,- 200 + 200
'Sum: 67850
'[rIRRemoteEx irreceiver Looper] UNKNOWN data=0=0,1=3,2=27,3=4,4=25,5=3,6=4,7=110,8=91,9=4,10=21,11=4,12=24,13=4,14=34,15=4,16=4,17=5,18=11,19=4,20=2,21=5,22=11,23=5,24=20,25=5,26=22,27=4,28=35,29=3,30=3,31=4,32=34,33=4,34=3,35=4,36=34,37=4,38=3,39=5,40=32,41=4,42=4,43=5,44=32,45=4,46=3,47=4,48=33,49=5,50=3,51=4,52=33,53=4,54=4,55=4,56=32,57=4,58=4,59=5,60=32,61=4,62=4,63=4,64=11,65=4,66=40,67=5,68=40,69=4,70=4,71=4,72=11,73=5,74=22,75=5,76=36,77=5,78=3,79=5,80=11,81=4,82=3,83=4,84=33,85=4,86=21,87=4,88=22,89=4,90=36,91=4,92=40,93=4,94=4,95=3,96=33,97=5,98=40,99=3,100=4,101=4
'[NewData] +++
'[NewData] protocol=0,name=UNKNOWN,address=0,command=0,commandhex=00,flags=0,initialgapticks=65535,flags_is_repeat=1
'[NewData] rawdata len=102,decoded=0,hex=00000000
'[NewData] ---
#End Region

#Region Wiring
'IR-Receiver KY-022 = Arduino UNO (wirecolor)
'VCC = 5V (RED)
'RX = 2 (YELLOW)
'GND = GND (BLACK)
#End Region

#Region Project Attributes
	#AutoFlushLogs: True
	#CheckArrayBounds: True
	#StackBufferSize: 100
#End Region

Sub Process_Globals
	Private VERSION As String = "rRemoteEx IRRECEIVERUNKNOWN v20250506"

	Private serialLine As Serial
	Private irreceiver As IrReceiver
	Private bc As ByteConverter
End Sub

Private Sub AppStart
	serialLine.Initialize(115200)
	Log(CRLF, "[AppStart] ", VERSION)
	
	'Init the ireceiver with default receiver pin 2 (see PinDefinitionsAndMore.h) and callback event
	irreceiver.Initialize("NewData")
	irreceiver.EnableProtocolUnknown = True

	Log(CRLF, "[AppStart] waiting for data...")
End Sub

'Handle new IR data received for UNKNOWN protocol only
Private Sub NewData(data As IrDecodedData)
	
	If data.Protocol == irreceiver.PROTOCOL_UNKNOWN Then
		Log("[NewData] +++")
		Log("[NewData] protocol=", data.Protocol, ",name=", data.ProtocolName, ",address=", data.Address, ",command=", data.Command, ",commandhex=", HexFromByte(data.Command), ",flags=", data.Flags, ",initialgapticks=", data.InitialGapTicks, ",flags_is_repeat=",irreceiver.IRDATA_FLAGS_IS_REPEAT)
		Log("[NewData] rawdata len=", data.RawDataLen, ",decoded=", data.RawDataDecoded, ",hex=",HexFromULong(data.RawDataDecoded))
		Log("[NewData] ---")
	End If

	'Delay must be greater than 5 ms (RECORD_GAP_MICROS), otherwise the receiver sees it As one long signal
	Delay(irreceiver.DELAY_LONG_AFTER_RECEIVE)
End Sub

#Region HELPER
'Depends on: ByteConverter defined as global public bc as ByterConverter.

'Get the HEX string from a single byte value.
Public Sub HexFromByte(value As Byte) As String
	Return bc.HexFromBytes(Array As Byte(value))
End Sub

'Get the HEX string from an ULong value.
Public Sub HexFromULong(value As ULong) As String
	Return bc.HexFromBytes(bc.ULongsToBytes(Array As ULong(value)))
End Sub
#End Region

