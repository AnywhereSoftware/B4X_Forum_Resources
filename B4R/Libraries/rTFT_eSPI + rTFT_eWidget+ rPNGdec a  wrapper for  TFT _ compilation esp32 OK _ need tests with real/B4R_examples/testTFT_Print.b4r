Build1=Default,B4RDev
Group=Default Group
Library1=rcore
Library2=rtft_espi
Library3=rrandomaccessfile
NumberOfFiles=0
NumberOfLibraries=3
NumberOfModules=0
Version=4
@EndOfDesignText@

#Region Project Attributes
	#AutoFlushLogs: True
	#CheckArrayBounds: True
	#StackBufferSize: 600
#End Region
'Ctrl+Click to open the C code folder: ide://?File=%WINDIR%\System32\explorer.exe&Args=%PROJECT%\Objects\Src

'/*  
' Test the tft.print() viz. the libraries embedded write() function'

' This sketch used font 2, 4, 7
 
' Make sure all the required fonts are loaded by editing the
' User_Setup.h file in the TFT_eSPI library folder.

'  #########################################################################
'  ###### DON'T FORGET TO UPDATE THE User_Setup.h FILE IN THE LIBRARY ######
'  #########################################################################
' */
Sub Process_Globals
	Public Serial1 As Serial
'	Private wifi As ESP8266WiFi 
    Private bc As ByteConverter
	Private raf As RandomAccessFile
	Private TFT As TFT_eSPI
	Private TFTid As Long

End Sub

Private Sub AppStart
	Serial1.Initialize(115200)
	Log("AppStart")
	'example of connecting to a local network
'	If wifi.Connect2("SSID", "PASSWORD") Then
'		Log("Connected to network")
'	Else
'		Log("Failed to connect to network")
'	End If
	TFTid = TFT.Initialize(-1,-1)
	TFT.begin(0xFF)
	TFT.setRotation(2)
	AddLooper("localloop")
End Sub

Sub LocalLoop
	Dim rand As ULong = RunNative("getRandom",Null)
	TFT.fillScreen(random(0,0xFFFF))

  '// Fill screen with random colour so we can see the effect of printing with And without 
  '// a background colour defined
  TFT.fillScreen(rand)
  
  '// Set "cursor" at top left corner of display (0,0) And Select font 2
  '// (cursor will move to next line automatically during printing with 'tft.println'
  '//  Or stay on the line is there is room For the text with TFT.print)
  TFT.setCursor1(0, 0, 2)
  '// Set the font colour To be white with a black background, set text size multiplier To 1
  TFT.setTextColor1(TFT.TFT_WHITE,TFT.TFT_BLACK,False):  TFT.setTextSize(1)
  '// We can now plot text on screen using the "print" class
  TFT.println("Hello World!")
  
  '// Set the font colour To be yellow with no background, set To font 7
  TFT.setTextColor(TFT.TFT_YELLOW): TFT.setTextFont(7)
  TFT.println(1234.56)
  
  '// Set the font colour To be red with black background, set To font 4
  TFT.setTextColor1(TFT.TFT_RED,TFT.TFT_BLACK,False):    TFT.setTextFont(4)
  TFT.println(bc.StringFromBytes(UlongtoHexa(3735928559))): '// Should print DEADBEEF

  '// Set the font colour To be green with black background, set To font 4
  TFT.setTextColor1(TFT.TFT_GREEN,TFT.TFT_BLACK,False)
  TFT.setTextFont(4)
  TFT.println("Groop")
  TFT.println("I implore thee,")

  '// Change To font 2
  TFT.setTextFont(2)
  TFT.println("my foonting turlingdromes.")
  '// Can store strings in FLASH To save RAM
  TFT.println("And hooptiously drangle me")
  TFT.println("with crinkly bindlewurdles,")
  '// This Next line is deliberately made too long For the display width To test
  '// automatic text wrapping onto the Next line
  TFT.println("Or I will rend thee in the gobberwarts with my blurgleccheon, see if I don't!")
  
  '// Test some print formatting functions
  Dim  fnumber As Double = 123.45: Dim fnumberInBinary(16) As Byte: UIntToBinary(fnumber,fnumberInBinary)
  '// Set the font colour To be blue with no background, set To font 4
  TFT.setTextColor(TFT.TFT_BLUE):    TFT.setTextFont(4)
  TFT.print("Float = "): TFT.println(fnumber)           '// Print floating point number
  TFT.print("Binary = "): TFT.println(bc.stringfrombytes(fnumberInBinary)) '// Print As integer value in binary
  TFT.print("Hexadecimal = "): TFT.println(NumberFormat(fnumber,4,0)) '// Print As integer number in Hexadecimal
  Delay(10000) 
End Sub


Sub UinttoHexa(n As UInt) As Byte()
	Dim b(2) As Byte
	raf.Initialize(b, False) 'big endian
	raf.WriteUint16(n, 0)
'	Log( bc.HexFromBytes(b))
	Return bc.HexFromBytes(b)
End Sub

Sub UlongtoHexa(n As ULong) As Byte()
	Dim b(4) As Byte
	raf.Initialize(b, False) 'big endian
	raf.WriteULong32(n, 0)
'	Log( bc.HexFromBytes(b))
	Return bc.HexFromBytes(b)
End Sub

Sub UIntToBinary (Number As UInt, Result() As Byte)
	For i = 0 To 15
		If Bit.Get(Number, 15 - i) = 1 Then
			Result(i) = Asc("1")
		Else
			Result(i) = Asc("0")
		End If
	Next
End Sub

Sub random(Mini As ULong,Maxi As ULong) As ULong
	Dim tmp() As ULong = Array As ULong(Mini, Maxi)
	Return RunNative("getRandom",tmp)
End Sub
Sub randomSeed As ULong
	Return RunNative("setRandomSeed",0)
End Sub
#if C
//***********************
// random
//***********************  
 B4R::Object returnvalue;

 B4R::Object* getRandom(B4R::Object* o) { 
      B4R::Array* b = (B4R::Array*)B4R::Object::toPointer(o);
	  uint32_t* a = (uint32_t*) b->data;
	  uint32_t rand = random(a[0],a[1]); 
  	  return returnvalue.wrapNumber(rand);
 ;} 
//**********************
// randomseed
//**********************
 B4R::Object* setRandomSeed(B4R::Object* o) { 
      uint32_t ran =  (uint32_t) millis();
	  uint8_t * rand = (uint8_t*) &ran;
	  randomSeed(rand[0]); 
	  return returnvalue.wrapNumber(rand[0]);
 }; 
#End If
