Build1=Default,B4RDev
Group=Default Group
Library1=rcore
Library2=rtft_espi
NumberOfFiles=0
NumberOfLibraries=2
NumberOfModules=0
Version=4
@EndOfDesignText@

#Region Project Attributes
	#AutoFlushLogs: True
	#CheckArrayBounds: True
	#StackBufferSize: 600
#End Region
'Ctrl+Click to open the C code folder: ide://run?File=%WINDIR%\System32\explorer.exe&Args=%PROJECT%\Objects\Src

'// Draw random coloured smooth (anti-aliased) rounded rectangles on the TFT


Sub Process_Globals
	Public Serial1 As Serial
	Private TFT As TFT_eSPI
	Private TFTid As Long
'	Private bc As ByteConverter
'	Private DEG2RAD As Double = 0.0174532925
'	Private MAX_IMAGE_WIDTH As UInt = 240
'	Private xpos As UInt = 0
'	Private ypos As UInt = 0
End Sub

Private Sub AppStart
	Serial1.Initialize(115200)
	Log("AppStart")
	'example of connecting to a local network
'	If wifi.Connect2("SSID", "PASSWORD") Then
'		Log("Connected to network")
'	Else
'		Log("Failed to connect to network")
'	End If
	Log("TFT Booting...")
	
	TFTid = TFT.Initialize(-1,-1)	
  '// Initialise the screen
	TFT.begin(0xFF)
	TFT.fillScreen(TFT.TFT_BLACK)
	Log("\r\nInitialisation done.")

    AddLooper("LocalLoop")
End Sub

'// =========================================================================
'// Loop
'// =========================================================================
Sub LocalLoop
	TFT.fillScreen(TFT.TFT_BLACK)
	TFT.setCursor(0, 0)
    Dim radius, w, h, t,x, y As Int
	'// Draw some random smooth rounded rectangles
	For i = 0 To 20
	   radius = random(0, 60)
	   w = random(2 * radius, 160)
	   h = random(2 * radius, 160)
	   t = random(1, radius / 3)
	   x = random(0, TFT.width() - w)
	   y = random(0, TFT.height() - h)

	'// random colour is anti-aliased (blended) with background colour (black in this Case)
	   TFT.drawSmoothRoundRect(x, y, radius, radius - t, w, h, random(0, 0x10000), TFT.TFT_BLACK, 0xf)
    Next
	TFT.print("Variable thickness")
	Delay(2000)

	TFT.fillScreen(TFT.TFT_BLACK)
	TFT.setCursor(0, 0)

	'// Draw some random minimum thickness smooth rounded rectangles
	For i = 0 To 20
    	radius = random(0, 60)
		w = random(2 * radius, 160)
		h = random(2 * radius, 160)
		t = 0
		x = random(0, TFT.width() - w)
		y = random(0, TFT.height() - h)

	'// random colour is anti-aliased (blended) with background colour (black in this Case)
	TFT.drawSmoothRoundRect(x, y, radius, radius - t, w, h, random(0,0x10000), TFT.TFT_BLACK, 0xF)
    Next
	TFT.print("Minimum thickness")
	Delay(2000)
End Sub

Sub random(Mini As ULong,Maxi As ULong) As ULong
	Dim tmp() As ULong = Array As ULong(Mini, Maxi)
	Return RunNative("getRandom",tmp)
End Sub
Sub randomSeed As ULong
	Return RunNative("setRandomSeed",0)
End Sub
#if C
//***********************
// random
//***********************  
B4R::Object returnvalue;

 B4R::Object* getRandom(B4R::Object* o) { 
      B4R::Array* b = (B4R::Array*)B4R::Object::toPointer(o);
	  uint32_t* a = (uint32_t*) b->data;
	  uint32_t rand = random(a[0],a[1]); 
  	  return returnvalue.wrapNumber(rand);
 }; 
//**********************
// randomseed
//**********************
 B4R::Object* setRandomSeed(B4R::Object* o) { 
      uint32_t ran =  (uint32_t) millis();
	  uint8_t * rand = (uint8_t*) &ran;
//	  B4R::Common::LogHelper(2,102,"Milli() :",6,ran);
//	  B4R::Common::LogHelper(1,1,rand[0]);
	  randomSeed(rand[0]); 
	  return returnvalue.wrapNumber(rand[0]);
 }; 
#End If