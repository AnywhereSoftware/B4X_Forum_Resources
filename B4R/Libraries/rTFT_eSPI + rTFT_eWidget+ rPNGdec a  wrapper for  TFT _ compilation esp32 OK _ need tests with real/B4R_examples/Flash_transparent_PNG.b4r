Build1=Default,B4RDev
Group=Default Group
Library1=rcore
Library2=rpngdec
Library3=rtft_espi
NumberOfFiles=0
NumberOfLibraries=3
NumberOfModules=0
Version=4
@EndOfDesignText@

#Region Project Attributes
	#AutoFlushLogs: True
	#CheckArrayBounds: True
	#StackBufferSize: 600
#End Region
'Ctrl+Click to open the C code folder: ide://run?File=%WINDIR%\System32\explorer.exe&Args=%PROJECT%\Objects\Src

'// This example renders a PNG file that is stored in a FLASH Array
'// using the PNGdec library (available via library manager).

'// Note: The PNGDEC required lots of RAM To work (~40kbytes) so
'// this sketch is will Not run on smaller memory processors (e.g.
'// ESP8266, STM32F103 etc.)

'// The example PNG is encoded As ARGB 8 bits per pixel with indexed colour
'// It was created using GIMP And has a transparent background area.

'// Image files can be converted To arrays using the tool here:
'// https://notisrac.github.io/FileToCArray/
'// To use this tool:
'//   1. Drag And drop PNG image file on "Browse..." button
'//   2. Tick box "Treat as binary"
'//   3. Click "Convert"
'//   4. Click "Save as file" And move the header file To sketch folder
'//      (alternatively use the "Copy to clipboard" And paste into a new TAB)
'//   5. Open the sketch in IDE
'//   6. Include the header file containing the Array (SpongeBob.h in this example)

'// Include the PNG decoder library, available via the IDE library manager




Sub Process_Globals
	Public Serial1 As Serial
	Private TFT As TFT_eSPI
	Private TFTid As Long
'	Private SPR As TFT_eSprite
	Private PNG As PNG
	Private DEG2RAD As Double = 0.0174532925
	Private MAX_IMAGE_WIDTH As UInt = 240
	Private xpos As UInt = 0
	Private ypos As UInt = 0
End Sub

Private Sub AppStart
	Serial1.Initialize(115200)
	Log("AppStart")
	'example of connecting to a local network
'	If wifi.Connect2("SSID", "PASSWORD") Then
'		Log("Connected to network")
'	Else
'		Log("Failed to connect to network")
'	End If
	Log("TFT Booting...")
	
	TFTid = TFT.Initialize(-1,-1)	
  '// Initialise the screen
	TFT.begin(0xFF)
	TFT.fillScreen(TFT.TFT_BLACK)
	Log("\r\nInitialisation done.")
	PNG.Initialize
    AddLooper("LocalLoop")
End Sub

'// =========================================================================
'// Loop
'// =========================================================================
Sub LocalLoop
  Dim pngw As UInt = 0: Dim pngh As UInt = 0
   Dim rc As Int = PNG.openFLASH(0, "pngDraw")
  If rc = PNG.PNG_SUCCESS Then
    Log("Successfully opened png file")
		pngw = PNG.getWidth: pngh = PNG.getHeight
    Log("image specs:", pngw,pngh, PNG.getBpp, PNG.getPixelType)
    TFT.startWrite()
    Dim dt As ULong = Millis
	
	
	
	
    rc = PNG.decode(0)
    Log(Millis() - dt, "ms")
    TFT.endWrite
	Log("duration: ",Millis() - dt,"ms")
    '// PNG.close(); // Not needed For memory->memory decode
  End If
  Delay(250)
  '// Randomly change position
  xpos = random(0,TFT.width() - pngw)
  ypos = random(0,TFT.height() - pngh)

   '// Fill screen with a random colour at random intervals
	If random(0,100) < 20 Then TFT.fillScreen(random(0,0x10000))
End Sub

Sub random(Mini As ULong,Maxi As ULong) As ULong
	Dim tmp() As ULong = Array As ULong(Mini, Maxi)
    Return RunNative("getRandom",tmp)
End Sub 

'//=========================================v==========================================
'//                                      pngDraw
'//====================================================================================
'// This Next function will be called during decoding of the PNG file To
'// render each image line To the TFT.  If you use a different TFT library
'// you will need To adapt this function To suit.
'// Callback function To draw pixels To the display
Sub pngDraw(pDrawID As ULong, pDraw_y As Int, pDraw_iWidth As Int)
  Dim lineBuffer(MAX_IMAGE_WIDTH) As UInt
  PNG.getLineAsRGB565(pDrawID, lineBuffer, PNG.PNG_RGB565_BIG_ENDIAN, 0xffffffff)
  TFT.pushImage(xpos, ypos + pDraw_y, pDraw_iWidth, 1, lineBuffer)
End Sub

#if C
//***********************
// include PNG h files
//*********************** 
#include "SpongeBob.h"

   const uint8_t* B4R::B4RPNG::PNGfiles[1]= { 
      bob                 // => openFLASH(00, length,....
   };
   const uint32_t B4R::B4RPNG::PNGsize[1]= { 
      sizeof(bob)                 // => openFLASH(00, length,....
   };
//***********************
// random
//***********************  
B4R::Object returnvalue;

 B4R::Object* getRandom(B4R::Object* o) { 
      B4R::Array* b = (B4R::Array*)B4R::Object::toPointer(o);
	  uint32_t* a = (uint32_t*) b->data;
	  uint32_t rand = random(a[0],a[1]); 
  	  return returnvalue.wrapNumber(rand);
 ;} 

#End If