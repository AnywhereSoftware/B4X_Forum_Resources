<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<root>
    <doclet-version-NOT-library-version>1.00</doclet-version-NOT-library-version>
    <class>
        <name>B4R::B4RTFT_eSPI</name>
        <shortname>TFT_eSPI</shortname>
         <event>UInt TFTColorCallback(x as UInt, y as UInt)</event>
        <method>
            <name DesignerName="Initialize">Initialize</name>
<comment>
 -1 to use default parameter (_W = TFT_WIDTH, _H = TFT_HEIGHT)
</comment>
                 <returntype>ULong</returntype>
            <parameter>
                <name>_W</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>_H</name>
                <type>Int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="begin">begin</name>
<comment>
 0xFF tu use default parameter (tc = TAB_COLOUR)
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>tc</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawPixel">drawPixel</name>
<comment>
   push a single pixel at an arbitrary position
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawChar">drawChar</name>
<comment>
   draw a single character in the GLCD or GFXFF font
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>c</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>bg</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>size</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawLine">drawLine</name>
<comment>
   draw a line between 2 arbitrary points
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>xs</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>ys</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>xe</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>ye</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawFastVLine">drawFastVLine</name>
<comment>
   draw a vertical line
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawFastHLine">drawFastHLine</name>
<comment>
  draw a horizontal line
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="fillRect">fillRect</name>
<comment>
   draw a filled rectangle
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawChar1">drawChar1</name>
<comment>
   draw a Unicode glyph onto the screen
   Any UTF-8 decoding must be done before calling drawChar()
</comment>
                 <returntype>Int</returntype>
            <parameter>
                <name>uniCode</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>font</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawChar2">drawChar2</name>
<comment>
   draw a Unicode glyph onto the screen
   Any UTF-8 decoding must be done before calling drawChar()
</comment>
                 <returntype>Int</returntype>
            <parameter>
                <name>uniCode</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="height">height</name>
                 <returntype>Int</returntype>
        </method>
        <method>
            <name DesignerName="width">width</name>
                 <returntype>Int</returntype>
        </method>
        <method>
            <name DesignerName="readPixel">readPixel</name>
<comment>
   Read the colour of a pixel at x,y and return value in 565 format
</comment>
                 <returntype>UInt</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setWindow">setWindow</name>
<comment>
   define an area to receive a stream of pixels
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>xs</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>ys</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>xe</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>ye</name>
                <type>Long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="pushColor">pushColor</name>
<comment>
   Push (aka write pixel) colours to the set window
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>color</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="begin_nin_write">begin_nin_write</name>
<comment>
   These are non-inlined to enable override
</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="end_nin_write">end_nin_write</name>
<comment>
   Non-inlined version to permit override
</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="setRotation">setRotation</name>
<comment>
   Set the display image orientation to 0, 1, 2 or 3
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>r</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getRotation">getRotation</name>
<comment>
   Read the current rotation
</comment>
                 <returntype>Byte</returntype>
        </method>
        <method>
            <name DesignerName="setOrigin">setOrigin</name>
<comment>
   Change the origin position from the default top left
   Note: setRotation, setViewport and resetViewport will revert origin to top left corner of screen/sprite
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getOriginX">getOriginX</name>
<comment>
   Get graphics origin to position X
</comment>
                 <returntype>Long</returntype>
        </method>
        <method>
            <name DesignerName="getOriginY">getOriginY</name>
<comment>
   Get graphics origin to position Y
</comment>
                 <returntype>Long</returntype>
        </method>
        <method>
            <name DesignerName="invertDisplay">invertDisplay</name>
<comment>
   Tell TFT to invert all displayed colours
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>i</name>
                <type>Bool</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setAddrWindow">setAddrWindow</name>
<comment>
   The TFT_eSprite class inherits the following functions (not all are useful to Sprite class
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>xs</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>ys</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setViewport">setViewport</name>
<comment>
   Viewport commands, see "Viewport_Demo" sketch
   default : vpDatum = true
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>vpDatum</name>
                <type>Bool</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="checkViewport">checkViewport</name>
<comment>
   Check if any part of specified area is visible in viewport
   Note: Setting w and h to 1 will check if coordinate x,y is in area
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getViewportX">getViewportX</name>
<comment>
   Get x position of the viewport datum
</comment>
                 <returntype>Long</returntype>
        </method>
        <method>
            <name DesignerName="getViewportY">getViewportY</name>
<comment>
   Get Y position of the viewport datum
</comment>
                 <returntype>Long</returntype>
        </method>
        <method>
            <name DesignerName="getViewportWidth">getViewportWidth</name>
<comment>
   Get width of the viewport
</comment>
                 <returntype>Long</returntype>
        </method>
        <method>
            <name DesignerName="getViewportHeight">getViewportHeight</name>
<comment>
   Get height of the viewport
</comment>
                 <returntype>Long</returntype>
        </method>
        <method>
            <name DesignerName="getViewportDatum">getViewportDatum</name>
<comment>
   Get datum flag of the viewport (true = viewport corner)
</comment>
                 <returntype>Bool</returntype>
        </method>
        <method>
            <name DesignerName="frameViewport">frameViewport</name>
<comment>
   Draw a frame inside or outside the viewport of width w
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>color</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="resetViewport">resetViewport</name>
<comment>
   Reset viewport to whole TFT screen, datum at 0,0
</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="clipAddrWindow">clipAddrWindow</name>
<comment>
   Clip address window x,y,w,h to screen and viewport
   Arraylong xywh : xywh(0)=x xywh(1)=y xywh(2)=w xywh(3)=h
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>xywh</name>
                <type>Long[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="clipWindow">clipWindow</name>
<comment>
   Clip window xs,ys,xe,ye to screen and viewport
   Arraylong xsysxeye xsysxeye(0)=xs xsysxeye(1)=ys xsysxeye(2)=xe xsysxeye(3)=ye
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>xsysxeye</name>
                <type>Long[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="pushColor1">pushColor1</name>
<comment>
   push a single pixel
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>color</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>len</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="pushColors">pushColors</name>
<comment>
    push an array of pixels, for image drawing
    default : swap = true
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>data</name>
                <type>UInt[]</type>
            </parameter>
            <parameter>
                <name>swap</name>
                <type>Bool</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="pushColors1">pushColors1</name>
<comment>
   push an array of pixels for 16-bit raw image drawing
 Assumed that setAddrWindow() has previously been called
 len is number of bytes, not pixels
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>data</name>
                <type>Byte[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="pushBlock">pushBlock</name>
<comment>
 Assumed that setAddrWindow() has previously been called
 len is number of bytes, not pixels
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>color</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>len</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="pushPixels">pushPixels</name>
<comment>
  push an array of pixels for 16-bit raw image drawing
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>data_in</name>
                <type>Byte[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="tft_Read8">tft_Read8</name>
<comment>
 #ifdef TFT_SDA_READ
 #if defined (TFT_eSPI_ENABLE_8_BIT_READ)
 Read 8-bit value from TFT command register
</comment>
                 <returntype>Byte</returntype>
        </method>
        <method>
            <name DesignerName="begin_SDA_Read">begin_SDA_Read</name>
<comment>
 #ifdef TFT_SDA_READ
 Begin a read on a half duplex (bi-directional SDA) SPI bus - sets MOSI to input
</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="end_SDA_Read">end_SDA_Read</name>
<comment>
 #ifdef TFT_SDA_READ
 Restore MOSI to output
</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="fillScreen">fillScreen</name>
<comment>
   Clear the screen to defined colour
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawRect">drawRect</name>
<comment>
  Draw a rectangle outline
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawRoundRect">drawRoundRect</name>
<comment>
   Draw a rounded corner rectangle outline
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>radius</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="fillRoundRect">fillRoundRect</name>
<comment>
   Draw a rounded corner filled rectangle
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>radius</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="fillRectVGradient">fillRectVGradient</name>
<comment>
   draw a filled rectangle with a vertical colour gradient
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>color1</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>color2</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="fillRectHGradient">fillRectHGradient</name>
<comment>
   draw a filled rectangle with a horizontal colour gradient
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>color1</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>color2</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawCircle">drawCircle</name>
<comment>
  Draw a circle outline
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>r</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawCircleHelper">drawCircleHelper</name>
<comment>
   Support function for drawRoundRect()
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>r</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>cornername</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="fillCircle">fillCircle</name>
<comment>
    draw a filled circle
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>r</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="fillCircleHelper">fillCircleHelper</name>
<comment>
   Support function for fillRoundRect()
 Support drawing roundrects, changed to horizontal lines
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>r</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>cornername</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>delta</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawEllipse">drawEllipse</name>
<comment>
   Draw a ellipse outline
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>rx</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>ry</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="fillEllipse">fillEllipse</name>
<comment>
    draw a filled ellipse
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>rx</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>ry</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawTriangle">drawTriangle</name>
<comment>
   Draw a triangle outline using 3 arbitrary points
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x1</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y1</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>x2</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y2</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>x3</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y3</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="fillTriangle">fillTriangle</name>
<comment>
   Draw a filled triangle using 3 arbitrary points
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x1</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y1</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>x2</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y2</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>x3</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y3</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawPixel1">drawPixel1</name>
<comment>
  push a single pixel at an arbitrary position
   default : bg_color = 0x00FFFFFF
</comment>
                 <returntype>UInt</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>alpha</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>bg_color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawSmoothArc">drawSmoothArc</name>
<comment>
    Draw a smooth arc clockwise from 6 o'clock
  Default : roundEnds = false
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>r</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>ir</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>startAngle</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>endAngle</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>fg_color</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>bg_color</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>roundEnds</name>
                <type>Bool</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawArc">drawArc</name>
<comment>
   Draw an arc clockwise from 6 o'clock position
 Centre at x,y
 r = arc outer radius, ir = arc inner radius. Inclusive, so arc thickness = r-ir+1
 Angles MUST be in range 0-360
 Arc foreground fg_color anti-aliased with background colour along sides
 smooth is optional, default is true, smooth=false means no antialiasing
 Note: Arc ends are not anti-aliased (use drawSmoothArc instead for that)
  Default : smoothArc = true
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>r</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>ir</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>startAngle</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>endAngle</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>fg_color</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>bg_color</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>smoothArc</name>
                <type>Bool</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawSmoothCircle">drawSmoothCircle</name>
<comment>
   Draw a smooth circle
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>r</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>fg_color</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>bg_color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="fillSmoothCircle">fillSmoothCircle</name>
<comment>
   Draw a filled anti-aliased circle
  Default : bg_color = 0x00FFFFFF
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>r</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>bg_color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawSmoothRoundRect">drawSmoothRoundRect</name>
<comment>
   Draw a rounded rectangle
 x,y is top left corner of bounding box for a complete rounded rectangle
 r = arc outer corner radius, ir = arc inner radius. Arc thickness = r-ir+1
 w and h are width and height of the bounding rectangle
 If w and h are - radius (e.g. 0,0) a circle will be drawn with centre at x+r,y+r
 Arc foreground fg_color anti-aliased with background colour at edges
 A subset of corners can be drawn by specifying a quadrants mask. A bit set in the
 mask means draw that quadrant (all are drawn if parameter missing):   0x1 | 0x2
    ---|---    Arc quadrant mask select bits (as in drawCircleHelper fn) 0x8 | 0x4
  Default : bg_color = 0x00FFFFFF, quadrants = 0xF
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>r</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>ir</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>fg_color</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>bg_color</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>quadrants</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="fillSmoothRoundRect">fillSmoothRoundRect</name>
<comment>
   Draw a filled anti-aliased rounded corner rectangle
  Default : bg_color = 0x00FFFFFF
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>radius</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>bg_color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawSpot">drawSpot</name>
<comment>
   Draw an anti-aliased filled circle at ax,ay with radius r
 Coordinates are floating point to achieve sub-pixel positioning
  Default : bg_color = 0x00FFFFFF
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>ax</name>
                <type>Double</type>
            </parameter>
            <parameter>
                <name>ay</name>
                <type>Double</type>
            </parameter>
            <parameter>
                <name>r</name>
                <type>Double</type>
            </parameter>
            <parameter>
                <name>fg_color</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>bg_color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawWideLine">drawWideLine</name>
<comment>
    draw an anti-aliased line with rounded ends, width wd
  Default : bg_color = 0x00FFFFFF
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>ax</name>
                <type>Double</type>
            </parameter>
            <parameter>
                <name>ay</name>
                <type>Double</type>
            </parameter>
            <parameter>
                <name>bx</name>
                <type>Double</type>
            </parameter>
            <parameter>
                <name>by</name>
                <type>Double</type>
            </parameter>
            <parameter>
                <name>wd</name>
                <type>Double</type>
            </parameter>
            <parameter>
                <name>fg_color</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>bg_color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawWedgeLine">drawWedgeLine</name>
<comment>
   draw an anti-aliased line with different width radiused ends
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>ax</name>
                <type>Double</type>
            </parameter>
            <parameter>
                <name>ay</name>
                <type>Double</type>
            </parameter>
            <parameter>
                <name>bx</name>
                <type>Double</type>
            </parameter>
            <parameter>
                <name>by</name>
                <type>Double</type>
            </parameter>
            <parameter>
                <name>aw</name>
                <type>Double</type>
            </parameter>
            <parameter>
                <name>bw</name>
                <type>Double</type>
            </parameter>
            <parameter>
                <name>fg_color</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>bg_color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setSwapBytes">setSwapBytes</name>
<comment>
   Used by 16-bit pushImage() to swap byte order in colours
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>swap</name>
                <type>Bool</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getSwapBytes">getSwapBytes</name>
<comment>
   Return the swap byte order for colours
</comment>
                 <returntype>Bool</returntype>
        </method>
        <method>
            <name DesignerName="drawBitmap">drawBitmap</name>
<comment>
   Draw an image stored in an array on the TFT
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>bitmap</name>
                <type>Byte[]</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>fgcolor</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawBitmap1">drawBitmap1</name>
<comment>
   Draw an image stored in an array on the TFT
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>bitmap</name>
                <type>Byte[]</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>fgcolor</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>bgcolor</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawXBitmap">drawXBitmap</name>
<comment>
   Draw an image stored in an XBM array onto the TFT
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>bitmap</name>
                <type>Byte[]</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>fgcolor</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawXBitmap1">drawXBitmap1</name>
<comment>
   Draw an XBM image with foreground and background colors
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>bitmap</name>
                <type>Byte[]</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>fgcolor</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>bgcolor</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setBitmapColor">setBitmapColor</name>
<comment>
   Set the foreground foreground and background colour
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>fgcolor</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>bgcolor</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setPivot">setPivot</name>
<comment>
   Set the pivot point on the TFT
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getPivotX">getPivotX</name>
<comment>
   Get the x pivot position
</comment>
                 <returntype>Int</returntype>
        </method>
        <method>
            <name DesignerName="getPivotY">getPivotY</name>
<comment>
   Get the y pivot position
</comment>
                 <returntype>Int</returntype>
        </method>
        <method>
            <name DesignerName="readRect">readRect</name>
<comment>
    Read 565 pixel colours from a defined area
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>data</name>
                <type>UInt[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="pushRect">pushRect</name>
<comment>
    push 565 pixel colours into a defined area
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>data</name>
                <type>UInt[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="pushImage">pushImage</name>
<comment>
    plot 16-bit colour sprite or image onto TFT
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>data</name>
                <type>UInt[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="pushImage1">pushImage1</name>
<comment>
    plot 16-bit sprite or image with 1 colour being transparent
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>data</name>
                <type>UInt[]</type>
            </parameter>
            <parameter>
                <name>transparent</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="pushImage4">pushImage4</name>
<comment>
    plot 16-bit sprite or image with 1 colour being transparent
            void pushImage2(int32_t x, int32_t y, int32_t w, int32_t h, ArrayUInt* data, uint16_t transparent);
    plot 16-bit colour sprite or image onto TFT
    for FLASH (PROGMEM) stored images
            void pushImage3(int32_t x, int32_t y, int32_t w, int32_t h, ArrayUInt* data);
   plot 8-bit or 4-bit or 1 bit image or sprite using a line buffer
    from FLASH (PROGMEM) stored images
  Default : bpp8 = true, cmap = nullptr
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>data</name>
                <type>Byte[]</type>
            </parameter>
            <parameter>
                <name>bpp8</name>
                <type>Bool</type>
            </parameter>
            <parameter>
                <name>cmap</name>
                <type>UInt[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="pushImage5">pushImage5</name>
<comment>
    plot 8 or 4 or 1 bit image or sprite with a transparent colour
  Default : bpp8 = true, cmap = nullptr
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>data</name>
                <type>Byte[]</type>
            </parameter>
            <parameter>
                <name>transparent</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>bpp8</name>
                <type>Bool</type>
            </parameter>
            <parameter>
                <name>cmap</name>
                <type>UInt[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="pushImage6">pushImage6</name>
<comment>
    plot 8-bit or 4-bit or 1 bit image or sprite using a line buffer
  Default : bpp8 = true, cmap = nullptr
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>data</name>
                <type>Byte[]</type>
            </parameter>
            <parameter>
                <name>bpp8</name>
                <type>Bool</type>
            </parameter>
            <parameter>
                <name>cmap</name>
                <type>UInt[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="pushMaskedImage">pushMaskedImage</name>
<comment>
    Render a 16-bit colour image to TFT with a 1bpp mask
    from FLASH (PROGMEM) stored images
 Note: pushMaskedImage is for pushing to the TFT and will not work pushing into a sprite
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>img</name>
                <type>UInt[]</type>
            </parameter>
            <parameter>
                <name>mask</name>
                <type>Byte[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="readRectRGB">readRectRGB</name>
<comment>
    read rectangle (for SPI Interface II i.e. IM [3:0] = "1101")
    Read RGB pixel colours from a defined area
 If w and h are 1, then 1 pixel is read, *data array size must be 3 bytes per pixel
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>data</name>
                <type>Byte[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawNumber">drawNumber</name>
<comment>
    draw a long integer with font number
</comment>
                 <returntype>Int</returntype>
            <parameter>
                <name>intNumber</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>font</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawNumber1">drawNumber1</name>
<comment>
    draw a long integer
</comment>
                 <returntype>Int</returntype>
            <parameter>
                <name>intNumber</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawFloat">drawFloat</name>
<comment>
    drawFloat, prints 7 non zero digits maximum with font number
</comment>
                 <returntype>Int</returntype>
            <parameter>
                <name>doubleNumber</name>
                <type>Double</type>
            </parameter>
            <parameter>
                <name>decimal</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>font</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawFloat1">drawFloat1</name>
<comment>
    drawFloat, prints 7 non zero digits maximum
</comment>
                 <returntype>Int</returntype>
            <parameter>
                <name>doubleNumber</name>
                <type>Double</type>
            </parameter>
            <parameter>
                <name>decimal</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawString">drawString</name>
<comment>
    draw string with padding if it is defined and with font number
</comment>
                 <returntype>Int</returntype>
            <parameter>
                <name>string</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>font</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawString1">drawString1</name>
<comment>
    draw string with padding if it is defined
    Without font number, uses font set by setTextFont()
</comment>
                 <returntype>Int</returntype>
            <parameter>
                <name>string</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawCentreString">drawCentreString</name>
<comment>
    draw string centred on dX  (deprecated, use setTextDatum())
</comment>
                 <returntype>Int</returntype>
            <parameter>
                <name>string</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>font</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawRightString">drawRightString</name>
<comment>
    draw string right justified to dX  (deprecated, use setTextDatum())
</comment>
                 <returntype>Int</returntype>
            <parameter>
                <name>string</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>font</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setCursor">setCursor</name>
<comment>
    Set the text cursor x,y position
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setCursor1">setCursor1</name>
<comment>
    Set the text cursor x,y position and font
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>font</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getCursorX">getCursorX</name>
<comment>
    Get the text cursor x position
</comment>
                 <returntype>Int</returntype>
        </method>
        <method>
            <name DesignerName="getCursorY">getCursorY</name>
<comment>
    Get the text cursor y position
</comment>
                 <returntype>Int</returntype>
        </method>
        <method>
            <name DesignerName="setTextColor">setTextColor</name>
<comment>
    Set the font foreground colour (background is transparent)
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>color</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setTextColor1">setTextColor1</name>
<comment>
    Set the font foreground and background colour
 Smooth fonts use the background colour for anti-aliasing and by default the
 background is not filled. If bgfill = true, then a smooth font background fill will
 be used.
  Default : bgfill = false
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>fgcolor</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>bgcolor</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>bgfill</name>
                <type>Bool</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setTextSize">setTextSize</name>
<comment>
    Set the text size multiplier
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>size</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setTextWrap">setTextWrap</name>
<comment>
    Define if text should wrap at end of line
  Default : wrapY = false
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>wrapX</name>
                <type>Bool</type>
            </parameter>
            <parameter>
                <name>wrapY</name>
                <type>Bool</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setTextDatum">setTextDatum</name>
<comment>
   Set the text position reference datum
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>datum</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getTextDatum">getTextDatum</name>
<comment>
   Return the text datum value (as used by setTextDatum())
</comment>
                 <returntype>Byte</returntype>
        </method>
        <method>
            <name DesignerName="setTextPadding">setTextPadding</name>
<comment>
    Define padding width (aids erasing old text and numbers)
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x_width</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getTextPadding">getTextPadding</name>
<comment>
    Define padding width (aids erasing old text and numbers)
</comment>
                 <returntype>UInt</returntype>
        </method>
        <method>
            <name DesignerName="setFreeFont">setFreeFont</name>
<comment>
    Sets the GFX free font to use (from fonts number define in inline C )
   FreeFonts 0 - x  after declaration in inline C
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>GFXid</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setTextFont">setTextFont</name>
<comment>
    Set the font by default (1-8) for the print stream
  Fonts by default 1-8
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>font</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setFreeFont1">setFreeFont1</name>
<comment>
   No GFX free font define: no used
  Fonts by default 1-8
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>font</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setTextFont1">setTextFont1</name>
<comment>
   Set the font by default (1-8) for the print stream
  Fonts by default 1-8
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>font</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="textWidth">textWidth</name>
<comment>
   Return the width in pixels of a string in a given font
</comment>
                 <returntype>Int</returntype>
            <parameter>
                <name>string</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>font</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="textWidth1">textWidth1</name>
<comment>
   Return the width in pixels of a string in a given font
</comment>
                 <returntype>Int</returntype>
            <parameter>
                <name>string</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="textWidth2">textWidth2</name>
<comment>
   Return the width in pixels of a string in a given font
    from String sent by reference
</comment>
                 <returntype>Int</returntype>
            <parameter>
                <name>string</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>font</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="textWidth3">textWidth3</name>
<comment>
   Return the width in pixels of a string in a given font
    from String sent bynreference
</comment>
                 <returntype>Int</returntype>
            <parameter>
                <name>string</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="fontHeight">fontHeight</name>
<comment>
    return the height of a font (yAdvance for free fonts)
</comment>
                 <returntype>Int</returntype>
            <parameter>
                <name>font</name>
                <type>Int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="fontHeight1">fontHeight1</name>
<comment>
    return the height of a font (yAdvance for free fonts)
</comment>
                 <returntype>Int</returntype>
        </method>
        <method>
            <name DesignerName="decodeUTF8">decodeUTF8</name>
<comment>
    Serial UTF-8 decoder with fall-back to extended ASCII
</comment>
                 <returntype>UInt</returntype>
            <parameter>
                <name>buf</name>
                <type>Byte[]</type>
            </parameter>
            <parameter>
                <name>index</name>
                <type>UInt[]</type>
            </parameter>
            <parameter>
                <name>remaining</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="decodeUTF81">decodeUTF81</name>
<comment>
    Line buffer UTF-8 decoder with fall-back to extended ASCII
</comment>
                 <returntype>UInt</returntype>
            <parameter>
                <name>c</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="write">write</name>
<comment>
    draw characters piped through serial stream
</comment>
                 <returntype>UInt</returntype>
            <parameter>
                <name>utf8</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setCallback">setCallback</name>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>OnTFTColorCallbackSub</name>
                <type>Subuint_uintuint</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="fontsLoaded">fontsLoaded</name>
<comment>
   return an encoded 16-bit value showing the fonts loaded
  Each bit in returned value represents a font type that is loaded - used for debug/error handling only
</comment>
                 <returntype>UInt</returntype>
        </method>
        <method>
            <name DesignerName="spiwrite">spiwrite</name>
<comment>
    Write 8 bits to SPI port (legacy support only)
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>c</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="writecommand">writecommand</name>
<comment>
    #ifndef RM68120_DRIVER
 Send a 16-bit command, function resets DC/RS high ready for data
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>c</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="writeRegister8">writeRegister8</name>
<comment>
    #ifndef RM68120_DRIVER
 Write 8-bit data data to 16-bit command register
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>c</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>d</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="writeRegister16">writeRegister16</name>
<comment>
    #ifndef RM68120_DRIVER
 Write 16-bit data data to 16-bit command register
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>c</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>d</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="writecommand1">writecommand1</name>
<comment>
 Send an 8-bit command, function resets DC/RS high ready for data
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>c</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="writedata">writedata</name>
<comment>
    #ifdef RM68120_DRIVER
 Send data with DC/RS set high
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>d</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="commandList">commandList</name>
<comment>
 Send a initialisation sequence to TFT stored in FLASH
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>addr</name>
                <type>Byte[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="readcommand8">readcommand8</name>
<comment>
 read 8 bits from TFT
</comment>
                 <returntype>Byte</returntype>
            <parameter>
                <name>cmd_function</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>index</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="readcommand16">readcommand16</name>
<comment>
 read 16 bits from TFT
</comment>
                 <returntype>UInt</returntype>
            <parameter>
                <name>cmd_function</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>index</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="readcommand32">readcommand32</name>
<comment>
 read 32 bits from TFT
</comment>
                 <returntype>ULong</returntype>
            <parameter>
                <name>cmd_function</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>index</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="color565">color565</name>
<comment>
 Convert 8-bit red, green and blue to 16 bits
</comment>
                 <returntype>UInt</returntype>
            <parameter>
                <name>red</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>green</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>blue</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="color8to16">color8to16</name>
<comment>
 Convert 8-bit colour to 16 bits
</comment>
                 <returntype>UInt</returntype>
            <parameter>
                <name>color332</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="color16to8">color16to8</name>
<comment>
 Convert 16-bit colour to 8 bits
</comment>
                 <returntype>Byte</returntype>
            <parameter>
                <name>color565</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="color16to24">color16to24</name>
<comment>
 Convert 16-bit colour to 24-bit, R+G+B concatenated into LS 24 bits
</comment>
                 <returntype>ULong</returntype>
            <parameter>
                <name>color565</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="color24to16">color24to16</name>
<comment>
 Convert 16-bit colour from 24-bit, R+G+B concatenated into LS 24 bits
</comment>
                 <returntype>ULong</returntype>
            <parameter>
                <name>color888</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="alphaBlend">alphaBlend</name>
<comment>
 Alpha blend 2 colours, see generic "alphaBlend_Test" example
 alpha =   0 = 100% background colour
 alpha = 255 = 100% foreground colour
</comment>
                 <returntype>UInt</returntype>
            <parameter>
                <name>alpha</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>fgc</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>bgc</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="alphaBlend1">alphaBlend1</name>
<comment>
 16-bit colour alphaBlend with alpha dither (dither reduces colour banding)
</comment>
                 <returntype>UInt</returntype>
            <parameter>
                <name>alpha</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>fgc</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>bgc</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>dither</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="alphaBlend24">alphaBlend24</name>
<comment>
 24-bit colour alphaBlend with optional alpha dither
  Default : dither = 0
</comment>
                 <returntype>ULong</returntype>
            <parameter>
                <name>alpha</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>fgc</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>bgc</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>dither</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="initDMA">initDMA</name>
<comment>
 Initialise the DMA engine and attach to SPI bus - typically used in setup()
 Parameter "true" enables DMA engine control of TFT chip select (ESP32 only)
 For ESP32 only, TFT reads will not work if parameter is true
  Default : ctrl_cs = false
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>ctrl_cs</name>
                <type>Bool</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="deInitDMA">deInitDMA</name>
<comment>
 De-initialise the DMA engine and detach from SPI bus - typically not used
</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="pushImageDMA">pushImageDMA</name>
<comment>
 Push an image to the TFT using DMA, buffer is optional and grabs (double buffers) a copy of the image
 Use the buffer if the image data will get over-written or destroyed while DMA is in progress

 Note 1: If swapping colour bytes is defined, and the double buffer option is NOT used, then the bytes
 in the original image buffer content will be byte swapped by the function before DMA is initiated.

 Note 2: If part of the image will be off screen or outside of a set viewport, then the the original
 image buffer content will be altered to a correctly clipped image before DMA is initiated.

 The function will wait for the last DMA to complete if it is called while a previous DMA is still
 in progress, this simplifies the sketch and helps avoid "gotchas".
  Default : buffer = nullptr
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>data</name>
                <type>UInt[]</type>
            </parameter>
            <parameter>
                <name>buffer</name>
                <type>UInt[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="pushImageDMA1">pushImageDMA1</name>
<comment>
 ESP32 only at the moment
 For case where pointer is a const and the image data must not be modified (clipped or byte swapped)
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>data</name>
                <type>UInt[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="pushPixelsDMA">pushPixelsDMA</name>
<comment>
 Push a block of pixels into a window set up using setAddrWindow()
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>image</name>
                <type>UInt[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="dmaBusy">dmaBusy</name>
<comment>
 Check if the DMA is complete - use while(tft.dmaBusy); for a blocking wait
 returns true if DMA is still in progress
</comment>
                 <returntype>Bool</returntype>
        </method>
        <method>
            <name DesignerName="dmaWait">dmaWait</name>
<comment>
 wait until DMA is complete
</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="DMA_Enabled">DMA_Enabled</name>
<comment>
 Flag for DMA enabled state
</comment>
                 <returntype>Bool</returntype>
        </method>
        <method>
            <name DesignerName="spiBusyCheck">spiBusyCheck</name>
<comment>
 Number of ESP32 transfer buffers to check
</comment>
                 <returntype>Byte</returntype>
        </method>
        <method>
            <name DesignerName="startWrite">startWrite</name>
<comment>
 Begin SPI transaction
</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="writeColor">writeColor</name>
<comment>
 Deprecated, use pushBlock()
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>color</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>len</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="endWrite">endWrite</name>
<comment>
 End SPI transaction
</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="setAttribute">setAttribute</name>
<comment>
 Set attribute value
  Default : id=0, a=0
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>id</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>a</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getAttribute">getAttribute</name>
<comment>
 Get attribute value
  Default : id=0
</comment>
                 <returntype>Byte</returntype>
            <parameter>
                <name>id</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="textcolor">textcolor</name>
<comment>
 Text foreground colours
</comment>
                 <returntype>ULong</returntype>
        </method>
        <method>
            <name DesignerName="textbgcolor">textbgcolor</name>
<comment>
 Text background colours
</comment>
                 <returntype>ULong</returntype>
        </method>
        <method>
            <name DesignerName="bitmap_fg">bitmap_fg</name>
<comment>
 Bitmap foreground (bit=1) colours
</comment>
                 <returntype>ULong</returntype>
        </method>
        <method>
            <name DesignerName="bitmap_bg">bitmap_bg</name>
<comment>
 Bitmap  background (bit=0) colours
</comment>
                 <returntype>ULong</returntype>
        </method>
        <method>
            <name DesignerName="textfont">textfont</name>
<comment>
 Get Current selected font number
</comment>
                 <returntype>Byte</returntype>
        </method>
        <method>
            <name DesignerName="textsize">textsize</name>
<comment>
 Get Current font size multiplier
</comment>
                 <returntype>Byte</returntype>
        </method>
        <method>
            <name DesignerName="textdatum">textdatum</name>
<comment>
 Get Text reference datum
</comment>
                 <returntype>Byte</returntype>
        </method>
        <method>
            <name DesignerName="rotation">rotation</name>
<comment>
 Display rotation (0-3)
</comment>
                 <returntype>Byte</returntype>
        </method>
        <method>
            <name DesignerName="decoderState">decoderState</name>
<comment>
 UTF8 decoder state        - not for user access
</comment>
                 <returntype>UInt</returntype>
        </method>
        <method>
            <name DesignerName="decoderBuffer">decoderBuffer</name>
<comment>
 Unicode code-point buffer - not for user access
</comment>
                 <returntype>UInt</returntype>
        </method>
        <method>
            <name DesignerName="print">print</name>
<comment>
 Print a string
</comment>
                 <returntype>UInt</returntype>
            <parameter>
                <name>string</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="println">println</name>
<comment>
 Println a string
</comment>
                 <returntype>UInt</returntype>
            <parameter>
                <name>string</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <field>
            <name DefineMethod="true" DesignerName="TL_DATUM">B4R_TL_DATUM</name>
<comment>
 text plotting alignment (reference datum point)
 Top left (default)
</comment>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TC_DATUM">B4R_TC_DATUM</name>
<comment>
 text plotting alignment (reference datum point)
 Top centre
</comment>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TR_DATUM">B4R_TR_DATUM</name>
<comment>
 text plotting alignment (reference datum point)
 Top right
</comment>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ML_DATUM">B4R_ML_DATUM</name>
<comment>
 text plotting alignment (reference datum point)
 Middle left
</comment>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="CL_DATUM">B4R_CL_DATUM</name>
<comment>
 text plotting alignment (reference datum point)
 Centre left, same as above
</comment>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="MC_DATUM">B4R_MC_DATUM</name>
<comment>
 text plotting alignment (reference datum point)
 Middle centre
</comment>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="CC_DATUM">B4R_CC_DATUM</name>
<comment>
 text plotting alignment (reference datum point)
 Centre centre, same as above
</comment>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="MR_DATUM">B4R_MR_DATUM</name>
<comment>
 text plotting alignment (reference datum point)
 Middle right
</comment>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="CR_DATUM">B4R_CR_DATUM</name>
<comment>
 text plotting alignment (reference datum point)
 Centre right, same as above
</comment>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="BL_DATUM">B4R_BL_DATUM</name>
<comment>
 text plotting alignment (reference datum point)
 Bottom left
</comment>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="BC_DATUM">B4R_BC_DATUM</name>
<comment>
 text plotting alignment (reference datum point)
 Bottom centre
</comment>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="BR_DATUM">B4R_BR_DATUM</name>
<comment>
 text plotting alignment (reference datum point)
 Bottom right
</comment>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="L_BASELINE">B4R_L_BASELINE</name>
<comment>
 text plotting alignment (reference datum point)
 Left character baseline (Line the 'A' character would sit on)
</comment>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="C_BASELINE">B4R_C_BASELINE</name>
<comment>
 text plotting alignment (reference datum point)
 Centre character baseline
</comment>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="R_BASELINE">B4R_R_BASELINE</name>
<comment>
 text plotting alignment (reference datum point)
 Right character baseline
</comment>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_BLACK">B4R_TFT_BLACK</name>
<comment>
 Default color definitions
   0,   0,   0
</comment>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_NAVY">B4R_TFT_NAVY</name>
<comment>
 Default color definitions
   0,   0, 128
</comment>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_DARKGREEN">B4R_TFT_DARKGREEN</name>
<comment>
 Default color definitions
   0, 128,   0
</comment>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_DARKCYAN">B4R_TFT_DARKCYAN</name>
<comment>
 Default color definitions
   0, 128, 128
</comment>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_MAROON">B4R_TFT_MAROON</name>
<comment>
 Default color definitions
 128,   0,   0
</comment>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_PURPLE">B4R_TFT_PURPLE</name>
<comment>
 Default color definitions
 128,   0, 128
</comment>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_OLIVE">B4R_TFT_OLIVE</name>
<comment>
 Default color definitions
 128, 128,   0
</comment>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_LIGHTGREY">B4R_TFT_LIGHTGREY</name>
<comment>
 Default color definitions
 211, 211, 211
</comment>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_DARKGREY">B4R_TFT_DARKGREY</name>
<comment>
 Default color definitions
 128, 128, 128
</comment>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_BLUE">B4R_TFT_BLUE</name>
<comment>
 Default color definitions
   0,   0, 255
</comment>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_GREEN">B4R_TFT_GREEN</name>
<comment>
 Default color definitions
   0, 255,   0
</comment>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_CYAN">B4R_TFT_CYAN</name>
<comment>
 Default color definitions
   0, 255, 255
</comment>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_RED">B4R_TFT_RED</name>
<comment>
 Default color definitions
 255,   0,   0
</comment>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_MAGENTA">B4R_TFT_MAGENTA</name>
<comment>
 Default color definitions
 255,   0, 255
</comment>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_YELLOW">B4R_TFT_YELLOW</name>
<comment>
 Default color definitions
 255, 255,   0
</comment>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_WHITE">B4R_TFT_WHITE</name>
<comment>
 Default color definitions
 255, 255, 255
</comment>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_ORANGE">B4R_TFT_ORANGE</name>
<comment>
 Default color definitions
 255, 180,   0
</comment>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_GREENYELLOW">B4R_TFT_GREENYELLOW</name>
<comment>
 Default color definitions
 180, 255,   0
</comment>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_PINK">B4R_TFT_PINK</name>
<comment>
 Default color definitions
 255, 192, 203 //Lighter pink, was 0xFC9F
</comment>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_BROWN">B4R_TFT_BROWN</name>
<comment>
 Default color definitions
 150,  75,   0
</comment>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_GOLD">B4R_TFT_GOLD</name>
<comment>
 Default color definitions
 255, 215,   0
</comment>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_SILVER">B4R_TFT_SILVER</name>
<comment>
 Default color definitions
 192, 192, 192
</comment>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_SKYBLUE">B4R_TFT_SKYBLUE</name>
<comment>
 Default color definitions
 135, 206, 235
</comment>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_VIOLET">B4R_TFT_VIOLET</name>
<comment>
 Default color definitions
 180,  46, 226
</comment>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_GREY">B4R_TFT_GREY</name>
<comment>
 Default color definitions
</comment>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_LIGHTGREY2">B4R_TFT_LIGHTGREY2</name>
<comment>
 Default color definitions
</comment>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_ORANGE2">B4R_TFT_ORANGE2</name>
<comment>
 Default color definitions
</comment>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_ORANGE3">B4R_TFT_ORANGE3</name>
<comment>
 Default color definitions
</comment>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_BROWN2">B4R_TFT_BROWN2</name>
<comment>
 Default color definitions
</comment>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_BROWN3">B4R_TFT_BROWN3</name>
<comment>
 Default color definitions
</comment>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_GREY2">B4R_TFT_GREY2</name>
<comment>
 Default color definitions
</comment>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_TRANSPARENT">B4R_TFT_TRANSPARENT</name>
<comment>
 Convenient for 8-bit and 16-bit transparent sprites.
 This is actually a dark green
</comment>
            <returntype>UInt</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_BLACK_4b">B4R_TFT_BLACK_4b</name>
<comment>
 Default palette for 4-bit colour sprites
  0  ^
</comment>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_BROWN_4b">B4R_TFT_BROWN_4b</name>
<comment>
 Default palette for 4-bit colour sprites
  1  |
</comment>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_RED_4b">B4R_TFT_RED_4b</name>
<comment>
 Default palette for 4-bit colour sprites
  2  |
</comment>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_ORANGE_4b">B4R_TFT_ORANGE_4b</name>
<comment>
 Default palette for 4-bit colour sprites
  3  |
</comment>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_YELLOW_4b">B4R_TFT_YELLOW_4b</name>
<comment>
 Default palette for 4-bit colour sprites
  4  Colours 0-9 follow the resistor colour code!
</comment>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_GREEN_4b">B4R_TFT_GREEN_4b</name>
<comment>
 Default palette for 4-bit colour sprites
  5  |
</comment>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_BLUE_4b">B4R_TFT_BLUE_4b</name>
<comment>
 Default palette for 4-bit colour sprites
  6  |
</comment>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_PURPLE_4b">B4R_TFT_PURPLE_4b</name>
<comment>
 Default palette for 4-bit colour sprites
  7  |
</comment>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_DARKGREY_4b">B4R_TFT_DARKGREY_4b</name>
<comment>
 Default palette for 4-bit colour sprites
  8  |
</comment>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_WHITE_4b">B4R_TFT_WHITE_4b</name>
<comment>
 Default palette for 4-bit colour sprites
  9  v
</comment>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_CYAN_4b">B4R_TFT_CYAN_4b</name>
<comment>
 Default palette for 4-bit colour sprites
 10  Blue+green mix
</comment>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_MAGENTA_4b">B4R_TFT_MAGENTA_4b</name>
<comment>
 Default palette for 4-bit colour sprites
 11  Blue+red mix
</comment>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_MAROON_4b">B4R_TFT_MAROON_4b</name>
<comment>
 Default palette for 4-bit colour sprites
 12  Darker red colour
</comment>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_DARKGREEN_4b">B4R_TFT_DARKGREEN_4b</name>
<comment>
 Default palette for 4-bit colour sprites
 13  Darker green colour
</comment>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_NAVY_4b">B4R_TFT_NAVY_4b</name>
<comment>
 Default palette for 4-bit colour sprites
 14  Darker blue colour
</comment>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="TFT_PINK_4b">B4R_TFT_PINK_4b</name>
<comment>
 Default palette for 4-bit colour sprites
 15
</comment>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="H_SLIDER">B4RH_SLIDER</name>
<comment>
"true" for horizontal
</comment>
            <returntype>bool</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="V_SLIDER">B4RV_SLIDER</name>
<comment>
 "false" for vertical
</comment>
            <returntype>bool</returntype>
        </field>
        <method>
            <name DesignerName="getTouchRaw">getTouchRaw</name>
<comment>
  #ifdef TOUCH_CS
 Get raw x,y ADC values from touch controller
</comment>
                 <returntype>Byte</returntype>
            <parameter>
                <name>xy</name>
                <type>UInt[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getTouchRawZ">getTouchRawZ</name>
<comment>
  #ifdef TOUCH_CS
 Get raw z (i.e. pressure) ADC value from touch controller
</comment>
                 <returntype>UInt</returntype>
        </method>
        <method>
            <name DesignerName="convertRawXY">convertRawXY</name>
<comment>
   #ifdef TOUCH_CS
 Convert raw x,y values to calibrated and correctly rotated screen coordinates
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>xy</name>
                <type>UInt[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getTouch">getTouch</name>
<comment>
   #ifdef TOUCH_CS
 Get the screen touch coordinates, returns true if screen has been touched
 if the touch coordinates are off screen then x and y are not updated
 The returned value can be treated as a bool type, false or 0 means touch not detected
 In future the function may return an 8-bit "quality" (jitter) value.
 The threshold value is optional, this must be higher than the bias level for z (pressure)
 reported by Test_Touch_Controller when the screen is NOT touched. When touched the z value
 must be higher than the threshold for a touch to be detected.
 ArrayUInt* xy : xy(0) = x   xy(1) = y
 Default : threshold = 600)
</comment>
                 <returntype>Byte</returntype>
            <parameter>
                <name>xy</name>
                <type>UInt[]</type>
            </parameter>
            <parameter>
                <name>threshold</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="calibrateTouch">calibrateTouch</name>
<comment>
   #ifdef TOUCH_CS
 Run screen calibration and test, report calibration values to the serial port
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>data</name>
                <type>UInt[]</type>
            </parameter>
            <parameter>
                <name>color_fg</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>color_bg</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>size</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setTouch">setTouch</name>
<comment>
   #ifdef TOUCH_CS
 Set the screen calibration values
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>data</name>
                <type>UInt[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="loadFontH">loadFontH</name>
<comment>
 #ifdef LOAD_GFXFF
 loads parameters from a font vlw array from h file
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>VLWid</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="loadFontSD">loadFontSD</name>
<comment>
 #ifdef LOAD_GFXFF
 #ifdef FONT_FS_AVAILABLE
 only for ESP32
 loads parameters from a font vlw file from SD
 return 0=OK / 1=error init / 2=error card
</comment>
                 <returntype>Byte</returntype>
            <parameter>
                <name>fontName</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="loadFontLittleFS">loadFontLittleFS</name>
<comment>
 #ifdef LOAD_GFXFF
 #ifdef FONT_FS_AVAILABLE
 loads parameters from a font vlw file  from LittleFS
 return 0=OK / 1=error init
</comment>
                 <returntype>Byte</returntype>
            <parameter>
                <name>fontName</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="loadFontFS">loadFontFS</name>
<comment>
 #ifdef LOAD_GFXFF
 loads parameters from a font vlw file from SPIFFS
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>fontName</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="unloadFont">unloadFont</name>
<comment>
 #ifdef LOAD_GFXFF
 Delete the old glyph metrics and free up the memory
</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="getUnicodeIndex">getUnicodeIndex</name>
<comment>
 #ifdef LOAD_GFXFF
 Get the font file index of a Unicode character
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>unicode</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>index</name>
                <type>UInt[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawGlyph">drawGlyph</name>
<comment>
 #ifdef LOAD_GFXFF
 Write a character to the TFT cursor position
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>code</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="showFont">showFont</name>
<comment>
 #ifdef LOAD_GFXFF
 Page through all characters in font, td ms between screens
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>td</name>
                <type>ULong</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>B4R::B4RTFT_eSprite</name>
        <shortname>TFT_eSprite</shortname>
        <method>
            <name DesignerName="Initialize">Initialize</name>
                 <returntype>ULong</returntype>
            <parameter>
                <name>TFTid</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="createSprite">createSprite</name>
<comment>
 Create a sprite of width x height pixels, return a pointer to the RAM area
 Sketch can cast returned value to (uint16_t*) for 16-bit depth if needed
 RAM required is:
  - 1 bit per pixel for 1 bit colour depth
  - 1 nibble per pixel for 4-bit colour (with palette table)
  - 1 byte per pixel for 8-bit colour (332 RGB format)
  - 2 bytes per pixel for 16-bit color depth (565 RGB format)
  Default : frames = 1
</comment>
                 <returntype>ULong</returntype>
            <parameter>
                <name>width</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>height</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>frames</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getPointer">getPointer</name>
<comment>
 Returns a pointer to the sprite or nullptr if not created, user must cast to pointer type
</comment>
                 <returntype>ULong</returntype>
        </method>
        <method>
            <name DesignerName="created">created</name>
<comment>
 Returns true if sprite has been created
</comment>
                 <returntype>Bool</returntype>
        </method>
        <method>
            <name DesignerName="deleteSprite">deleteSprite</name>
<comment>
 Delete the sprite to free up the RAM
</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="frameBuffer">frameBuffer</name>
<comment>
 Select the frame buffer for graphics write (for 2 colour ePaper and DMA toggle buffer)
 Returns a pointer to the Sprite frame buffer
</comment>
                 <returntype>ULong</returntype>
            <parameter>
                <name>f</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setColorDepth">setColorDepth</name>
<comment>
 Set the colour depth to 1, 4, 8 or 16 bits. Can be used to change depth an existing
 sprite, but clears it to black, returns a new pointer if sprite is re-created.
</comment>
                 <returntype>ULong</returntype>
            <parameter>
                <name>b</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getColorDepth">getColorDepth</name>
<comment>
 Get the colour depth (1, 4, 8 or 16 bits).
</comment>
                 <returntype>Byte</returntype>
        </method>
        <method>
            <name DesignerName="createPalette">createPalette</name>
<comment>
 Set the palette for a 4-bit depth sprite.  Only the first 16 colours in the map are used.
 Palette in RAM
 Default :  palette = nullptr, colors = 16
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>palette</name>
                <type>UInt[]</type>
            </parameter>
            <parameter>
                <name>colors</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="createPalette1">createPalette1</name>
<comment>
 Set the palette for a 4-bit depth sprite.  Only the first 16 colours in the map are used.
 Palette in FLASH
 Default : palette = nullptr, colors = 16
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>palette</name>
                <type>UInt[]</type>
            </parameter>
            <parameter>
                <name>colors</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setPaletteColor">setPaletteColor</name>
<comment>
 Set a single palette index to the given color
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>index</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getPaletteColor">getPaletteColor</name>
<comment>
 Get the color at the given palette index
</comment>
                 <returntype>UInt</returntype>
            <parameter>
                <name>index</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setBitmapColor">setBitmapColor</name>
<comment>
 Set foreground and background colours for 1 bit per pixel Sprite
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>fg</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>bg</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawPixel">drawPixel</name>
<comment>
 Draw a single pixel at x,y
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawChar">drawChar</name>
<comment>
 Draw a single character in the GLCD or GFXFF font
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>c</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>bg</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>size</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="fillSprite">fillSprite</name>
<comment>
 Fill Sprite with a colour
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setWindow">setWindow</name>
<comment>
 Define a window to push 16-bit colour pixels into in a raster order
 Colours are converted to the set Sprite colour bit depth
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x0</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y0</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>x1</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y1</name>
                <type>Long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="pushColor">pushColor</name>
<comment>
 Push a color (aka singe pixel) to the sprite's set window area
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>color</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="pushColor1">pushColor1</name>
<comment>
 Push len colors (pixels) to the sprite's set window area
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>color</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>len</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="writeColor">writeColor</name>
<comment>
 Push a pixel pre-formatted as a 1, 4, 8 or 16-bit colour (avoids conversion overhead)
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>color</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setScrollRect">setScrollRect</name>
<comment>
 Set the scroll zone, top left corner at x,y with defined width and height
 The colour (optional, black is default) is used to fill the gap after the scroll
  Default :  color = TFT_BLACK
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="scroll">scroll</name>
<comment>
 Scroll the defined zone dx,dy pixels. Negative values left,up, positive right,down
 dy is optional (default is 0, so no up/down scroll).
 The sprite coordinate frame does not move because pixels are moved
  Default : dy = 0
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>dx</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>dy</name>
                <type>Int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawLine">drawLine</name>
<comment>
 Draw lines
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x0</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y0</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>x1</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y1</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawFastVLine">drawFastVLine</name>
<comment>
 Draw lines
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawFastHLine">drawFastHLine</name>
<comment>
 Draw lines
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="fillRect">fillRect</name>
<comment>
 Fill a rectangular area with a color (aka draw a filled rectangle)
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setRotation">setRotation</name>
<comment>
 Set the coordinate rotation of the Sprite (for 1bpp Sprites only)
 Note: this uses coordinate rotation and is primarily for ePaper which does not support
 CGRAM rotation (like TFT drivers do) within the displays internal hardware
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>rotation</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getRotation">getRotation</name>
<comment>
 Get the coordinate rotation of the Sprite
</comment>
                 <returntype>Byte</returntype>
        </method>
        <method>
            <name DesignerName="pushRotated">pushRotated</name>
<comment>
 Push a rotated copy of Sprite to TFT with optional transparent colour
 Default : transp = 0x00FFFFFF
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>angle</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>transp</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="pushRotated1">pushRotated1</name>
<comment>
 Push a rotated copy of Sprite to another different Sprite with optional transparent colour
 Default : transp = 0x00FFFFFF
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>sprID</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>angle</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>transp</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getRotatedBounds">getRotatedBounds</name>
<comment>
 Get the TFT bounding box for a rotated copy of this Sprite
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>angle</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>min_x</name>
                <type>Int[]</type>
            </parameter>
            <parameter>
                <name>min_y</name>
                <type>Int[]</type>
            </parameter>
            <parameter>
                <name>max_x</name>
                <type>Int[]</type>
            </parameter>
            <parameter>
                <name>max_y</name>
                <type>Int[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getRotatedBounds1">getRotatedBounds1</name>
<comment>
 Get the destination Sprite bounding box for a rotated copy of this Sprite
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>sprID</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>angle</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>min_x</name>
                <type>Int[]</type>
            </parameter>
            <parameter>
                <name>min_y</name>
                <type>Int[]</type>
            </parameter>
            <parameter>
                <name>max_x</name>
                <type>Int[]</type>
            </parameter>
            <parameter>
                <name>max_y</name>
                <type>Int[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getRotatedBounds2">getRotatedBounds2</name>
<comment>
 Bounding box support function
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>angle</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>xp</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>yp</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>min_x</name>
                <type>Int[]</type>
            </parameter>
            <parameter>
                <name>min_y</name>
                <type>Int[]</type>
            </parameter>
            <parameter>
                <name>max_x</name>
                <type>Int[]</type>
            </parameter>
            <parameter>
                <name>max_y</name>
                <type>Int[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="readPixel">readPixel</name>
<comment>
 Read the colour of a pixel at x,y and return value in 565 format
</comment>
                 <returntype>UInt</returntype>
            <parameter>
                <name>x0</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y0</name>
                <type>Long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="readPixelValue">readPixelValue</name>
<comment>
 return the numerical value of the pixel at x,y (used when scrolling)
 16bpp = colour, 8bpp = byte, 4bpp = colour index, 1bpp = 1 or 0
</comment>
                 <returntype>UInt</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="pushImage">pushImage</name>
<comment>
 Write an image (colour bitmap) to the sprite.
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x0</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y0</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>data</name>
                <type>UInt[]</type>
            </parameter>
            <parameter>
                <name>sbpp</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="pushImage1">pushImage1</name>
<comment>
 Write an image (colour bitmap) to the sprite.
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x0</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y0</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>data</name>
                <type>UInt[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="pushSprite">pushSprite</name>
<comment>
 Push the sprite to the TFT screen, this fn calls pushImage() in the TFT class.
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="pushSprite1">pushSprite1</name>
<comment>
 Push the sprite to the TFT screen, this fn calls pushImage() in the TFT class.
 Optionally a "transparent" colour can be defined, pixels of that colour will not be rendered
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>transparent</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="pushSprite2">pushSprite2</name>
<comment>
 Push a windowed area of the sprite to the TFT at tx, ty
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>tx</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>ty</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>sx</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>sy</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>sw</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>sh</name>
                <type>Long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="pushToSprite">pushToSprite</name>
<comment>
 Push the sprite to another sprite at x,y. This fn calls pushImage() in the destination sprite (dspr) class.
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>dsprID</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="pushToSprite1">pushToSprite1</name>
<comment>
 Push the sprite to another sprite at x,y. This fn calls pushImage() in the destination sprite (dspr) class.
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>dsprID</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>transparent</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawChar1">drawChar1</name>
<comment>
 Draw a single character in the selected font
</comment>
                 <returntype>Int</returntype>
            <parameter>
                <name>uniCode</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>font</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawChar2">drawChar2</name>
<comment>
 Draw a single character
</comment>
                 <returntype>Int</returntype>
            <parameter>
                <name>uniCode</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="width">width</name>
<comment>
 Return the width of the sprite
</comment>
                 <returntype>Int</returntype>
        </method>
        <method>
            <name DesignerName="height">height</name>
<comment>
 Return the height of the sprite
</comment>
                 <returntype>Int</returntype>
        </method>
        <method>
            <name DesignerName="printToSprite">printToSprite</name>
<comment>
 Functions associated with anti-aliased fonts
 Draw a single Unicode character using the loaded font
           void drawGlyph(uint16_t code);
 Print string to sprite using loaded font at cursor position
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>string</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="printToSprite1">printToSprite1</name>
<comment>
 Print char array to sprite using loaded font at cursor position
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>cbuffer</name>
                <type>Byte[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="printToSprite2">printToSprite2</name>
<comment>
 Print indexed glyph to sprite using loaded font at x,y
</comment>
                 <returntype>Int</returntype>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>index</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setOrigin">setOrigin</name>
<comment>
   Push (aka write pixel) colours to the set window
            void pushColor(uint16_t color);
   These are non-inlined to enable override
            void begin_nin_write();
   Non-inlined version to permit override
            void end_nin_write();
   Set the display image orientation to 0, 1, 2 or 3
            void setRotation(byte r);
   Read the current rotation
            byte getRotation();
   Change the origin position from the default top left
   Note: setRotation, setViewport and resetViewport will revert origin to top left corner of screen/sprite
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getOriginX">getOriginX</name>
<comment>
   Get graphics origin to position X
</comment>
                 <returntype>Long</returntype>
        </method>
        <method>
            <name DesignerName="getOriginY">getOriginY</name>
<comment>
   Get graphics origin to position Y
</comment>
                 <returntype>Long</returntype>
        </method>
        <method>
            <name DesignerName="invertDisplay">invertDisplay</name>
<comment>
   Tell TFT to invert all displayed colours
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>i</name>
                <type>Bool</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setAddrWindow">setAddrWindow</name>
<comment>
   The TFT_eSprite class inherits the following functions (not all are useful to Sprite class
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>xs</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>ys</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setViewport">setViewport</name>
<comment>
   Viewport commands, see "Viewport_Demo" sketch
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>vpDatum</name>
                <type>Bool</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="checkViewport">checkViewport</name>
<comment>
   Check if any part of specified area is visible in viewport
   Note: Setting w and h to 1 will check if coordinate x,y is in area
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getViewportX">getViewportX</name>
<comment>
   Get x position of the viewport datum
</comment>
                 <returntype>Long</returntype>
        </method>
        <method>
            <name DesignerName="getViewportY">getViewportY</name>
<comment>
   Get Y position of the viewport datum
</comment>
                 <returntype>Long</returntype>
        </method>
        <method>
            <name DesignerName="getViewportWidth">getViewportWidth</name>
<comment>
   Get width of the viewport
</comment>
                 <returntype>Long</returntype>
        </method>
        <method>
            <name DesignerName="getViewportHeight">getViewportHeight</name>
<comment>
   Get height of the viewport
</comment>
                 <returntype>Long</returntype>
        </method>
        <method>
            <name DesignerName="getViewportDatum">getViewportDatum</name>
<comment>
   Get datum flag of the viewport (true = viewport corner)
</comment>
                 <returntype>Bool</returntype>
        </method>
        <method>
            <name DesignerName="frameViewport">frameViewport</name>
<comment>
   Draw a frame inside or outside the viewport of width w
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>color</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="resetViewport">resetViewport</name>
<comment>
   Reset viewport to whole TFT screen, datum at 0,0
</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="clipAddrWindow">clipAddrWindow</name>
<comment>
   Clip address window x,y,w,h to screen and viewport
   Arraylong xywh : xywh(0)=x xywh(1)=y xywh(2)=w xywh(3)=h
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>xywh</name>
                <type>Long[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="clipWindow">clipWindow</name>
<comment>
   Clip window xs,ys,xe,ye to screen and viewport
   Arraylong xsysxeye xsysxeye(0)=xs xsysxeye(1)=ys xsysxeye(2)=xe xsysxeye(3)=ye
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>xsysxeye</name>
                <type>Long[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="pushColors">pushColors</name>
<comment>
   push a single pixel
            void pushColor1(uint16_t color, uint32_t len);
    push an array of pixels, for image drawing
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>data</name>
                <type>UInt[]</type>
            </parameter>
            <parameter>
                <name>swap</name>
                <type>Bool</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="pushColors1">pushColors1</name>
<comment>
   push an array of pixels for 16-bit raw image drawing
 Assumed that setAddrWindow() has previously been called
 len is number of bytes, not pixels
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>data</name>
                <type>Byte[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="pushBlock">pushBlock</name>
<comment>
 Assumed that setAddrWindow() has previously been called
 len is number of bytes, not pixels
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>color</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>len</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="pushPixels">pushPixels</name>
<comment>
  push an array of pixels for 16-bit raw image drawing
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>data_in</name>
                <type>Byte[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="tft_Read8">tft_Read8</name>
<comment>
 #ifdef TFT_SDA_READ
 #if defined (TFT_eSPI_ENABLE_8_BIT_READ)
 Read 8-bit value from TFT command register
</comment>
                 <returntype>Byte</returntype>
        </method>
        <method>
            <name DesignerName="begin_SDA_Read">begin_SDA_Read</name>
<comment>
 #ifdef TFT_SDA_READ
 Begin a read on a half duplex (bi-directional SDA) SPI bus - sets MOSI to input
</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="end_SDA_Read">end_SDA_Read</name>
<comment>
 #ifdef TFT_SDA_READ
 Restore MOSI to output
</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="fillScreen">fillScreen</name>
<comment>
   Clear the screen to defined colour
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawRect">drawRect</name>
<comment>
  Draw a rectangle outline
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawRoundRect">drawRoundRect</name>
<comment>
   Draw a rounded corner rectangle outline
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>radius</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="fillRoundRect">fillRoundRect</name>
<comment>
   Draw a rounded corner filled rectangle
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>radius</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="fillRectVGradient">fillRectVGradient</name>
<comment>
   draw a filled rectangle with a vertical colour gradient
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>color1</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>color2</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="fillRectHGradient">fillRectHGradient</name>
<comment>
   draw a filled rectangle with a horizontal colour gradient
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>color1</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>color2</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawCircle">drawCircle</name>
<comment>
  Draw a circle outline
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>r</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawCircleHelper">drawCircleHelper</name>
<comment>
   Support function for drawRoundRect()
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>r</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>cornername</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="fillCircle">fillCircle</name>
<comment>
    draw a filled circle
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>r</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="fillCircleHelper">fillCircleHelper</name>
<comment>
   Support function for fillRoundRect()
 Support drawing roundrects, changed to horizontal lines
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>r</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>cornername</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>delta</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawEllipse">drawEllipse</name>
<comment>
   Draw a ellipse outline
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>rx</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>ry</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="fillEllipse">fillEllipse</name>
<comment>
    draw a filled ellipse
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>rx</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>ry</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawTriangle">drawTriangle</name>
<comment>
   Draw a triangle outline using 3 arbitrary points
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x1</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y1</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>x2</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y2</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>x3</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y3</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="fillTriangle">fillTriangle</name>
<comment>
   Draw a filled triangle using 3 arbitrary points
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x1</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y1</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>x2</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y2</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>x3</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y3</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawSmoothArc">drawSmoothArc</name>
<comment>
  push a single pixel at an arbitrary position
            uint16_t drawPixel1(int32_t x, int32_t y, uint32_t color, byte alpha, uint32_t bg_color);
    Draw a smooth arc clockwise from 6 o'clock
 Default ; roundEnds = false
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>r</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>ir</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>startAngle</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>endAngle</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>fg_color</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>bg_color</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>roundEnds</name>
                <type>Bool</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawArc">drawArc</name>
<comment>
   Draw an arc clockwise from 6 o'clock position
 Centre at x,y
 r = arc outer radius, ir = arc inner radius. Inclusive, so arc thickness = r-ir+1
 Angles MUST be in range 0-360
 Arc foreground fg_color anti-aliased with background colour along sides
 smooth is optional, default is true, smooth=false means no antialiasing
 Note: Arc ends are not anti-aliased (use drawSmoothArc instead for that)
 Default : smoothArc = true
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>r</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>ir</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>startAngle</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>endAngle</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>fg_color</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>bg_color</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>smoothArc</name>
                <type>Bool</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawSmoothCircle">drawSmoothCircle</name>
<comment>
   Draw a smooth circle
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>r</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>fg_color</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>bg_color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="fillSmoothCircle">fillSmoothCircle</name>
<comment>
   Draw a filled anti-aliased circle
  Default :  bg_color = 0x00FFFFFF)
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>r</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>bg_color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawSmoothRoundRect">drawSmoothRoundRect</name>
<comment>
   Draw a rounded rectangle
 x,y is top left corner of bounding box for a complete rounded rectangle
 r = arc outer corner radius, ir = arc inner radius. Arc thickness = r-ir+1
 w and h are width and height of the bounding rectangle
 If w and h are - radius (e.g. 0,0) a circle will be drawn with centre at x+r,y+r
 Arc foreground fg_color anti-aliased with background colour at edges
 A subset of corners can be drawn by specifying a quadrants mask. A bit set in the
 mask means draw that quadrant (all are drawn if parameter missing):   0x1 | 0x2
    ---|---    Arc quadrant mask select bits (as in drawCircleHelper fn) 0x8 | 0x4
  Default : bg_color = 0x00FFFFFF, quadrants = 0xF
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>r</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>ir</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>fg_color</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>bg_color</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>quadrants</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="fillSmoothRoundRect">fillSmoothRoundRect</name>
<comment>
   Draw a filled anti-aliased rounded corner rectangle
  Default : bg_color = 0x00FFFFFF
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>radius</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>bg_color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawSpot">drawSpot</name>
<comment>
   Draw an anti-aliased filled circle at ax,ay with radius r
 Coordinates are floating point to achieve sub-pixel positioning
 Default : bg_color = 0x00FFFFFF
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>ax</name>
                <type>Double</type>
            </parameter>
            <parameter>
                <name>ay</name>
                <type>Double</type>
            </parameter>
            <parameter>
                <name>r</name>
                <type>Double</type>
            </parameter>
            <parameter>
                <name>fg_color</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>bg_color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawWideLine">drawWideLine</name>
<comment>
    draw an anti-aliased line with rounded ends, width wd
  default :  bg_color = 0x00FFFFFF
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>ax</name>
                <type>Double</type>
            </parameter>
            <parameter>
                <name>ay</name>
                <type>Double</type>
            </parameter>
            <parameter>
                <name>bx</name>
                <type>Double</type>
            </parameter>
            <parameter>
                <name>by</name>
                <type>Double</type>
            </parameter>
            <parameter>
                <name>wd</name>
                <type>Double</type>
            </parameter>
            <parameter>
                <name>fg_color</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>bg_color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawWedgeLine">drawWedgeLine</name>
<comment>
   draw an anti-aliased line with different width radiused ends
 Default : bg_color = 0x00FFFFFF
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>ax</name>
                <type>Double</type>
            </parameter>
            <parameter>
                <name>ay</name>
                <type>Double</type>
            </parameter>
            <parameter>
                <name>bx</name>
                <type>Double</type>
            </parameter>
            <parameter>
                <name>by</name>
                <type>Double</type>
            </parameter>
            <parameter>
                <name>aw</name>
                <type>Double</type>
            </parameter>
            <parameter>
                <name>bw</name>
                <type>Double</type>
            </parameter>
            <parameter>
                <name>fg_color</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>bg_color</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setSwapBytes">setSwapBytes</name>
<comment>
   Used by 16-bit pushImage() to swap byte order in colours
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>swap</name>
                <type>Bool</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getSwapBytes">getSwapBytes</name>
<comment>
   Return the swap byte order for colours
</comment>
                 <returntype>Bool</returntype>
        </method>
        <method>
            <name DesignerName="drawBitmap">drawBitmap</name>
<comment>
   Draw an image stored in an array on the TFT
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>bitmap</name>
                <type>Byte[]</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>fgcolor</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawBitmap1">drawBitmap1</name>
<comment>
   Draw an image stored in an array on the TFT
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>bitmap</name>
                <type>Byte[]</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>fgcolor</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>bgcolor</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawXBitmap">drawXBitmap</name>
<comment>
   Draw an image stored in an XBM array onto the TFT
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>bitmap</name>
                <type>Byte[]</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>fgcolor</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawXBitmap1">drawXBitmap1</name>
<comment>
   Draw an XBM image with foreground and background colors
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>bitmap</name>
                <type>Byte[]</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>fgcolor</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>bgcolor</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setPivot">setPivot</name>
<comment>
   Set the foreground foreground and background colour
            void setBitmapColor(uint16_t fgcolor, uint16_t bgcolor);
   Set the pivot point on the TFT
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getPivotX">getPivotX</name>
<comment>
   Get the x pivot position
</comment>
                 <returntype>Int</returntype>
        </method>
        <method>
            <name DesignerName="getPivotY">getPivotY</name>
<comment>
   Get the y pivot position
</comment>
                 <returntype>Int</returntype>
        </method>
        <method>
            <name DesignerName="readRect">readRect</name>
<comment>
    Read 565 pixel colours from a defined area
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>data</name>
                <type>UInt[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="pushRect">pushRect</name>
<comment>
    push 565 pixel colours into a defined area
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>data</name>
                <type>UInt[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="pushMaskedImage">pushMaskedImage</name>
<comment>
    plot 16-bit colour sprite or image onto TFT
    for FLASH (PROGMEM) stored images
 ???           void pushImage3(int32_t x, int32_t y, int32_t w, int32_t h, ArrayUInt* data);
   plot 8-bit or 4-bit or 1 bit image or sprite using a line buffer
    from FLASH (PROGMEM) stored images
            void pushImage4(int32_t x, int32_t y, int32_t w, int32_t h, ArrayByte* data, bool bpp8, ArrayUInt* cmap);
    plot 8 or 4 or 1 bit image or sprite with a transparent colour
            void pushImage5(int32_t x, int32_t y, int32_t w, int32_t h, ArrayByte* data, byte  transparent, bool bpp8, ArrayUInt* cmap);
    plot 8-bit or 4-bit or 1 bit image or sprite using a line buffer
            void pushImage6(int32_t x, int32_t y, int32_t w, int32_t h, ArrayByte* data, bool bpp8, ArrayUInt* cmap);
    Render a 16-bit colour image to TFT with a 1bpp mask
    from FLASH (PROGMEM) stored images
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>img</name>
                <type>UInt[]</type>
            </parameter>
            <parameter>
                <name>mask</name>
                <type>Byte[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="readRectRGB">readRectRGB</name>
<comment>
    read rectangle (for SPI Interface II i.e. IM [3:0] = "1101")
    Read RGB pixel colours from a defined area
 If w and h are 1, then 1 pixel is read, *data array size must be 3 bytes per pixel
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>data</name>
                <type>Byte[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawNumber">drawNumber</name>
<comment>
    draw a long integer with font number
</comment>
                 <returntype>Int</returntype>
            <parameter>
                <name>intNumber</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>font</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawNumber1">drawNumber1</name>
<comment>
    draw a long integer
</comment>
                 <returntype>Int</returntype>
            <parameter>
                <name>intNumber</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawFloat">drawFloat</name>
<comment>
    drawFloat, prints 7 non zero digits maximum with font number
</comment>
                 <returntype>Int</returntype>
            <parameter>
                <name>doubleNumber</name>
                <type>Double</type>
            </parameter>
            <parameter>
                <name>decimal</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>font</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawFloat1">drawFloat1</name>
<comment>
    drawFloat, prints 7 non zero digits maximum
</comment>
                 <returntype>Int</returntype>
            <parameter>
                <name>doubleNumber</name>
                <type>Double</type>
            </parameter>
            <parameter>
                <name>decimal</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawString">drawString</name>
<comment>
    draw string with padding if it is defined and with font number
</comment>
                 <returntype>Int</returntype>
            <parameter>
                <name>string</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>font</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawString1">drawString1</name>
<comment>
    draw string with padding if it is defined
    Without font number, uses font set by setTextFont()
</comment>
                 <returntype>Int</returntype>
            <parameter>
                <name>string</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawCentreString">drawCentreString</name>
<comment>
    draw string centred on dX  (deprecated, use setTextDatum())
</comment>
                 <returntype>Int</returntype>
            <parameter>
                <name>string</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>font</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawRightString">drawRightString</name>
<comment>
    draw string right justified to dX  (deprecated, use setTextDatum())
</comment>
                 <returntype>Int</returntype>
            <parameter>
                <name>string</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>font</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setCursor">setCursor</name>
<comment>
    Set the text cursor x,y position
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setCursor1">setCursor1</name>
<comment>
    Set the text cursor x,y position and font
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>font</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getCursorX">getCursorX</name>
<comment>
    Get the text cursor x position
</comment>
                 <returntype>Int</returntype>
        </method>
        <method>
            <name DesignerName="getCursorY">getCursorY</name>
<comment>
    Get the text cursor y position
</comment>
                 <returntype>Int</returntype>
        </method>
        <method>
            <name DesignerName="setTextColor">setTextColor</name>
<comment>
    Set the font foreground colour (background is transparent)
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>color</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setTextColor1">setTextColor1</name>
<comment>
    Set the font foreground and background colour
 Smooth fonts use the background colour for anti-aliasing and by default the
 background is not filled. If bgfill = true, then a smooth font background fill will
 be used.
 Default : bgfill = false
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>fgcolor</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>bgcolor</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>bgfill</name>
                <type>Bool</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setTextSize">setTextSize</name>
<comment>
    Set the text size multiplier
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>size</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setTextWrap">setTextWrap</name>
<comment>
    Define if text should wrap at end of line
  Default :  wrapY = false
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>wrapX</name>
                <type>Bool</type>
            </parameter>
            <parameter>
                <name>wrapY</name>
                <type>Bool</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setTextDatum">setTextDatum</name>
<comment>
   Set the text position reference datum
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>datum</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getTextDatum">getTextDatum</name>
<comment>
   Return the text datum value (as used by setTextDatum())
</comment>
                 <returntype>Byte</returntype>
        </method>
        <method>
            <name DesignerName="setTextPadding">setTextPadding</name>
<comment>
    Define padding width (aids erasing old text and numbers)
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x_width</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getTextPadding">getTextPadding</name>
<comment>
    Define padding width (aids erasing old text and numbers)
</comment>
                 <returntype>UInt</returntype>
        </method>
        <method>
            <name DesignerName="setFreeFont">setFreeFont</name>
<comment>
    Sets the GFX free font to use (from fonts number define in inline C )
  FreeFonts 1-x after declaration in inline C
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>GFXid</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setTextFont">setTextFont</name>
<comment>
    Set the font by default (1-8) for the print stream
  Fonts by default 1-8
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>font</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setFreeFont1">setFreeFont1</name>
<comment>
   No GFX free font define: no used
  Fonts by default 1-8
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>font</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setTextFont1">setTextFont1</name>
<comment>
   Set the font by default (1-8) for the print stream
  Fonts by default 1-8
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>font</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="textWidth">textWidth</name>
<comment>
   Return the width in pixels of a string in a given font
</comment>
                 <returntype>Int</returntype>
            <parameter>
                <name>string</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>font</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="textWidth1">textWidth1</name>
<comment>
   Return the width in pixels of a string in a given font
</comment>
                 <returntype>Int</returntype>
            <parameter>
                <name>string</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="textWidth2">textWidth2</name>
<comment>
   Return the width in pixels of a string in a given font
    from String sent by reference
</comment>
                 <returntype>Int</returntype>
            <parameter>
                <name>string</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>font</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="textWidth3">textWidth3</name>
<comment>
   Return the width in pixels of a string in a given font
    from String sent bynreference
</comment>
                 <returntype>Int</returntype>
            <parameter>
                <name>string</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="fontHeight">fontHeight</name>
<comment>
    return the height of a font (yAdvance for free fonts)
</comment>
                 <returntype>Int</returntype>
            <parameter>
                <name>font</name>
                <type>Int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="fontHeight1">fontHeight1</name>
<comment>
    return the height of a font (yAdvance for free fonts)
</comment>
                 <returntype>Int</returntype>
        </method>
        <method>
            <name DesignerName="decodeUTF8">decodeUTF8</name>
<comment>
    Serial UTF-8 decoder with fall-back to extended ASCII
</comment>
                 <returntype>UInt</returntype>
            <parameter>
                <name>buf</name>
                <type>Byte[]</type>
            </parameter>
            <parameter>
                <name>index</name>
                <type>UInt[]</type>
            </parameter>
            <parameter>
                <name>remaining</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="decodeUTF81">decodeUTF81</name>
<comment>
    Line buffer UTF-8 decoder with fall-back to extended ASCII
</comment>
                 <returntype>UInt</returntype>
            <parameter>
                <name>c</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="write">write</name>
<comment>
    draw characters piped through serial stream
</comment>
                 <returntype>UInt</returntype>
            <parameter>
                <name>utf8</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="fontsLoaded">fontsLoaded</name>
<comment>
   return an encoded 16-bit value showing the fonts loaded
  Each bit in returned value represents a font type that is loaded - used for debug/error handling only
</comment>
                 <returntype>UInt</returntype>
        </method>
        <method>
            <name DesignerName="spiwrite">spiwrite</name>
<comment>
    Write 8 bits to SPI port (legacy support only)
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>c</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="writecommand">writecommand</name>
<comment>
    #ifndef RM68120_DRIVER
 Send a 16-bit command, function resets DC/RS high ready for data
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>c</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="writeRegister8">writeRegister8</name>
<comment>
    #ifndef RM68120_DRIVER
 Write 8-bit data data to 16-bit command register
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>c</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>d</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="writeRegister16">writeRegister16</name>
<comment>
    #ifndef RM68120_DRIVER
 Write 16-bit data data to 16-bit command register
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>c</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>d</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="writecommand1">writecommand1</name>
<comment>
 Send an 8-bit command, function resets DC/RS high ready for data
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>c</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="writedata">writedata</name>
<comment>
    #ifdef RM68120_DRIVER
 Send data with DC/RS set high
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>d</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="commandList">commandList</name>
<comment>
 Send a initialisation sequence to TFT stored in FLASH
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>addr</name>
                <type>Byte[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="readcommand8">readcommand8</name>
<comment>
 read 8 bits from TFT
</comment>
                 <returntype>Byte</returntype>
            <parameter>
                <name>cmd_function</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>index</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="readcommand16">readcommand16</name>
<comment>
 read 16 bits from TFT
</comment>
                 <returntype>UInt</returntype>
            <parameter>
                <name>cmd_function</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>index</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="readcommand32">readcommand32</name>
<comment>
 read 32 bits from TFT
</comment>
                 <returntype>ULong</returntype>
            <parameter>
                <name>cmd_function</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>index</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="color565">color565</name>
<comment>
 Convert 8-bit red, green and blue to 16 bits
</comment>
                 <returntype>UInt</returntype>
            <parameter>
                <name>red</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>green</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>blue</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="color8to16">color8to16</name>
<comment>
 Convert 8-bit colour to 16 bits
</comment>
                 <returntype>UInt</returntype>
            <parameter>
                <name>color332</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="color16to8">color16to8</name>
<comment>
 Convert 16-bit colour to 8 bits
</comment>
                 <returntype>Byte</returntype>
            <parameter>
                <name>color565</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="color16to24">color16to24</name>
<comment>
 Convert 16-bit colour to 24-bit, R+G+B concatenated into LS 24 bits
</comment>
                 <returntype>ULong</returntype>
            <parameter>
                <name>color565</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="color24to16">color24to16</name>
<comment>
 Convert 16-bit colour from 24-bit, R+G+B concatenated into LS 24 bits
</comment>
                 <returntype>ULong</returntype>
            <parameter>
                <name>color888</name>
                <type>ULong</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="alphaBlend">alphaBlend</name>
<comment>
 Alpha blend 2 colours, see generic "alphaBlend_Test" example
 alpha =   0 = 100% background colour
 alpha = 255 = 100% foreground colour
</comment>
                 <returntype>UInt</returntype>
            <parameter>
                <name>alpha</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>fgc</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>bgc</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="alphaBlend1">alphaBlend1</name>
<comment>
 16-bit colour alphaBlend with alpha dither (dither reduces colour banding)
</comment>
                 <returntype>UInt</returntype>
            <parameter>
                <name>alpha</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>fgc</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>bgc</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>dither</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="alphaBlend24">alphaBlend24</name>
<comment>
 24-bit colour alphaBlend with optional alpha dither
  Default : dither = 0
</comment>
                 <returntype>ULong</returntype>
            <parameter>
                <name>alpha</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>fgc</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>bgc</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>dither</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="initDMA">initDMA</name>
<comment>
 Initialise the DMA engine and attach to SPI bus - typically used in setup()
 Parameter "true" enables DMA engine control of TFT chip select (ESP32 only)
 For ESP32 only, TFT reads will not work if parameter is true
  Default : ctrl_cs = false
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>ctrl_cs</name>
                <type>Bool</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="deInitDMA">deInitDMA</name>
<comment>
 De-initialise the DMA engine and detach from SPI bus - typically not used
</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="pushImageDMA">pushImageDMA</name>
<comment>
 Push an image to the TFT using DMA, buffer is optional and grabs (double buffers) a copy of the image
 Use the buffer if the image data will get over-written or destroyed while DMA is in progress

 Note 1: If swapping colour bytes is defined, and the double buffer option is NOT used, then the bytes
 in the original image buffer content will be byte swapped by the function before DMA is initiated.

 Note 2: If part of the image will be off screen or outside of a set viewport, then the the original
 image buffer content will be altered to a correctly clipped image before DMA is initiated.

 The function will wait for the last DMA to complete if it is called while a previous DMA is still
 in progress, this simplifies the sketch and helps avoid "gotchas".
 Default : buffer = nullptr
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>data</name>
                <type>UInt[]</type>
            </parameter>
            <parameter>
                <name>buffer</name>
                <type>UInt[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="pushImageDMA1">pushImageDMA1</name>
<comment>
 ESP32 only at the moment
 For case where pointer is a const and the image data must not be modified (clipped or byte swapped)
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>Long</type>
            </parameter>
            <parameter>
                <name>data</name>
                <type>UInt[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="pushPixelsDMA">pushPixelsDMA</name>
<comment>
 Push a block of pixels into a window set up using setAddrWindow()
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>image</name>
                <type>UInt[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="dmaBusy">dmaBusy</name>
<comment>
 Check if the DMA is complete - use while(tft.dmaBusy); for a blocking wait
 returns true if DMA is still in progress
</comment>
                 <returntype>Bool</returntype>
        </method>
        <method>
            <name DesignerName="dmaWait">dmaWait</name>
<comment>
 wait until DMA is complete
</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="DMA_Enabled">DMA_Enabled</name>
<comment>
 Flag for DMA enabled state
</comment>
                 <returntype>Bool</returntype>
        </method>
        <method>
            <name DesignerName="spiBusyCheck">spiBusyCheck</name>
<comment>
 Number of ESP32 transfer buffers to check
</comment>
                 <returntype>Byte</returntype>
        </method>
        <method>
            <name DesignerName="startWrite">startWrite</name>
<comment>
 Begin SPI transaction
</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="endWrite">endWrite</name>
<comment>
 Deprecated, use pushBlock()
           void writeColor2(uint16_t color, uint32_t len);
 End SPI transaction
</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="setAttribute">setAttribute</name>
<comment>
 Set attribute value
 Default : id=0 a=0
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>id</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>a</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getAttribute">getAttribute</name>
<comment>
 Get attribute value
  Default : id=0
</comment>
                 <returntype>Byte</returntype>
            <parameter>
                <name>id</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="textcolor">textcolor</name>
<comment>
 Text foreground colours
</comment>
                 <returntype>ULong</returntype>
        </method>
        <method>
            <name DesignerName="textbgcolor">textbgcolor</name>
<comment>
 Text background colours
</comment>
                 <returntype>ULong</returntype>
        </method>
        <method>
            <name DesignerName="bitmap_fg">bitmap_fg</name>
<comment>
 Bitmap foreground (bit=1) colours
</comment>
                 <returntype>ULong</returntype>
        </method>
        <method>
            <name DesignerName="bitmap_bg">bitmap_bg</name>
<comment>
 Bitmap  background (bit=0) colours
</comment>
                 <returntype>ULong</returntype>
        </method>
        <method>
            <name DesignerName="textfont">textfont</name>
<comment>
 Get Current selected font number
</comment>
                 <returntype>Byte</returntype>
        </method>
        <method>
            <name DesignerName="textsize">textsize</name>
<comment>
 Get Current font size multiplier
</comment>
                 <returntype>Byte</returntype>
        </method>
        <method>
            <name DesignerName="textdatum">textdatum</name>
<comment>
 Get Text reference datum
</comment>
                 <returntype>Byte</returntype>
        </method>
        <method>
            <name DesignerName="rotation">rotation</name>
<comment>
 Display rotation (0-3)
</comment>
                 <returntype>Byte</returntype>
        </method>
        <method>
            <name DesignerName="decoderState">decoderState</name>
<comment>
 UTF8 decoder state        - not for user access
</comment>
                 <returntype>UInt</returntype>
        </method>
        <method>
            <name DesignerName="decoderBuffer">decoderBuffer</name>
<comment>
 Unicode code-point buffer - not for user access
</comment>
                 <returntype>UInt</returntype>
        </method>
        <method>
            <name DesignerName="print">print</name>
<comment>
 Print a string
</comment>
                 <returntype>UInt</returntype>
            <parameter>
                <name>string</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="println">println</name>
<comment>
 Println a string
</comment>
                 <returntype>UInt</returntype>
            <parameter>
                <name>string</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getTouchRaw">getTouchRaw</name>
<comment>
  #ifdef TOUCH_CS
 Get raw x,y ADC values from touch controller
</comment>
                 <returntype>Byte</returntype>
            <parameter>
                <name>xy</name>
                <type>UInt[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getTouchRawZ">getTouchRawZ</name>
<comment>
  #ifdef TOUCH_CS
 Get raw z (i.e. pressure) ADC value from touch controller
</comment>
                 <returntype>UInt</returntype>
        </method>
        <method>
            <name DesignerName="convertRawXY">convertRawXY</name>
<comment>
   #ifdef TOUCH_CS
 Convert raw x,y values to calibrated and correctly rotated screen coordinates
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>xy</name>
                <type>UInt[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getTouch">getTouch</name>
<comment>
   #ifdef TOUCH_CS
 Get the screen touch coordinates, returns true if screen has been touched
 if the touch coordinates are off screen then x and y are not updated
 The returned value can be treated as a bool type, false or 0 means touch not detected
 In future the function may return an 8-bit "quality" (jitter) value.
 The threshold value is optional, this must be higher than the bias level for z (pressure)
 reported by Test_Touch_Controller when the screen is NOT touched. When touched the z value
 must be higher than the threshold for a touch to be detected.
 ArrayUInt* xy : xy(0) = x   xy(1) = y
 Default :  threshold = 600)
</comment>
                 <returntype>Byte</returntype>
            <parameter>
                <name>xy</name>
                <type>UInt[]</type>
            </parameter>
            <parameter>
                <name>threshold</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="calibrateTouch">calibrateTouch</name>
<comment>
   #ifdef TOUCH_CS
 Run screen calibration and test, report calibration values to the serial port
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>data</name>
                <type>UInt[]</type>
            </parameter>
            <parameter>
                <name>color_fg</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>color_bg</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>size</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setTouch">setTouch</name>
<comment>
   #ifdef TOUCH_CS
 Set the screen calibration values
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>data</name>
                <type>UInt[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="loadFontH">loadFontH</name>
<comment>
 #ifdef LOAD_GFXFF
 loads parameters from a font vlw array from h file
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>VLWid</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="loadFontSD">loadFontSD</name>
<comment>
 #ifdef LOAD_GFXFF
 #ifdef FONT_FS_AVAILABLE
 only for ESP32
 loads parameters from a font vlw file from SD
 return 0=OK / 1=error init / 2=error card
</comment>
                 <returntype>Byte</returntype>
            <parameter>
                <name>fontName</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="loadFontLittleFS">loadFontLittleFS</name>
<comment>
 #ifdef LOAD_GFXFF
 #ifdef FONT_FS_AVAILABLE
 loads parameters from a font vlw file  from LittleFS
 return 0=OK / 1=error init
</comment>
                 <returntype>Byte</returntype>
            <parameter>
                <name>fontName</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="loadFontFS">loadFontFS</name>
<comment>
 #ifdef LOAD_GFXFF
 loads parameters from a font vlw file from SPIFFS
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>fontName</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="unloadFont">unloadFont</name>
<comment>
 #ifdef LOAD_GFXFF
 Delete the old glyph metrics and free up the memory
</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="getUnicodeIndex">getUnicodeIndex</name>
<comment>
 #ifdef LOAD_GFXFF
 Get the font file index of a Unicode character
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>unicode</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>index</name>
                <type>UInt[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawGlyph">drawGlyph</name>
<comment>
 #ifdef LOAD_GFXFF
 Write a character to the TFT cursor position
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>code</name>
                <type>UInt</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="showFont">showFont</name>
<comment>
 #ifdef LOAD_GFXFF
 Page through all characters in font, td ms between screens
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>td</name>
                <type>ULong</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>B4R::B4RTFT_eSPI_Button</name>
        <shortname>TFT_eSPI_Button</shortname>
        <method>
            <name DesignerName="Initialize">Initialize</name>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="initButton">initButton</name>
<comment>
 "Classic" initButton() uses centre and size
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>TFTid</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>outline</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>fill</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>textcolor</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>label</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>textsize</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="initButtonUL">initButtonUL</name>
<comment>
 New/alt initButton() uses upper-left corner and size
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>TFTid</name>
                <type>ULong</type>
            </parameter>
            <parameter>
                <name>x1</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y1</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>w</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>h</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>outline</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>fill</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>textcolor</name>
                <type>UInt</type>
            </parameter>
            <parameter>
                <name>label</name>
                <type>B4R::B4RString*</type>
            </parameter>
            <parameter>
                <name>textsize</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setLabelDatum">setLabelDatum</name>
<comment>
 Adjust text datum and x, y deltas
  Default : datum = MC_DATUM
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>x_delta</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y_delta</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>datum</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="drawButton">drawButton</name>
<comment>
  Default : long_name = ""
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>inverted</name>
                <type>Bool</type>
            </parameter>
            <parameter>
                <name>long_name</name>
                <type>B4R::B4RString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="contains">contains</name>
                 <returntype>Bool</returntype>
            <parameter>
                <name>x</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>Int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="press">press</name>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>p</name>
                <type>Bool</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="isPressed">isPressed</name>
                 <returntype>Bool</returntype>
        </method>
        <method>
            <name DesignerName="justPressed">justPressed</name>
                 <returntype>Bool</returntype>
        </method>
        <method>
            <name DesignerName="justReleased">justReleased</name>
                 <returntype>Bool</returntype>
        </method>
    </class>
    <version>1.01</version>
</root>
