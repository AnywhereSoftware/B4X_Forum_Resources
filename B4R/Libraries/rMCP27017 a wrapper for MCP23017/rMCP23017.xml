<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<root>
    <doclet-version-NOT-library-version>1.00</doclet-version-NOT-library-version>
    <class>
        <name>B4R::B4RMCP23017</name>
        <shortname>MCP23017</shortname>
        <method>
            <name DesignerName="InitializeI2C">InitializeI2C</name>
<comment>
Initialize MCP using I2C.
 I2C is by default : Wire
param i2c_addr I2C address
param rp reset pin for reset / 99 = no reset pin
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>addr</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>rp</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="BeginI2C">BeginI2C</name>
<comment>
begin I2C.
 I2C is by default : Wire
sda and scl are pins by default
</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="InitializeI2C_Esp">InitializeI2C_Esp</name>
<comment>
Initialize MCP using I2C.
 param wire is Wire, Wire1 for ESP32, Wire for others
param i2c_addr I2C address
param rp reset pin for reset / 99 = no reset pin
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>wire</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>addr</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>rp</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="BeginI2C_Esp">BeginI2C_Esp</name>
<comment>
begin I2C for ESP32 and ESP8266.
 param wire is Wire, Wire1 for ESP32, Wire for others
sda and scl can be changed if needed. sda=1 / scl=-1 : values by default
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>wire</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>sda</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>scl</name>
                <type>Int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="InitializeSPI">InitializeSPI</name>
<comment>
 Initialize MCP using SPI.
 SPI used by default
param cs_pin Pin to use for SPI chip select
param _hw_addr Hardware address (pins A2, A1, A0)
param rp reset pin for reset / 99 = no reset pin
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>cs</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>rp</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>addr</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="BeginSPI">BeginSPI</name>
<comment>
begin SPI.
 SPI used by default
 SCK, MISO, MOSI, SS are values by default
</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="InitializeSPI_ESP32">InitializeSPI_ESP32</name>
<comment>
 Initialize MCP using SPI.
 SPI can be HSPI, VSPI for ESP32, or SPI by default
param cs_pin Pin to use for SPI chip select
param _hw_addr Hardware address (pins A2, A1, A0)
param rp reset pin for reset / 99 = no reset pin
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>SPIbus</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>cs</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>rp</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>addr</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="BeginSPI_ESP32">BeginSPI_ESP32</name>
<comment>
 begin SPI for ESP32.
 SPI can be HSPI, VSPI for ESP32, or SPI by default
param SCK, MISO, MOSI, SS : if change of pins for SPI is need / if =-1 value by default
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>SPIbus</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>SCK</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>MISO</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>MOSI</name>
                <type>Int</type>
            </parameter>
            <parameter>
                <name>SS</name>
                <type>Int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Init">Init</name>
<comment>
initiates the MCP23017 with some register values,
sets some private variables; returns false if not connected
</comment>
                 <returntype>Bool</returntype>
        </method>
        <method>
            <name DesignerName="reset">reset</name>
<comment>
reset of the MCP23107 by reset pin
</comment>
            <returntype>B4R::void</returntype>
        </method>
        <method>
            <name DesignerName="setPinMode">setPinMode</name>
<comment>
sets INPUT/OUTPUT/INPUT_PULLUP for a single pin
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>pin</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>port</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>pinState</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setPortMode">setPortMode</name>
<comment>
sets  INPUT/OUTPUT for a complete port
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>portState</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>port</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setPortMode1">setPortMode1</name>
<comment>
with this variant input pins are pulled up; no effect on output pins
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>val</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>port</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>pu</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setPin">setPin</name>
<comment>
LOW/HIGH for a single pin
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>pin</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>port</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>pinLevel</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="togglePin">togglePin</name>
<comment>
switches LOW to HIGH or HIGH to LOW
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>pin</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>port</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setPinX">setPinX</name>
<comment>
combination of setPin and setPinMode
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>pin</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>port</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>pinState</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>pinLevel</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setAllPins">setAllPins</name>
<comment>
sets HIGH/LOW for all Pins
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>port</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>pinLevel</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setPort">setPort</name>
<comment>
sets HIGH/LOW for all Pins
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>portLevel</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>port</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setPortAll">setPortAll</name>
<comment>
sets HIGH / LOW for pins of both ports (A, B);
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>portLevelA</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>portLevelB</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setPortX">setPortX</name>
<comment>
sets pinMode and HIGH/LOW for a complete port
(combination of setPortMode and setPort)
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>portState</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>portLevel</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>port</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setInterruptPinPol">setInterruptPinPol</name>
<comment>
sets the polarity of INTA and INTB (active-high or active-low)
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>level</name>
                <type>Byte</type>
            </parameter>
        </method>
        <property>
            <name>IntOdr</name>
<comment>
sets INTA and INTB as open drain
</comment>
            <parameter>
                <name>openDrain</name>
                <type>Byte</type>
            </parameter>
        </property>
        <method>
            <name DesignerName="setInterruptOnChangePin">setInterruptOnChangePin</name>
<comment>
sets interrupt-on-change for a single pin
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>pin</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>port</name>
                <type>mcp_port</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setInterruptOnDefValDevPin">setInterruptOnDefValDevPin</name>
<comment>
sets interrupt-on-defval-deviation a single pin
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>pin</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>port</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>pinIntLevel</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setInterruptOnChangePort">setInterruptOnChangePort</name>
<comment>
sets interrupt-on-change for a port
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>intOnChangePins</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>port</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setInterruptOnDefValDevPort">setInterruptOnDefValDevPort</name>
<comment>
sets interrupt-on-defval-deviation a single pin
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>intPins</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>port</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>defVal</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="deleteAllInterruptsOnPort">deleteAllInterruptsOnPort</name>
<comment>
interrupt pins turn into "normal" pins
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>port</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setPinPullUp">setPinPullUp</name>
<comment>
sets internal pull-up for a single pin (only input pins are affected)
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>pin</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>port</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>pinLevel</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="setPortPullUp">setPortPullUp</name>
<comment>
sets internal pull-up for a port (only input pins are affected)
</comment>
                 <returntype>B4R::void</returntype>
            <parameter>
                <name>pulledUpPins</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>port</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getPortPullUp">getPortPullUp</name>
<comment>
provides internal pull-up for a port
</comment>
                 <returntype>Byte</returntype>
            <parameter>
                <name>port</name>
                <type>Byte</type>
            </parameter>
        </method>
        <property>
            <name>IntMirror</name>
<comment>
0/OFF: INTA and INTB working separately; 1/ON: INTA and INTB are mirrored
</comment>
            <parameter>
                <name>mirrored</name>
                <type>Byte</type>
            </parameter>
        </property>
        <method>
            <name DesignerName="getIntFlag">getIntFlag</name>
<comment>
provides the content of the INTFLAG register
</comment>
                 <returntype>Byte</returntype>
            <parameter>
                <name>port</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getPin">getPin</name>
<comment>
provides the logic level of a single pin
</comment>
                 <returntype>Bool</returntype>
            <parameter>
                <name>pin</name>
                <type>Byte</type>
            </parameter>
            <parameter>
                <name>port</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getPort">getPort</name>
<comment>
provides the logic level of a port
</comment>
                 <returntype>Byte</returntype>
            <parameter>
                <name>port</name>
                <type>Byte</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="getIntCap">getIntCap</name>
<comment>
provides the content of the interrupt capture register
</comment>
                 <returntype>Byte</returntype>
            <parameter>
                <name>port</name>
                <type>Byte</type>
            </parameter>
        </method>
        <property>
            <name>SPIClockSpeed</name>
<comment>
only for TINY_WIRE_M
</comment>
            <parameter>
                <name>clock</name>
                <type>ULong</type>
            </parameter>
        </property>
        <method>
            <name DesignerName="softReset">softReset</name>
<comment>
reset of the MCP23107 withoout reset pin
</comment>
            <returntype>B4R::void</returntype>
        </method>
        <field>
            <name DefineMethod="true" DesignerName="ESP32_HSPI">B4R_HSPI</name>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ESP32_VSPI">B4R_VSPI</name>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ESP_Wire">B4R_I2C_Wire</name>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ESP32_Wire1">B4R_I2C_Wire1</name>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="PortA">B4R_PortA</name>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="PortB">B4R_PortB</name>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="INPUT">B4R_INPUT</name>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="OUTPUT">B4R_OUTPUT</name>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="INPUT_PULLUP">B4R_INPUT_PULLUP</name>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="HIGH">B4R_HIGH</name>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="LOW">B4R_LOW</name>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ADDRESS_0x20">B4R_ADDRESS_0x20</name>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ADDRESS_0x21">B4R_ADDRESS_0x21</name>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ADDRESS_0x22">B4R_ADDRESS_0x22</name>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ADDRESS_0x23">B4R_ADDRESS_0x23</name>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ADDRESS_0x24">B4R_ADDRESS_0x24</name>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ADDRESS_0x25">B4R_ADDRESS_0x25</name>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ADDRESS_0x26">B4R_ADDRESS_0x26</name>
            <returntype>byte</returntype>
        </field>
        <field>
            <name DefineMethod="true" DesignerName="ADDRESS_0x27">B4R_ADDRESS_0x27</name>
            <returntype>byte</returntype>
        </field>
    </class>
    <version>1.0</version>
</root>
