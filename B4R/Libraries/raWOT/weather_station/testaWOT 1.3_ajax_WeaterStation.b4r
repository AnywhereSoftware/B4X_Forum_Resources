Build1=Default,B4RDev
Group=Default Group
Library1=rarduino_json
Library2=rawot
Library3=rcore
Library4=resp8266wifi
Library5=rlittlefs
NumberOfFiles=0
NumberOfLibraries=5
NumberOfModules=0
Version=4
@EndOfDesignText@

#Region Project Attributes
	#AutoFlushLogs: True
	#StackBufferSize: 2000
	#CheckArrayBounds: True
#End Region
'Ctrl+Click to open the C code folder: ide://run?File=%WINDIR%\System32\explorer.exe&Args=%PROJECT%\Objects\Src

Sub Process_Globals
	Public Serial1 As Serial
	Private wifi As ESP8266WiFi 
	Private aWOT As aWOT
	Private lfs As LittleFS
	Private json1 As JSONVar
'	Private bc As ByteConverter
	Private Network As String = "xxxxx"
	Private Password As String = "xxxxxxxxxx"
	Private temp0 As Int = 10
	Private humi0 As Int = 50	
	Private temp1 As Int = 12	
	Private press1 As ULong = 99800
	Private posi2 As Int = 4090
	Private lumi3 As Int = 750
	Private up0 As bool = True
	Private up1 As bool = True
	Private up2 As bool = True
	Private up3 As bool = True
	Private up4 As bool = True
	Private up5 As bool = True
	Private time0 As ULong
	Private text() As Byte

End Sub

Private Sub AppStart
	Serial1.Initialize(115200)
	Log("AppStart")

	'example of connecting to a local network
	If wifi.Connect2( Network, Password) Then
		Log("Connected to network")
	Else
		Log("Failed to connect to network")
	End If
	
'	aWOT.initialize
	aWOT.initialize1("finally","notfound")
    Log("end init aWOT")
	If lfs.Initialize Then Log("init lfs OK") Else Log("init lfs NOK")
    Log(wifi.LocalIp)
	time0 = Millis
	AddLooper("process")

'1) start managemant at "/" 
	aWOT.app_setTimeout(3000)	
	aWOT.app_get("/", "handleRoot")  	      
	aWOT.app_get("/index.html", "handleindex")
		
	aWOT.app_get("/readings", "handleReading")
	
End Sub

'//===============================================================
'// This routine is executed when you open its IP in browser
'//===============================================================
private Sub handleRoot
	aWOT.res_set("Location", "/index.html")
	aWOT.res_sendStatus(302)
End Sub
 
Sub handleindex
	RunNative("gethtml", 0)		'MAIN_page
	aWOT.res_write1(text,text.length)

End Sub

private Sub handleReading
	json1.setString(Array(1,"DHT_C"),NumberFormat(temp0,0,0))
	json1.setString(Array(1,"DHT_F"),NumberFormat((temp0*9/5)+32,0,0))
	json1.setString(Array(1,"DHT_h"),NumberFormat(humi0,0,0))
	json1.setString(Array(1,"BMP180_C"),NumberFormat(temp1,0,0))
	json1.setString(Array(1,"BMP180_F"),NumberFormat((temp1*9/5)+32,0,0))
	json1.setString(Array(1,"BMP180_p"),NumberFormat(press1,0,0))
	json1.setString(Array(1,"POT_pos"),NumberFormat(posi2,0,0))
	json1.setString(Array(1,"LDR_lum"),NumberFormat(lumi3,0,0))
	Dim tosend As String = json1.stringify(Array (0))
	Log("json to send :",tosend) 'and '(tempC × 9/5) + 32 = tempF
	aWOT.res_println(tosend)
End Sub

Sub process()
	aWOT.process
	If Millis > time0+1000 Then 
		If up0 = True Then temp0 = temp0 + 1 Else temp0 = temp0 - 1
		If temp0 < 12 Then up0 = True
		If temp0 > 25 Then up0 = False
'		Log("Temperature value :",temp0)

		If up1 = True Then humi0 = humi0 + 1 Else humi0 = humi0 - 1
		If humi0 < 55 Then up1 = True
		If humi0 > 99 Then up1 = False
'		Log("Temperature value :",temp0)

		If up2 = True Then temp1 = temp1 + 1 Else temp1 = temp1 - 1
		If temp1 < 50 Then up2 = True
		If temp1 > 95 Then up2 = False
'		Log("Humidity value :",temp1)

		If up3 = True Then press1 = press1 + 1 Else press1 = press1 - 1
		If press1 < 99800 Then up3 = True
		If press1 > 99810 Then up3 = False
'		Log("Humidity value :",temp1)

		If up4 = True Then posi2 = posi2 + 1 Else posi2 = posi2 - 1
		If posi2 < 4090 Then up4 = True
		If posi2 > 4100 Then up4 = False
'		Log("Humidity value :",temp1)

		If up5 = True Then lumi3 = lumi3 + 1 Else lumi3 = lumi3 - 1
		If lumi3 < 750 Then up5 = True
		If lumi3 > 770 Then up5 = False
'		Log("Humidity value :",temp1)

		time0 = Millis
	End If	

End Sub

'*********************************************
'Sub m0_keepAlive()
'	Log("start keepAlive")
'	aWOT.res_set("Connection", "keep-alive")
'	'    Log("end keepAlive")
'	Log("status sent keepalive: ",aWOT.res_statusSent)
'End Sub


'**********************************************************************************
Sub finally()
	Log("Client Closed")
'	aWOT.res_status(404)
'	aWOT.res_print("Middleware Not Found")
End Sub

'**********************************************************************************
Sub notfound()	
	Dim meth_type() As String = Array As String("UNKNOWN","GET","HEAD","POST","PUT","DELETE","OPTIONS","ALL")
	Log("Middleware not found - Call Back 404")
	Log("method = ",meth_type(aWOT.req_method))
	Log("path = ",aWOT.req_path)
End Sub

#if c

#include <pgmspace.h>

const char MAINpage[] = R"=====(
<!DOCTYPE html>
<html>
  <head>
    <title>ESP32 Weather Station</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="data:,">
    <script>
      function DisplayCurrentTime() {
          var date = new Date();
          var hours = date.getHours() < 10 ? "0" + date.getHours() : date.getHours();
          var minutes = date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes();
          var seconds = date.getSeconds() < 10 ? "0" + date.getSeconds() : date.getSeconds();
          time = hours + ":" + minutes + ":" + seconds;
          var currentTime = document.getElementById("currentTime");
          currentTime.innerHTML = time;
      };
	  
	  
      setInterval(function() {
        // Gets ADC value at every one second
        getReadings();
      }, 2000);

// Function to get current readings on the webpage when it loads for the first time
    function getReadings(){
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          var myObj = JSON.parse(this.responseText);
          console.log(myObj);
          DHT_C.innerHTML = myObj.DHT_C;
		  DHT_F.innerHTML = myObj.DHT_F;
		  DHT_h.innerHTML = myObj.DHT_h;
		  
		  BMP180_C.innerHTML = myObj.BMP180_C;		  	
		  BMP180_F.innerHTML = myObj.BMP180_F;	
		  BMP180_p.innerHTML = myObj.BMP180_p;	
		  	  	  
 		  POT_pos.innerHTML = myObj.POT_pos;
		  LDR_lum.innerHTML = myObj.LDR_lum;   
        }
     }; 
     xhr.open("GET", "/readings", true);
     xhr.send();
	 DisplayCurrentTime();
  }
    </script>
	
    <style>
      body {
        text-align: center;
        font-family: "Trebuchet MS", Arial;
      }
      table {
        border-collapse: collapse;
        width:60%;
        margin-left:auto;
        margin-right:auto;
      }
      th {
        padding: 16px;
        background-color: #0043af;
        color: white;
      }
      tr {
        border: 1px solid #ddd;
        padding: 16px;
      }
      tr:hover {
        background-color: #bcbcbc;
      }
      td {
        border: none;
        padding: 16px;
      }
      .sensor {
        color:white;
        font-weight: bold;
        background-color: #bcbcbc;
        padding: 8px;
      }
    </style>
  </head>
  <body>
    <h1>ESP32 Weather Station</h1>
    <h3>Last update: <span id="currentTime"></span></h3>
    <table>
      <tr>
        <th>SENSOR</th>
        <th>MEASUREMENT</th>
        <th>VALUE</th>
      </tr>
      <tr>
        <td><span class="sensor">DHT</span></td>
        <td>Temp. Celsius</td>
        <td><span id='DHT_C' class="reading">...</span> *C</td>
      </tr>
      <tr>
        <td><span class="sensor">DHT</span></td>
        <td>Temp. Fahrenheit</td>
        <td><span id='DHT_F' class="reading">...</span> *F</td>
      </tr>
      <tr>
        <td><span class="sensor">DHT</span></td>
        <td>Humidity</td>
        <td><span id='DHT_h' class="reading">...</span> %</td>
      </tr>
      <tr>
        <td><span class="sensor">BMP180</span></td>
        <td>Temp. Celsius</td>
        <td><span id='BMP180_C' class="reading">...</span> *C</td>
      </tr>
      <tr>
        <td><span class="sensor">BMP180</span></td>
        <td>Temp. Fahrenheit</td>
        <td><span id='BMP180_F' class="reading">...</span> *F</td>
      </tr>
      <tr>
        <td><span class="sensor">BMP180</span></td>
        <td>Pressure</td>
        <td><span id='BMP180_p' class="reading">...</span> Pa</td>
      </tr>
      <tr>
        <td><span class="sensor">POT</span></td>
        <td>Position</td>
        <td><span id='POT_pos' class="reading">...</span>/4095</td>
      </tr>
      <tr>
        <td><span class="sensor">LDR</span></td>
        <td>Luminosity</td>
        <td><span id='LDR_lum' class="reading">...</span>/4095</td>
      </tr>
    </table>
  </body>
</html>
)=====";
								
//const char *const msg_table[] = { MAINpage};
//const uint16_t msg_len[] =  {sizeof(MAINpage)};
	
//char strx[3000];
  
B4R::Object* gethtml(B4R::Object* o) {
//	strcpy_P(strx, (char*)pgm_read_dword(&(msg_table[o->toLong()])));
	Serial.print("length_msg[");Serial.println(sizeof(MAINpage));Serial.print("]= ");	
    b4r_main::_text->data = (char*) MAINpage;
    b4r_main::_text->length = sizeof(MAINpage); 
    return 0; 
}
#end if
