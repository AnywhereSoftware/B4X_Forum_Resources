Build1=Default,B4RDev
Group=Default Group
Library1=rcore
Library2=resp8266wifi
Library3=rmpu6050
NumberOfFiles=0
NumberOfLibraries=3
NumberOfModules=0
Version=3.5
@EndOfDesignText@

#Region Project Attributes
	#AutoFlushLogs: True
	#CheckArrayBounds: True
	#StackBufferSize: 600
#End Region
'Ctrl+Click to open the C code folder: ide://run?File=%WINDIR%\System32\explorer.exe&Args=%PROJECT%\Objects\Src

Sub Process_Globals
	Public Serial1 As Serial
'	Private wifi As ESP8266WiFi
	Public mpu As MPU6050
	Public mpu2 As MPU6050_DATA
	Dim Accel(3) As Double
	Private pinbutton As Pin
End Sub

Sub PinButton_Change(state As Boolean)
	
	If state = False Then
		Log(" "):Log("button ON")
		Log("ButtonPress =====>memoire: ",AvailableRAM,"  ====>stack: ",StackBufferUsage)
		Delay(2000)
		myloop
		
	Else
		Log("button OFF")
	End If
End Sub

Private Sub AppStart
	Serial1.Initialize(115200)
	Log("AppStart")
	StopWIFI
	Delay(2000)
	mpu.Initialize()
	Log("init done")
    Delay(1000)
    pinbutton.Initialize(4,pinbutton.MODE_INPUT_PULLUP)
    pinbutton.AddListener("PinButton_change")
    Delay(1000)
	Dim connect = mpu.beginSoftwareI2C(5,14,mpu2.MPU6050_DPS_SCALE_2000DPS,mpu2.MPU6050_RANGE_2G,0x68) As Boolean

	If connect = False Then
		Log("Could Not find a valid mpu6050 sensor, check wiring!")
	Else
		Log("connexion mpu6050 OK")
	End If
End Sub
	
Sub myloop	
	
	Log("memory: ", AvailableRAM,"    stack usage: "        , StackBufferUsage)
	Delay(3000)
	mpu.setGyroOffsetX(155)
	mpu.setGyroOffsetY(15)
	mpu.setGyroOffsetZ(15)
    Log("GyroCalibration")
	mpu.calibrateGyro(50)
	Log("memory: ", AvailableRAM,"    stack usage: "        , StackBufferUsage)
	mpu.setThreshold(3)

    checksettings
	Log("memory: ", AvailableRAM,"    stack usage: "        , StackBufferUsage)
    Dim z As UInt
	
	For z = 0 To 50	
		mpu.readRawGyro(Accel)
		Log("RawG_X=",Accel(0),"  RawG_Y=",Accel(1),"  RawG_Y=",Accel(2))
	Next  
	Log(" ")
    Log("memory: ", AvailableRAM,"    stack usage: "        , StackBufferUsage)
    Log(" ")
	Delay(4000)
	
	For z = 0 To 50
	    mpu.readNormalizeGyro(Accel)
    	Log("NormalizeG_X=",Accel(0),"  NormalizeG_Y=",Accel(1),"  NormalizeG_Y=",Accel(2))
	Next
	Log("memory: ", AvailableRAM,"    stack usage: "        , StackBufferUsage)
	Delay(4000)
End Sub

Sub checksettings
	If mpu.getSleepEnabled Then 
	   Log(" * Sleep Mode:        Enabled")
	Else
		Log(" * Sleep Mode:       Disabled")
	End If
	Log("")
	Log(" * Clock Source:              ")
	Dim so =mpu.getClockSource() As Byte
	Log("-> Clock Sourse : ",so)
	Select so
		Case mpu2.MPU6050_CLOCK_KEEP_RESET
			Log("Clock Stops the clock and keeps the timing generator in reset")
		Case mpu2.MPU6050_CLOCK_EXTERNAL_19MHZ
			Log("Clock PLL with external 19.2MHz reference")
		Case mpu2.MPU6050_CLOCK_EXTERNAL_32KHZ
			Log("Clock PLL with external 32.768kHz reference")
		Case mpu2.MPU6050_CLOCK_PLL_ZGYRO
			Log("Clock PLL with Z axis gyroscope reference")
		Case mpu2.MPU6050_CLOCK_PLL_YGYRO
			Log("Clock PLL with Y axis gyroscope reference")
		Case mpu2.MPU6050_CLOCK_PLL_XGYRO
			Log("Clock PLL with X axis gyroscope reference")
		Case mpu2.MPU6050_CLOCK_INTERNAL_8MHZ
			Log("Clock Internal 8MHz oscillator")
	End Select
	Log(" ")	
	Log(" * Gyroscope:         ")
	so = mpu.getScale()
	Log("-> Get Scale : ",so)
	Select so
	   Case mpu2.MPU6050_DPS_SCALE_2000DPS   
	   	    Log("2000 dps")
	   Case mpu2.MPU6050_DPS_SCALE_1000DPS
	   	    Log ("1000 dps")
	   Case mpu2.MPU6050_DPS_SCALE_500DPS
	   	    Log("500 dps")
	   Case mpu2.MPU6050_DPS_SCALE_250DPS
	   	    Log("250 dps")
	   End Select	
	Log(" ")	
	Log(" * Gyroscope offsets: ")
	Log(mpu.getGyroOffsetX,"    ",mpu.getGyroOffsetY,"    ",mpu.getGyroOffsetZ)	
	Log(" ")
	Log("memory: ", AvailableRAM,"    stack usage: "        , StackBufferUsage)
End Sub

public Sub StopWIFI
	Log("Stop wifi")
	RunNative("stopWIFI", Null)
End Sub
#if C
  #include <ESP8266WiFi.h>
  void stopWIFI (B4R::Object* u) {
  WiFi.forceSleepBegin();
  }
#end if