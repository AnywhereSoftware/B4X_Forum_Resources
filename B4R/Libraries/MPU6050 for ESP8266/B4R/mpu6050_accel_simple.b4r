Build1=Default,B4RDev
Group=Default Group
Library1=rcore
Library2=resp8266wifi
Library3=rmpu6050
NumberOfFiles=0
NumberOfLibraries=3
NumberOfModules=0
Version=3.5
@EndOfDesignText@

#Region Project Attributes
	#AutoFlushLogs: True
	#CheckArrayBounds: True
	#StackBufferSize: 600
#End Region
'Ctrl+Click to open the C code folder: ide://run?File=%WINDIR%\System32\explorer.exe&Args=%PROJECT%\Objects\Src

Sub Process_Globals
	Public Serial1 As Serial
'	Private wifi As ESP8266WiFi
	Public mpu As MPU6050
	Public mpu2 As MPU6050_DATA
	Dim Accel(3) As Double
	Private pinbutton As Pin
'	Dim pitch = 0,roll = 0 ,yaw = 0,timeStep = 0.01 As Double
'	Dim timer As ULong
End Sub

Sub PinButton_Change(state As Boolean)
	
	If state = False Then
		Log(" "):Log("button ON")
		Delay(1000)
		myLoop		
	Else
		Log("button OFF")
	End If
End Sub

Private Sub AppStart
	Serial1.Initialize(115200)
	Log("AppStart")
	StopWIFI
	Delay(2000)
	mpu.Initialize()
	Log("init done")
	Delay(1000)
	pinbutton.Initialize(4,pinbutton.MODE_INPUT_PULLUP)
	pinbutton.AddListener("PinButton_change")
	Delay(1000)
	Dim connect = mpu.beginSoftwareI2C(5,14,mpu2.MPU6050_DPS_SCALE_2000DPS,mpu2.MPU6050_RANGE_2G,0x68) As Boolean

	If connect = False Then
		Log("Could Not find a valid mpu6050 sensor, check wiring!")
	Else
		Log("connexion mpu6050 OK")
	End If
	mpu.setAccelOffsetX(15)
	mpu.setAccelOffsetY(15)
	mpu.setAccelOffsetZ(15)
	Delay(2000)
	checksettings
End Sub
	

Sub myLoop
	'Dim flagON As bool = False
	For i = 0 To 50
		mpu.readRawAccel(Accel)
		Log(" * RawAccel:     ")
		Log("RawAccelX: ",Accel(0),"  RawAccelY: ",Accel(1),"  RawAccelZ: ",Accel(2))
		Delay(2000)
		Delay(500)
		mpu.readNormalizeAccel(Accel)
		Log(" * NormalizeAccel:     ")
		Log("NormilizeAccelX: ",Accel(0),"  NormalizeAccelY: ",Accel(1),"  NormalizeAccelZ: ",Accel(2))
		Delay(2000)
	Next
	Log("test_loop =====>memoire: ",AvailableRAM,"  ====>stack: ",StackBufferUsage)
End Sub

Sub checksettings
	Log(" * Sleep Mode:                ")
	If (mpu.getSleepEnabled) Then Log(" - Enabled") Else Log(" - Disabled")

	Log(" * Motion Interrupt:     ")
	If (mpu.getIntMotionEnabled) Then Log(" - Enabled") Else Log(" - Disabled")

	Log(" * Zero Motion Interrupt:     ")
	If (mpu.getIntZeroMotionEnabled) Then Log(" - Enabled") Else Log(" - Disabled")

	Log(" * Free Fall Interrupt:       ")
	If (mpu.getIntFreeFallEnabled) Then Log(" - Enabled") Else Log(" - Disabled")

	Log(" * Free Fal Threshold:          ")
	Log(mpu.getFreeFallDetectionThreshold)

	Log(" * Free FallDuration:           ")
	Log(mpu.getFreeFallDetectionDuration)
  
	Log(" * Clock Source:              ")
	Select (mpu.getClockSource)
		Case mpu2.MPU6050_CLOCK_KEEP_RESET
			Log("Stops the clock and keeps the timing generator in reset")
		Case mpu2.MPU6050_CLOCK_EXTERNAL_19MHZ
			Log("PLL with external 19.2MHz reference")
		Case mpu2.MPU6050_CLOCK_EXTERNAL_32KHZ
			Log("PLL with external 32.768kHz reference")
		Case mpu2.MPU6050_CLOCK_PLL_ZGYRO
			Log("PLL with Z axis gyroscope reference")
		Case mpu2.MPU6050_CLOCK_PLL_YGYRO
			Log("PLL with Y axis gyroscope reference")
		Case mpu2.MPU6050_CLOCK_PLL_XGYRO
			Log("PLL with X axis gyroscope reference")
		Case mpu2.MPU6050_CLOCK_INTERNAL_8MHZ
			Log("Internal 8MHz oscillator")
	End Select

	Select (mpu.getRange)
		Case mpu2.MPU6050_RANGE_16G
			Log("+/- 16 g")
		Case mpu2.MPU6050_RANGE_8G
			Log("+/- 8 g")
		Case mpu2.MPU6050_RANGE_4G
			Log("+/- 4 g")
		Case mpu2.MPU6050_RANGE_2G
			Log("+/- 2 g")
	End Select
		
	Log(" * Accelerometer offsets:     ")
	Log("AccelOffsetX: ",mpu.getAccelOffsetX,"  AccelOffsetY: ",mpu.getAccelOffsetY,"  AccelOffsetZ: ",mpu.getAccelOffsetZ)
		
	Log(" * Accelerometer power delay: ")
	Select(mpu.getAccelPowerOnDelay)
		Case mpu2.MPU6050_DELAY_3MS
			Log("3ms")
		Case mpu2.MPU6050_DELAY_2MS
			Log("2ms")
		Case mpu2.MPU6050_DELAY_1MS
			Log("1ms")
		Case mpu2.MPU6050_NO_DELAY
			Log("0ms")
	End Select
	Log("checksettings =====>memoire: ",AvailableRAM,"  ====>stack: ",StackBufferUsage)
End Sub


public Sub StopWIFI
	Log("Stop wifi")
	RunNative("stopWIFI", Null)
End Sub
#if C
  #include <ESP8266WiFi.h>
  void stopWIFI (B4R::Object* u) {
  WiFi.forceSleepBegin();
  }
#end if

