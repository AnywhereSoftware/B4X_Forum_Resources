Build1=Default,B4RDev
Group=Default Group
Library1=rcore
Library2=rlegoinoboost
NumberOfFiles=0
NumberOfLibraries=2
NumberOfModules=0
Version=3.9
@EndOfDesignText@
#Region Project Notes
' BoostDistanceSensorTimer.b4r
' Sample project for the B4R Library rLegoinoBoost.
' Read in regular intervals via timer the distance in mm using the distance sensor.
' The hub LED color is set according thresholds for MIN, MED distance.
' The timer is used to read the distance. The statechanged event is used to check hub connection state.
' 20211013 rwbl
#End Region

#Region Wiring
' NOT USED
#End Region

#Region Project Attributes
	#AutoFlushLogs: True
	#CheckArrayBounds: True
	' Increased stack buffer 300 to 500 : need to check if required
	#StackBufferSize: 500
#End Region
'Ctrl+Click to open the C code folder: ide://run?File=%WINDIR%\System32\explorer.exe&Args=%PROJECT%\Objects\Src

Sub Process_Globals
	Private VERSION As String = "B4R Library rLegoinoBoost - BoostDistanceSensorTimer v20211013"
	Private DEBUG As Boolean = False
	' Communication	
	Public serialLine As Serial
	' MoveHUB
	Private moveHub As LegoinoBoost
	' The MAC address can be obtained using the hcitool or Android app Serial Bluetooth
	Private Const MOVEHUB_ADDRESS As String = "00:16:53:AE:9B:27"
	' Distance Sensor in mm
	Private DistanceSensor As Double = -1
	Private DistanceSensorPrev As Double = -1
	Private Const DISTANCE_MIN As Double = 20
	Private Const DISTANCE_MED As Double = 50
	' Timer to read the distance in regular intervals
	Private timerGetData As Timer
	Private TIMER_INTERVAL As ULong = 1000
End Sub

Private Sub AppStart
	serialLine.Initialize(115200)
	Log(VERSION)
	' Init sensor with callback event, MAC adress 00:16:53:AE:9B:27 and debug flag
	moveHub.Initialize("MoveHub_StateChanged", MOVEHUB_ADDRESS, DEBUG)
	Log("Waiting for MoveHub Bluetooth connection: ", MOVEHUB_ADDRESS)
	' Init the timer to let the movehub do something to avoid disconnecting
	timerGetData.Initialize("TimerGetData_Tick", TIMER_INTERVAL)
	' Enabled is set by the movehub_statechanged event
	timerGetData.Enabled = False
End Sub

' Read in regular intervals the distance using the distance sensor.
' The hub LED color is set according thresholds for MIN, MED distance.
Sub TimerGetData_Tick
	If moveHub.Connected Then
		' Check if the distance has changed
		DistanceSensor = moveHub.DistanceSensor
		If DistanceSensor <> DistanceSensorPrev Then
			If DistanceSensor <= DISTANCE_MIN Then
				moveHub.SetLedColor(moveHub.LED_COLOR_RED)
				Log("Distance: ", DistanceSensor, "mm = below min threshold (RED)")
			Else If DistanceSensor > DISTANCE_MIN And DistanceSensor <= DISTANCE_MED Then
				moveHub.SetLedColor(moveHub.LED_COLOR_YELLOW)
				Log("Distance: ", DistanceSensor, "mm = between min and medium threshold (YELLOW)")
			Else
				moveHub.SetLedColor(moveHub.LED_COLOR_GREEN)
				Log("Distance: ", DistanceSensor, "mm = above threshold (GREEN)")
			End If
			DistanceSensorPrev = DistanceSensor
		End If
	End If
End Sub

' Handle the movehub bluetooth connection state
' Sets the timer depending connection state
Sub MoveHub_StateChanged(Connected As Boolean)
	If Connected Then
		Log("MoveHub StateChanged: Connected to ", moveHub.Name)
	Else
		Log("MoveHub StateChanged: Disconnected")
	End If
	timerGetData.Enabled = Connected
End Sub
