<?xml version="1.0" encoding="UTF-8"?>
<root>
    <doclet-version-NOT-library-version>1.07</doclet-version-NOT-library-version>
    <class>
        <name>de.donmanfred.Activitywrapper</name>
        <shortname>BotActivity</shortname>
        <objectwrapper>net.dv8tion.jda.api.entities.Activity</objectwrapper>
        <owner>process</owner>
        <method>
            <name>listening</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.Activity</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>of</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.Activity</returntype>
            <parameter>
                <name>type</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>playing</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.Activity</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>watching</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.Activity</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>ActivityTypeListening</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.Activity.ActivityType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ActivityTypewatching</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.Activity.ActivityType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ActivityTypeCustom</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.Activity.ActivityType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ActivityTypeStreaming</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.Activity.ActivityType</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.Choicewrapper</name>
        <shortname>Choice</shortname>
        <objectwrapper>net.dv8tion.jda.api.interactions.commands.Command.Choice</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>description</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>AsString</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>AsLong</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.DateHelperwrapper</name>
        <shortname>DateHelper</shortname>
        <owner>process</owner>
        <method>
            <name>Format</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>date</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>InitializeISO8601</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>timezone</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>format</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>timezone</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>de.donmanfred.DefaultShardManagerBuilderwrapper</name>
        <shortname>DefaultShardManagerBuilder</shortname>
        <objectwrapper>net.dv8tion.jda.api.sharding.DefaultShardManagerBuilder</objectwrapper>
        <owner>process</owner>
        <method>
            <name>setRequestTimeoutRetry</name>
            <comment>Whether the Requester should retry when a
 {@link java.net.SocketTimeoutException SocketTimeoutException} occurs. &lt;br&gt;
 &lt;b&gt;Default&lt;/b&gt;: {@code true}

 &lt;p&gt;
 This value can be changed at any time with
 {@link net.dv8tion.jda.api.JDA#setRequestTimeoutRetry(boolean)
 JDA.setRequestTimeoutRetry(boolean)}!
retryOnTimeout: True, if the Request should retry once on a socket timeout
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.DefaultShardManagerBuilderwrapper</returntype>
            <parameter>
                <name>retryOnTimeout</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>setLargeThreshold</name>
            <comment>Decides the total number of members at which a guild should start to use
 lazy loading. &lt;br&gt;
 This is limited to a number between 50 and 250 (inclusive). If the
 {@link #setChunkingFilter(ChunkingFilter) chunking filter} is set to
 {@link ChunkingFilter#ALL} this should be set to {@code 250} (default) to
 minimize the amount of guilds that need to request members.
threshold: The threshold in {@code [50, 250]}
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.DefaultShardManagerBuilderwrapper</returntype>
            <parameter>
                <name>threshold</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>setEnableShutdownHook</name>
            <comment>Enables/Disables the use of a Shutdown hook to clean up JDA. &lt;br&gt;
 When the Java program closes shutdown hooks are run. This is used as a
 last-second cleanup attempt by JDA to properly close connections.

 &lt;p&gt;
 Default: &lt;b&gt;true (enabled)&lt;/b&gt;
enable: True (default) - use shutdown hook to clean up JDA if the Java
          program is closed.
Return type: @return:Return the {@link net.dv8tion.jda.api.JDABuilder JDABuilder }
         instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.DefaultShardManagerBuilderwrapper</returntype>
            <parameter>
                <name>enable</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>setAudioSendFactory</name>
            <comment>Changes the factory used to create
 {@link net.dv8tion.jda.api.audio.factory.IAudioSendSystem IAudioSendSystem}
 objects which handle the sending loop for audio packets. &lt;br&gt;
 By default, JDA uses
 {@link net.dv8tion.jda.api.audio.factory.DefaultSendFactory
 DefaultSendFactory}.
factory: The new {@link net.dv8tion.jda.api.audio.factory.IAudioSendFactory
          IAudioSendFactory} to be used when creating new
          {@link net.dv8tion.jda.api.audio.factory.IAudioSendSystem}
          objects.
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.DefaultShardManagerBuilderwrapper</returntype>
            <parameter>
                <name>factory</name>
                <type>net.dv8tion.jda.api.audio.factory.IAudioSendFactory</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Creates a JDABuilder
token: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>token</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setRelativeRateLimit</name>
            <comment>Whether the rate-limit should be relative to the current time plus latency.
 &lt;br&gt;
 By default we use the {@code X-RateLimit-Reset-After} header to determine
 when a rate-limit is no longer imminent. This has the disadvantage that it
 might wait longer than needed due to the latency which is ignored by the
 reset-after relative delay.

 &lt;p&gt;
 When disabled, we will use the {@code X-RateLimit-Reset} absolute timestamp
 instead which accounts for latency but requires a properly NTP synchronized
 clock to be present. If your system does have this feature you might gain a
 little quicker rate-limit handling than the default allows.

 &lt;p&gt;
 Default: &lt;b&gt;true&lt;/b&gt;
enable: True, if the relative {@code X-RateLimit-Reset-After} header
          should be used.
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.DefaultShardManagerBuilderwrapper</returntype>
            <parameter>
                <name>enable</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>setVoiceDispatchInterceptor</name>
            <comment>Configures a custom voice dispatch handler which handles audio connections.
interceptor: The new voice dispatch handler, or null to use the default
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.DefaultShardManagerBuilderwrapper</returntype>
            <parameter>
                <name>interceptor</name>
                <type>net.dv8tion.jda.api.hooks.VoiceDispatchInterceptor</type>
            </parameter>
        </method>
        <method>
            <name>setActivity</name>
            <comment>Sets the {@link net.dv8tion.jda.api.entities.Activity Activity} for our
 session. &lt;br&gt;
 This value can be changed at any time in the
 {@link net.dv8tion.jda.api.managers.Presence Presence} from a JDA instance.

 &lt;p&gt;
 &lt;b&gt;Hint:&lt;/b&gt; You can create a {@link net.dv8tion.jda.api.entities.Activity
 Activity} object using
 {@link net.dv8tion.jda.api.entities.Activity#playing(String)} or
 {@link net.dv8tion.jda.api.entities.Activity#streaming(String, String)}.
activity: An instance of {@link net.dv8tion.jda.api.entities.Activity
          Activity} (null allowed)
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.DefaultShardManagerBuilderwrapper</returntype>
            <parameter>
                <name>activity</name>
                <type>net.dv8tion.jda.api.entities.Activity</type>
            </parameter>
        </method>
        <method>
            <name>setMaxBufferSize</name>
            <comment>The maximum size, in bytes, of the buffer used for decompressing discord
 payloads. &lt;br&gt;
 If the maximum buffer size is exceeded a new buffer will be allocated
 instead. &lt;br&gt;
 Setting this to {@link Integer#MAX_VALUE} would imply the buffer will never
 be resized unless memory starvation is imminent. &lt;br&gt;
 Setting this to {@code 0} would imply the buffer would need to be allocated
 again for every payload (not recommended).

 &lt;p&gt;
 Default: {@code 2048}
bufferSize: The maximum size the buffer should allow to retain
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.DefaultShardManagerBuilderwrapper</returntype>
            <parameter>
                <name>bufferSize</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>setRawEventsEnabled</name>
            <comment>Whether JDA should fire {@link net.dv8tion.jda.api.events.RawGatewayEvent}
 for every discord event. &lt;br&gt;
 Default: {@code false}
enable: True, if JDA should fire
          {@link net.dv8tion.jda.api.events.RawGatewayEvent}.
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.DefaultShardManagerBuilderwrapper</returntype>
            <parameter>
                <name>enable</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>removeEventListeners</name>
            <comment>Removes all provided listeners from the list of listeners.
listeners: The listener(s) to remove from the list.
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.DefaultShardManagerBuilderwrapper</returntype>
            <parameter>
                <name>listeners</name>
                <type>java.lang.Object[]</type>
            </parameter>
        </method>
        <method>
            <name>setGatewayPool2</name>
            <comment>Sets the {@link ScheduledExecutorService ScheduledExecutorService} used by
 the main WebSocket connection for workers. These workers spend most of
 their lifetime sleeping because they only activate for sending messages
 over the gateway. &lt;br&gt;
 &lt;b&gt;Only change this pool if you know what you're doing.&lt;/b&gt;

 &lt;p&gt;
 This is used to send various forms of session updates such as:
 &lt;ul&gt;
 &lt;li&gt;Voice States - (Dis-)Connecting from channels&lt;/li&gt;
 &lt;li&gt;Presence - Changing current activity or online status&lt;/li&gt;
 &lt;li&gt;Guild Setup - Requesting Members of newly joined guilds&lt;/li&gt;
 &lt;li&gt;Heartbeats - Regular updates to keep the connection alive (usually once
 a minute)&lt;/li&gt;
 &lt;/ul&gt;
 When nothing has to be sent the pool will only be used every 500
 milliseconds to check the queue for new payloads. Once a new payload is
 sent we switch to "rapid mode" which means more tasks will be submitted
 until no more payloads have to be sent.

 &lt;p&gt;
 Default: {@link ScheduledThreadPoolExecutor} with 1 thread
pool: The thread-pool to use for WebSocket workers
automaticShutdown: Whether {@link JDA#shutdown()} should shutdown this pool
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.DefaultShardManagerBuilderwrapper</returntype>
            <parameter>
                <name>pool</name>
                <type>java.util.concurrent.ScheduledExecutorService</type>
            </parameter>
            <parameter>
                <name>automaticShutdown</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>setRateLimitPool</name>
            <comment>Sets the {@link ScheduledExecutorService ScheduledExecutorService} that
 should be used in the JDA rate-limit handler. Changing this can drastically
 change the JDA behavior for RestAction execution and should be handled
 carefully. &lt;b&gt;Only change this pool if you know what you're doing.&lt;/b&gt; &lt;br&gt;
 &lt;b&gt;This automatically disables the automatic shutdown of the rate-limit
 pool, you can enable it using
 {@link #setRateLimitPool(ScheduledExecutorService, boolean)
 setRateLimitPool(executor, true)}&lt;/b&gt;

 &lt;p&gt;
 This is used mostly by the Rate-Limiter to handle backoff delays by using
 scheduled executions. Besides that it is also used by planned execution for
 {@link net.dv8tion.jda.api.requests.RestAction#queueAfter(long, TimeUnit)}
 and similar methods.

 &lt;p&gt;
 Default: {@link ScheduledThreadPoolExecutor} with 5 threads.
pool: The thread-pool to use for rate-limit handling
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.DefaultShardManagerBuilderwrapper</returntype>
            <parameter>
                <name>pool</name>
                <type>java.util.concurrent.ScheduledExecutorService</type>
            </parameter>
        </method>
        <method>
            <name>setCallbackPool</name>
            <comment>Sets the {@link ExecutorService ExecutorService} that should be used in the
 JDA callback handler which mostly consists of
 {@link net.dv8tion.jda.api.requests.RestAction RestAction} callbacks. By
 default JDA will use {@link ForkJoinPool#commonPool()} &lt;br&gt;
 &lt;b&gt;Only change this pool if you know what you're doing. &lt;br&gt;
 This automatically disables the automatic shutdown of the callback pool,
 you can enable it using {@link #setCallbackPool(ExecutorService, boolean)
 setCallbackPool(executor, true)}&lt;/b&gt;

 &lt;p&gt;
 This is used to handle callbacks of {@link RestAction#queue()}, similarly
 it is used to finish {@link RestAction#submit()} and
 {@link RestAction#complete()} tasks which build on queue.

 &lt;p&gt;
 Default: {@link ForkJoinPool#commonPool()}
executor: The thread-pool to use for callback handling
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.DefaultShardManagerBuilderwrapper</returntype>
            <parameter>
                <name>executor</name>
                <type>java.util.concurrent.ExecutorService</type>
            </parameter>
        </method>
        <method>
            <name>setAutoReconnect</name>
            <comment>Sets whether or not JDA should try to reconnect if a connection-error is
 encountered. &lt;br&gt;
 This will use an incremental reconnect (timeouts are increased each time an
 attempt fails).

 Default: &lt;b&gt;true (enabled)&lt;/b&gt;
autoReconnect: If true - enables autoReconnect
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.DefaultShardManagerBuilderwrapper</returntype>
            <parameter>
                <name>autoReconnect</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>setIdle</name>
            <comment>Sets whether or not we should mark our session as afk &lt;br&gt;
 This value can be changed at any time in the
 {@link net.dv8tion.jda.api.managers.Presence Presence} from a JDA instance.
idle: boolean value that will be provided with our IDENTIFY package to
          mark our session as afk or not. &lt;b&gt;(default false)&lt;/b&gt;
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.DefaultShardManagerBuilderwrapper</returntype>
            <parameter>
                <name>idle</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>setSessionController</name>
            <comment>Sets the {@link net.dv8tion.jda.api.utils.SessionController
 SessionController} for this JDABuilder instance. This can be used to sync
 behaviour and state between shards of a bot and should be one and the same
 instance on all builders for the shards. &lt;br&gt;
 When {@link #useSharding(int, int)} is enabled, this is set by default.

 &lt;p&gt;
 When set, this allows the builder to build shards with respect to the login
 ratelimit automatically.
controller: The {@link net.dv8tion.jda.api.utils.SessionController
          SessionController} to use
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.DefaultShardManagerBuilderwrapper</returntype>
            <parameter>
                <name>controller</name>
                <type>net.dv8tion.jda.api.utils.SessionController</type>
            </parameter>
        </method>
        <method>
            <name>setMaxReconnectDelay</name>
            <comment>Sets the maximum amount of time that JDA will back off to wait when
 attempting to reconnect the MainWebsocket. &lt;br&gt;
 Provided value must be 32 or greater.
maxReconnectDelay: The maximum amount of time that JDA will wait between reconnect
          attempts in seconds.
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.DefaultShardManagerBuilderwrapper</returntype>
            <parameter>
                <name>maxReconnectDelay</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>setBulkDeleteSplittingEnabled</name>
            <comment>If enabled, JDA will separate the bulk delete event into individual delete
 events, but this isn't as efficient as handling a single event would be. It
 is recommended that BulkDelete Splitting be disabled and that the developer
 should instead handle the
 {@link net.dv8tion.jda.api.events.message.MessageBulkDeleteEvent
 MessageBulkDeleteEvent}

 &lt;p&gt;
 Default: &lt;b&gt;true (enabled)&lt;/b&gt;
enabled: True - The MESSAGE_DELETE_BULK will be split into multiple
          individual MessageDeleteEvents.
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.DefaultShardManagerBuilderwrapper</returntype>
            <parameter>
                <name>enabled</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>setStatus</name>
            <comment>Sets the {@link net.dv8tion.jda.api.OnlineStatus OnlineStatus} our
 connection will display. &lt;br&gt;
 This value can be changed at any time in the
 {@link net.dv8tion.jda.api.managers.Presence Presence} from a JDA instance.

 &lt;p&gt;
 &lt;b&gt;Note:&lt;/b&gt;This will not take affect for
 {@link net.dv8tion.jda.api.AccountType#CLIENT AccountType.CLIENT} if the
 status specified in the user_settings is not "online" as it is overriding
 our identify status.
status: Not-null OnlineStatus (default online)
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.DefaultShardManagerBuilderwrapper</returntype>
            <parameter>
                <name>status</name>
                <type EnumType="true">net.dv8tion.jda.api.OnlineStatus</type>
            </parameter>
        </method>
        <method>
            <name>addEventListeners</name>
            <comment>Adds all provided listeners to the list of listeners that will be used to
 populate the {@link net.dv8tion.jda.api.JDA JDA} object. &lt;br&gt;
 This uses the {@link net.dv8tion.jda.api.hooks.InterfacedEventManager
 InterfacedEventListener} by default. &lt;br&gt;
 To switch to the {@link net.dv8tion.jda.api.hooks.AnnotatedEventManager
 AnnotatedEventManager}, use
 {@link #setEventManager(net.dv8tion.jda.api.hooks.IEventManager)
 setEventManager(new AnnotatedEventManager())}.

 &lt;p&gt;
 &lt;b&gt;Note:&lt;/b&gt; When using the
 {@link net.dv8tion.jda.api.hooks.InterfacedEventManager
 InterfacedEventListener} (default), given listener(s) &lt;b&gt;must&lt;/b&gt; be
 instance of {@link net.dv8tion.jda.api.hooks.EventListener EventListener}!
listeners: The listener(s) to add to the list.
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.DefaultShardManagerBuilderwrapper</returntype>
            <parameter>
                <name>listeners</name>
                <type>java.lang.Object[]</type>
            </parameter>
        </method>
        <method>
            <name>setRateLimitPool2</name>
            <comment>Sets the {@link ScheduledExecutorService ScheduledExecutorService} that
 should be used in the JDA rate-limit handler. Changing this can drastically
 change the JDA behavior for RestAction execution and should be handled
 carefully. &lt;b&gt;Only change this pool if you know what you're doing.&lt;/b&gt;

 &lt;p&gt;
 This is used mostly by the Rate-Limiter to handle backoff delays by using
 scheduled executions. Besides that it is also used by planned execution for
 {@link net.dv8tion.jda.api.requests.RestAction#queueAfter(long, TimeUnit)}
 and similar methods.

 &lt;p&gt;
 Default: {@link ScheduledThreadPoolExecutor} with 5 threads.
pool: The thread-pool to use for rate-limit handling
automaticShutdown: Whether {@link JDA#shutdown()} should shutdown this pool
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.DefaultShardManagerBuilderwrapper</returntype>
            <parameter>
                <name>pool</name>
                <type>java.util.concurrent.ScheduledExecutorService</type>
            </parameter>
            <parameter>
                <name>automaticShutdown</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>setCompression</name>
            <comment>Sets the compression algorithm used with the gateway connection, this will
 decrease the amount of used bandwidth for the running bot instance for the
 cost of a few extra cycles for decompression. Compression can be entirely
 disabled by setting this to
 {@link net.dv8tion.jda.api.utils.Compression#NONE}. &lt;br&gt;
 &lt;b&gt;Default: {@link net.dv8tion.jda.api.utils.Compression#ZLIB}&lt;/b&gt;

 &lt;p&gt;
 &lt;b&gt;We recommend to keep this on the default unless you have issues with the
 decompression.&lt;/b&gt; &lt;br&gt;
 This mode might become obligatory in a future version, do not rely on this
 switch to stay.
compression: The compression algorithm to use with the gateway connection
Return type: @return:The JDABuilder instance. Useful for chaining</comment>
            <returntype>de.donmanfred.DefaultShardManagerBuilderwrapper</returntype>
            <parameter>
                <name>compression</name>
                <type EnumType="true">net.dv8tion.jda.api.utils.Compression</type>
            </parameter>
        </method>
        <method>
            <name>Initialize2</name>
            <comment>Creates a JDABuilder with the predefined token.
token: The bot token to use</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>token</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setToken</name>
            <comment>Sets the token that will be used by the {@link net.dv8tion.jda.api.JDA}
 instance to log in when {@link net.dv8tion.jda.api.JDABuilder#build()
 build()} is called.

 &lt;h2&gt;For {@link net.dv8tion.jda.api.AccountType#BOT}&lt;/h2&gt;
 &lt;ol&gt;
 &lt;li&gt;Go to your
 &lt;a href="https://discordapp.com/developers/applications/me"&gt;Discord
 Applications&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;Create or select an already existing application&lt;/li&gt;
 &lt;li&gt;Verify that it has already been turned into a Bot. If you see the
 "Create a Bot User" button, click it.&lt;/li&gt;
 &lt;li&gt;Click the &lt;i&gt;click to reveal&lt;/i&gt; link beside the &lt;b&gt;Token&lt;/b&gt; label to
 show your Bot's {@code token}&lt;/li&gt;
 &lt;/ol&gt;
token: The token of the account that you would like to login with.
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.DefaultShardManagerBuilderwrapper</returntype>
            <parameter>
                <name>token</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>build</name>
            <comment>Builds a new {@link net.dv8tion.jda.api.JDA} instance and uses the provided
 token to start the login process. &lt;br&gt;
 The login process runs in a different thread, so while this will return
 immediately, {@link net.dv8tion.jda.api.JDA} has not finished loading, thus
 many {@link net.dv8tion.jda.api.JDA} methods have the chance to return
 incorrect information. For example {@link JDA#getGuilds()} might return an
 empty list or {@link net.dv8tion.jda.api.JDA#getUserById(long)} might
 return null for arbitrary user IDs.

 &lt;p&gt;
 If you wish to be sure that the {@link net.dv8tion.jda.api.JDA} information
 is correct, please use {@link net.dv8tion.jda.api.JDA#awaitReady()
 JDA.awaitReady()} or register an
 {@link net.dv8tion.jda.api.hooks.EventListener EventListener} to listen for
 the {@link net.dv8tion.jda.api.events.ReadyEvent ReadyEvent}.
Return type: @return:A {@link net.dv8tion.jda.api.JDA} instance that has started the
         login process. It is unknown as to whether or not loading has
         finished when this returns.</comment>
            <returntype>net.dv8tion.jda.api.sharding.ShardManager</returntype>
        </method>
        <method>
            <name>setChunkingFilter</name>
            <comment>The {@link ChunkingFilter} to filter which guilds should use member
 chunking. &lt;br&gt;
 By default this uses {@link ChunkingFilter#ALL}.

 &lt;p&gt;
 This filter is useless when {@link #setGuildSubscriptionsEnabled(boolean)}
 is false.
filter: The filter to apply
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.DefaultShardManagerBuilderwrapper</returntype>
            <parameter>
                <name>filter</name>
                <type>net.dv8tion.jda.api.utils.ChunkingFilter</type>
            </parameter>
        </method>
        <method>
            <name>setGatewayPool</name>
            <comment>Sets the {@link ScheduledExecutorService ScheduledExecutorService} used by
 the main WebSocket connection for workers. These workers spend most of
 their lifetime sleeping because they only activate for sending messages
 over the gateway. &lt;br&gt;
 &lt;b&gt;Only change this pool if you know what you're doing. &lt;br&gt;
 This automatically disables the automatic shutdown of the main-ws pool, you
 can enable it using
 {@link #setGatewayPool(ScheduledExecutorService, boolean)
 setGatewayPool(pool, true)}&lt;/b&gt;

 &lt;p&gt;
 This is used to send various forms of session updates such as:
 &lt;ul&gt;
 &lt;li&gt;Voice States - (Dis-)Connecting from channels&lt;/li&gt;
 &lt;li&gt;Presence - Changing current activity or online status&lt;/li&gt;
 &lt;li&gt;Guild Setup - Requesting Members of newly joined guilds&lt;/li&gt;
 &lt;li&gt;Heartbeats - Regular updates to keep the connection alive (usually once
 a minute)&lt;/li&gt;
 &lt;/ul&gt;
 When nothing has to be sent the pool will only be used every 500
 milliseconds to check the queue for new payloads. Once a new payload is
 sent we switch to "rapid mode" which means more tasks will be submitted
 until no more payloads have to be sent.

 &lt;p&gt;
 Default: {@link ScheduledThreadPoolExecutor} with 1 thread
pool: The thread-pool to use for WebSocket workers
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.DefaultShardManagerBuilderwrapper</returntype>
            <parameter>
                <name>pool</name>
                <type>java.util.concurrent.ScheduledExecutorService</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>de.donmanfred.EntitySelectMenuwrapper</name>
        <shortname>EntitySelectMenu</shortname>
        <objectwrapper>net.dv8tion.jda.api.interactions.components.selections.EntitySelectMenu</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>EntityTypes</name>
            <returntype>java.util.EnumSet</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Placeholder</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MaxPerRow</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ChannelTypes</name>
            <returntype>java.util.EnumSet</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Id</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MaxValues</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MinValues</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.ImageHelperwrapper</name>
        <shortname>ImageHelper</shortname>
        <owner>process</owner>
        <event>ImageSplitted(success As Boolean)</event>
        <event>ImageMasked(success As Boolean)</event>
        <method>
            <name>MaskImageAsync2</name>
            <comment></comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>srcpath</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>srcimagefilename</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>maskfilename</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>dstpath</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>destfilename</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ImageValid2</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>path</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>filename</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>MaskImageAsync</name>
            <comment></comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>srcpath</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>srcimagefilename</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>maskfilename</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>dstpath</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>destfilename</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SplitImage</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>path</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>filename</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>prefix</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SplitImageAsync</name>
            <comment></comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>path</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>filename</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>prefix</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ImageValid</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>path</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>filename</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ApplyTransparency</name>
            <comment>Apply a mask (alpha channel on a image)
image: 
mask: 
Return type: @return:The transformed image</comment>
            <returntype>java.awt.image.BufferedImage</returntype>
            <parameter>
                <name>image</name>
                <type>java.awt.image.BufferedImage</type>
            </parameter>
            <parameter>
                <name>mask</name>
                <type>java.awt.Image</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>de.donmanfred.JDABuilderwrapper</name>
        <shortname>JDABuilder</shortname>
        <objectwrapper>net.dv8tion.jda.api.JDABuilder</objectwrapper>
        <owner>process</owner>
        <method>
            <name>enableintents</name>
            <comment></comment>
            <returntype>de.donmanfred.JDABuilderwrapper</returntype>
        </method>
        <method>
            <name>setRequestTimeoutRetry</name>
            <comment>Whether the Requester should retry when a
 {@link java.net.SocketTimeoutException SocketTimeoutException} occurs. &lt;br&gt;
 &lt;b&gt;Default&lt;/b&gt;: {@code true}

 &lt;p&gt;
 This value can be changed at any time with
 {@link net.dv8tion.jda.api.JDA#setRequestTimeoutRetry(boolean)
 JDA.setRequestTimeoutRetry(boolean)}!
retryOnTimeout: True, if the Request should retry once on a socket timeout
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.JDABuilderwrapper</returntype>
            <parameter>
                <name>retryOnTimeout</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>setMemberCachePolicyALL</name>
            <comment></comment>
            <returntype>de.donmanfred.JDABuilderwrapper</returntype>
        </method>
        <method>
            <name>setLargeThreshold</name>
            <comment>Decides the total number of members at which a guild should start to use
 lazy loading. &lt;br&gt;
 This is limited to a number between 50 and 250 (inclusive). If the
 {@link #setChunkingFilter(ChunkingFilter) chunking filter} is set to
 {@link ChunkingFilter#ALL} this should be set to {@code 250} (default) to
 minimize the amount of guilds that need to request members.
threshold: The threshold in {@code [50, 250]}
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.JDABuilderwrapper</returntype>
            <parameter>
                <name>threshold</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>setEnableShutdownHook</name>
            <comment>Enables/Disables the use of a Shutdown hook to clean up JDA.
 When the Java program closes shutdown hooks are run. This is used as a
 last-second cleanup attempt by JDA to properly close connections.

 Default: true (enabled)
enable: True (default) - use shutdown hook to clean up JDA if the Java
          program is closed.
Return type: @return:Return the {@link net.dv8tion.jda.api.JDABuilder JDABuilder }
         instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.JDABuilderwrapper</returntype>
            <parameter>
                <name>enable</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>setAudioSendFactory</name>
            <comment>Changes the factory used to create IAudioSendSystem objects which handle the sending 
 loop for audio packets. By default, JDA uses DefaultSendFactory.

 param factory The new IAudioSendFactory to be used when creating new
 IAudioSendSystem objects.

 return The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.JDABuilderwrapper</returntype>
            <parameter>
                <name>factory</name>
                <type>net.dv8tion.jda.api.audio.factory.IAudioSendFactory</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Creates a JDABuilder with the predefined token.

 param token The bot token to use
 param EventName</comment>
            <returntype>de.donmanfred.JDABuilderwrapper</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>token</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setRelativeRateLimit</name>
            <comment>Whether the rate-limit should be relative to the current time plus latency.
 By default we use the X-RateLimit-Reset-After header to determine
 when a rate-limit is no longer imminent. This has the disadvantage that it
 might wait longer than needed due to the latency which is ignored by the
 reset-after relative delay.

 When disabled, we will use the X-RateLimit-Reset absolute timestamp
 instead which accounts for latency but requires a properly NTP synchronized
 clock to be present. If your system does have this feature you might gain a
 little quicker rate-limit handling than the default allows.</comment>
            <returntype>de.donmanfred.JDABuilderwrapper</returntype>
            <parameter>
                <name>enable</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>setVoiceDispatchInterceptor</name>
            <comment>Configures a custom voice dispatch handler which handles audio connections.
interceptor: The new voice dispatch handler, or null to use the default
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.JDABuilderwrapper</returntype>
            <parameter>
                <name>interceptor</name>
                <type>net.dv8tion.jda.api.hooks.VoiceDispatchInterceptor</type>
            </parameter>
        </method>
        <method>
            <name>setActivity</name>
            <comment>Sets the {@link net.dv8tion.jda.api.entities.Activity Activity} for our
 session. &lt;br&gt;
 This value can be changed at any time in the
 {@link net.dv8tion.jda.api.managers.Presence Presence} from a JDA instance.

 &lt;p&gt;
 &lt;b&gt;Hint:&lt;/b&gt; You can create a {@link net.dv8tion.jda.api.entities.Activity
 Activity} object using
 {@link net.dv8tion.jda.api.entities.Activity#playing(String)} or
 {@link net.dv8tion.jda.api.entities.Activity#streaming(String, String)}.
activity: An instance of {@link net.dv8tion.jda.api.entities.Activity
          Activity} (null allowed)
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.JDABuilderwrapper</returntype>
            <parameter>
                <name>activity</name>
                <type>net.dv8tion.jda.api.entities.Activity</type>
            </parameter>
        </method>
        <method>
            <name>setMaxBufferSize</name>
            <comment>The maximum size, in bytes, of the buffer used for decompressing discord
 payloads. &lt;br&gt;
 If the maximum buffer size is exceeded a new buffer will be allocated
 instead. &lt;br&gt;
 Setting this to {@link Integer#MAX_VALUE} would imply the buffer will never
 be resized unless memory starvation is imminent. &lt;br&gt;
 Setting this to {@code 0} would imply the buffer would need to be allocated
 again for every payload (not recommended).

 &lt;p&gt;
 Default: {@code 2048}
bufferSize: The maximum size the buffer should allow to retain
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.JDABuilderwrapper</returntype>
            <parameter>
                <name>bufferSize</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>setRawEventsEnabled</name>
            <comment>Whether JDA should fire RawGatewayEvent for every discord event.
 Default: false</comment>
            <returntype>de.donmanfred.JDABuilderwrapper</returntype>
            <parameter>
                <name>enable</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>removeEventListeners</name>
            <comment>Removes all provided listeners from the list of listeners.
listeners: The listener(s) to remove from the list.
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.JDABuilderwrapper</returntype>
            <parameter>
                <name>listeners</name>
                <type>java.lang.Object[]</type>
            </parameter>
        </method>
        <method>
            <name>setEventManager</name>
            <comment>Changes the internally used EventManager.
 There are 2 provided Implementations:
 InterfacedEventManager which uses the Interface
 EventListener (tip: use the ListenerAdapter).
 This is the default EventManager.

 You can also create your own EventManager (See IEventManager).

 param manager The new IEventManager to use.

 return The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.JDABuilderwrapper</returntype>
            <parameter>
                <name>manager</name>
                <type>net.dv8tion.jda.api.hooks.IEventManager</type>
            </parameter>
        </method>
        <method>
            <name>setGatewayPool2</name>
            <comment>Sets the {@link ScheduledExecutorService ScheduledExecutorService} used by
 the main WebSocket connection for workers. These workers spend most of
 their lifetime sleeping because they only activate for sending messages
 over the gateway. &lt;br&gt;
 &lt;b&gt;Only change this pool if you know what you're doing.&lt;/b&gt;

 &lt;p&gt;
 This is used to send various forms of session updates such as:
 &lt;ul&gt;
 &lt;li&gt;Voice States - (Dis-)Connecting from channels&lt;/li&gt;
 &lt;li&gt;Presence - Changing current activity or online status&lt;/li&gt;
 &lt;li&gt;Guild Setup - Requesting Members of newly joined guilds&lt;/li&gt;
 &lt;li&gt;Heartbeats - Regular updates to keep the connection alive (usually once
 a minute)&lt;/li&gt;
 &lt;/ul&gt;
 When nothing has to be sent the pool will only be used every 500
 milliseconds to check the queue for new payloads. Once a new payload is
 sent we switch to "rapid mode" which means more tasks will be submitted
 until no more payloads have to be sent.

 &lt;p&gt;
 Default: {@link ScheduledThreadPoolExecutor} with 1 thread
pool: The thread-pool to use for WebSocket workers
automaticShutdown: Whether {@link JDA#shutdown()} should shutdown this pool
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.JDABuilderwrapper</returntype>
            <parameter>
                <name>pool</name>
                <type>java.util.concurrent.ScheduledExecutorService</type>
            </parameter>
            <parameter>
                <name>automaticShutdown</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>setRateLimitPool</name>
            <comment>Sets the {@link ScheduledExecutorService ScheduledExecutorService} that
 should be used in the JDA rate-limit handler. Changing this can drastically
 change the JDA behavior for RestAction execution and should be handled
 carefully. &lt;b&gt;Only change this pool if you know what you're doing.&lt;/b&gt; &lt;br&gt;
 &lt;b&gt;This automatically disables the automatic shutdown of the rate-limit
 pool, you can enable it using
 {@link #setRateLimitPool(ScheduledExecutorService, boolean)
 setRateLimitPool(executor, true)}&lt;/b&gt;

 &lt;p&gt;
 This is used mostly by the Rate-Limiter to handle backoff delays by using
 scheduled executions. Besides that it is also used by planned execution for
 {@link net.dv8tion.jda.api.requests.RestAction#queueAfter(long, TimeUnit)}
 and similar methods.

 &lt;p&gt;
 Default: {@link ScheduledThreadPoolExecutor} with 5 threads.
pool: The thread-pool to use for rate-limit handling
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.JDABuilderwrapper</returntype>
            <parameter>
                <name>pool</name>
                <type>java.util.concurrent.ScheduledExecutorService</type>
            </parameter>
        </method>
        <method>
            <name>setContextMap</name>
            <comment>Sets the MDC mappings to use in JDA.
 If sharding is enabled JDA will automatically add a shard
 context with the format [SHARD_ID / TOTAL] where SHARD_ID
 and TOTAL are the shard configuration. Additionally it will provide
 context for the id via jda.shard.id and the total via
 jda.shard.total.

 If provided with non-null map this automatically enables MDC context using
 setContextEnable(true)!
map: The modifiable context map to use in JDA, or null to reset
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.JDABuilderwrapper</returntype>
            <parameter>
                <name>map</name>
                <type>java.util.concurrent.ConcurrentMap</type>
            </parameter>
        </method>
        <method>
            <name>setCallbackPool</name>
            <comment>Sets the {@link ExecutorService ExecutorService} that should be used in the
 JDA callback handler which mostly consists of
 {@link net.dv8tion.jda.api.requests.RestAction RestAction} callbacks. By
 default JDA will use {@link ForkJoinPool#commonPool()} &lt;br&gt;
 &lt;b&gt;Only change this pool if you know what you're doing. &lt;br&gt;
 This automatically disables the automatic shutdown of the callback pool,
 you can enable it using {@link #setCallbackPool(ExecutorService, boolean)
 setCallbackPool(executor, true)}&lt;/b&gt;

 &lt;p&gt;
 This is used to handle callbacks of {@link RestAction#queue()}, similarly
 it is used to finish {@link RestAction#submit()} and
 {@link RestAction#complete()} tasks which build on queue.

 &lt;p&gt;
 Default: {@link ForkJoinPool#commonPool()}
executor: The thread-pool to use for callback handling
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.JDABuilderwrapper</returntype>
            <parameter>
                <name>executor</name>
                <type>java.util.concurrent.ExecutorService</type>
            </parameter>
        </method>
        <method>
            <name>setEventPassthrough</name>
            <comment></comment>
            <returntype>de.donmanfred.JDABuilderwrapper</returntype>
            <parameter>
                <name>enable</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>setAutoReconnect</name>
            <comment>Sets whether or not JDA should try to reconnect if a connection-error is
 encountered.
 This will use an incremental reconnect (timeouts are increased each time an
 attempt fails).

 Default: true (enabled)
autoReconnect: If true - enables autoReconnect
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.JDABuilderwrapper</returntype>
            <parameter>
                <name>autoReconnect</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>setIdle</name>
            <comment>Sets whether or not we should mark our session as afk &lt;br&gt;
 This value can be changed at any time in the Presence from a JDA instance.
idle: boolean value that will be provided with our IDENTIFY package to
         mark our session as afk or not. (default false)

 return The JDABuilder instance. Useful for chaining.

 see Presence.setIdle(boolean)</comment>
            <returntype>de.donmanfred.JDABuilderwrapper</returntype>
            <parameter>
                <name>idle</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>setSessionController</name>
            <comment>Sets the SessionController for this JDABuilder instance. This can be used to sync
 behaviour and state between shards of a bot and should be one and the same
 instance on all builders for the shards.
 When useSharding(int, int) is enabled, this is set by default.

 When set, this allows the builder to build shards with respect to the login
 ratelimit automatically.</comment>
            <returntype>de.donmanfred.JDABuilderwrapper</returntype>
            <parameter>
                <name>controller</name>
                <type>net.dv8tion.jda.api.utils.SessionController</type>
            </parameter>
        </method>
        <method>
            <name>setContextEnabled</name>
            <comment>Whether JDA should use a synchronized MDC context for all of its controlled
 threads. Default: true

 param enable 
 True, if JDA should provide an MDC context map

 return The JDABuilder instance. Useful for chaining.

 see https://www.slf4j.org/api/org/slf4j/MDC.html</comment>
            <returntype>de.donmanfred.JDABuilderwrapper</returntype>
            <parameter>
                <name>enable</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>useSharding</name>
            <comment>This will enable sharding mode for JDA. &lt;br&gt;
 In sharding mode, guilds are split up and assigned one of multiple shards
 (clients). &lt;br&gt;
 The shardId that receives all stuff related to given bot is calculated as
 follows: shardId == (guildId {@literal &gt;&gt;} 22) % shardTotal; &lt;br&gt;
 &lt;b&gt;PMs are only sent to shard 0.&lt;/b&gt;

 &lt;p&gt;
 Please note, that a shard will not know about guilds which are not assigned
 to it.

 &lt;p&gt;
 &lt;b&gt;It is not possible to use sharding with an account for
 {@link net.dv8tion.jda.api.AccountType#CLIENT AccountType.CLIENT}!&lt;/b&gt;
shardId: The id of this shard (starting at 0).
shardTotal: The number of overall shards.
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.JDABuilderwrapper</returntype>
            <parameter>
                <name>shardId</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>shardTotal</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>setMaxReconnectDelay</name>
            <comment>Sets the maximum amount of time that JDA will back off to wait when
 attempting to reconnect the MainWebsocket. &lt;br&gt;
 Provided value must be 32 or greater.
maxReconnectDelay: The maximum amount of time that JDA will wait between reconnect
          attempts in seconds.
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.JDABuilderwrapper</returntype>
            <parameter>
                <name>maxReconnectDelay</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>setBulkDeleteSplittingEnabled</name>
            <comment>If enabled, JDA will separate the bulk delete event into individual delete
 events, but this isn't as efficient as handling a single event would be. It
 is recommended that BulkDelete Splitting be disabled and that the developer
 should instead handle the
 {@link net.dv8tion.jda.api.events.message.MessageBulkDeleteEvent
 MessageBulkDeleteEvent}

 &lt;p&gt;
 Default: &lt;b&gt;true (enabled)&lt;/b&gt;
enabled: True - The MESSAGE_DELETE_BULK will be split into multiple
          individual MessageDeleteEvents.
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.JDABuilderwrapper</returntype>
            <parameter>
                <name>enabled</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>setStatus</name>
            <comment>Sets the OnlineStatus our connection will display.
 This value can be changed at any time in the
 Presence from a JDA instance.</comment>
            <returntype>de.donmanfred.JDABuilderwrapper</returntype>
            <parameter>
                <name>status</name>
                <type EnumType="true">net.dv8tion.jda.api.OnlineStatus</type>
            </parameter>
        </method>
        <method>
            <name>addEventListeners</name>
            <comment>Adds all provided listeners to the list of listeners that will be used to
 populate the {@link net.dv8tion.jda.api.JDA JDA} object. &lt;br&gt;
 This uses the {@link net.dv8tion.jda.api.hooks.InterfacedEventManager
 InterfacedEventListener} by default. &lt;br&gt;
 To switch to the {@link net.dv8tion.jda.api.hooks.AnnotatedEventManager
 AnnotatedEventManager}, use
 {@link #setEventManager(net.dv8tion.jda.api.hooks.IEventManager)
 setEventManager(new AnnotatedEventManager())}.

 &lt;p&gt;
 &lt;b&gt;Note:&lt;/b&gt; When using the
 {@link net.dv8tion.jda.api.hooks.InterfacedEventManager
 InterfacedEventListener} (default), given listener(s) &lt;b&gt;must&lt;/b&gt; be
 instance of {@link net.dv8tion.jda.api.hooks.EventListener EventListener}!
listeners: The listener(s) to add to the list.
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.JDABuilderwrapper</returntype>
            <parameter>
                <name>listeners</name>
                <type>java.lang.Object[]</type>
            </parameter>
        </method>
        <method>
            <name>setRateLimitPool2</name>
            <comment>Sets the {@link ScheduledExecutorService ScheduledExecutorService} that
 should be used in the JDA rate-limit handler. Changing this can drastically
 change the JDA behavior for RestAction execution and should be handled
 carefully. &lt;b&gt;Only change this pool if you know what you're doing.&lt;/b&gt;

 &lt;p&gt;
 This is used mostly by the Rate-Limiter to handle backoff delays by using
 scheduled executions. Besides that it is also used by planned execution for
 {@link net.dv8tion.jda.api.requests.RestAction#queueAfter(long, TimeUnit)}
 and similar methods.

 &lt;p&gt;
 Default: {@link ScheduledThreadPoolExecutor} with 5 threads.
pool: The thread-pool to use for rate-limit handling
automaticShutdown: Whether {@link JDA#shutdown()} should shutdown this pool
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.JDABuilderwrapper</returntype>
            <parameter>
                <name>pool</name>
                <type>java.util.concurrent.ScheduledExecutorService</type>
            </parameter>
            <parameter>
                <name>automaticShutdown</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>setCompression</name>
            <comment>Sets the compression algorithm used with the gateway connection, this will
 decrease the amount of used bandwidth for the running bot instance for the
 cost of a few extra cycles for decompression. Compression can be entirely
 disabled by setting this to
 {@link net.dv8tion.jda.api.utils.Compression#NONE}. &lt;br&gt;
 &lt;b&gt;Default: {@link net.dv8tion.jda.api.utils.Compression#ZLIB}&lt;/b&gt;

 &lt;p&gt;
 &lt;b&gt;We recommend to keep this on the default unless you have issues with the
 decompression.&lt;/b&gt; &lt;br&gt;
 This mode might become obligatory in a future version, do not rely on this
 switch to stay.
compression: The compression algorithm to use with the gateway connection
Return type: @return:The JDABuilder instance. Useful for chaining</comment>
            <returntype>de.donmanfred.JDABuilderwrapper</returntype>
            <parameter>
                <name>compression</name>
                <type EnumType="true">net.dv8tion.jda.api.utils.Compression</type>
            </parameter>
        </method>
        <method>
            <name>setToken</name>
            <comment>Sets the token that will be used by the JDA instance to log in 
 when JDABuilder#build() is called.

 For AccountType#BOT
 Go to your &lt;link&gt;Discord Applicarions|https://discordapp.com/developers/applications/me&lt;/link&gt;
 Create or select an already existing application
 Verify that it has already been turned into a Bot. If you see the
 "Create a Bot User" button, click it.
 Click the click to reveal link beside the Token label to show your Bot's token
token: The token of the account that you would like to login with.
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.JDABuilderwrapper</returntype>
            <parameter>
                <name>token</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>build</name>
            <comment>Builds a new JDA instance and uses the provided
 token to start the login process. 
 The login process runs in a different thread, so while this will return
 immediately, JDA has not finished loading, thus many JDA methods have the 
 chance to return incorrect information. For example getGuilds() might return an
 empty list or getUserById(long) might return null for arbitrary user IDs.

 If you wish to be sure that the JDA information is correct, please use 
 awaitReady() or register an EventListener to listen for ReadyEvent.

 throws LoginException If the provided token is invalid.
 throws IllegalArgumentException If the provided token is empty or null.
Return type: @return:A JDA instance that has started the login process. It is unknown 
 as to whether or not loading has finished when this returns.</comment>
            <returntype>net.dv8tion.jda.api.JDA</returntype>
        </method>
        <method>
            <name>setChunkingFilter</name>
            <comment>The ChunkingFilter to filter which guilds should use member
 chunking.
 By default this uses ChunkingFilter#ALL.

 This filter is useless when setGuildSubscriptionsEnabled(boolean)
 is false.
filter: The filter to apply
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.JDABuilderwrapper</returntype>
            <parameter>
                <name>filter</name>
                <type>net.dv8tion.jda.api.utils.ChunkingFilter</type>
            </parameter>
        </method>
        <method>
            <name>setGatewayPool</name>
            <comment>Sets the {@link ScheduledExecutorService ScheduledExecutorService} used by
 the main WebSocket connection for workers. These workers spend most of
 their lifetime sleeping because they only activate for sending messages
 over the gateway. &lt;br&gt;
 &lt;b&gt;Only change this pool if you know what you're doing. &lt;br&gt;
 This automatically disables the automatic shutdown of the main-ws pool, you
 can enable it using
 {@link #setGatewayPool(ScheduledExecutorService, boolean)
 setGatewayPool(pool, true)}&lt;/b&gt;

 &lt;p&gt;
 This is used to send various forms of session updates such as:
 &lt;ul&gt;
 &lt;li&gt;Voice States - (Dis-)Connecting from channels&lt;/li&gt;
 &lt;li&gt;Presence - Changing current activity or online status&lt;/li&gt;
 &lt;li&gt;Guild Setup - Requesting Members of newly joined guilds&lt;/li&gt;
 &lt;li&gt;Heartbeats - Regular updates to keep the connection alive (usually once
 a minute)&lt;/li&gt;
 &lt;/ul&gt;
 When nothing has to be sent the pool will only be used every 500
 milliseconds to check the queue for new payloads. Once a new payload is
 sent we switch to "rapid mode" which means more tasks will be submitted
 until no more payloads have to be sent.

 &lt;p&gt;
 Default: {@link ScheduledThreadPoolExecutor} with 1 thread
pool: The thread-pool to use for WebSocket workers
Return type: @return:The JDABuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.JDABuilderwrapper</returntype>
            <parameter>
                <name>pool</name>
                <type>java.util.concurrent.ScheduledExecutorService</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>de.donmanfred.JDAwrapper</name>
        <shortname>JDA</shortname>
        <owner>process</owner>
        <event>onCommands(cmdlist As List)</event>
        <event>onReady(event As ReadyEvent)</event>
        <event>onGuildReady(event As GuildReadyEvent)</event>
        <event>onGenericMessage(event As GenericMessageEvent)</event>
        <event>onModalInteraction(event As ModalInteractionEvent)</event>
        <event>onThreadRevealed(event As ThreadRevealedEvent)</event>
        <event>onThreadHidden(event As ThreadHiddenEvent)</event>
        <event>onThreadMemberJoin(event As ThreadMemberJoinEvent)</event>
        <event>onThreadMemberLeave(event As ThreadMemberJoinEvent)</event>
        <event>onMessageReceived(event As MessageReceivedEvent)</event>
        <event>onGuildMemberJoin(event As GuildMemberJoinEvent)</event>
        <event>onMessageReactionAdd(event As MessageReactionAddEvent)</event>
        <event>onMessageReactionRemove(event As MessageReactionRemoveEvent)</event>
        <event>onMessageReactionRemoveAll(event As MessageReactionRemoveAllEvent)</event>
        <event>onGuildJoin(event As GuildJoinEvent)</event>
        <event>onGuildMemberRemove(event As GuildMemberRemoveEvent)</event>
        <event>onGuildMemberRoleAdd(event As GuildMemberRoleAddEvent)</event>
        <event>onGuildMemberRoleRemove(event As GuildMemberRoleRemoveEvent))</event>
        <event>onMessageEmbed(event As MessageEmbedEvent)</event>
        <event>onStringSelectInteraction(event As StringSelectInteraction)</event>
        <event>onEntitySelectInteraction(event As EntitySelectInteraction)</event>
        <event>onSelectMenuInteraction(event As SelectMenuInteractionEvent)</event>
        <event>onSlashCommandInteraction(event As SlashCommandInteractionEvent)</event>
        <event>onMessageContextInteraction(event As  MessageContextInteractionEvent)</event>
        <event>onUserContextInteraction(event As  UserContextInteractionEvent)</event>
        <event>onButtonInteraction(event As ButtonInteractionEvent)</event>
        <event>onCommandAutoCompleteInteraction(event As CommandAutoCompleteInteractionEvent)</event>
        <event>onUser(u As User)</event>
        <event>onPermissionOverrideDelete(event As PermissionOverrideDeleteEvent)</event>
        <event>onPermissionOverrideUpdate(event As PermissionOverrideUpdateEvent)</event>
        <event>onPermissionOverrideCreate(event As PermissionOverrideCreateEvent)</event>
        <event>onStageInstanceDelete(event As StageInstanceDeleteEvent)</event>
        <event>onStageInstanceUpdateTopic(event As StageInstanceUpdateTopicEvent)</event>
        <event>onStageInstanceUpdatePrivacyLevel(event As StageInstanceUpdatePrivacyLevelEvent)</event>
        <event>onStageInstanceCreate(event As StageInstanceCreateEvent)</event>
        <event>onChannelCreate(event As ChannelCreateEvent)</event>
        <event>onChannelDelete(event As ChannelDeleteEvent)</event>
        <event>onHttpRequest(request As String, response As String)</event>
        <event>loadFailed()</event>
        <event>noMatches()</event>
        <event>playlistLoaded(playlist As Object)</event>
        <event>trackLoaded(track As AudioTrack)</event>
        <event>onScheduledEventCreate(event As ScheduledEventCreateEvent)</event>
        <event>onScheduledEventDelete(event As ScheduledEventDeleteEvent)</event>
        <event>onScheduledEventUserAdd(event As ScheduledEventUserAddEvent)</event>
        <event>onScheduledEventUserRemove(event As ScheduledEventUserRemoveEvent)</event>
        <event>onGuildVoiceStream(event As GuildVoiceStreamEvent)</event>
        <event>onGuildVoiceVideo(event As GuildVoiceVideoEvent)</event>
        <event>onStatusChange(event As StatusChangeEvent)</event>
        <event>onGuildVoiceUpdate(event As GuildVoiceUpdateEvent)</event>
        <method>
            <name>retrieveWebhookById2</name>
            <comment>Retrieves a Webhook by its id.

 Possible ErrorResponses caused by the returned RestAction include the following:
 MISSING_PERMISSIONS 
 We do not have the required permissions

 UNKNOWN_WEBHOOK
 A webhook with this id does not exist

 param webhookId
       The webhook id

 throws IllegalArgumentException
        If the webhookId is null or empty

 see Guild#retrieveWebhooks()
 see TextChannel#retrieveWebhooks()</comment>
            <returntype>net.dv8tion.jda.api.entities.Webhook</returntype>
            <parameter>
                <name>webhookId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>onRoleUpdateMentionable</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.role.update.RoleUpdateMentionableEvent</type>
            </parameter>
        </method>
        <method>
            <name>onUnavailableGuildJoined</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.UnavailableGuildJoinedEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGenericEmoji</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.emoji.GenericEmojiEvent</type>
            </parameter>
        </method>
        <method>
            <name>onButtonInteraction</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.interaction.component.ButtonInteractionEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildVoiceUpdate</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.guild.voice.GuildVoiceUpdateEvent</type>
            </parameter>
        </method>
        <method>
            <name>onSelfUpdateAvatar</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.self.SelfUpdateAvatarEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildUnban</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.GuildUnbanEvent</type>
            </parameter>
        </method>
        <method>
            <name>getUserByTag</name>
            <comment>Searches for a user that has the matching Discord Tag.
 Format has to be in the form {@code Username#Discriminator} where the
 username must be between 2 and 32 characters (inclusive) matching the exact
 casing and the discriminator must be exactly 4 digits.</comment>
            <returntype>net.dv8tion.jda.api.entities.User</returntype>
            <parameter>
                <name>tag</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>onGuildStickerAdded</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.sticker.GuildStickerAddedEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildVoiceSelfDeafen</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.voice.GuildVoiceSelfDeafenEvent</type>
            </parameter>
        </method>
        <method>
            <name>onChannelUpdateBitrate</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.channel.update.ChannelUpdateBitrateEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildStickerUpdateName</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.sticker.update.GuildStickerUpdateNameEvent</type>
            </parameter>
        </method>
        <method>
            <name>getMutualGuilds2</name>
            <comment>Gets all {@link net.dv8tion.jda.api.entities.Guild Guilds} that contain all
 given users as their members.</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>users</name>
                <type>java.util.Collection</type>
            </parameter>
        </method>
        <method>
            <name>onGuildUpdateFeatures</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.update.GuildUpdateFeaturesEvent</type>
            </parameter>
        </method>
        <method>
            <name>onRoleDelete</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.role.RoleDeleteEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildVoiceStream</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.guild.voice.GuildVoiceStreamEvent</type>
            </parameter>
        </method>
        <method>
            <name>getTextChannelById</name>
            <comment>This returns the {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel} which has the same id as the one provided. &lt;br&gt;
 If there is no known {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel} with an id that matches the provided one, then this returns
 {@code null}.

 &lt;p&gt;
 &lt;b&gt;Note:&lt;/b&gt; just because a {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel} is present does not mean that you will be able to send
 messages to it. Furthermore, if you log into this account on the discord
 client, it is you will not see the channel that this returns. This is
 because the discord client hides any
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel} that you don't
 have the {@link net.dv8tion.jda.api.Permission#MESSAGE_READ
 Permission.MESSAGE_READ} permission in.
id: The id of the {@link net.dv8tion.jda.api.entities.TextChannel
          TextChannel}.
Return type: @return:Possibly-null {@link net.dv8tion.jda.api.entities.TextChannel
         TextChannel} with matching id.</comment>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.TextChannel</returntype>
            <parameter>
                <name>id</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>onChannelUpdateLocked</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.channel.update.ChannelUpdateLockedEvent</type>
            </parameter>
        </method>
        <method>
            <name>onMessageReactionRemoveEmoji</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.message.react.MessageReactionRemoveEmojiEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGenericStageInstanceUpdate</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.stage.update.GenericStageInstanceUpdateEvent</type>
            </parameter>
        </method>
        <method>
            <name>getUserByTag2</name>
            <comment>Searches for a user that has the matching Discord Tag. 
 Format has to be in the form Username#Discriminator where the
 username must be between 2 and 32 characters (inclusive) matching 
 the exact casing and the discriminator must be exactly 4 digits.</comment>
            <returntype>net.dv8tion.jda.api.entities.User</returntype>
            <parameter>
                <name>username</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>discriminator</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>onGenericSelectMenuInteraction</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.interaction.component.GenericSelectMenuInteractionEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildUpdateMFALevel</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.update.GuildUpdateMFALevelEvent</type>
            </parameter>
        </method>
        <method>
            <name>getCategoryById</name>
            <comment>Gets the {@link net.dv8tion.jda.api.entities.Category Category} that
 matches the provided id. &lt;br&gt;
 If there is no matching {@link net.dv8tion.jda.api.entities.Category
 Category} this returns {@code null}.</comment>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.Category</returntype>
            <parameter>
                <name>id</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>onGuildMemberJoin</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.guild.member.GuildMemberJoinEvent</type>
            </parameter>
        </method>
        <method>
            <name>onRoleUpdateColor</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.role.update.RoleUpdateColorEvent</type>
            </parameter>
        </method>
        <method>
            <name>parseTimeFormat</name>
            <comment></comment>
            <returntype EnumType="true">net.dv8tion.jda.api.utils.TimeFormat</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>onForumTagUpdateEmoji</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.channel.forum.update.ForumTagUpdateEmojiEvent</type>
            </parameter>
        </method>
        <method>
            <name>onPermissionOverrideDelete</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.guild.override.PermissionOverrideDeleteEvent</type>
            </parameter>
        </method>
        <method>
            <name>onUserUpdateDiscriminator</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.user.update.UserUpdateDiscriminatorEvent</type>
            </parameter>
        </method>
        <method>
            <name>getUserById</name>
            <comment>This returns the User which has
 the same id as the one provided.
 If there is no visible user with
 an id that matches the provided 
 one, this returns null.</comment>
            <returntype>net.dv8tion.jda.api.entities.User</returntype>
            <parameter>
                <name>id</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>onGuildUpdateVanityCode</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.update.GuildUpdateVanityCodeEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildVoiceVideo</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.guild.voice.GuildVoiceVideoEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGenericGuildVoice</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.voice.GenericGuildVoiceEvent</type>
            </parameter>
        </method>
        <method>
            <name>onRoleCreate</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.role.RoleCreateEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildMemberRoleAdd</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.guild.member.GuildMemberRoleAddEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildStickerUpdateDescription</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.sticker.update.GuildStickerUpdateDescriptionEvent</type>
            </parameter>
        </method>
        <method>
            <name>CreateUpdateCommandsAction</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>onGenericContextInteraction</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.interaction.command.GenericContextInteractionEvent</type>
            </parameter>
        </method>
        <method>
            <name>onShutdown</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.session.ShutdownEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildStickerRemoved</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.sticker.GuildStickerRemovedEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildUpdateBoostCount</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.update.GuildUpdateBoostCountEvent</type>
            </parameter>
        </method>
        <method>
            <name>onChannelUpdateUserLimit</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.channel.update.ChannelUpdateUserLimitEvent</type>
            </parameter>
        </method>
        <method>
            <name>onMessageBulkDelete</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.message.MessageBulkDeleteEvent</type>
            </parameter>
        </method>
        <method>
            <name>onStageInstanceDelete</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.stage.StageInstanceDeleteEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildUpdateLocale</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.update.GuildUpdateLocaleEvent</type>
            </parameter>
        </method>
        <method>
            <name>onChannelUpdateRegion</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.channel.update.ChannelUpdateRegionEvent</type>
            </parameter>
        </method>
        <method>
            <name>onStringSelectInteraction</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.interaction.component.StringSelectInteractionEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildVoiceDeafen</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.voice.GuildVoiceDeafenEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildUpdateVerificationLevel</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.update.GuildUpdateVerificationLevelEvent</type>
            </parameter>
        </method>
        <method>
            <name>onScheduledEventCreate</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.guild.scheduledevent.ScheduledEventCreateEvent</type>
            </parameter>
        </method>
        <method>
            <name>getGuildChannelById4</name>
            <comment>Get {@link net.dv8tion.jda.api.entities.GuildChannel GuildChannel} for the
 provided ID.
 This checks if any of the channel types in this guild have the provided ID
 and returns the first match.</comment>
            <returntype>net.dv8tion.jda.api.entities.channel.middleman.GuildChannel</returntype>
            <parameter>
                <name>id</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>onSessionDisconnect</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.session.SessionDisconnectEvent</type>
            </parameter>
        </method>
        <method>
            <name>GetInviteUrl2</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>getGuildById2</name>
            <comment>This returns the {@link net.dv8tion.jda.api.entities.Guild Guild} which has
 the same id as the one provided. &lt;br&gt;
 If there is no connected guild with an id that matches the provided one,
 then this returns {@code null}.</comment>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <parameter>
                <name>id</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>onUserActivityStart</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.user.UserActivityStartEvent</type>
            </parameter>
        </method>
        <method>
            <name>getGuildChannelById2</name>
            <comment>Get {@link net.dv8tion.jda.api.entities.GuildChannel GuildChannel} for the
 provided ID.</comment>
            <returntype>net.dv8tion.jda.api.entities.channel.middleman.GuildChannel</returntype>
            <parameter>
                <name>type</name>
                <type EnumType="true">net.dv8tion.jda.api.entities.channel.ChannelType</type>
            </parameter>
            <parameter>
                <name>id</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getGuildChannelById3</name>
            <comment>Get {@link net.dv8tion.jda.api.entities.GuildChannel GuildChannel} for the
 provided ID.</comment>
            <returntype>net.dv8tion.jda.api.entities.channel.middleman.GuildChannel</returntype>
            <parameter>
                <name>type</name>
                <type EnumType="true">net.dv8tion.jda.api.entities.channel.ChannelType</type>
            </parameter>
            <parameter>
                <name>id</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>onChannelUpdateParent</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.channel.update.ChannelUpdateParentEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildAvailable</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.GuildAvailableEvent</type>
            </parameter>
        </method>
        <method>
            <name>CompleteCommands</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>shouldQueue</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>onEvent</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.GenericEvent</type>
            </parameter>
        </method>
        <method>
            <name>getRolesByName</name>
            <comment>Retrieves all Roles visible to this JDA instance.
 return Immutable List of all Roles matching the parameters provided.</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>ignoreCase</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>getTextChannelsByName</name>
            <comment>An unmodifiable list of all {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannels} that have the same name as the one provided. &lt;br&gt;
 If there are no {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannels} with the provided name, then this returns an empty list.

 &lt;p&gt;
 &lt;b&gt;Note:&lt;/b&gt; just because a {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel} is present in this list does not mean that you will be able to
 send messages to it. Furthermore, if you log into this account on the
 discord client, it is possible that you will see fewer channels than this
 returns. This is because the discord client hides any
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel} that you don't
 have the {@link net.dv8tion.jda.api.Permission#MESSAGE_READ
 Permission.MESSAGE_READ} permission in.
name: The name of the requested
          {@link net.dv8tion.jda.api.entities.TextChannel TextChannels}.
ignoreCase: Whether to ignore case or not when comparing the provided name to
          each {@link net.dv8tion.jda.api.entities.TextChannel#getName()}.
Return type: @return:Possibly-empty list of all the
         {@link net.dv8tion.jda.api.entities.TextChannel TextChannels} that
         all have the same name as the provided name.</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>ignoreCase</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>onGuildMemberUpdate</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.member.GuildMemberUpdateEvent</type>
            </parameter>
        </method>
        <method>
            <name>onForumTagUpdateModerated</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.channel.forum.update.ForumTagUpdateModeratedEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGenericMessageReaction</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.message.react.GenericMessageReactionEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildUpdateCommunityUpdatesChannel</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.update.GuildUpdateCommunityUpdatesChannelEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildMemberRoleRemove</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.guild.member.GuildMemberRoleRemoveEvent</type>
            </parameter>
        </method>
        <method>
            <name>onUserUpdateActivities</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.user.update.UserUpdateActivitiesEvent</type>
            </parameter>
        </method>
        <method>
            <name>onEntitySelectInteraction</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.interaction.component.EntitySelectInteractionEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildUpdateOwner</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.update.GuildUpdateOwnerEvent</type>
            </parameter>
        </method>
        <method>
            <name>getGuildById</name>
            <comment>This returns the Guild which has
 the same id as the one provided. 
 If there is no connected guild with an id that matches the provided one,
 then this returns {@code null}.</comment>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <parameter>
                <name>id</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>onGenericInteractionCreate</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.interaction.GenericInteractionCreateEvent</type>
            </parameter>
        </method>
        <method>
            <name>getCategoriesByName</name>
            <comment>Gets a list of all {@link net.dv8tion.jda.api.entities.Category Categories}
 that have the same name as the one provided. &lt;br&gt;
 If there are no matching categories this will return an empty list.</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>ignoreCase</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>onApplicationUpdatePrivileges</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.interaction.command.ApplicationUpdatePrivilegesEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildVoiceRequestToSpeak</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.voice.GuildVoiceRequestToSpeakEvent</type>
            </parameter>
        </method>
        <method>
            <name>onThreadHidden</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.thread.ThreadHiddenEvent</type>
            </parameter>
        </method>
        <method>
            <name>retrieveUserById</name>
            <comment>Attempts to retrieve a User object based on the provided id.
 This first calls getUserById(long), and if the return is
 null then a request is made to the Discord servers.</comment>
            <returntype>net.dv8tion.jda.api.entities.User</returntype>
            <parameter>
                <name>id</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>onScheduledEventUpdateDescription</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.guild.scheduledevent.update.ScheduledEventUpdateDescriptionEvent</type>
            </parameter>
        </method>
        <method>
            <name>onChannelDelete</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.channel.ChannelDeleteEvent</type>
            </parameter>
        </method>
        <method>
            <name>onRoleUpdateHoisted</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.role.update.RoleUpdateHoistedEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGenericEvent</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.GenericEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildLeave</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.GuildLeaveEvent</type>
            </parameter>
        </method>
        <method>
            <name>onThreadMemberJoin</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.thread.member.ThreadMemberJoinEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGenericStageInstance</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.stage.GenericStageInstanceEvent</type>
            </parameter>
        </method>
        <method>
            <name>onScheduledEventUpdateLocation</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.guild.scheduledevent.update.ScheduledEventUpdateLocationEvent</type>
            </parameter>
        </method>
        <method>
            <name>onStageInstanceUpdatePrivacyLevel</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.stage.update.StageInstanceUpdatePrivacyLevelEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGenericForumTag</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.channel.forum.GenericForumTagEvent</type>
            </parameter>
        </method>
        <method>
            <name>onEmojiUpdateName</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.emoji.update.EmojiUpdateNameEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildMemberUpdateNickname</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.member.update.GuildMemberUpdateNicknameEvent</type>
            </parameter>
        </method>
        <method>
            <name>onSessionResume</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.session.SessionResumeEvent</type>
            </parameter>
        </method>
        <method>
            <name>getUserById2</name>
            <comment>This returns the User which has
 the same id as the one provided. 
 If there is no visible user with 
 an id that matches the provided 
 one, this returns null.</comment>
            <returntype>net.dv8tion.jda.api.entities.User</returntype>
            <parameter>
                <name>id</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>onMessageContextInteraction</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.interaction.command.MessageContextInteractionEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildUpdateName</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.update.GuildUpdateNameEvent</type>
            </parameter>
        </method>
        <method>
            <name>onChannelUpdateAppliedTags</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.channel.update.ChannelUpdateAppliedTagsEvent</type>
            </parameter>
        </method>
        <method>
            <name>onScheduledEventDelete</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.guild.scheduledevent.ScheduledEventDeleteEvent</type>
            </parameter>
        </method>
        <method>
            <name>onSelfUpdateMFA</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.self.SelfUpdateMFAEvent</type>
            </parameter>
        </method>
        <method>
            <name>onForumTagUpdateName</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.channel.forum.update.ForumTagUpdateNameEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildUpdateMaxMembers</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.update.GuildUpdateMaxMembersEvent</type>
            </parameter>
        </method>
        <method>
            <name>retrieveCommands</name>
            <comment>Retrieves the list of global commands.
 This list does not include guild commands! Use Guild#retrieveCommands for guild commands.</comment>
            <returntype>java.util.List</returntype>
        </method>
        <method>
            <name>onGuildStickerUpdateAvailable</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.sticker.update.GuildStickerUpdateAvailableEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGenericRoleUpdate</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.role.update.GenericRoleUpdateEvent</type>
            </parameter>
        </method>
        <method>
            <name>onScheduledEventUpdateStartTime</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.guild.scheduledevent.update.ScheduledEventUpdateStartTimeEvent</type>
            </parameter>
        </method>
        <method>
            <name>onScheduledEventUpdateName</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.guild.scheduledevent.update.ScheduledEventUpdateNameEvent</type>
            </parameter>
        </method>
        <method>
            <name>onModalInteraction</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.interaction.ModalInteractionEvent</type>
            </parameter>
        </method>
        <method>
            <name>onPermissionOverrideCreate</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.guild.override.PermissionOverrideCreateEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildUpdateIcon</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.update.GuildUpdateIconEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGatewayPing</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.GatewayPingEvent</type>
            </parameter>
        </method>
        <method>
            <name>getInviteUrl</name>
            <comment>Creates an authorization invite url for the currently logged in
 Bot-Account.
 Example Format:
 https://discordapp.com/oauth2/authorize?scope=bot&amp;client_id=288202953599221761&amp;permissions=8

 Hint: To enable a pre-selected Guild of choice append the parameter
 &amp;guild_id=YOUR_GUILD_ID</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>permissions</name>
                <type EnumType="true">net.dv8tion.jda.api.Permission[]</type>
            </parameter>
        </method>
        <method>
            <name>onGenericGuildMemberUpdate</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.member.update.GenericGuildMemberUpdateEvent</type>
            </parameter>
        </method>
        <method>
            <name>getVoiceChannelById</name>
            <comment>This returns the {@link net.dv8tion.jda.api.entities.VoiceChannel
 VoiceChannel} which has the same id as the one provided. &lt;br&gt;
 If there is no known {@link net.dv8tion.jda.api.entities.VoiceChannel
 VoiceChannel} with an id that matches the provided one, then this returns
 {@code null}.
id: The id of the {@link net.dv8tion.jda.api.entities.VoiceChannel
          VoiceChannel}.
Return type: @return:Possibly-null {@link net.dv8tion.jda.api.entities.VoiceChannel
         VoiceChannel} with matching id.</comment>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.VoiceChannel</returntype>
            <parameter>
                <name>id</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>onGuildUpdateExplicitContentLevel</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.update.GuildUpdateExplicitContentLevelEvent</type>
            </parameter>
        </method>
        <method>
            <name>removeEventListener</name>
            <comment>Removes all provided listeners from the event-listeners and no longer uses
 them to handle events.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>listeners</name>
                <type>java.lang.Object[]</type>
            </parameter>
        </method>
        <method>
            <name>retrieveWebhookById</name>
            <comment>Retrieves a Webhook by its id.

 see Guild#retrieveWebhooks()
 see TextChannel#retrieveWebhooks()</comment>
            <returntype>net.dv8tion.jda.api.entities.Webhook</returntype>
            <parameter>
                <name>webhookId</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>onUserActivityEnd</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.user.UserActivityEndEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGenericUser</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.user.GenericUserEvent</type>
            </parameter>
        </method>
        <method>
            <name>onUserUpdateName</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.user.update.UserUpdateNameEvent</type>
            </parameter>
        </method>
        <method>
            <name>onScheduledEventUpdateEndTime</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.guild.scheduledevent.update.ScheduledEventUpdateEndTimeEvent</type>
            </parameter>
        </method>
        <method>
            <name>addEventListener</name>
            <comment>Adds all provided listeners to the event-listeners that will be used to
 handle events.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>listeners</name>
                <type>java.lang.Object[]</type>
            </parameter>
        </method>
        <method>
            <name>onChannelUpdateSlowmode</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.channel.update.ChannelUpdateSlowmodeEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildUnavailable</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.GuildUnavailableEvent</type>
            </parameter>
        </method>
        <method>
            <name>onRoleUpdateIcon</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.role.update.RoleUpdateIconEvent</type>
            </parameter>
        </method>
        <method>
            <name>onForumTagAdd</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.channel.forum.ForumTagAddEvent</type>
            </parameter>
        </method>
        <method>
            <name>onChannelCreate</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.channel.ChannelCreateEvent</type>
            </parameter>
        </method>
        <method>
            <name>retrieveUserById2</name>
            <comment>Attempts to retrieve a User object based on the provided id.
 This first calls getUserById(long), and if the return is null
 then a request is made to the Discord servers.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>id</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>onUnavailableGuildLeave</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.UnavailableGuildLeaveEvent</type>
            </parameter>
        </method>
        <method>
            <name>addCommand</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>cmddata</name>
                <type>net.dv8tion.jda.api.interactions.commands.build.CommandData</type>
            </parameter>
        </method>
        <method>
            <name>onGenericPrivilegeUpdate</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.interaction.command.GenericPrivilegeUpdateEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildUpdateBanner</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.update.GuildUpdateBannerEvent</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>jda</name>
                <type>net.dv8tion.jda.api.JDA</type>
            </parameter>
        </method>
        <method>
            <name>getUsersByName</name>
            <comment>This immutable returns all {@link net.dv8tion.jda.api.entities.User Users}
 that have the same username as the one provided. &lt;br&gt;
 If there are no {@link net.dv8tion.jda.api.entities.User Users} with the
 provided name, then this returns an empty list.</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>ignoreCase</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>onThreadMemberLeave</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.thread.member.ThreadMemberLeaveEvent</type>
            </parameter>
        </method>
        <method>
            <name>createGuild</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.requests.restaction.GuildAction</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>onGuildUpdateRulesChannel</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.update.GuildUpdateRulesChannelEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGenericThread</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.thread.GenericThreadEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildInviteDelete</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.invite.GuildInviteDeleteEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGenericGuildMember</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.member.GenericGuildMemberEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildBan</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.GuildBanEvent</type>
            </parameter>
        </method>
        <method>
            <name>onMessageDelete</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.message.MessageDeleteEvent</type>
            </parameter>
        </method>
        <method>
            <name>onChannelUpdateNSFW</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.channel.update.ChannelUpdateNSFWEvent</type>
            </parameter>
        </method>
        <method>
            <name>onChannelUpdateType</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.channel.update.ChannelUpdateTypeEvent</type>
            </parameter>
        </method>
        <method>
            <name>onSlashCommandInteraction</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.interaction.command.SlashCommandInteractionEvent</type>
            </parameter>
        </method>
        <method>
            <name>getRoleById</name>
            <comment>Retrieves the Role associated to the provided id.
 This iterates over all Guilds and check whether a 
 Role from that Guild is assigned to the specified ID
 and will return the first that can be found.</comment>
            <returntype>net.dv8tion.jda.api.entities.Role</returntype>
            <parameter>
                <name>id</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>onMessageReactionAdd</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.message.react.MessageReactionAddEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGenericGuildUpdate</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.update.GenericGuildUpdateEvent</type>
            </parameter>
        </method>
        <method>
            <name>getUnavailable</name>
            <comment>Whether the guild is unavailable. If this returns true, the guild id should
 be in {@link #getUnavailableGuilds()}.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>guildId</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>onChannelUpdateDefaultThreadSlowmode</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.channel.update.ChannelUpdateDefaultThreadSlowmodeEvent</type>
            </parameter>
        </method>
        <method>
            <name>onEmojiRemoved</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.emoji.EmojiRemovedEvent</type>
            </parameter>
        </method>
        <method>
            <name>onApplicationCommandUpdatePrivileges</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.interaction.command.ApplicationCommandUpdatePrivilegesEvent</type>
            </parameter>
        </method>
        <method>
            <name>getGuildsByName</name>
            <comment>An immutable list of all {@link net.dv8tion.jda.api.entities.Guild Guilds}
 that have the same name as the one provided. &lt;br&gt;
 If there are no {@link net.dv8tion.jda.api.entities.Guild Guilds} with the
 provided name, then this returns an empty list.</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>ignoreCase</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>onGenericGuildSticker</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.sticker.GenericGuildStickerEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildUpdateAfkTimeout</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.update.GuildUpdateAfkTimeoutEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGenericChannelUpdate</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.channel.update.GenericChannelUpdateEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildUpdateDescription</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.update.GuildUpdateDescriptionEvent</type>
            </parameter>
        </method>
        <method>
            <name>onReady</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.session.ReadyEvent</type>
            </parameter>
        </method>
        <method>
            <name>onSelfUpdateName</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.self.SelfUpdateNameEvent</type>
            </parameter>
        </method>
        <method>
            <name>onHttpRequest</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.http.HttpRequestEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildVoiceSelfMute</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.voice.GuildVoiceSelfMuteEvent</type>
            </parameter>
        </method>
        <method>
            <name>onException</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.ExceptionEvent</type>
            </parameter>
        </method>
        <method>
            <name>onUserContextInteraction</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.interaction.command.UserContextInteractionEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildInviteCreate</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.invite.GuildInviteCreateEvent</type>
            </parameter>
        </method>
        <method>
            <name>shutdownNow</name>
            <comment>Shuts down this JDA instance instantly, closing all its connections. After
 this command is issued the JDA Instance can not be used anymore. This will
 also cancel all queued {@link net.dv8tion.jda.api.requests.RestAction
 RestActions}.

 &lt;p&gt;
 If you want this instance to shutdown without cancelling enqueued
 RestActions use {@link #shutdown() shutdown()}</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>onSessionInvalidate</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.session.SessionInvalidateEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGenericEmojiUpdate</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.emoji.update.GenericEmojiUpdateEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildJoin</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.guild.GuildJoinEvent</type>
            </parameter>
        </method>
        <method>
            <name>onRawGateway</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.RawGatewayEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildVoiceSuppress</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.voice.GuildVoiceSuppressEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildReady</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.guild.GuildReadyEvent</type>
            </parameter>
        </method>
        <method>
            <name>onChannelUpdateAutoArchiveDuration</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.channel.update.ChannelUpdateAutoArchiveDurationEvent</type>
            </parameter>
        </method>
        <method>
            <name>getMutualGuilds</name>
            <comment>Gets all {@link net.dv8tion.jda.api.entities.Guild Guilds} that contain all
 given users as their members.</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>users</name>
                <type>net.dv8tion.jda.api.entities.User[]</type>
            </parameter>
        </method>
        <method>
            <name>onThreadRevealed</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.thread.ThreadRevealedEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildMemberRemove</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.guild.member.GuildMemberRemoveEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildTimeout</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.GuildTimeoutEvent</type>
            </parameter>
        </method>
        <method>
            <name>onRoleUpdateName</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.role.update.RoleUpdateNameEvent</type>
            </parameter>
        </method>
        <method>
            <name>onPermissionOverrideUpdate</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.guild.override.PermissionOverrideUpdateEvent</type>
            </parameter>
        </method>
        <method>
            <name>onMessageUpdate</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.message.MessageUpdateEvent</type>
            </parameter>
        </method>
        <method>
            <name>onRoleUpdatePermissions</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.role.update.RoleUpdatePermissionsEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGenericComponentInteractionCreate</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.interaction.component.GenericComponentInteractionCreateEvent</type>
            </parameter>
        </method>
        <method>
            <name>onMessageReceived</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.message.MessageReceivedEvent</type>
            </parameter>
        </method>
        <method>
            <name>queue</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>onGuildVoiceGuildDeafen</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.voice.GuildVoiceGuildDeafenEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGenericChannel</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.channel.GenericChannelEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGenericThreadMember</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.thread.member.GenericThreadMemberEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGenericUserPresence</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.user.update.GenericUserPresenceEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildUpdateAfkChannel</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.update.GuildUpdateAfkChannelEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGenericScheduledEventUpdate</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.scheduledevent.update.GenericScheduledEventUpdateEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGenericForumTagUpdate</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.channel.forum.update.GenericForumTagUpdateEvent</type>
            </parameter>
        </method>
        <method>
            <name>onEmojiUpdateRoles</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.emoji.update.EmojiUpdateRolesEvent</type>
            </parameter>
        </method>
        <method>
            <name>onStageInstanceCreate</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.stage.StageInstanceCreateEvent</type>
            </parameter>
        </method>
        <method>
            <name>onScheduledEventUpdateStatus</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.guild.scheduledevent.update.ScheduledEventUpdateStatusEvent</type>
            </parameter>
        </method>
        <method>
            <name>onChannelUpdateTopic</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.channel.update.ChannelUpdateTopicEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGenericGuild</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.GenericGuildEvent</type>
            </parameter>
        </method>
        <method>
            <name>installAuxiliaryPort</name>
            <comment>Installs an auxiliary port for audio transfer.
Return type: @return:{@link AuditableRestAction} - Type: int Provides the resulting used
         port</comment>
            <returntype>net.dv8tion.jda.api.requests.restaction.AuditableRestAction</returntype>
        </method>
        <method>
            <name>onChannelUpdatePosition</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.channel.update.ChannelUpdatePositionEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGenericRole</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.role.GenericRoleEvent</type>
            </parameter>
        </method>
        <method>
            <name>onUserTyping</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.user.UserTypingEvent</type>
            </parameter>
        </method>
        <method>
            <name>onChannelUpdateFlags</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.channel.update.ChannelUpdateFlagsEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildVoiceGuildMute</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.voice.GuildVoiceGuildMuteEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildUpdateSplash</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.update.GuildUpdateSplashEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildStickerUpdateTags</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.sticker.update.GuildStickerUpdateTagsEvent</type>
            </parameter>
        </method>
        <method>
            <name>onForumTagRemove</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.channel.forum.ForumTagRemoveEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildUpdateBoostTier</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.update.GuildUpdateBoostTierEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGenericMessage</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.message.GenericMessageEvent</type>
            </parameter>
        </method>
        <method>
            <name>onUserUpdateOnlineStatus</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.user.update.UserUpdateOnlineStatusEvent</type>
            </parameter>
        </method>
        <method>
            <name>onChannelUpdateInvitable</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.channel.update.ChannelUpdateInvitableEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildUpdateSystemChannel</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.update.GuildUpdateSystemChannelEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildUpdateMaxPresences</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.update.GuildUpdateMaxPresencesEvent</type>
            </parameter>
        </method>
        <method>
            <name>onStageInstanceUpdateTopic</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.stage.update.StageInstanceUpdateTopicEvent</type>
            </parameter>
        </method>
        <method>
            <name>onSelfUpdateVerified</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.self.SelfUpdateVerifiedEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGenericAutoCompleteInteraction</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.interaction.GenericAutoCompleteInteractionEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildMemberUpdateAvatar</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.member.update.GuildMemberUpdateAvatarEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGenericCommandInteraction</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.interaction.command.GenericCommandInteractionEvent</type>
            </parameter>
        </method>
        <method>
            <name>onEmojiAdded</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.emoji.EmojiAddedEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGenericSessionEvent</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.session.GenericSessionEvent</type>
            </parameter>
        </method>
        <method>
            <name>onMessageEmbed</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.message.MessageEmbedEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildUpdateNotificationLevel</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.update.GuildUpdateNotificationLevelEvent</type>
            </parameter>
        </method>
        <method>
            <name>shutdown</name>
            <comment>Shuts down this JDA instance, closing all its connections. After this
 command is issued the JDA Instance can not be used anymore. Already
 enqueued {@link net.dv8tion.jda.api.requests.RestAction RestActions} are
 still going to be executed.

 &lt;p&gt;
 If you want this instance to shutdown without executing, use
 {@link #shutdownNow() shutdownNow()}</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>onGuildUpdateNSFWLevel</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.update.GuildUpdateNSFWLevelEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGenericUpdate</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.UpdateEvent</type>
            </parameter>
        </method>
        <method>
            <name>onChannelUpdateDefaultReaction</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.channel.update.ChannelUpdateDefaultReactionEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGenericPermissionOverride</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.override.GenericPermissionOverrideEvent</type>
            </parameter>
        </method>
        <method>
            <name>onMessageReactionRemove</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.message.react.MessageReactionRemoveEvent</type>
            </parameter>
        </method>
        <method>
            <name>onSessionRecreate</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.session.SessionRecreateEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildVoiceMute</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.voice.GuildVoiceMuteEvent</type>
            </parameter>
        </method>
        <method>
            <name>onScheduledEventUserAdd</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.guild.scheduledevent.ScheduledEventUserAddEvent</type>
            </parameter>
        </method>
        <method>
            <name>onCommandAutoCompleteInteraction</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.interaction.command.CommandAutoCompleteInteractionEvent</type>
            </parameter>
        </method>
        <method>
            <name>getGuildChannelById</name>
            <comment>Get {@link net.dv8tion.jda.api.entities.GuildChannel GuildChannel} for the
 provided ID. &lt;br&gt;
 This checks if any of the channel types in this guild have the provided ID
 and returns the first match.</comment>
            <returntype>net.dv8tion.jda.api.entities.channel.middleman.GuildChannel</returntype>
            <parameter>
                <name>id</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>onGuildMemberUpdateTimeOut</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.member.update.GuildMemberUpdateTimeOutEvent</type>
            </parameter>
        </method>
        <method>
            <name>onScheduledEventUserRemove</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.guild.scheduledevent.ScheduledEventUserRemoveEvent</type>
            </parameter>
        </method>
        <method>
            <name>onStatusChange</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.StatusChangeEvent</type>
            </parameter>
        </method>
        <method>
            <name>onUserUpdateAvatar</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.user.update.UserUpdateAvatarEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGenericSelfUpdate</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.self.GenericSelfUpdateEvent</type>
            </parameter>
        </method>
        <method>
            <name>onChannelUpdateArchived</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.channel.update.ChannelUpdateArchivedEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGuildMemberUpdatePending</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.member.update.GuildMemberUpdatePendingEvent</type>
            </parameter>
        </method>
        <method>
            <name>onUserUpdateFlags</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.user.update.UserUpdateFlagsEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGenericGuildStickerUpdate</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.sticker.update.GenericGuildStickerUpdateEvent</type>
            </parameter>
        </method>
        <method>
            <name>onMessageReactionRemoveAll</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>event</name>
                <type>net.dv8tion.jda.api.events.message.react.MessageReactionRemoveAllEvent</type>
            </parameter>
        </method>
        <method>
            <name>onGenericGuildInvite</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.invite.GenericGuildInviteEvent</type>
            </parameter>
        </method>
        <method>
            <name>getPrivateChannelById</name>
            <comment>This returns the {@link net.dv8tion.jda.api.entities.PrivateChannel
 PrivateChannel} which has the same id as the one provided. &lt;br&gt;
 If there is no known {@link net.dv8tion.jda.api.entities.PrivateChannel
 PrivateChannel} with an id that matches the provided one, then this returns
 {@code null}.
id: The id of the {@link net.dv8tion.jda.api.entities.PrivateChannel
          PrivateChannel}.
Return type: @return:Possibly-null {@link net.dv8tion.jda.api.entities.PrivateChannel
         PrivateChannel} with matching id.</comment>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.PrivateChannel</returntype>
            <parameter>
                <name>id</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>onChannelUpdateArchiveTimestamp</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.channel.update.ChannelUpdateArchiveTimestampEvent</type>
            </parameter>
        </method>
        <method>
            <name>getVoiceChannelsByName</name>
            <comment>An unmodifiable list of all
 {@link net.dv8tion.jda.api.entities.VoiceChannel VoiceChannels} that have
 the same name as the one provided. &lt;br&gt;
 If there are no {@link net.dv8tion.jda.api.entities.VoiceChannel
 VoiceChannels} with the provided name, then this returns an empty list.
name: The name of the requested
          {@link net.dv8tion.jda.api.entities.VoiceChannel VoiceChannels}.
ignoreCase: Whether to ignore case or not when comparing the provided name to
          each {@link net.dv8tion.jda.api.entities.VoiceChannel#getName()}.
Return type: @return:Possibly-empty list of all the
         {@link net.dv8tion.jda.api.entities.VoiceChannel VoiceChannels}
         that all have the same name as the provided name.</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>ignoreCase</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>onGuildMemberUpdateBoostTime</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.guild.member.update.GuildMemberUpdateBoostTimeEvent</type>
            </parameter>
        </method>
        <method>
            <name>clearcommands</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>onUserUpdateActivityOrder</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.user.update.UserUpdateActivityOrderEvent</type>
            </parameter>
        </method>
        <method>
            <name>onRoleUpdatePosition</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.role.update.RoleUpdatePositionEvent</type>
            </parameter>
        </method>
        <method>
            <name>onChannelUpdateName</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>net.dv8tion.jda.api.events.channel.update.ChannelUpdateNameEvent</type>
            </parameter>
        </method>
        <method>
            <name>retrieveApplicationInfo</name>
            <comment>Retrieves the {@link ApplicationInfo ApplicationInfo} for the application
 that owns the logged in Bot-Account. &lt;br&gt;
 This contains information about the owner of the currently logged in bot
 account!
Return type: @return:{@link net.dv8tion.jda.api.requests.RestAction RestAction} - Type:
         {@link ApplicationInfo ApplicationInfo} &lt;br&gt;
         The {@link ApplicationInfo ApplicationInfo} of the bot's
         application.</comment>
            <returntype>net.dv8tion.jda.api.requests.RestAction</returntype>
        </method>
        <property>
            <name>CTCategory</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.ChannelType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>CTTEXT</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.ChannelType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TextChannelCache</name>
            <returntype>net.dv8tion.jda.api.utils.cache.SnowflakeCacheView</returntype>
            <comment>{@link net.dv8tion.jda.api.utils.cache.SnowflakeCacheView
 SnowflakeCacheView} of all cached
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannels} visible to
 this JDA session.</comment>
        </property>
        <property>
            <name>Token</name>
            <returntype>java.lang.String</returntype>
            <comment>The login token that is currently being used for Discord authentication.</comment>
        </property>
        <property>
            <name>CTPRIVATE</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.ChannelType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Users</name>
            <returntype>java.util.List</returntype>
            <comment>An immutable list of all Users
 that share a Guild with the
 currently logged in account.
 This list will never contain duplicates and represents all
 Users that JDA can currently see.</comment>
        </property>
        <property>
            <name>TFDATE_SHORT</name>
            <returntype EnumType="true">net.dv8tion.jda.api.utils.TimeFormat</returntype>
            <comment></comment>
        </property>
        <property>
            <name>CTFGUILD_PRIVATE_THREAD</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.ChannelType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TextChannels</name>
            <returntype>java.util.List</returntype>
            <comment>An unmodifiable List of all {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannels} of all connected {@link net.dv8tion.jda.api.entities.Guild
 Guilds}.

 &lt;p&gt;
 &lt;b&gt;Note:&lt;/b&gt; just because a {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel} is present in this list does not mean that you will be able to
 send messages to it. Furthermore, if you log into this account on the
 discord client, it is possible that you will see fewer channels than this
 returns. This is because the discord client hides any
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel} that you don't
 have the {@link net.dv8tion.jda.api.Permission#MESSAGE_READ
 Permission.MESSAGE_READ} permission in.

 &lt;p&gt;
 This copies the backing store into a list. This means every call creates a
 new list with O(n) complexity. It is recommended to store this into a local
 variable or use {@link #getTextChannelCache()} and use its more efficient
 versions of handling these values.</comment>
        </property>
        <property>
            <name>TFDATE_TIME_LONG</name>
            <returntype EnumType="true">net.dv8tion.jda.api.utils.TimeFormat</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ResponseTotal</name>
            <returntype>long</returntype>
            <comment>This value is the total amount of JSON responses that discord has sent.
 &lt;br&gt;
 This value resets every time the websocket has to perform a full reconnect
 (not resume).</comment>
        </property>
        <property>
            <name>TFTIME_RELATIVE</name>
            <returntype EnumType="true">net.dv8tion.jda.api.utils.TimeFormat</returntype>
            <comment></comment>
        </property>
        <property>
            <name>PrivateChannelCache</name>
            <returntype>net.dv8tion.jda.api.utils.cache.SnowflakeCacheView</returntype>
            <comment>{@link net.dv8tion.jda.api.utils.cache.SnowflakeCacheView
 SnowflakeCacheView} of all cached
 {@link net.dv8tion.jda.api.entities.PrivateChannel PrivateChannels} visible
 to this JDA session.</comment>
        </property>
        <property>
            <name>DirectAudioController</name>
            <returntype>net.dv8tion.jda.api.managers.DirectAudioController</returntype>
            <comment>Direct access to audio (dis-)connect requests. &lt;br&gt;
 This should not be used when normal audio operation is desired.</comment>
        </property>
        <property>
            <name>TFDATE_LONG</name>
            <returntype EnumType="true">net.dv8tion.jda.api.utils.TimeFormat</returntype>
            <comment></comment>
        </property>
        <property>
            <name>AudioManagerCache</name>
            <returntype>net.dv8tion.jda.api.utils.cache.CacheView</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ShardInfo</name>
            <returntype>net.dv8tion.jda.api.JDA.ShardInfo</returntype>
            <comment>The shard information used when creating this instance of JDA. &lt;br&gt;
 Represents the information provided to
 {@link net.dv8tion.jda.api.JDABuilder#useSharding(int, int)}.</comment>
        </property>
        <property>
            <name>Status</name>
            <returntype EnumType="true">net.dv8tion.jda.api.JDA.Status</returntype>
            <comment>Gets the current Status of the JDA instance.</comment>
        </property>
        <property>
            <name>UnavailableGuilds</name>
            <returntype>java.util.Set</returntype>
            <comment>Set of {@link Guild} IDs for guilds that were marked unavailable by the
 gateway.</comment>
        </property>
        <property>
            <name>Categories</name>
            <returntype>java.util.List</returntype>
            <comment>Gets all {@link net.dv8tion.jda.api.entities.Category Categories} visible
 to the currently logged in account.</comment>
        </property>
        <property>
            <name>CTGROUP</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.ChannelType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Roles</name>
            <returntype>java.util.List</returntype>
            <comment>All Roles this JDA instance can see.
 This will iterate over each Guild.</comment>
        </property>
        <property>
            <name>BulkDeleteSplittingEnabled</name>
            <returntype>boolean</returntype>
            <comment>Used to determine if JDA will process MESSAGE_DELETE_BULK messages received
 from Discord as a single
 {@link net.dv8tion.jda.api.events.message.MessageBulkDeleteEvent
 MessageBulkDeleteEvent} or split the deleted messages up and fire multiple
 {@link net.dv8tion.jda.api.events.message.MessageDeleteEvent
 MessageDeleteEvents}, one for each deleted message.

 &lt;p&gt;
 By default, JDA will separate the bulk delete event into individual delete
 events, but this isn't as efficient as handling a single event would be. It
 is recommended that BulkDelete Splitting be disabled and that the developer
 should instead handle the
 {@link net.dv8tion.jda.api.events.message.MessageBulkDeleteEvent
 MessageBulkDeleteEvent}</comment>
        </property>
        <property>
            <name>AutoReconnect</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>reconnect</name>
                <type>boolean</type>
            </parameter>
            <comment>USed to determine whether or not autoReconnect is enabled for JDA.</comment>
        </property>
        <property>
            <name>CTFSTAGE</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.ChannelType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TFTIME_DEFAULT</name>
            <returntype EnumType="true">net.dv8tion.jda.api.utils.TimeFormat</returntype>
            <comment></comment>
        </property>
        <property>
            <name>CTVOICE</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.ChannelType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>CategoryCache</name>
            <returntype>net.dv8tion.jda.api.utils.cache.SnowflakeCacheView</returntype>
            <comment>{@link net.dv8tion.jda.api.utils.cache.SnowflakeCacheView
 SnowflakeCacheView} of all cached
 {@link net.dv8tion.jda.api.entities.Category Categories} visible to this
 JDA session.</comment>
        </property>
        <property>
            <name>RestPing</name>
            <returntype>net.dv8tion.jda.api.requests.RestAction</returntype>
            <comment>The time in milliseconds that discord took to respond to a REST request.
 This will request the current user from the API and calculate the time the
 response took.</comment>
        </property>
        <property>
            <name>SelfUser</name>
            <returntype>net.dv8tion.jda.api.entities.SelfUser</returntype>
            <comment>Returns the currently logged in account represented by
 {@link net.dv8tion.jda.api.entities.SelfUser SelfUser}. &lt;br&gt;
 Account settings &lt;b&gt;cannot&lt;/b&gt; be modified using this object. If you wish
 to modify account settings please use the AccountManager which is
 accessible by {@link net.dv8tion.jda.api.entities.SelfUser#getManager()}.</comment>
        </property>
        <property>
            <name>CTFFORUM</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.ChannelType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TFDATE_TIME_SHORT</name>
            <returntype EnumType="true">net.dv8tion.jda.api.utils.TimeFormat</returntype>
            <comment></comment>
        </property>
        <property>
            <name>GatewayPing</name>
            <returntype>long</returntype>
            <comment>The time in milliseconds that discord took to respond to 
 our last heartbeat.
 This roughly represents the WebSocket ping of this session</comment>
        </property>
        <property>
            <name>Guilds</name>
            <returntype>java.util.List</returntype>
            <comment>An immutable List of all {@link net.dv8tion.jda.api.entities.Guild Guilds}
 that the logged account is connected to. &lt;br&gt;
 If this account is not connected to any
 {@link net.dv8tion.jda.api.entities.Guild Guilds}, this will return an
 empty list.</comment>
        </property>
        <property>
            <name>ShardManager</name>
            <returntype>net.dv8tion.jda.api.sharding.ShardManager</returntype>
            <comment>Returns the {@link net.dv8tion.jda.api.sharding.ShardManager ShardManager}
 that manages this JDA instances or null if this instance is not managed by
 any {@link net.dv8tion.jda.api.sharding.ShardManager ShardManager}.</comment>
        </property>
        <property>
            <name>UserCache</name>
            <returntype>net.dv8tion.jda.api.utils.cache.SnowflakeCacheView</returntype>
            <comment></comment>
        </property>
        <property>
            <name>GuildCache</name>
            <returntype>net.dv8tion.jda.api.utils.cache.SnowflakeCacheView</returntype>
            <comment>{@link net.dv8tion.jda.api.utils.cache.SnowflakeCacheView
 SnowflakeCacheView} of all cached {@link net.dv8tion.jda.api.entities.Guild
 Guilds} visible to this JDA session.</comment>
        </property>
        <property>
            <name>TFTIME_SHORT</name>
            <returntype EnumType="true">net.dv8tion.jda.api.utils.TimeFormat</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MaxReconnectDelay</name>
            <returntype>int</returntype>
            <comment>This value is the maximum amount of time, in seconds, that JDA will wait
 between reconnect attempts. &lt;br&gt;
 Can be set using
 {@link net.dv8tion.jda.api.JDABuilder#setMaxReconnectDelay(int)
 JDABuilder.setMaxReconnectDelay(int)}.</comment>
        </property>
        <property>
            <name>ForumChannels</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>VoiceChannelCache</name>
            <returntype>net.dv8tion.jda.api.utils.cache.SnowflakeCacheView</returntype>
            <comment>{@link net.dv8tion.jda.api.utils.cache.SnowflakeCacheView
 SnowflakeCacheView} of all cached
 {@link net.dv8tion.jda.api.entities.VoiceChannel VoiceChannels} visible to
 this JDA session.</comment>
        </property>
        <property>
            <name>Presence</name>
            <returntype>net.dv8tion.jda.api.managers.Presence</returntype>
            <comment>The Presence controller for the current session.
 Used to set Activity and OnlineStatus information.
 return The never-null Presence for this session.</comment>
        </property>
        <property>
            <name>TFTIME_LONG</name>
            <returntype EnumType="true">net.dv8tion.jda.api.utils.TimeFormat</returntype>
            <comment></comment>
        </property>
        <property>
            <name>CTSTAGE</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.ChannelType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>RegisteredListeners</name>
            <returntype>java.util.List</returntype>
            <comment>Immutable List of Objects that have been registered as EventListeners.</comment>
        </property>
        <property>
            <name>CTFNEWS</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.ChannelType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>CTFGUILD_PUBLIC_THREAD</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.ChannelType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>RequestTimeoutRetry</name>
            <parameter>
                <name>retryOnTimeout</name>
                <type>boolean</type>
            </parameter>
            <comment>Whether the Requester should retry when a
 {@link java.net.SocketTimeoutException SocketTimeoutException} occurs.</comment>
        </property>
        <property>
            <name>EventManager</name>
            <returntype>net.dv8tion.jda.api.hooks.IEventManager</returntype>
            <parameter>
                <name>manager</name>
                <type>net.dv8tion.jda.api.hooks.IEventManager</type>
            </parameter>
            <comment>The EventManager used by this JDA instance.</comment>
        </property>
        <property>
            <name>RoleCache</name>
            <returntype>net.dv8tion.jda.api.utils.cache.SnowflakeCacheView</returntype>
            <comment>Unified {@link net.dv8tion.jda.api.utils.cache.SnowflakeCacheView
 SnowflakeCacheView} of all cached {@link net.dv8tion.jda.api.entities.Role
 Roles} visible to this JDA session.</comment>
        </property>
        <property>
            <name>AccountType</name>
            <returntype EnumType="true">net.dv8tion.jda.api.AccountType</returntype>
            <comment>The {@link net.dv8tion.jda.api.AccountType} of the currently logged in
 account. &lt;br&gt;
 Used when determining functions that are restricted based on the type of
 account.</comment>
        </property>
        <property>
            <name>PrivateChannels</name>
            <returntype>java.util.List</returntype>
            <comment>An unmodifiable list of all known
 {@link net.dv8tion.jda.api.entities.PrivateChannel PrivateChannels}.

 &lt;p&gt;
 This copies the backing store into a list. This means every call creates a
 new list with O(n) complexity. It is recommended to store this into a local
 variable or use {@link #getPrivateChannelCache()} and use its more
 efficient versions of handling these values.</comment>
        </property>
        <property>
            <name>AudioManagers</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>VoiceChannels</name>
            <returntype>java.util.List</returntype>
            <comment>An unmodifiable list of all
 {@link net.dv8tion.jda.api.entities.VoiceChannel VoiceChannels} of all
 connected {@link net.dv8tion.jda.api.entities.Guild Guilds}.

 &lt;p&gt;
 This copies the backing store into a list. This means every call creates a
 new list with O(n) complexity. It is recommended to store this into a local
 variable or use {@link #getVoiceChannelCache()} and use its more efficient
 versions of handling these values.</comment>
        </property>
        <property>
            <name>Emojis</name>
            <returntype>java.util.List</returntype>
            <comment>A collection of all to us known emotes (managed/restricted included).
 This will be empty if CacheFlag#EMOTE is disabled.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.JDAwrapper.EchoHandler</name>
        <owner>process</owner>
        <method>
            <name>canProvide</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>canReceiveCombined</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>handleCombinedAudio</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>combinedAudio</name>
                <type>net.dv8tion.jda.api.audio.CombinedAudio</type>
            </parameter>
        </method>
        <method>
            <name>provide20MsAudio</name>
            <comment></comment>
            <returntype>java.nio.ByteBuffer</returntype>
        </method>
        <method>
            <name>isOpus</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
    </class>
    <class>
        <name>de.donmanfred.Presencewrapper</name>
        <shortname>Presence</shortname>
        <objectwrapper>net.dv8tion.jda.api.managers.Presence</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>SetPresence</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>status</name>
                <type EnumType="true">net.dv8tion.jda.api.OnlineStatus</type>
            </parameter>
            <parameter>
                <name>activity</name>
                <type>net.dv8tion.jda.api.entities.Activity</type>
            </parameter>
            <parameter>
                <name>idle</name>
                <type>boolean</type>
            </parameter>
        </method>
        <property>
            <name>StatusUNKNOWN</name>
            <returntype EnumType="true">net.dv8tion.jda.api.OnlineStatus</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Status</name>
            <parameter>
                <name>status</name>
                <type EnumType="true">net.dv8tion.jda.api.OnlineStatus</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>StatusIDLE</name>
            <returntype EnumType="true">net.dv8tion.jda.api.OnlineStatus</returntype>
            <comment></comment>
        </property>
        <property>
            <name>StatusDND</name>
            <returntype EnumType="true">net.dv8tion.jda.api.OnlineStatus</returntype>
            <comment></comment>
        </property>
        <property>
            <name>StatusOFFLINE</name>
            <returntype EnumType="true">net.dv8tion.jda.api.OnlineStatus</returntype>
            <comment></comment>
        </property>
        <property>
            <name>StatusONLINE</name>
            <returntype EnumType="true">net.dv8tion.jda.api.OnlineStatus</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Idle</name>
            <parameter>
                <name>idle</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Activity</name>
            <returntype>net.dv8tion.jda.api.entities.Activity</returntype>
            <parameter>
                <name>activity</name>
                <type>net.dv8tion.jda.api.entities.Activity</type>
            </parameter>
            <comment>Sets the Activity for this session.
 A Activity can be retrieved via Activity#playing(String).
 For streams you provide a valid streaming url as second parameter</comment>
        </property>
        <property>
            <name>StatusINVISIBLE</name>
            <returntype EnumType="true">net.dv8tion.jda.api.OnlineStatus</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.StringSelectMenuwrapper</name>
        <shortname>StringSelectMenu</shortname>
        <objectwrapper>net.dv8tion.jda.api.interactions.components.selections.StringSelectMenu</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Placeholder</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Options</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MaxPerRow</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Id</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MaxValues</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MinValues</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.channel.Categorywrapper</name>
        <shortname>Category</shortname>
        <objectwrapper>net.dv8tion.jda.api.entities.channel.concrete.Category</objectwrapper>
        <owner>process</owner>
        <method>
            <name>modifyVoiceChannelPositions</name>
            <comment>Modifies the positional order of this Category's nested VoiceChannel.
 return A CategoryOrderAction for ordering the Category's VoiceChannel.</comment>
            <returntype>net.dv8tion.jda.api.requests.restaction.order.CategoryOrderAction</returntype>
        </method>
        <method>
            <name>createTextChannel</name>
            <comment>Creates a new TextChannel with this Category as parent.
 This will copy all PermissionOverride of this Category!

 param  name The name of the TextChannel to create
Return type: @return:A specific ChannelAction This action allows to set fields 
 for the new TextChannel before creating it</comment>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.TextChannel</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GrantWriteRole</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.PermissionOverride</returntype>
            <parameter>
                <name>role</name>
                <type>net.dv8tion.jda.api.entities.Role</type>
            </parameter>
        </method>
        <method>
            <name>delete</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>createForumChannel</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.ForumChannel</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>createVoiceChannel</name>
            <comment>Creates a new VoiceChannel with this Category as parent.
 This will copy all PermissionOverride of this Category!

 param  name The name of the VoiceChannel to create
 return A specific ChannelAction This action allows to set fields 
 for the new VoiceChannel before creating it</comment>
            <returntype>net.dv8tion.jda.api.requests.restaction.ChannelAction</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>createTextChannel2</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.TextChannel</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>RoleID</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>GrantViewRole</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.PermissionOverride</returntype>
            <parameter>
                <name>role</name>
                <type>net.dv8tion.jda.api.entities.Role</type>
            </parameter>
        </method>
        <method>
            <name>modifyTextChannelPositions</name>
            <comment>Modifies the positional order of this Category's nested TextChannel and  StoreChannel.
 return A CategoryOrderAction for ordering the Category's TextChannel and
 StoreChannel.</comment>
            <returntype>net.dv8tion.jda.api.requests.restaction.order.CategoryOrderAction</returntype>
        </method>
        <property>
            <name>IdLong</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Position</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ID</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Manager</name>
            <returntype>net.dv8tion.jda.api.managers.channel.concrete.CategoryManager</returntype>
            <comment></comment>
        </property>
        <property>
            <name>RolePermissionOverrides</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Channels</name>
            <returntype>java.util.List</returntype>
            <comment>All GuildChannel listed for this Category
 This may contain VoiceChannel, StoreChannel and 
 TextChannel!</comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TextChannels</name>
            <returntype>java.util.List</returntype>
            <comment>All TextChannel listed for this Category</comment>
        </property>
        <property>
            <name>VoiceChannels</name>
            <returntype>java.util.List</returntype>
            <comment>All VoiceChannel listed for this Category</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.channel.ForumChannelwrapper</name>
        <shortname>ForumChannel</shortname>
        <objectwrapper>net.dv8tion.jda.api.entities.channel.concrete.ForumChannel</objectwrapper>
        <owner>process</owner>
        <event>onMessage(msg As Mesage, msgID As String)</event>
        <event>onMembers(members As List)</event>
        <method>
            <name>createForumPost</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.channel.forums.ForumPost</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>data</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>delete</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>createThreadChannel</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.ThreadChannel</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>isTagRequired</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>SetEventListener</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>PermissionVIEW_CHANNEL</name>
            <returntype EnumType="true">net.dv8tion.jda.api.Permission</returntype>
            <comment></comment>
        </property>
        <property>
            <name>AvailableTags</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>JDA</name>
            <returntype>net.dv8tion.jda.api.JDA</returntype>
            <comment>Returns the JDA instance of this MessageChannel

 return the corresponding JDA instance</comment>
        </property>
        <property>
            <name>JumpUrl</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment>Returns the {@link net.dv8tion.jda.api.entities.Guild Guild} that this GuildChannel is part of.</comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Type</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.ChannelType</returntype>
            <comment>The ChannelType of this MessageChannel.</comment>
        </property>
        <property>
            <name>ID</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>AsMention</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Members</name>
            <returntype>java.util.List</returntype>
            <comment>A List of all Members that are in this GuildChannel</comment>
        </property>
        <property>
            <name>DefaultReaction</name>
            <returntype>net.dv8tion.jda.api.entities.emoji.EmojiUnion</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.channel.ForumPostwrapper</name>
        <shortname>ForumPost</shortname>
        <objectwrapper>net.dv8tion.jda.api.entities.channel.forums.ForumPost</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Message</name>
            <returntype>net.dv8tion.jda.api.entities.Message</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ThreadChannel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.ThreadChannel</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.channel.GuildChannelUnionwrapper</name>
        <shortname>GuildChannelUnion</shortname>
        <objectwrapper>net.dv8tion.jda.api.entities.channel.unions.GuildChannelUnion</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>asThreadChannel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.ThreadChannel</returntype>
            <comment></comment>
        </property>
        <property>
            <name>PermissionVIEW_CHANNEL</name>
            <returntype EnumType="true">net.dv8tion.jda.api.Permission</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TypeName</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>JDA</name>
            <returntype>net.dv8tion.jda.api.JDA</returntype>
            <comment>Returns the JDA instance of this MessageChannel

 return the corresponding JDA instance</comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment>Returns the {@link net.dv8tion.jda.api.entities.Guild Guild} that this GuildChannel is part of.</comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment>This method is a shortcut method to return the following information in the
 following situation: If the MessageChannel is instance of..</comment>
        </property>
        <property>
            <name>asAudioChannel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.middleman.AudioChannel</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Type</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.ChannelType</returntype>
            <comment>The ChannelType of this MessageChannel.</comment>
        </property>
        <property>
            <name>asTextChannel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.TextChannel</returntype>
            <comment></comment>
        </property>
        <property>
            <name>asGuildMessageChannel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.middleman.GuildMessageChannel</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ID</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>asCategory</name>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.Category</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.channel.GuildChannelwrapper</name>
        <shortname>GuildChannel</shortname>
        <objectwrapper>net.dv8tion.jda.api.entities.channel.middleman.GuildChannel</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>PermissionVIEW_CHANNEL</name>
            <returntype EnumType="true">net.dv8tion.jda.api.Permission</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Type</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.ChannelType</returntype>
            <comment>The ChannelType of this MessageChannel.</comment>
        </property>
        <property>
            <name>JDA</name>
            <returntype>net.dv8tion.jda.api.JDA</returntype>
            <comment>Returns the JDA instance of this MessageChannel

 return the corresponding JDA instance</comment>
        </property>
        <property>
            <name>ID</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment>Returns the {@link net.dv8tion.jda.api.entities.Guild Guild} that this GuildChannel is part of.</comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment>This method is a shortcut method to return the following information in the
 following situation: If the MessageChannel is instance of..</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.channel.MessageChannelUnionwrapper</name>
        <shortname>MessageChannelUnion</shortname>
        <objectwrapper>net.dv8tion.jda.api.entities.channel.unions.MessageChannelUnion</objectwrapper>
        <owner>process</owner>
        <event>onMessage(msg As Message, messageID as String)</event>
        <event>onHistoryMessage(msg As Message, msgID As String, tag As String)</event>
        <event>onBackupReady(tag As String, logchannel as Object, messages As List)</event>
        <event>onMessages(msgs As List)</event>
        <method>
            <name>deleteMessageById</name>
            <comment>Attempts to delete a Message from the Discord servers 
 that has the same id as the id provided.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>purgeMessagesById</name>
            <comment>Convenience method to delete messages in the most efficient way available.</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>messageIds</name>
                <type>java.util.List</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryAfter</name>
            <comment>Uses the provided id of a message as a marker and retrieves
 messages sent after the marker ID. The limit determines the amount
 of messages retrieved near the marker.</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>retrievePinnedMessages</name>
            <comment>Retrieves a List of Messages that have been pinned in this 
 channel. If no messages have been pinned, this retrieves 
 an empty List.</comment>
            <returntype>java.util.List</returntype>
        </method>
        <method>
            <name>editMessageEmbedById</name>
            <comment>Sends a specified MessageEmbed as a Message to
 this channel.
 This will fail if this channel is an instance of
 TextChannel and the currently logged in account 
 does not have permissions to send a message to
 this channel.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>msgID</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>embed</name>
                <type>net.dv8tion.jda.api.entities.MessageEmbed</type>
            </parameter>
        </method>
        <method>
            <name>retrieveMessageById2</name>
            <comment>Attempts to get a Message from the Discord's servers that has 
 the same id as the id provided.
 Note: when retrieving a Message, you must retrieve it from the channel it
 was sent in!

 Only bots can use this endpoint!</comment>
            <returntype>void</returntype>
            <parameter>
                <name>messageId</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>purgeMessagesById5</name>
            <comment>Convenience method to delete messages in the most efficient way available.</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>messageIds</name>
                <type>long[]</type>
            </parameter>
        </method>
        <method>
            <name>sendMessageFormat</name>
            <comment>Sends a formatted text message to this channel.
 This will fail if this channel is an instance of
 TextChannel and the currently logged in account 
 does not have permissions to send a message to
 this channel.

 format
 The string that should be formatted, if this is null or
 empty the content of the Message would be empty and 
 cause a builder exception.
 args    The arguments for your format</comment>
            <returntype>void</returntype>
            <parameter>
                <name>format</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>args</name>
                <type>java.lang.Object[]</type>
            </parameter>
        </method>
        <method>
            <name>purgeMessagesById2</name>
            <comment>Convenience method to delete messages in the most efficient way available.</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>messageIds</name>
                <type>java.lang.String[]</type>
            </parameter>
        </method>
        <method>
            <name>pinMessageById</name>
            <comment>Used to pin a message. Pinned messages are retrievable via
 retrievePinnedMessages()</comment>
            <returntype>void</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>purgeMessages3</name>
            <comment>Convenience method to delete messages in the most efficient way available.</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>messages</name>
                <type>net.dv8tion.jda.api.entities.Message[]</type>
            </parameter>
        </method>
        <method>
            <name>purgeMessages4</name>
            <comment>Convenience method to delete messages in the most efficient way available.</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>messages</name>
                <type>java.util.List</type>
            </parameter>
        </method>
        <method>
            <name>removeReactionById</name>
            <comment>Attempts to remove the reaction from a message represented by the specified
 messageId in this MessageChannel.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>unicode</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryBefore</name>
            <comment>Uses the provided {@code id} of a message as a marker and retrieves
 messages sent before the marker ID. The {@code limit} determines the amount
 of messages retrieved near the marker.</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetIterableHistoryAsync</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryAfter2</name>
            <comment>Uses the provided message as a marker and retrieves messages sent after the
 marker. The {@code limit} determines the amount of messages retrieved near
 the marker.</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory</returntype>
            <parameter>
                <name>message</name>
                <type>net.dv8tion.jda.api.entities.Message</type>
            </parameter>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryAround2</name>
            <comment>Uses the provided Message as a marker and retrieves messages 
 around the marker. The limit determines the amount of messages 
 retrieved near the marker. Discord will attempt to evenly split 
 the limit between before and after the marker,
 however in the case that the marker is set near the beginning or near the
 end of the channel's history the amount of messages on each side of the
 marker may be different, and their total count may not equal the provided
 limit.</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory.MessageRetrieveAction</returntype>
            <parameter>
                <name>message</name>
                <type>net.dv8tion.jda.api.entities.Message</type>
            </parameter>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>retrieveMessage4ref</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.Message</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>addReactionById3</name>
            <comment>Attempts to react to a message represented by the specified
 messageId in this MessageChannel.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>emote</name>
                <type>net.dv8tion.jda.api.entities.emoji.Emoji</type>
            </parameter>
        </method>
        <method>
            <name>GetIterableHistory4Backup</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>tag</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>logchannel</name>
                <type>net.dv8tion.jda.api.entities.channel.middleman.MessageChannel</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryAround</name>
            <comment>Uses the provided id of a message as a marker and retrieves
 messages sent around the marker. The limit determines the amount of
 messages retrieved near the marker. Discord will attempt to evenly split
 the limit between before and after the marker, however in the case that the
 marker is set near the beginning or near the end of the channel's history
 the amount of messages on each side of the marker may be different, and
 their total count may not equal the provided limit.</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory.MessageRetrieveAction</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>retrieveMessageById</name>
            <comment>Attempts to get a Message from the Discord's servers that has 
 the same id as the id provided.
 Note: when retrieving a Message, you must retrieve it from 
 the channel it was sent in!

 Only bots can use this endpoint!</comment>
            <returntype>void</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>addReactionById</name>
            <comment>Attempts to react to a message represented by the specified
 messageId in this MessageChannel.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>unicode</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryFromBeginning</name>
            <comment>Retrieves messages from the beginning of this MessageChannel. The
 limit determines the amount of messages being retrieved.</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory</returntype>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryBefore2</name>
            <comment>Uses the provided message as a marker and retrieves messages sent before
 the marker. The {@code limit} determines the amount of messages retrieved
 near the marker.</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory</returntype>
            <parameter>
                <name>message</name>
                <type>net.dv8tion.jda.api.entities.Message</type>
            </parameter>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>sendMessageSequence</name>
            <comment>Sends a plain text message to this channel.
 This will fail if this channel is an instance of
 TextChannel and the currently logged in account 
 does not have permissions to send a message to
 this channel.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>text</name>
                <type>java.lang.CharSequence</type>
            </parameter>
        </method>
        <method>
            <name>SetEventListener</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>deleteMessageById2</name>
            <comment>Attempts to delete a Message from the Discord servers that has 
 the same id as the id provided.	 *
messageId: The id of the Message that should be deleted</comment>
            <returntype>void</returntype>
            <parameter>
                <name>messageId</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>sendTyping</name>
            <comment>Sends the typing status to discord. This is what is used to make the
 message "X is typing..." appear.
 The typing status only lasts for 10 seconds or until a message is sent.
 
 So if you wish to show continuous typing you will need to call this method
 once every 10 seconds.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>sendMessageEmbeds</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>rows</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <property>
            <name>asThreadChannel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.ThreadChannel</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TypeName</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>JDA</name>
            <returntype>net.dv8tion.jda.api.JDA</returntype>
            <comment>Returns the JDA instance of this MessageChannel

 return the corresponding JDA instance</comment>
        </property>
        <property>
            <name>LatestMessageIdLong</name>
            <returntype>long</returntype>
            <comment>The id for the most recent message sent in this current MessageChannel.
 This should only be used if hasLatestMessage() returns true!</comment>
        </property>
        <property>
            <name>History</name>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory</returntype>
            <comment>Creates a new MessageHistory object for each call of 
 this method. MessageHistory is NOT an internal 
 message cache, but rather it queries the Discord servers 
 for previously sent messages.

 return A MessageHistory related to this channel.</comment>
        </property>
        <property>
            <name>asVoiceChannel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.VoiceChannel</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment>This method is a shortcut method to return the following information in the
 following situation: If the MessageChannel is instance of..</comment>
        </property>
        <property>
            <name>Type</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.ChannelType</returntype>
            <comment>The ChannelType of this MessageChannel.</comment>
        </property>
        <property>
            <name>IterableHistory</name>
            <returntype>net.dv8tion.jda.api.requests.restaction.pagination.MessagePaginationAction</returntype>
            <comment>A PaginationAction implementation that allows to
 iterate over recent Messages of this MessageChannel.
 This is not a cache for received messages and it can only view
 messages that were sent before. This iterates 
 chronologically backwards (from present to past).

 It is recommended not to use this in an enhanced for-loop without end
 conditions as it might cause memory overflows in channels with a long
 message history.</comment>
        </property>
        <property>
            <name>asTextChannel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.TextChannel</returntype>
            <comment></comment>
        </property>
        <property>
            <name>asGuildMessageChannel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.middleman.GuildMessageChannel</returntype>
            <comment></comment>
        </property>
        <property>
            <name>LatestMessageId</name>
            <returntype>java.lang.String</returntype>
            <comment>The id for the most recent message sent in this current MessageChannel.
 This should only be used if hasLatestMessage() returns true!
 return The most recent message's id</comment>
        </property>
        <property>
            <name>ID</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.channel.MessageChannelwrapper</name>
        <shortname>MessageChannel</shortname>
        <objectwrapper>net.dv8tion.jda.api.entities.channel.middleman.MessageChannel</objectwrapper>
        <owner>process</owner>
        <event>onMessage(msg As Message, messageID as String)</event>
        <event>onHistoryMessage(msg As Message, msgID As String, tag As String)</event>
        <event>onBackupReady(tag As String, logchannel as Object, messages As List)</event>
        <event>onMessages(msgs As List)</event>
        <method>
            <name>sendMessageObjectDelayed</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>msg</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
            <parameter>
                <name>delay</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>deleteMessageById</name>
            <comment>Attempts to delete a Message from the Discord servers 
 that has the same id as the id provided.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>purgeMessagesById5</name>
            <comment>Convenience method to delete messages in the most efficient way available.</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>messageIds</name>
                <type>long[]</type>
            </parameter>
        </method>
        <method>
            <name>sendMessageObject2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>msg</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
        </method>
        <method>
            <name>sendMessageFormat</name>
            <comment>Sends a formatted text message to this channel.
 This will fail if this channel is an instance of
 TextChannel and the currently logged in account 
 does not have permissions to send a message to
 this channel.

 format
 The string that should be formatted, if this is null or
 empty the content of the Message would be empty and 
 cause a builder exception.
 args    The arguments for your format</comment>
            <returntype>void</returntype>
            <parameter>
                <name>format</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>args</name>
                <type>java.lang.Object[]</type>
            </parameter>
        </method>
        <method>
            <name>purgeMessagesById2</name>
            <comment>Convenience method to delete messages in the most efficient way available.</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>messageIds</name>
                <type>java.lang.String[]</type>
            </parameter>
        </method>
        <method>
            <name>unpinMessageById</name>
            <comment>Used to unpin a message. Pinned messages are retrievable via
 retrievePinnedMessages()</comment>
            <returntype>void</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>removeReactionById</name>
            <comment>Attempts to remove the reaction from a message represented by the specified
 messageId in this MessageChannel.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>unicode</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>sendMessagewithembeds</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>msg</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
            <parameter>
                <name>rows</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>sendFile5</name>
            <comment>Uploads a file to the Discord servers and sends it to this
 MessageChannel. Sends the provided Message with the uploaded file.
 If you want to send a Message with the uploaded file, you can add the file
 to the MessageAction returned by sendMessage(Message).
 This allows you to send an InputStream as substitute to a file.</comment>
            <returntype>net.dv8tion.jda.api.entities.Message</returntype>
            <parameter>
                <name>data</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>fileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetIterableHistoryAsync</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryAfter2</name>
            <comment>Uses the provided message as a marker and retrieves messages sent after the
 marker. The {@code limit} determines the amount of messages retrieved near
 the marker.</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory</returntype>
            <parameter>
                <name>message</name>
                <type>net.dv8tion.jda.api.entities.Message</type>
            </parameter>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryAround2</name>
            <comment>Uses the provided Message as a marker and retrieves messages 
 around the marker. The limit determines the amount of messages 
 retrieved near the marker. Discord will attempt to evenly split 
 the limit between before and after the marker,
 however in the case that the marker is set near the beginning or near the
 end of the channel's history the amount of messages on each side of the
 marker may be different, and their total count may not equal the provided
 limit.</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory.MessageRetrieveAction</returntype>
            <parameter>
                <name>message</name>
                <type>net.dv8tion.jda.api.entities.Message</type>
            </parameter>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>retrieveMessage4ref</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.Message</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>addReactionById3</name>
            <comment>Attempts to react to a message represented by the specified
 messageId in this MessageChannel.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>emote</name>
                <type>net.dv8tion.jda.api.entities.emoji.Emoji</type>
            </parameter>
        </method>
        <method>
            <name>GetIterableHistory4Backup</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>tag</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>logchannel</name>
                <type>net.dv8tion.jda.api.entities.channel.middleman.MessageChannel</type>
            </parameter>
        </method>
        <method>
            <name>retrieveMessageById</name>
            <comment>Attempts to get a Message from the Discord's servers that has 
 the same id as the id provided.
 Note: when retrieving a Message, you must retrieve it from 
 the channel it was sent in!

 Only bots can use this endpoint!</comment>
            <returntype>void</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>editMessageFormatById</name>
            <comment>Attempts to edit a message by its id in this MessageChannel.</comment>
            <returntype>net.dv8tion.jda.api.requests.restaction.MessageEditAction</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>format</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>args</name>
                <type>java.lang.Object[]</type>
            </parameter>
        </method>
        <method>
            <name>addReactionById</name>
            <comment>Attempts to react to a message represented by the specified
 messageId in this MessageChannel.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>unicode</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryFromBeginning</name>
            <comment>Retrieves messages from the beginning of this MessageChannel. The
 limit determines the amount of messages being retrieved.</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory</returntype>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>sendMessageObjectAndFile</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>msg</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
            <parameter>
                <name>data</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>fileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SetEventListener</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>sendFile2</name>
            <comment>Uploads a file to the Discord servers and sends it to this
 MessageChannel. Sends the provided Message with the
 uploaded file.
 If you want to send a Message with the uploaded file, you can add the file
 to the MessageAction returned by sendMessage(Message).

 The {@code fileName} parameter is used to inform Discord about what the
 file should be called. This is 2 fold:
 The file name provided is the name that is found in
 {@link net.dv8tion.jda.api.entities.Message.Attachment#getFileName()} after
 upload and it is the name that will show up in the client when the upload
 is displayed.
 Note: The fileName does not show up on the Desktop client for images. It
 does on mobile however.
 The extension of the provided fileName also determines how Discord will
 treat the file. Discord currently only has special handling for image file
 types, but the fileName's extension must indicate that it is an image file.
 This means it has to end in something like .png, .jpg, .jpeg, .gif, etc. As
 a note, you can also not provide a full name for the file and instead ONLY
 provide the extension like "png" or "gif" and Discord will generate a name
 for the upload and append the fileName as the extension.

 Uploading images with Embeds
 When uploading an image you can reference said image using the
 specified filename as URI attachment://filename.ext.

 MessageChannel channel; // = reference of a MessageChannel
 EmbedBuilder embed = new EmbedBuilder();
 File file = new File("cat_01.gif");
 embed.setImage("attachment://cat.gif") // we specify this in sendFile as "cat.gif"
      .setDescription("This is a cute cat :3");
 channel.sendFile(file, "cat.gif").embed(embed.build()).queue();</comment>
            <returntype>void</returntype>
            <parameter>
                <name>file</name>
                <type>java.io.File</type>
            </parameter>
            <parameter>
                <name>fileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>sendMessagewithembed</name>
            <comment>Sends a specified MessageEmbed as a Message to
 this channel.
 This will fail if this channel is an instance of
 TextChannel and the currently logged in account 
 does not have permissions to send a message to
 this channel.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mcd</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
            <parameter>
                <name>embed</name>
                <type>net.dv8tion.jda.api.entities.MessageEmbed</type>
            </parameter>
        </method>
        <method>
            <name>sendMessageEmbeds</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>rows</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>sendMessageObjectAndFile2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>msg</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
            <parameter>
                <name>filetosend</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>fileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>editMessageById</name>
            <comment>Attempts to edit a message by its id in this MessageChannel. The string
 provided as newContent must have a length that is greater than 0
 and less-than or equal to 2000. This is a Discord message length
 limitation.</comment>
            <returntype>net.dv8tion.jda.api.requests.restaction.MessageEditAction</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>newContent</name>
                <type>java.lang.CharSequence</type>
            </parameter>
        </method>
        <method>
            <name>purgeMessagesById</name>
            <comment>Convenience method to delete messages in the most efficient way available.</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>messageIds</name>
                <type>java.util.List</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryAfter</name>
            <comment>Uses the provided id of a message as a marker and retrieves
 messages sent after the marker ID. The limit determines the amount
 of messages retrieved near the marker.</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>retrievePinnedMessages</name>
            <comment>Retrieves a List of Messages that have been pinned in this 
 channel. If no messages have been pinned, this retrieves 
 an empty List.</comment>
            <returntype>java.util.List</returntype>
        </method>
        <method>
            <name>editMessageEmbedById</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>msgID</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>embed</name>
                <type>net.dv8tion.jda.api.entities.MessageEmbed</type>
            </parameter>
        </method>
        <method>
            <name>sendMessageAsync</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>msg</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
        </method>
        <method>
            <name>retrieveMessageById2</name>
            <comment>Attempts to get a Message from the Discord's servers that has 
 the same id as the id provided.
 Note: when retrieving a Message, you must retrieve it from the channel it
 was sent in!

 Only bots can use this endpoint!</comment>
            <returntype>void</returntype>
            <parameter>
                <name>messageId</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>pinMessageById</name>
            <comment>Used to pin a message. Pinned messages are retrievable via
 retrievePinnedMessages()</comment>
            <returntype>void</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>purgeMessages3</name>
            <comment>Convenience method to delete messages in the most efficient way available.</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>messages</name>
                <type>net.dv8tion.jda.api.entities.Message[]</type>
            </parameter>
        </method>
        <method>
            <name>purgeMessages4</name>
            <comment>Convenience method to delete messages in the most efficient way available.</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>messages</name>
                <type>java.util.List</type>
            </parameter>
        </method>
        <method>
            <name>sendFileDelayed</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>data</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>fileName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>delay</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryBefore</name>
            <comment>Uses the provided {@code id} of a message as a marker and retrieves
 messages sent before the marker ID. The {@code limit} determines the amount
 of messages retrieved near the marker.</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>sendMessage</name>
            <comment>Sends a specified Message to this channel.
 This will fail if this channel is an instance of
 TextChannel and the currently logged in account 
 does not have permissions to send a message to
 this channel.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>msg</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
        </method>
        <method>
            <name>sendMessageObjectandDelete</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>msg</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
            <parameter>
                <name>deleteAfter</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryAround</name>
            <comment>Uses the provided id of a message as a marker and retrieves
 messages sent around the marker. The limit determines the amount of
 messages retrieved near the marker. Discord will attempt to evenly split
 the limit between before and after the marker, however in the case that the
 marker is set near the beginning or near the end of the channel's history
 the amount of messages on each side of the marker may be different, and
 their total count may not equal the provided limit.</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory.MessageRetrieveAction</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>sendFile</name>
            <comment>Uploads a file to the Discord servers and sends it to this
 MessageChannel. Sends the provided Message with the
 uploaded file.
 If you want to send a Message with the uploaded file, you can add the file
 to the MessageAction returned by sendMessage(Message).

 Uploading images with Embeds
 When uploading an image you can reference said image using the
 specified filename as URI attachment://filename.ext.
 MessageChannel channel; // = reference of a MessageChannel
 EmbedBuilder embed = new EmbedBuilder();
 File file = new File("cat.gif");
 embed.setImage("attachment://cat.gif")
      .setDescription("This is a cute cat :3");
 channel.sendFile(file).embed(embed.build()).queue();</comment>
            <returntype>void</returntype>
            <parameter>
                <name>path</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>filename</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryBefore2</name>
            <comment>Uses the provided message as a marker and retrieves messages sent before
 the marker. The {@code limit} determines the amount of messages retrieved
 near the marker.</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory</returntype>
            <parameter>
                <name>message</name>
                <type>net.dv8tion.jda.api.entities.Message</type>
            </parameter>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>sendMessageSequence</name>
            <comment>Sends a plain text message to this channel.
 This will fail if this channel is an instance of
 TextChannel and the currently logged in account 
 does not have permissions to send a message to
 this channel.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>text</name>
                <type>java.lang.CharSequence</type>
            </parameter>
        </method>
        <method>
            <name>sendMessageObjectAndFileWithEmbed</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>msg</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
            <parameter>
                <name>data</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>fileName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>embed</name>
                <type>net.dv8tion.jda.api.entities.MessageEmbed</type>
            </parameter>
        </method>
        <method>
            <name>deleteMessageById2</name>
            <comment>Attempts to delete a Message from the Discord servers that has 
 the same id as the id provided.	 *
messageId: The id of the Message that should be deleted</comment>
            <returntype>void</returntype>
            <parameter>
                <name>messageId</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>sendTyping</name>
            <comment>Sends the typing status to discord. This is what is used to make the
 message "X is typing..." appear.
 The typing status only lasts for 10 seconds or until a message is sent.
 
 So if you wish to show continuous typing you will need to call this method
 once every 10 seconds.</comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>Type</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.ChannelType</returntype>
            <comment>The ChannelType of this MessageChannel.</comment>
        </property>
        <property>
            <name>TypeName</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>IterableHistory</name>
            <returntype>net.dv8tion.jda.api.requests.restaction.pagination.MessagePaginationAction</returntype>
            <comment>A PaginationAction implementation that allows to
 iterate over recent Messages of this MessageChannel.
 This is not a cache for received messages and it can only view
 messages that were sent before. This iterates 
 chronologically backwards (from present to past).

 It is recommended not to use this in an enhanced for-loop without end
 conditions as it might cause memory overflows in channels with a long
 message history.</comment>
        </property>
        <property>
            <name>JDA</name>
            <returntype>net.dv8tion.jda.api.JDA</returntype>
            <comment>Returns the JDA instance of this MessageChannel

 return the corresponding JDA instance</comment>
        </property>
        <property>
            <name>LatestMessageId</name>
            <returntype>java.lang.String</returntype>
            <comment>The id for the most recent message sent in this current MessageChannel.
 This should only be used if hasLatestMessage() returns true!
 return The most recent message's id</comment>
        </property>
        <property>
            <name>LatestMessageIdLong</name>
            <returntype>long</returntype>
            <comment>The id for the most recent message sent in this current MessageChannel.
 This should only be used if hasLatestMessage() returns true!</comment>
        </property>
        <property>
            <name>ID</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>History</name>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory</returntype>
            <comment>Creates a new MessageHistory object for each call of 
 this method. MessageHistory is NOT an internal 
 message cache, but rather it queries the Discord servers 
 for previously sent messages.

 return A MessageHistory related to this channel.</comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment>This method is a shortcut method to return the following information in the
 following situation: If the MessageChannel is instance of..</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.channel.PrivateChannelwrapper</name>
        <shortname>PrivateChannel</shortname>
        <objectwrapper>net.dv8tion.jda.api.entities.channel.concrete.PrivateChannel</objectwrapper>
        <owner>process</owner>
        <event>PrivateMessage(msg As Message, messageID as String)</event>
        <method>
            <name>editMessageById</name>
            <comment>Attempts to edit a message by its id in this MessageChannel. The string
 provided as {@code newContent} must have a length that is greater than 0
 and less-than or equal to 2000. This is a Discord message length
 limitation.

 &lt;p&gt;
 The following {@link net.dv8tion.jda.api.requests.ErrorResponse
 ErrorResponses} are possible:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#INVALID_AUTHOR_EDIT
 INVALID_AUTHOR_EDIT} &lt;br&gt;
 Attempted to edit a message that was not sent by the currently logged in
 account. Discord does not allow editing of other users' Messages!&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 The request was attempted after the account lost access to the
 {@link net.dv8tion.jda.api.entities.Guild Guild} typically due to being
 kicked or removed, or after
 {@link net.dv8tion.jda.api.Permission#MESSAGE_READ Permission.MESSAGE_READ}
 was revoked in the {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel}&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE
 UNKNOWN_MESSAGE} &lt;br&gt;
 The provided {@code messageId} is unknown in this MessageChannel, either
 due to the id being invalid, or the message it referred to has already been
 deleted.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 The request was attempted after the channel was deleted.&lt;/li&gt;
 &lt;/ul&gt;
messageId: The id referencing the Message that should be edited
newContent: The new content for the edited message
Return type: @return:{@link MessageAction MessageAction} &lt;br&gt;
         The modified Message after it has been sent to Discord.</comment>
            <returntype>net.dv8tion.jda.api.requests.restaction.MessageEditAction</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>newContent</name>
                <type>java.lang.CharSequence</type>
            </parameter>
        </method>
        <method>
            <name>deleteMessageById</name>
            <comment>Attempts to delete a Message from the Discord servers that has 
 the same id as the id provided.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>purgeMessagesById</name>
            <comment>Convenience method to delete messages in the most efficient way available.
 &lt;br&gt;
 This combines both {@link TextChannel#deleteMessagesByIds(Collection)} as
 well as {@link #deleteMessageById(long)} to delete all messages provided.
 No checks will be done to prevent failures, use
 {@link java.util.concurrent.CompletionStage#exceptionally(Function)} to
 handle failures.

 &lt;p&gt;
 For possible ErrorResponses see {@link #purgeMessagesById(long...)}.
messageIds: The message ids to delete
Return type: @return:List of futures representing all deletion tasks</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>messageIds</name>
                <type>java.util.List</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryAfter</name>
            <comment>Uses the provided {@code id} of a message as a marker and retrieves
 messages sent after the marker ID. The {@code limit} determines the amount
 of messages retrieved near the marker.

 &lt;p&gt;
 &lt;b&gt;Examples:&lt;/b&gt; &lt;br&gt;
 Retrieve 100 messages from the middle of history. {@literal &gt;}100 message
 exist in history and the marker is {@literal &gt;}50 messages from the edge of
 history. &lt;br&gt;
 {@code getHistoryAfter(messageId, 100)} - This will retrieve 100 messages
 from history sent after the marker.

 &lt;p&gt;
 The following {@link net.dv8tion.jda.api.requests.ErrorResponse
 ErrorResponses} are possible:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 The request was attempted after the account lost access to the
 {@link net.dv8tion.jda.api.entities.Guild Guild} typically due to being
 kicked or removed, or after
 {@link net.dv8tion.jda.api.Permission#MESSAGE_READ Permission.MESSAGE_READ}
 was revoked in the {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel}&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS
 MISSING_PERMISSIONS} &lt;br&gt;
 The request was attempted after the account lost
 {@link net.dv8tion.jda.api.Permission#MESSAGE_HISTORY
 Permission.MESSAGE_HISTORY} in the
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel}.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE
 UNKNOWN_MESSAGE} &lt;br&gt;
 The provided {@code messageId} is unknown in this MessageChannel, either
 due to the id being invalid, or the message it referred to has already been
 deleted, thus could not be used as a marker.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 The request was attempted after the channel was deleted.&lt;/li&gt;
 &lt;/ul&gt;
messageId: The id of the message that will act as a marker.
limit: The amount of messages to be retrieved after the marker. Minimum:
          1, Max: 100.
Return type: @return:{@link net.dv8tion.jda.api.entities.MessageHistory.MessageRetrieveAction
         MessageHistory.MessageRetrieveAction} &lt;br&gt;
         Provides a {@link net.dv8tion.jda.api.entities.MessageHistory
         MessageHistory} object with messages after the provided message
         loaded into it.</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory.MessageRetrieveAction</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>sendMessageText</name>
            <comment>Sends a plain text message to this channel. 
 This will fail if this channel is an instance of
 TextChannel and the currently logged in account 
 does not have permissions to send a message to
 this channel.
 To determine if you are able to send a message in a
 TextChannel use Member#hasPermission(GuildChannel, net.dv8tion.jda.api.Permission...)
 guild.getSelfMember().hasPermission(channel, Permission.MESSAGE_WRITE)}.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>text</name>
                <type>java.lang.CharSequence</type>
            </parameter>
        </method>
        <method>
            <name>retrievePinnedMessages</name>
            <comment>Retrieves a List of {@link net.dv8tion.jda.api.entities.Message Messages}
 that have been pinned in this channel. &lt;br&gt;
 If no messages have been pinned, this retrieves an empty List.

 &lt;p&gt;
 The following {@link net.dv8tion.jda.api.requests.ErrorResponse
 ErrorResponses} are possible:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 The request was attempted after the account lost access to the
 {@link net.dv8tion.jda.api.entities.Guild Guild} typically due to being
 kicked or removed, or after
 {@link net.dv8tion.jda.api.Permission#MESSAGE_READ Permission.MESSAGE_READ}
 was revoked in the {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel}&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 The request was attempted after the channel was deleted.&lt;/li&gt;
 &lt;/ul&gt;
Return type: @return:{@link net.dv8tion.jda.api.requests.RestAction RestAction} - Type:
         List{@literal &lt;}{@link net.dv8tion.jda.api.entities.Message}{@literal &gt;}
         &lt;br&gt;
         Retrieves an immutable list of pinned messages</comment>
            <returntype>net.dv8tion.jda.api.requests.RestAction</returntype>
        </method>
        <method>
            <name>retrieveMessageById2</name>
            <comment>Attempts to get a {@link net.dv8tion.jda.api.entities.Message Message} from
 the Discord's servers that has the same id as the id provided. &lt;br&gt;
 Note: when retrieving a Message, you must retrieve it from the channel it
 was sent in!

 &lt;p&gt;
 &lt;b&gt;Only bots can use this endpoint! A similar behaviour can be simulated
 using {@link #getHistoryAround(long, int)}!&lt;/b&gt;

 &lt;p&gt;
 The following {@link net.dv8tion.jda.api.requests.ErrorResponse
 ErrorResponses} are possible:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 The request was attempted after the account lost access to the
 {@link net.dv8tion.jda.api.entities.Guild Guild} typically due to being
 kicked or removed, or after
 {@link net.dv8tion.jda.api.Permission#MESSAGE_READ Permission.MESSAGE_READ}
 was revoked in the {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel}&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS
 MISSING_PERMISSIONS} &lt;br&gt;
 The request was attempted after the account lost
 {@link net.dv8tion.jda.api.Permission#MESSAGE_HISTORY
 Permission.MESSAGE_HISTORY} in the
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel}.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE
 UNKNOWN_MESSAGE} &lt;br&gt;
 The provided {@code id} does not refer to a message sent in this channel or
 the message has already been deleted.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 The request was attempted after the channel was deleted.&lt;/li&gt;
 &lt;/ul&gt;
messageId: The id of the sought after Message
Return type: @return:{@link net.dv8tion.jda.api.requests.RestAction RestAction} - Type:
         Message &lt;br&gt;
         The Message defined by the provided id.</comment>
            <returntype>net.dv8tion.jda.api.entities.Message</returntype>
            <parameter>
                <name>messageId</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>purgeMessagesById5</name>
            <comment>Convenience method to delete messages in the most efficient way available.
 &lt;br&gt;
 This combines both {@link TextChannel#deleteMessagesByIds(Collection)} as
 well as {@link #deleteMessageById(long)} to delete all messages provided.
 No checks will be done to prevent failures, use
 {@link java.util.concurrent.CompletionStage#exceptionally(Function)} to
 handle failures.

 &lt;p&gt;
 Possible ErrorResponses include:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 if this channel was deleted&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE
 UNKNOWN_MESSAGE} &lt;br&gt;
 if any of the provided messages does not exist&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 if we were removed from the channel&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS
 MISSING_PERMISSIONS} &lt;br&gt;
 The send request was attempted after the account lost
 {@link net.dv8tion.jda.api.Permission#MESSAGE_MANAGE
 Permission.MESSAGE_MANAGE} in the channel.&lt;/li&gt;
 &lt;/ul&gt;
messageIds: The message ids to delete
Return type: @return:List of futures representing all deletion tasks</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>messageIds</name>
                <type>long[]</type>
            </parameter>
        </method>
        <method>
            <name>purgeMessagesById2</name>
            <comment>Convenience method to delete messages in the most efficient way available.
 &lt;br&gt;
 This combines both {@link TextChannel#deleteMessagesByIds(Collection)} as
 well as {@link #deleteMessageById(long)} to delete all messages provided.
 No checks will be done to prevent failures, use
 {@link java.util.concurrent.CompletionStage#exceptionally(Function)} to
 handle failures.

 &lt;p&gt;
 For possible ErrorResponses see {@link #purgeMessagesById(long...)}.
messageIds: The message ids to delete
Return type: @return:List of futures representing all deletion tasks</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>messageIds</name>
                <type>java.lang.String[]</type>
            </parameter>
        </method>
        <method>
            <name>sendMessageFormat</name>
            <comment>Sends a formatted text message to this channel. &lt;br&gt;
 This will fail if this channel is an instance of
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel} and the
 currently logged in account does not have permissions to send a message to
 this channel. &lt;br&gt;
 To determine if you are able to send a message in a
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel} use
 {@link net.dv8tion.jda.api.entities.Member#hasPermission(GuildChannel, net.dv8tion.jda.api.Permission...)
 guild.getSelfMember().hasPermission(channel, Permission.MESSAGE_WRITE)}.

 &lt;p&gt;
 For {@link net.dv8tion.jda.api.requests.ErrorResponse} information, refer
 to {@link #sendMessage(Message)}.
format: The string that should be formatted, if this is {@code null} or
          empty the content of the Message would be empty and cause a
          builder exception.
args: The arguments for your format
Return type: @return:{@link MessageAction MessageAction} &lt;br&gt;
         The newly created Message after it has been sent to Discord.</comment>
            <returntype>net.dv8tion.jda.api.requests.restaction.MessageCreateAction</returntype>
            <parameter>
                <name>format</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>args</name>
                <type>java.lang.Object[]</type>
            </parameter>
        </method>
        <method>
            <name>pinMessageById</name>
            <comment>Used to pin a message. Pinned messages are retrievable via
 {@link #retrievePinnedMessages()}.

 &lt;p&gt;
 The following {@link net.dv8tion.jda.api.requests.ErrorResponse
 ErrorResponses} are possible:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 The request was attempted after the account lost access to the
 {@link net.dv8tion.jda.api.entities.Guild Guild} typically due to being
 kicked or removed, or after
 {@link net.dv8tion.jda.api.Permission#MESSAGE_READ Permission.MESSAGE_READ}
 was revoked in the {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel}&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS
 MISSING_PERMISSIONS} &lt;br&gt;
 The request was attempted after the account lost
 {@link net.dv8tion.jda.api.Permission#MESSAGE_MANAGE
 Permission.MESSAGE_MANAGE} in the
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel}.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE
 UNKNOWN_MESSAGE} &lt;br&gt;
 The provided {@code messageId} is unknown in this MessageChannel, either
 due to the id being invalid, or the message it referred to has already been
 deleted.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 The request was attempted after the channel was deleted.&lt;/li&gt;
 &lt;/ul&gt;
messageId: The message to pin.
Return type: @return:{@link net.dv8tion.jda.api.requests.RestAction RestAction}</comment>
            <returntype>net.dv8tion.jda.api.requests.RestAction</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>unpinMessageById</name>
            <comment>Used to unpin a message. Pinned messages are retrievable via
 {@link #retrievePinnedMessages()}.

 &lt;p&gt;
 The following {@link net.dv8tion.jda.api.requests.ErrorResponse
 ErrorResponses} are possible:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 The request was attempted after the account lost access to the
 {@link net.dv8tion.jda.api.entities.Guild Guild} typically due to being
 kicked or removed, or after
 {@link net.dv8tion.jda.api.Permission#MESSAGE_READ Permission.MESSAGE_READ}
 was revoked in the {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel}&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS
 MISSING_PERMISSIONS} &lt;br&gt;
 The request was attempted after the account lost
 {@link net.dv8tion.jda.api.Permission#MESSAGE_MANAGE
 Permission.MESSAGE_MANAGE} in the
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel}.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE
 UNKNOWN_MESSAGE} &lt;br&gt;
 The provided {@code messageId} is unknown in this MessageChannel, either
 due to the id being invalid, or the message it referred to has already been
 deleted.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 The request was attempted after the channel was deleted.&lt;/li&gt;
 &lt;/ul&gt;
messageId: The message to unpin.
Return type: @return:{@link net.dv8tion.jda.api.requests.RestAction RestAction}</comment>
            <returntype>net.dv8tion.jda.api.requests.RestAction</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>purgeMessages3</name>
            <comment>Convenience method to delete messages in the most efficient way available.
 &lt;br&gt;
 This combines both {@link TextChannel#deleteMessagesByIds(Collection)} as
 well as {@link Message#delete()} to delete all messages provided. No checks
 will be done to prevent failures, use
 {@link java.util.concurrent.CompletionStage#exceptionally(Function)} to
 handle failures.

 &lt;p&gt;
 For possible ErrorResponses see {@link #purgeMessagesById(long...)}.
messages: The messages to delete
Return type: @return:List of futures representing all deletion tasks</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>messages</name>
                <type>net.dv8tion.jda.api.entities.Message[]</type>
            </parameter>
        </method>
        <method>
            <name>purgeMessages4</name>
            <comment>Convenience method to delete messages in the most efficient way available.
 &lt;br&gt;
 This combines both {@link TextChannel#deleteMessagesByIds(Collection)} as
 well as {@link Message#delete()} to delete all messages provided. No checks
 will be done to prevent failures, use
 {@link java.util.concurrent.CompletionStage#exceptionally(Function)} to
 handle failures.

 &lt;p&gt;
 For possible ErrorResponses see {@link #purgeMessagesById(long...)}.
messages: The messages to delete
Return type: @return:List of futures representing all deletion tasks</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>messages</name>
                <type>java.util.List</type>
            </parameter>
        </method>
        <method>
            <name>removeReactionById</name>
            <comment>Attempts to remove the reaction from a message represented by the specified
 {@code messageId} in this MessageChannel.

 &lt;p&gt;
 The unicode provided has to be a unicode representation of the emoji that
 is supposed to be represented by the Reaction. &lt;br&gt;
 To retrieve the characters needed you can use an api or the official
 discord client by escaping the emoji (\:emoji-name:) and copying the
 resulting emoji from the sent message.

 &lt;p&gt;
 This method encodes the provided unicode for you. &lt;b&gt;Do not encode the
 emoji before providing the unicode.&lt;/b&gt;

 &lt;p&gt;
 The following {@link net.dv8tion.jda.api.requests.ErrorResponse
 ErrorResponses} are possible:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 The request was attempted after the account lost access to the
 {@link net.dv8tion.jda.api.entities.Guild Guild} typically due to being
 kicked or removed, or after
 {@link net.dv8tion.jda.api.Permission#MESSAGE_READ Permission.MESSAGE_READ}
 was revoked in the {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel} &lt;br&gt;
 Also can happen if the account lost the
 {@link net.dv8tion.jda.api.Permission#MESSAGE_HISTORY
 Permission.MESSAGE_HISTORY}&lt;/li&gt;


 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS
 MISSING_PERMISSIONS} &lt;br&gt;
 The request was attempted after the account lost
 {@link net.dv8tion.jda.api.Permission#MESSAGE_ADD_REACTION
 Permission.MESSAGE_ADD_REACTION} in the
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel}.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_EMOJI} &lt;br&gt;
 The provided unicode character does not refer to a known emoji unicode
 character. &lt;br&gt;
 Proper unicode characters for emojis can be found at
 &lt;a href="http://unicode.org/emoji/charts/full-emoji-list.html" target=
 "_blank"&gt;http://unicode.org/emoji/charts/full-emoji-list.html&lt;/a&gt;&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE
 UNKNOWN_MESSAGE} &lt;br&gt;
 The provided {@code messageId} is unknown in this MessageChannel, either
 due to the id being invalid, or the message it referred to has already been
 deleted.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 The request was attempted after the channel was deleted.&lt;/li&gt;
 &lt;/ul&gt;
messageId: The messageId to remove the reaction from
unicode: The unicode characters of the emoji
Return type: @return:{@link net.dv8tion.jda.api.requests.RestAction}</comment>
            <returntype>net.dv8tion.jda.api.requests.RestAction</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>unicode</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryBefore</name>
            <comment>Uses the provided {@code id} of a message as a marker and retrieves
 messages sent before the marker ID. The {@code limit} determines the amount
 of messages retrieved near the marker.

 &lt;p&gt;
 &lt;b&gt;Examples:&lt;/b&gt; &lt;br&gt;
 Retrieve 100 messages from the middle of history. {@literal &gt;}100 message
 exist in history and the marker is {@literal &gt;}50 messages from the edge of
 history. &lt;br&gt;
 {@code getHistoryBefore(messageId, 100)} - This will retrieve 100 messages
 from history sent before the marker.

 &lt;p&gt;
 The following {@link net.dv8tion.jda.api.requests.ErrorResponse
 ErrorResponses} are possible:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 The request was attempted after the account lost access to the
 {@link net.dv8tion.jda.api.entities.Guild Guild} typically due to being
 kicked or removed, or after
 {@link net.dv8tion.jda.api.Permission#MESSAGE_READ Permission.MESSAGE_READ}
 was revoked in the {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel}&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS
 MISSING_PERMISSIONS} &lt;br&gt;
 The request was attempted after the account lost
 {@link net.dv8tion.jda.api.Permission#MESSAGE_HISTORY
 Permission.MESSAGE_HISTORY} in the
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel}.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE
 UNKNOWN_MESSAGE} &lt;br&gt;
 The provided {@code messageId} is unknown in this MessageChannel, either
 due to the id being invalid, or the message it referred to has already been
 deleted, thus could not be used as a marker.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 The request was attempted after the channel was deleted.&lt;/li&gt;
 &lt;/ul&gt;
messageId: The id of the message that will act as a marker.
limit: The amount of messages to be retrieved after the marker. Minimum:
          1, Max: 100.
Return type: @return:{@link net.dv8tion.jda.api.entities.MessageHistory.MessageRetrieveAction
         MessageHistory.MessageRetrieveAction} &lt;br&gt;
         Provides a {@link net.dv8tion.jda.api.entities.MessageHistory
         MessageHistory} object with messages before the provided message
         loaded into it.</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>sendMessage</name>
            <comment>Sends a specified {@link net.dv8tion.jda.api.entities.Message Message} to
 this channel. &lt;br&gt;
 This will fail if this channel is an instance of
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel} and the
 currently logged in account does not have permissions to send a message to
 this channel. &lt;br&gt;
 To determine if you are able to send a message in a
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel} use
 {@link net.dv8tion.jda.api.entities.Member#hasPermission(GuildChannel, net.dv8tion.jda.api.Permission...)
 guild.getSelfMember().hasPermission(channel, Permission.MESSAGE_WRITE)}.

 &lt;p&gt;
 The following {@link net.dv8tion.jda.api.requests.ErrorResponse
 ErrorResponses} are possible:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 The request was attempted after the account lost access to the
 {@link net.dv8tion.jda.api.entities.Guild Guild} typically due to being
 kicked or removed, or after
 {@link net.dv8tion.jda.api.Permission#MESSAGE_READ Permission.MESSAGE_READ}
 was revoked in the {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel}&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS
 MISSING_PERMISSIONS} &lt;br&gt;
 The send request was attempted after the account lost
 {@link net.dv8tion.jda.api.Permission#MESSAGE_WRITE
 Permission.MESSAGE_WRITE} in the
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel}.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNAUTHORIZED
 UNAUTHORIZED} &lt;br&gt;
 If this is a {@link net.dv8tion.jda.api.entities.PrivateChannel
 PrivateChannel} and the recipient User blocked you&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#CANNOT_SEND_TO_USER
 CANNOT_SEND_TO_USER} &lt;br&gt;
 If this is a {@link net.dv8tion.jda.api.entities.PrivateChannel
 PrivateChannel} and the currently logged in account does not share any
 Guilds with the recipient User&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 The send request was attempted after the channel was deleted.&lt;/li&gt;
 &lt;/ul&gt;
msg: the {@link net.dv8tion.jda.api.entities.Message Message} to send
Return type: @return:{@link MessageAction MessageAction} &lt;br&gt;
         The newly created Message after it has been sent to Discord.</comment>
            <returntype>net.dv8tion.jda.api.requests.restaction.MessageCreateAction</returntype>
            <parameter>
                <name>msg</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryAfter2</name>
            <comment>Uses the provided message as a marker and retrieves messages sent after the
 marker. The {@code limit} determines the amount of messages retrieved near
 the marker.

 &lt;p&gt;
 &lt;b&gt;Examples:&lt;/b&gt; &lt;br&gt;
 Retrieve 100 messages from the middle of history. {@literal &gt;}100 message
 exist in history and the marker is {@literal &gt;}50 messages from the edge of
 history. &lt;br&gt;
 {@code getHistoryAfter(message, 100)} - This will retrieve 100 messages
 from history sent after the marker.

 &lt;p&gt;
 The following {@link net.dv8tion.jda.api.requests.ErrorResponse
 ErrorResponses} are possible:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 The request was attempted after the account lost access to the
 {@link net.dv8tion.jda.api.entities.Guild Guild} typically due to being
 kicked or removed, or after
 {@link net.dv8tion.jda.api.Permission#MESSAGE_READ Permission.MESSAGE_READ}
 was revoked in the {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel}&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS
 MISSING_PERMISSIONS} &lt;br&gt;
 The request was attempted after the account lost
 {@link net.dv8tion.jda.api.Permission#MESSAGE_HISTORY
 Permission.MESSAGE_HISTORY} in the
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel}.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE
 UNKNOWN_MESSAGE} &lt;br&gt;
 The provided {@code messageId} is unknown in this MessageChannel, either
 due to the id being invalid, or the message it referred to has already been
 deleted, thus could not be used as a marker.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 The request was attempted after the channel was deleted.&lt;/li&gt;
 &lt;/ul&gt;
message: The message that will act as a marker.
limit: The amount of messages to be retrieved after the marker. Minimum:
          1, Max: 100.
Return type: @return:{@link net.dv8tion.jda.api.entities.MessageHistory.MessageRetrieveAction
         MessageHistory.MessageRetrieveAction} &lt;br&gt;
         Provides a {@link net.dv8tion.jda.api.entities.MessageHistory
         MessageHistory} object with messages after the provided message
         loaded into it.</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory.MessageRetrieveAction</returntype>
            <parameter>
                <name>message</name>
                <type>net.dv8tion.jda.api.entities.Message</type>
            </parameter>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryAround2</name>
            <comment>Uses the provided {@link net.dv8tion.jda.api.entities.Message Message} as a
 marker and retrieves messages around the marker. The {@code limit}
 determines the amount of messages retrieved near the marker. Discord will
 attempt to evenly split the limit between before and after the marker,
 however in the case that the marker is set near the beginning or near the
 end of the channel's history the amount of messages on each side of the
 marker may be different, and their total count may not equal the provided
 {@code limit}.

 &lt;p&gt;
 &lt;b&gt;Examples:&lt;/b&gt; &lt;br&gt;
 Retrieve 100 messages from the middle of history. {@literal &gt;}100 message
 exist in history and the marker is {@literal &gt;}50 messages from the edge of
 history. &lt;br&gt;
 {@code getHistoryAround(message, 100)} - This will retrieve 100 messages
 from history, 50 before the marker and 50 after the marker.

 &lt;p&gt;
 Retrieve 10 messages near the end of history. Provided message is the 3rd
 most recent message. &lt;br&gt;
 {@code getHistoryAround(message, 10)} - This will retrieve 10 messages from
 history, 8 before the marker and 2 after the marker.

 &lt;p&gt;
 The following {@link net.dv8tion.jda.api.requests.ErrorResponse
 ErrorResponses} are possible:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 The request was attempted after the account lost access to the
 {@link net.dv8tion.jda.api.entities.Guild Guild} typically due to being
 kicked or removed, or after
 {@link net.dv8tion.jda.api.Permission#MESSAGE_READ Permission.MESSAGE_READ}
 was revoked in the {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel}&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS
 MISSING_PERMISSIONS} &lt;br&gt;
 The request was attempted after the account lost
 {@link net.dv8tion.jda.api.Permission#MESSAGE_HISTORY
 Permission.MESSAGE_HISTORY} in the
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel}.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE
 UNKNOWN_MESSAGE} &lt;br&gt;
 The provided {@code message} has already been deleted, thus could not be
 used as a marker.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 The request was attempted after the channel was deleted.&lt;/li&gt;
 &lt;/ul&gt;
message: The {@link net.dv8tion.jda.api.entities.Message Message} that will
          act as a marker. The provided Message must be from this
          MessageChannel.
limit: The amount of messages to be retrieved around the marker. Minimum:
          1, Max: 100.
Return type: @return:{@link net.dv8tion.jda.api.entities.MessageHistory.MessageRetrieveAction
         MessageHistory.MessageRetrieveAction} &lt;br&gt;
         Provides a {@link net.dv8tion.jda.api.entities.MessageHistory
         MessageHistory} object with messages around the provided message
         loaded into it.</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory.MessageRetrieveAction</returntype>
            <parameter>
                <name>message</name>
                <type>net.dv8tion.jda.api.entities.Message</type>
            </parameter>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>retrieveMessage4ref</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.Message</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>addReactionById2</name>
            <comment>Attempts to react to a message represented by the specified
 {@code messageId} in this MessageChannel.

 &lt;p&gt;
 The unicode provided has to be a unicode representation of the emoji that
 is supposed to be used for the Reaction. &lt;br&gt;
 To retrieve the characters needed you can use an api or the official
 discord client by escaping the emoji (\:emoji-name:) and copying the
 resulting emoji from the sent message.

 &lt;p&gt;
 This method encodes the provided unicode for you. &lt;b&gt;Do not encode the
 emoji before providing the unicode.&lt;/b&gt;

 &lt;h2&gt;Examples&lt;/h2&gt; &lt;code&gt;
 // custom&lt;br&gt;
 channel.addReactionById(messageId, "minn:245267426227388416").queue();&lt;br&gt;
 // unicode escape&lt;br&gt;
 channel.addReactionById(messageId, "&amp;#92;uD83D&amp;#92;uDE02").queue();&lt;br&gt;
 // codepoint notation&lt;br&gt;
 channel.addReactionById(messageId, "U+1F602").queue();
 &lt;/code&gt;

 &lt;p&gt;
 The following {@link net.dv8tion.jda.api.requests.ErrorResponse
 ErrorResponses} are possible:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 The request was attempted after the account lost access to the
 {@link net.dv8tion.jda.api.entities.Guild Guild} typically due to being
 kicked or removed, or after
 {@link net.dv8tion.jda.api.Permission#MESSAGE_READ Permission.MESSAGE_READ}
 was revoked in the {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel} &lt;br&gt;
 Also can happen if the account lost the
 {@link net.dv8tion.jda.api.Permission#MESSAGE_HISTORY
 Permission.MESSAGE_HISTORY}&lt;/li&gt;


 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS
 MISSING_PERMISSIONS} &lt;br&gt;
 The request was attempted after the account lost
 {@link net.dv8tion.jda.api.Permission#MESSAGE_ADD_REACTION
 Permission.MESSAGE_ADD_REACTION} in the
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel}.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_EMOJI
 UNKNOWN_EMOJI} &lt;br&gt;
 The provided unicode character does not refer to a known emoji unicode
 character. &lt;br&gt;
 Proper unicode characters for emojis can be found at
 &lt;a href="http://unicode.org/emoji/charts/full-emoji-list.html" target=
 "_blank"&gt;http://unicode.org/emoji/charts/full-emoji-list.html&lt;/a&gt;&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE
 UNKNOWN_MESSAGE} &lt;br&gt;
 The provided {@code messageId} is unknown in this MessageChannel, either
 due to the id being invalid, or the message it referred to has already been
 deleted.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 The request was attempted after the channel was deleted.&lt;/li&gt;
 &lt;/ul&gt;
messageId: The messageId to attach the reaction to
unicode: The unicode characters to react with
Return type: @return:{@link net.dv8tion.jda.api.requests.RestAction}</comment>
            <returntype>net.dv8tion.jda.api.requests.RestAction</returntype>
            <parameter>
                <name>messageId</name>
                <type>long</type>
            </parameter>
            <parameter>
                <name>unicode</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>addReactionById3</name>
            <comment>Attempts to react to a message represented by the specified
 {@code messageId} in this MessageChannel.

 &lt;p&gt;
 &lt;b&gt;An Emote is not the same as an emoji!&lt;/b&gt; &lt;br&gt;
 Emotes are custom guild-specific images unlike global unicode emojis!

 &lt;p&gt;
 &lt;b&gt;&lt;u&gt;Unicode emojis are not included as
 {@link net.dv8tion.jda.api.entities.Emote Emote}!&lt;/u&gt;&lt;/b&gt;

 &lt;p&gt;
 The following {@link net.dv8tion.jda.api.requests.ErrorResponse
 ErrorResponses} are possible:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 The request was attempted after the account lost access to the
 {@link net.dv8tion.jda.api.entities.Guild Guild} typically due to being
 kicked or removed, or after
 {@link net.dv8tion.jda.api.Permission#MESSAGE_READ Permission.MESSAGE_READ}
 was revoked in the {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel} &lt;br&gt;
 Also can happen if the account lost the
 {@link net.dv8tion.jda.api.Permission#MESSAGE_HISTORY
 Permission.MESSAGE_HISTORY}&lt;/li&gt;


 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS
 MISSING_PERMISSIONS} &lt;br&gt;
 The request was attempted after the account lost
 {@link net.dv8tion.jda.api.Permission#MESSAGE_ADD_REACTION
 Permission.MESSAGE_ADD_REACTION} in the
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel}.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_EMOJI} &lt;br&gt;
 The provided unicode character does not refer to a known emoji unicode
 character. &lt;br&gt;
 Proper unicode characters for emojis can be found at
 &lt;a href="http://unicode.org/emoji/charts/full-emoji-list.html" target=
 "_blank"&gt;http://unicode.org/emoji/charts/full-emoji-list.html&lt;/a&gt;&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE
 UNKNOWN_MESSAGE} &lt;br&gt;
 The provided {@code messageId} is unknown in this MessageChannel, either
 due to the id being invalid, or the message it referred to has already been
 deleted.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 The request was attempted after the channel was deleted.&lt;/li&gt;
 &lt;/ul&gt;
messageId: The messageId to attach the reaction to
emote: The not-null {@link net.dv8tion.jda.api.entities.Emote} to react
          with
Return type: @return:{@link net.dv8tion.jda.api.requests.RestAction}</comment>
            <returntype>net.dv8tion.jda.api.requests.RestAction</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>emote</name>
                <type>net.dv8tion.jda.api.entities.emoji.Emoji</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryAround</name>
            <comment>Uses the provided {@code id} of a message as a marker and retrieves
 messages sent around the marker. The {@code limit} determines the amount of
 messages retrieved near the marker. Discord will attempt to evenly split
 the limit between before and after the marker, however in the case that the
 marker is set near the beginning or near the end of the channel's history
 the amount of messages on each side of the marker may be different, and
 their total count may not equal the provided {@code limit}.

 &lt;p&gt;
 &lt;b&gt;Examples:&lt;/b&gt; &lt;br&gt;
 Retrieve 100 messages from the middle of history. {@literal &gt;}100 message
 exist in history and the marker is {@literal &gt;}50 messages from the edge of
 history. &lt;br&gt;
 {@code getHistoryAround(messageId, 100)} - This will retrieve 100 messages
 from history, 50 before the marker and 50 after the marker.

 &lt;p&gt;
 Retrieve 10 messages near the end of history. Provided id is for a message
 that is the 3rd most recent message. &lt;br&gt;
 {@code getHistoryAround(messageId, 10)} - This will retrieve 10 messages
 from history, 8 before the marker and 2 after the marker.

 &lt;p&gt;
 The following {@link net.dv8tion.jda.api.requests.ErrorResponse
 ErrorResponses} are possible:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 The request was attempted after the account lost access to the
 {@link net.dv8tion.jda.api.entities.Guild Guild} typically due to being
 kicked or removed, or after
 {@link net.dv8tion.jda.api.Permission#MESSAGE_READ Permission.MESSAGE_READ}
 was revoked in the {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel}&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS
 MISSING_PERMISSIONS} &lt;br&gt;
 The request was attempted after the account lost
 {@link net.dv8tion.jda.api.Permission#MESSAGE_HISTORY
 Permission.MESSAGE_HISTORY} in the
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel}.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE
 UNKNOWN_MESSAGE} &lt;br&gt;
 The provided {@code messageId} is unknown in this MessageChannel, either
 due to the id being invalid, or the message it referred to has already been
 deleted, thus could not be used as a marker.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 The request was attempted after the channel was deleted.&lt;/li&gt;
 &lt;/ul&gt;
messageId: The id of the message that will act as a marker.
limit: The amount of messages to be retrieved around the marker. Minimum:
          1, Max: 100.
Return type: @return:{@link net.dv8tion.jda.api.entities.MessageHistory.MessageRetrieveAction
         MessageHistory.MessageRetrieveAction} &lt;br&gt;
         Provides a {@link net.dv8tion.jda.api.entities.MessageHistory
         MessageHistory} object with messages around the provided message
         loaded into it.</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory.MessageRetrieveAction</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>sendFile</name>
            <comment>Uploads a file to the Discord servers and sends it to this
 MessageChannel.</comment>
            <returntype>net.dv8tion.jda.api.requests.restaction.MessageCreateAction</returntype>
            <parameter>
                <name>data</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>fileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>retrieveMessageById</name>
            <comment>Attempts to get a {@link net.dv8tion.jda.api.entities.Message Message} from
 the Discord's servers that has the same id as the id provided. &lt;br&gt;
 Note: when retrieving a Message, you must retrieve it from the channel it
 was sent in!

 &lt;p&gt;
 &lt;b&gt;Only bots can use this endpoint! A similar behaviour can be simulated
 using {@link #getHistoryAround(long, int)}!&lt;/b&gt;

 &lt;p&gt;
 The following {@link net.dv8tion.jda.api.requests.ErrorResponse
 ErrorResponses} are possible:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 The request was attempted after the account lost access to the
 {@link net.dv8tion.jda.api.entities.Guild Guild} typically due to being
 kicked or removed, or after
 {@link net.dv8tion.jda.api.Permission#MESSAGE_READ Permission.MESSAGE_READ}
 was revoked in the {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel}&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS
 MISSING_PERMISSIONS} &lt;br&gt;
 The request was attempted after the account lost
 {@link net.dv8tion.jda.api.Permission#MESSAGE_HISTORY
 Permission.MESSAGE_HISTORY} in the
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel}.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE
 UNKNOWN_MESSAGE} &lt;br&gt;
 The provided {@code id} does not refer to a message sent in this channel or
 the message has already been deleted.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 The request was attempted after the channel was deleted.&lt;/li&gt;
 &lt;/ul&gt;
messageId: The id of the sought after Message
Return type: @return:{@link net.dv8tion.jda.api.requests.RestAction RestAction} - Type:
         Message &lt;br&gt;
         The Message defined by the provided id.</comment>
            <returntype>net.dv8tion.jda.api.entities.Message</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>editMessageFormatById</name>
            <comment>Attempts to edit a message by its id in this MessageChannel. &lt;br&gt;
 Shortcut for
 {@link net.dv8tion.jda.api.MessageBuilder#appendFormat(String, Object...)}.

 &lt;p&gt;
 The following {@link net.dv8tion.jda.api.requests.ErrorResponse
 ErrorResponses} are possible:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#INVALID_AUTHOR_EDIT
 INVALID_AUTHOR_EDIT} &lt;br&gt;
 Attempted to edit a message that was not sent by the currently logged in
 account. Discord does not allow editing of other users' Messages!&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 The request was attempted after the account lost access to the
 {@link net.dv8tion.jda.api.entities.Guild Guild} typically due to being
 kicked or removed, or after
 {@link net.dv8tion.jda.api.Permission#MESSAGE_READ Permission.MESSAGE_READ}
 was revoked in the {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel}&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE
 UNKNOWN_MESSAGE} &lt;br&gt;
 The provided {@code messageId} is unknown in this MessageChannel, either
 due to the id being invalid, or the message it referred to has already been
 deleted.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 The request was attempted after the channel was deleted.&lt;/li&gt;
 &lt;/ul&gt;
messageId: The id referencing the Message that should be edited
format: Format String used to generate new Content
args: The arguments which should be used to format the given format
          String
Return type: @return:{@link MessageAction MessageAction} &lt;br&gt;
         The modified Message after it has been sent to discord</comment>
            <returntype>net.dv8tion.jda.api.requests.restaction.MessageEditAction</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>format</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>args</name>
                <type>java.lang.Object[]</type>
            </parameter>
        </method>
        <method>
            <name>addReactionById</name>
            <comment>Attempts to react to a message represented by the specified
 {@code messageId} in this MessageChannel.

 &lt;p&gt;
 The unicode provided has to be a unicode representation of the emoji that
 is supposed to be used for the Reaction. &lt;br&gt;
 To retrieve the characters needed you can use an api or the official
 discord client by escaping the emoji (\:emoji-name:) and copying the
 resulting emoji from the sent message.

 &lt;p&gt;
 This method encodes the provided unicode for you. &lt;b&gt;Do not encode the
 emoji before providing the unicode.&lt;/b&gt;

 &lt;h2&gt;Examples&lt;/h2&gt; &lt;code&gt;
 // custom&lt;br&gt;
 channel.addReactionById(messageId, "minn:245267426227388416").queue();&lt;br&gt;
 // unicode escape&lt;br&gt;
 channel.addReactionById(messageId, "&amp;#92;uD83D&amp;#92;uDE02").queue();&lt;br&gt;
 // codepoint notation&lt;br&gt;
 channel.addReactionById(messageId, "U+1F602").queue();
 &lt;/code&gt;

 &lt;p&gt;
 The following {@link net.dv8tion.jda.api.requests.ErrorResponse
 ErrorResponses} are possible:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 The request was attempted after the account lost access to the
 {@link net.dv8tion.jda.api.entities.Guild Guild} typically due to being
 kicked or removed, or after
 {@link net.dv8tion.jda.api.Permission#MESSAGE_READ Permission.MESSAGE_READ}
 was revoked in the {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel} &lt;br&gt;
 Also can happen if the account lost the
 {@link net.dv8tion.jda.api.Permission#MESSAGE_HISTORY
 Permission.MESSAGE_HISTORY}&lt;/li&gt;


 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS
 MISSING_PERMISSIONS} &lt;br&gt;
 The request was attempted after the account lost
 {@link net.dv8tion.jda.api.Permission#MESSAGE_ADD_REACTION
 Permission.MESSAGE_ADD_REACTION} in the
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel}.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_EMOJI
 UNKNOWN_EMOJI} &lt;br&gt;
 The provided unicode character does not refer to a known emoji unicode
 character. &lt;br&gt;
 Proper unicode characters for emojis can be found at
 &lt;a href="http://unicode.org/emoji/charts/full-emoji-list.html" target=
 "_blank"&gt;http://unicode.org/emoji/charts/full-emoji-list.html&lt;/a&gt;&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE
 UNKNOWN_MESSAGE} &lt;br&gt;
 The provided {@code messageId} is unknown in this MessageChannel, either
 due to the id being invalid, or the message it referred to has already been
 deleted.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 The request was attempted after the channel was deleted.&lt;/li&gt;
 &lt;/ul&gt;
messageId: The messageId to attach the reaction to
unicode: The unicode characters to react with
Return type: @return:{@link net.dv8tion.jda.api.requests.RestAction}</comment>
            <returntype>net.dv8tion.jda.api.requests.RestAction</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>unicode</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryFromBeginning</name>
            <comment>Retrieves messages from the beginning of this
 {@link net.dv8tion.jda.api.entities.MessageChannel MessageChannel}. The
 {@code limit} determines the amount of messages being retrieved.

 &lt;h2&gt;Example&lt;/h2&gt;
 
 &lt;pre&gt;
 &lt;code&gt;
 public void resendFirstMessage(MessageChannel channel)
 {
     channel.getHistoryFromBeginning(1).queue(history {@literal -&gt;}
     {
         if (!history.isEmpty())
         {
             Message firstMsg = history.getRetrievedHistory().get(0);
             channel.sendMessage(firstMsg).queue();
         }
         else
             channel.sendMessage("No history for this channel!").queue();
     });
 }
 &lt;/code&gt;
 &lt;/pre&gt;

 &lt;p&gt;
 The following {@link net.dv8tion.jda.api.requests.ErrorResponse
 ErrorResponses} are possible:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 The request was attempted after the account lost access to the
 {@link net.dv8tion.jda.api.entities.Guild Guild} typically due to being
 kicked or removed, or after
 {@link net.dv8tion.jda.api.Permission#MESSAGE_READ Permission.MESSAGE_READ}
 was revoked in the {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel}&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS
 MISSING_PERMISSIONS} &lt;br&gt;
 The request was attempted after the account lost
 {@link net.dv8tion.jda.api.Permission#MESSAGE_HISTORY
 Permission.MESSAGE_HISTORY} in the
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel}.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 The request was attempted after the channel was deleted.&lt;/li&gt;
 &lt;/ul&gt;
limit: The amount of messages to be retrieved. Minimum: 1, Max: 100.
Return type: @return:{@link net.dv8tion.jda.api.entities.MessageHistory.MessageRetrieveAction
         MessageHistory.MessageRetrieveAction} &lt;br&gt;
         Provides a {@link net.dv8tion.jda.api.entities.MessageHistory
         MessageHistory} object with with the first messages of this channel
         loaded into it. &lt;br&gt;
         &lt;b&gt;Note: The messages are ordered from the most recent to
         oldest!&lt;/b&gt;</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory</returntype>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryBefore2</name>
            <comment>Uses the provided message as a marker and retrieves messages sent before
 the marker. The {@code limit} determines the amount of messages retrieved
 near the marker.

 &lt;p&gt;
 &lt;b&gt;Examples:&lt;/b&gt; &lt;br&gt;
 Retrieve 100 messages from the middle of history. {@literal &gt;}100 message
 exist in history and the marker is {@literal &gt;}50 messages from the edge of
 history. &lt;br&gt;
 {@code getHistoryAfter(message, 100)} - This will retrieve 100 messages
 from history sent before the marker.

 &lt;p&gt;
 The following {@link net.dv8tion.jda.api.requests.ErrorResponse
 ErrorResponses} are possible:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 The request was attempted after the account lost access to the
 {@link net.dv8tion.jda.api.entities.Guild Guild} typically due to being
 kicked or removed, or after
 {@link net.dv8tion.jda.api.Permission#MESSAGE_READ Permission.MESSAGE_READ}
 was revoked in the {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel}&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS
 MISSING_PERMISSIONS} &lt;br&gt;
 The request was attempted after the account lost
 {@link net.dv8tion.jda.api.Permission#MESSAGE_HISTORY
 Permission.MESSAGE_HISTORY} in the
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel}.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE
 UNKNOWN_MESSAGE} &lt;br&gt;
 The provided {@code messageId} is unknown in this MessageChannel, either
 due to the id being invalid, or the message it referred to has already been
 deleted, thus could not be used as a marker.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 The request was attempted after the channel was deleted.&lt;/li&gt;
 &lt;/ul&gt;
message: The message that will act as a marker.
limit: The amount of messages to be retrieved after the marker. Minimum:
          1, Max: 100.
Return type: @return:{@link net.dv8tion.jda.api.entities.MessageHistory.MessageRetrieveAction
         MessageHistory.MessageRetrieveAction} &lt;br&gt;
         Provides a {@link net.dv8tion.jda.api.entities.MessageHistory
         MessageHistory} object with messages before the provided message
         loaded into it.</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory.MessageRetrieveAction</returntype>
            <parameter>
                <name>message</name>
                <type>net.dv8tion.jda.api.entities.Message</type>
            </parameter>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SetEventListener</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>deleteMessageById2</name>
            <comment>Attempts to delete a {@link net.dv8tion.jda.api.entities.Message Message}
 from the Discord servers that has the same id as the id provided.

 &lt;p&gt;
 The following {@link net.dv8tion.jda.api.requests.ErrorResponse
 ErrorResponses} are possible:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 The request was attempted after the account lost access to the
 {@link net.dv8tion.jda.api.entities.Guild Guild} typically due to being
 kicked or removed, or after
 {@link net.dv8tion.jda.api.Permission#MESSAGE_READ Permission.MESSAGE_READ}
 was revoked in the {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel}&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS
 MISSING_PERMISSIONS} &lt;br&gt;
 The request attempted to delete a Message in a
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel} that was not
 sent by the currently logged in account.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#INVALID_DM_ACTION
 INVALID_DM_ACTION} &lt;br&gt;
 Attempted to delete a Message in a
 {@link net.dv8tion.jda.api.entities.PrivateChannel PrivateChannel} that was
 not sent by the currently logged in account.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE
 UNKNOWN_MESSAGE} &lt;br&gt;
 The provided {@code id} does not refer to a message sent in this channel or
 the message has already been deleted.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 The request was attempted after the channel was deleted.&lt;/li&gt;
 &lt;/ul&gt;
messageId: The id of the Message that should be deleted
Return type: @return:{@link net.dv8tion.jda.api.requests.RestAction RestAction} - Type:
         Void</comment>
            <returntype>net.dv8tion.jda.api.requests.restaction.AuditableRestAction</returntype>
            <parameter>
                <name>messageId</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>sendMessagewithembed</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>msg</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
            <parameter>
                <name>rows</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>sendTyping</name>
            <comment>Sends the typing status to discord. This is what is used to make the
 message "X is typing..." appear. &lt;br&gt;
 The typing status only lasts for 10 seconds or until a message is sent.
 &lt;br&gt;
 So if you wish to show continuous typing you will need to call this method
 once every 10 seconds.

 &lt;p&gt;
 The official discord client sends this every 5 seconds even though the
 typing status lasts 10.

 &lt;p&gt;
 The following {@link net.dv8tion.jda.api.requests.ErrorResponse
 ErrorResponses} are possible:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 The request was attempted after the account lost access to the
 {@link net.dv8tion.jda.api.entities.Guild Guild} typically due to being
 kicked or removed, or after
 {@link net.dv8tion.jda.api.Permission#MESSAGE_READ Permission.MESSAGE_READ}
 or {@link net.dv8tion.jda.api.Permission#MESSAGE_WRITE
 Permission.MESSAGE_WRITE} was revoked in the
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel}&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 The request was attempted after the channel was deleted.&lt;/li&gt;
 &lt;/ul&gt;
Return type: @return:{@link net.dv8tion.jda.api.requests.RestAction RestAction} - Type:
         Void</comment>
            <returntype>net.dv8tion.jda.api.requests.RestAction</returntype>
        </method>
        <method>
            <name>sendMessageEmbeds</name>
            <comment>Sends a specified {@link net.dv8tion.jda.api.entities.MessageEmbed
 MessageEmbed} as a {@link net.dv8tion.jda.api.entities.Message Message} to
 this channel.
 This will fail if this channel is an instance of
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel} and the
 currently logged in account does not have permissions to send a message to
 this channel.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>rows</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>sendMessageObject</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>msg</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
        </method>
        <property>
            <name>Type</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.ChannelType</returntype>
            <comment>The {@link net.dv8tion.jda.api.entities.ChannelType ChannelType} of this
 MessageChannel.</comment>
        </property>
        <property>
            <name>IterableHistory</name>
            <returntype>net.dv8tion.jda.api.requests.restaction.pagination.MessagePaginationAction</returntype>
            <comment>A {@link PaginationAction PaginationAction} implementation that allows to
 {@link Iterable iterate} over recent
 {@link net.dv8tion.jda.api.entities.Message Messages} of this
 MessageChannel. &lt;br&gt;
 This is &lt;b&gt;not&lt;/b&gt; a cache for received messages and it can only view
 messages that were sent before. This iterates chronologically backwards
 (from present to past).

 &lt;p&gt;
 &lt;b&gt;&lt;u&gt;It is recommended not to use this in an enhanced for-loop without end
 conditions as it might cause memory overflows in channels with a long
 message history.&lt;/u&gt;&lt;/b&gt;

 &lt;h1&gt;Examples&lt;/h1&gt;
 
 &lt;pre&gt;
 {@code
 public CompletableFuture&lt;List&lt;Message&gt;&gt; getMessagesByUser(MessageChannel channel, User user) {
     return channel.getIterableHistory()
         .takeAsync(1000) // Collect 1000 messages
         .thenApply(list -&gt;
             list.stream()
                 .filter(m -&gt; m.getAuthor().equals(user)) // Filter messages by author
                 .collect(Collectors.toList())
         );
 }
 }
 &lt;/pre&gt;</comment>
        </property>
        <property>
            <name>JDA</name>
            <returntype>net.dv8tion.jda.api.JDA</returntype>
            <comment>Returns the {@link net.dv8tion.jda.api.JDA JDA} instance of this
 MessageChannel</comment>
        </property>
        <property>
            <name>LatestMessageId</name>
            <returntype>java.lang.String</returntype>
            <comment>The id for the most recent message sent in this current MessageChannel.
 &lt;br&gt;
 This should only be used if {@link #hasLatestMessage()} returns
 {@code true}!

 &lt;p&gt;
 This value is updated on each
 {@link net.dv8tion.jda.api.events.message.MessageReceivedEvent
 MessageReceivedEvent} and &lt;u&gt;&lt;b&gt;will be reset to {@code null} if the
 message associated with this ID gets deleted&lt;/b&gt;&lt;/u&gt;</comment>
        </property>
        <property>
            <name>LatestMessageIdLong</name>
            <returntype>long</returntype>
            <comment>The id for the most recent message sent in this current MessageChannel.
 &lt;br&gt;
 This should only be used if {@link #hasLatestMessage()} returns
 {@code true}!

 &lt;p&gt;
 This value is updated on each
 {@link net.dv8tion.jda.api.events.message.MessageReceivedEvent
 MessageReceivedEvent} and &lt;u&gt;&lt;b&gt;will be reset to {@code null} if the
 message associated with this ID gets deleted&lt;/b&gt;&lt;/u&gt;</comment>
        </property>
        <property>
            <name>Id</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>History</name>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory</returntype>
            <comment>Creates a new {@link net.dv8tion.jda.api.entities.MessageHistory
 MessageHistory} object for each call of this method. &lt;br&gt;
 MessageHistory is &lt;b&gt;NOT&lt;/b&gt; an internal message cache, but rather it
 queries the Discord servers for previously sent messages.</comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment>This method is a shortcut method to return the following information in the
 following situation: If the MessageChannel is instance of..
 &lt;ul&gt;
 &lt;li&gt;&lt;b&gt;TextChannel&lt;/b&gt; - Returns {@link TextChannel#getName()}&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;PrivateChannel&lt;/b&gt; Returns
 {@link PrivateChannel#getUser()}{@link net.dv8tion.jda.api.entities.User#getName()
 .getName()}&lt;/li&gt;
 &lt;/ul&gt;</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.channel.StageChannelwrapper</name>
        <shortname>StageChannel</shortname>
        <objectwrapper>net.dv8tion.jda.api.entities.channel.concrete.StageChannel</objectwrapper>
        <owner>process</owner>
        <method>
            <name>GetPermissionOverride</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.PermissionOverride</returntype>
            <parameter>
                <name>role</name>
                <type>net.dv8tion.jda.api.entities.Role</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>delete</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>Type</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.ChannelType</returntype>
            <comment>The {@link net.dv8tion.jda.api.entities.ChannelType ChannelType} of this
 MessageChannel.</comment>
        </property>
        <property>
            <name>JDA</name>
            <returntype>net.dv8tion.jda.api.JDA</returntype>
            <comment>Returns the {@link net.dv8tion.jda.api.JDA JDA} instance of this
 MessageChannel</comment>
        </property>
        <property>
            <name>Id</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Members</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment>This method is a shortcut method to return the following information in the
 following situation: If the MessageChannel is instance of..
 &lt;ul&gt;
 &lt;li&gt;&lt;b&gt;TextChannel&lt;/b&gt; - Returns {@link TextChannel#getName()}&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;PrivateChannel&lt;/b&gt; Returns
 {@link PrivateChannel#getUser()}{@link net.dv8tion.jda.api.entities.User#getName()
 .getName()}&lt;/li&gt;
 &lt;/ul&gt;</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.channel.TextChannelwrapper</name>
        <shortname>TextChannel</shortname>
        <objectwrapper>net.dv8tion.jda.api.entities.channel.concrete.TextChannel</objectwrapper>
        <owner>process</owner>
        <event>onMessage(msg As Message, msgID As String)</event>
        <event>onHistoryMessage(msg As Mesage, msgID As String, tag As String)</event>
        <event>onHistoryReady(tag As String, channel As Object, logchannel as Object)</event>
        <event>onBackupReady(tag As String, logchannel as Object)</event>
        <event>onThread(thchannel As ThreadChannel)</event>
        <method>
            <name>GetPermissionOverride</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.PermissionOverride</returntype>
            <parameter>
                <name>role</name>
                <type>net.dv8tion.jda.api.entities.Role</type>
            </parameter>
        </method>
        <method>
            <name>createCopy</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>newname</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>createWebhook</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.Webhook</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>deleteMessageById</name>
            <comment>Attempts to delete a Message from the Discord servers that has 
 the same id as the id provided.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GrantWriteRole</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.PermissionOverride</returntype>
            <parameter>
                <name>role</name>
                <type>net.dv8tion.jda.api.entities.Role</type>
            </parameter>
        </method>
        <method>
            <name>sendMessage2</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.Message</returntype>
            <parameter>
                <name>mcd</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
        </method>
        <method>
            <name>purgeMessagesById5</name>
            <comment>Convenience method to delete messages in the most efficient way available.
 &lt;br&gt;
 This combines both {@link TextChannel#deleteMessagesByIds(Collection)} as
 well as {@link #deleteMessageById(long)} to delete all messages provided.
 No checks will be done to prevent failures, use
 {@link java.util.concurrent.CompletionStage#exceptionally(Function)} to
 handle failures.

 &lt;p&gt;
 Possible ErrorResponses include:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 if this channel was deleted&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE
 UNKNOWN_MESSAGE} &lt;br&gt;
 if any of the provided messages does not exist&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 if we were removed from the channel&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS
 MISSING_PERMISSIONS} &lt;br&gt;
 The send request was attempted after the account lost
 {@link net.dv8tion.jda.api.Permission#MESSAGE_MANAGE
 Permission.MESSAGE_MANAGE} in the channel.&lt;/li&gt;
 &lt;/ul&gt;
messageIds: The message ids to delete
Return type: @return:List of futures representing all deletion tasks</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>messageIds</name>
                <type>long[]</type>
            </parameter>
        </method>
        <method>
            <name>sendMessageObject2</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.Message</returntype>
            <parameter>
                <name>msg</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
        </method>
        <method>
            <name>sendMessage3</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.Message</returntype>
            <parameter>
                <name>text</name>
                <type>java.lang.CharSequence</type>
            </parameter>
        </method>
        <method>
            <name>purgeMessagesById2</name>
            <comment>Convenience method to delete messages in the most efficient way available.
 &lt;br&gt;
 This combines both {@link TextChannel#deleteMessagesByIds(Collection)} as
 well as {@link #deleteMessageById(long)} to delete all messages provided.
 No checks will be done to prevent failures, use
 {@link java.util.concurrent.CompletionStage#exceptionally(Function)} to
 handle failures.

 &lt;p&gt;
 For possible ErrorResponses see {@link #purgeMessagesById(long...)}.
messageIds: The message ids to delete
Return type: @return:List of futures representing all deletion tasks</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>messageIds</name>
                <type>java.lang.String[]</type>
            </parameter>
        </method>
        <method>
            <name>sendMessageFormat</name>
            <comment>Sends a formatted text message to this channel. &lt;br&gt;
 This will fail if this channel is an instance of
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel} and the
 currently logged in account does not have permissions to send a message to
 this channel. &lt;br&gt;
 To determine if you are able to send a message in a
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel} use
 {@link net.dv8tion.jda.api.entities.Member#hasPermission(GuildChannel, net.dv8tion.jda.api.Permission...)
 guild.getSelfMember().hasPermission(channel, Permission.MESSAGE_WRITE)}.

 &lt;p&gt;
 For {@link net.dv8tion.jda.api.requests.ErrorResponse} information, refer
 to {@link #sendMessage(Message)}.
format: The string that should be formatted, if this is {@code null} or
          empty the content of the Message would be empty and cause a
          builder exception.
args: The arguments for your format
Return type: @return:{@link MessageAction MessageAction} &lt;br&gt;
         The newly created Message after it has been sent to Discord.</comment>
            <returntype>net.dv8tion.jda.api.requests.restaction.MessageCreateAction</returntype>
            <parameter>
                <name>format</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>args</name>
                <type>java.lang.Object[]</type>
            </parameter>
        </method>
        <method>
            <name>putPermissionOverride</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.PermissionOverride</returntype>
            <parameter>
                <name>mem</name>
                <type>net.dv8tion.jda.api.entities.Member</type>
            </parameter>
        </method>
        <method>
            <name>createThreadChannelReferenced</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>referencedmsgID</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>unpinMessageById</name>
            <comment>Used to unpin a message. Pinned messages are retrievable via
 {@link #retrievePinnedMessages()}.

 &lt;p&gt;
 The following {@link net.dv8tion.jda.api.requests.ErrorResponse
 ErrorResponses} are possible:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 The request was attempted after the account lost access to the
 {@link net.dv8tion.jda.api.entities.Guild Guild} typically due to being
 kicked or removed, or after
 {@link net.dv8tion.jda.api.Permission#MESSAGE_READ Permission.MESSAGE_READ}
 was revoked in the {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel}&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS
 MISSING_PERMISSIONS} &lt;br&gt;
 The request was attempted after the account lost
 {@link net.dv8tion.jda.api.Permission#MESSAGE_MANAGE
 Permission.MESSAGE_MANAGE} in the
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel}.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE
 UNKNOWN_MESSAGE} &lt;br&gt;
 The provided {@code messageId} is unknown in this MessageChannel, either
 due to the id being invalid, or the message it referred to has already been
 deleted.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 The request was attempted after the channel was deleted.&lt;/li&gt;
 &lt;/ul&gt;
messageId: The message to unpin.
Return type: @return:{@link net.dv8tion.jda.api.requests.RestAction RestAction}</comment>
            <returntype>net.dv8tion.jda.api.requests.RestAction</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GrantViewRole</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.PermissionOverride</returntype>
            <parameter>
                <name>role</name>
                <type>net.dv8tion.jda.api.entities.Role</type>
            </parameter>
        </method>
        <method>
            <name>createThreadChannelAsync</name>
            <comment>param name. The Name for the Threadchannel
 param duration. A String. One of "TIME_1_HOUR", "TIME_24_HOURS", "TIME_3_DAYS", "TIME_1_WEEK"</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>duration</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>inviteable</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>removeReactionById</name>
            <comment>Attempts to remove the reaction from a message represented by the specified
 {@code messageId} in this MessageChannel.

 &lt;p&gt;
 The unicode provided has to be a unicode representation of the emoji that
 is supposed to be represented by the Reaction. &lt;br&gt;
 To retrieve the characters needed you can use an api or the official
 discord client by escaping the emoji (\:emoji-name:) and copying the
 resulting emoji from the sent message.

 &lt;p&gt;
 This method encodes the provided unicode for you. &lt;b&gt;Do not encode the
 emoji before providing the unicode.&lt;/b&gt;

 &lt;p&gt;
 The following {@link net.dv8tion.jda.api.requests.ErrorResponse
 ErrorResponses} are possible:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 The request was attempted after the account lost access to the
 {@link net.dv8tion.jda.api.entities.Guild Guild} typically due to being
 kicked or removed, or after
 {@link net.dv8tion.jda.api.Permission#MESSAGE_READ Permission.MESSAGE_READ}
 was revoked in the {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel} &lt;br&gt;
 Also can happen if the account lost the
 {@link net.dv8tion.jda.api.Permission#MESSAGE_HISTORY
 Permission.MESSAGE_HISTORY}&lt;/li&gt;


 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS
 MISSING_PERMISSIONS} &lt;br&gt;
 The request was attempted after the account lost
 {@link net.dv8tion.jda.api.Permission#MESSAGE_ADD_REACTION
 Permission.MESSAGE_ADD_REACTION} in the
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel}.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_EMOJI} &lt;br&gt;
 The provided unicode character does not refer to a known emoji unicode
 character. &lt;br&gt;
 Proper unicode characters for emojis can be found at
 &lt;a href="http://unicode.org/emoji/charts/full-emoji-list.html" target=
 "_blank"&gt;http://unicode.org/emoji/charts/full-emoji-list.html&lt;/a&gt;&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE
 UNKNOWN_MESSAGE} &lt;br&gt;
 The provided {@code messageId} is unknown in this MessageChannel, either
 due to the id being invalid, or the message it referred to has already been
 deleted.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 The request was attempted after the channel was deleted.&lt;/li&gt;
 &lt;/ul&gt;
messageId: The messageId to remove the reaction from
unicode: The unicode characters of the emoji
Return type: @return:{@link net.dv8tion.jda.api.requests.RestAction}</comment>
            <returntype>net.dv8tion.jda.api.requests.RestAction</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>unicode</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>sendFile5</name>
            <comment>Uploads a file to the Discord servers and sends it to this</comment>
            <returntype>net.dv8tion.jda.api.requests.restaction.MessageCreateAction</returntype>
            <parameter>
                <name>data</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>fileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryAfter2</name>
            <comment>Uses the provided message as a marker and retrieves messages sent after the
 marker. The {@code limit} determines the amount of messages retrieved near
 the marker.

 &lt;p&gt;
 &lt;b&gt;Examples:&lt;/b&gt; &lt;br&gt;
 Retrieve 100 messages from the middle of history. {@literal &gt;}100 message
 exist in history and the marker is {@literal &gt;}50 messages from the edge of
 history. &lt;br&gt;
 {@code getHistoryAfter(message, 100)} - This will retrieve 100 messages
 from history sent after the marker.

 &lt;p&gt;
 The following {@link net.dv8tion.jda.api.requests.ErrorResponse
 ErrorResponses} are possible:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 The request was attempted after the account lost access to the
 {@link net.dv8tion.jda.api.entities.Guild Guild} typically due to being
 kicked or removed, or after
 {@link net.dv8tion.jda.api.Permission#MESSAGE_READ Permission.MESSAGE_READ}
 was revoked in the {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel}&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS
 MISSING_PERMISSIONS} &lt;br&gt;
 The request was attempted after the account lost
 {@link net.dv8tion.jda.api.Permission#MESSAGE_HISTORY
 Permission.MESSAGE_HISTORY} in the
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel}.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE
 UNKNOWN_MESSAGE} &lt;br&gt;
 The provided {@code messageId} is unknown in this MessageChannel, either
 due to the id being invalid, or the message it referred to has already been
 deleted, thus could not be used as a marker.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 The request was attempted after the channel was deleted.&lt;/li&gt;
 &lt;/ul&gt;
message: The message that will act as a marker.
limit: The amount of messages to be retrieved after the marker. Minimum:
          1, Max: 100.
Return type: @return:{@link net.dv8tion.jda.api.entities.MessageHistory.MessageRetrieveAction
         MessageHistory.MessageRetrieveAction} &lt;br&gt;
         Provides a {@link net.dv8tion.jda.api.entities.MessageHistory
         MessageHistory} object with messages after the provided message
         loaded into it.</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory.MessageRetrieveAction</returntype>
            <parameter>
                <name>message</name>
                <type>net.dv8tion.jda.api.entities.Message</type>
            </parameter>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryAround2</name>
            <comment>Uses the provided {@link net.dv8tion.jda.api.entities.Message Message} as a
 marker and retrieves messages around the marker. The {@code limit}
 determines the amount of messages retrieved near the marker. Discord will
 attempt to evenly split the limit between before and after the marker,
 however in the case that the marker is set near the beginning or near the
 end of the channel's history the amount of messages on each side of the
 marker may be different, and their total count may not equal the provided
 {@code limit}.

 &lt;p&gt;
 &lt;b&gt;Examples:&lt;/b&gt; &lt;br&gt;
 Retrieve 100 messages from the middle of history. {@literal &gt;}100 message
 exist in history and the marker is {@literal &gt;}50 messages from the edge of
 history. &lt;br&gt;
 {@code getHistoryAround(message, 100)} - This will retrieve 100 messages
 from history, 50 before the marker and 50 after the marker.

 &lt;p&gt;
 Retrieve 10 messages near the end of history. Provided message is the 3rd
 most recent message. &lt;br&gt;
 {@code getHistoryAround(message, 10)} - This will retrieve 10 messages from
 history, 8 before the marker and 2 after the marker.

 &lt;p&gt;
 The following {@link net.dv8tion.jda.api.requests.ErrorResponse
 ErrorResponses} are possible:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 The request was attempted after the account lost access to the
 {@link net.dv8tion.jda.api.entities.Guild Guild} typically due to being
 kicked or removed, or after
 {@link net.dv8tion.jda.api.Permission#MESSAGE_READ Permission.MESSAGE_READ}
 was revoked in the {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel}&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS
 MISSING_PERMISSIONS} &lt;br&gt;
 The request was attempted after the account lost
 {@link net.dv8tion.jda.api.Permission#MESSAGE_HISTORY
 Permission.MESSAGE_HISTORY} in the
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel}.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE
 UNKNOWN_MESSAGE} &lt;br&gt;
 The provided {@code message} has already been deleted, thus could not be
 used as a marker.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 The request was attempted after the channel was deleted.&lt;/li&gt;
 &lt;/ul&gt;
message: The {@link net.dv8tion.jda.api.entities.Message Message} that will
          act as a marker. The provided Message must be from this
          MessageChannel.
limit: The amount of messages to be retrieved around the marker. Minimum:
          1, Max: 100.
Return type: @return:{@link net.dv8tion.jda.api.entities.MessageHistory.MessageRetrieveAction
         MessageHistory.MessageRetrieveAction} &lt;br&gt;
         Provides a {@link net.dv8tion.jda.api.entities.MessageHistory
         MessageHistory} object with messages around the provided message
         loaded into it.</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory.MessageRetrieveAction</returntype>
            <parameter>
                <name>message</name>
                <type>net.dv8tion.jda.api.entities.Message</type>
            </parameter>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>retrieveMessage4ref</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.Message</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>addReactionById2</name>
            <comment>Attempts to react to a message represented by the specified
 {@code messageId} in this MessageChannel.

 &lt;p&gt;
 The unicode provided has to be a unicode representation of the emoji that
 is supposed to be used for the Reaction. &lt;br&gt;
 To retrieve the characters needed you can use an api or the official
 discord client by escaping the emoji (\:emoji-name:) and copying the
 resulting emoji from the sent message.

 &lt;p&gt;
 This method encodes the provided unicode for you. &lt;b&gt;Do not encode the
 emoji before providing the unicode.&lt;/b&gt;

 &lt;h2&gt;Examples&lt;/h2&gt; &lt;code&gt;
 // custom&lt;br&gt;
 channel.addReactionById(messageId, "minn:245267426227388416").queue();&lt;br&gt;
 // unicode escape&lt;br&gt;
 channel.addReactionById(messageId, "&amp;#92;uD83D&amp;#92;uDE02").queue();&lt;br&gt;
 // codepoint notation&lt;br&gt;
 channel.addReactionById(messageId, "U+1F602").queue();
 &lt;/code&gt;

 &lt;p&gt;
 The following {@link net.dv8tion.jda.api.requests.ErrorResponse
 ErrorResponses} are possible:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 The request was attempted after the account lost access to the
 {@link net.dv8tion.jda.api.entities.Guild Guild} typically due to being
 kicked or removed, or after
 {@link net.dv8tion.jda.api.Permission#MESSAGE_READ Permission.MESSAGE_READ}
 was revoked in the {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel} &lt;br&gt;
 Also can happen if the account lost the
 {@link net.dv8tion.jda.api.Permission#MESSAGE_HISTORY
 Permission.MESSAGE_HISTORY}&lt;/li&gt;


 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS
 MISSING_PERMISSIONS} &lt;br&gt;
 The request was attempted after the account lost
 {@link net.dv8tion.jda.api.Permission#MESSAGE_ADD_REACTION
 Permission.MESSAGE_ADD_REACTION} in the
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel}.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_EMOJI
 UNKNOWN_EMOJI} &lt;br&gt;
 The provided unicode character does not refer to a known emoji unicode
 character. &lt;br&gt;
 Proper unicode characters for emojis can be found at
 &lt;a href="http://unicode.org/emoji/charts/full-emoji-list.html" target=
 "_blank"&gt;http://unicode.org/emoji/charts/full-emoji-list.html&lt;/a&gt;&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE
 UNKNOWN_MESSAGE} &lt;br&gt;
 The provided {@code messageId} is unknown in this MessageChannel, either
 due to the id being invalid, or the message it referred to has already been
 deleted.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 The request was attempted after the channel was deleted.&lt;/li&gt;
 &lt;/ul&gt;
messageId: The messageId to attach the reaction to
unicode: The unicode characters to react with
Return type: @return:{@link net.dv8tion.jda.api.requests.RestAction}</comment>
            <returntype>net.dv8tion.jda.api.requests.RestAction</returntype>
            <parameter>
                <name>messageId</name>
                <type>long</type>
            </parameter>
            <parameter>
                <name>unicode</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>addReactionById3</name>
            <comment>Attempts to react to a message represented by the specified
 {@code messageId} in this MessageChannel.

 &lt;p&gt;
 &lt;b&gt;An Emote is not the same as an emoji!&lt;/b&gt; &lt;br&gt;
 Emotes are custom guild-specific images unlike global unicode emojis!

 &lt;p&gt;
 &lt;b&gt;&lt;u&gt;Unicode emojis are not included as
 {@link net.dv8tion.jda.api.entities.Emote Emote}!&lt;/u&gt;&lt;/b&gt;

 &lt;p&gt;
 The following {@link net.dv8tion.jda.api.requests.ErrorResponse
 ErrorResponses} are possible:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 The request was attempted after the account lost access to the
 {@link net.dv8tion.jda.api.entities.Guild Guild} typically due to being
 kicked or removed, or after
 {@link net.dv8tion.jda.api.Permission#MESSAGE_READ Permission.MESSAGE_READ}
 was revoked in the {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel} &lt;br&gt;
 Also can happen if the account lost the
 {@link net.dv8tion.jda.api.Permission#MESSAGE_HISTORY
 Permission.MESSAGE_HISTORY}&lt;/li&gt;


 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS
 MISSING_PERMISSIONS} &lt;br&gt;
 The request was attempted after the account lost
 {@link net.dv8tion.jda.api.Permission#MESSAGE_ADD_REACTION
 Permission.MESSAGE_ADD_REACTION} in the
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel}.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_EMOJI} &lt;br&gt;
 The provided unicode character does not refer to a known emoji unicode
 character. &lt;br&gt;
 Proper unicode characters for emojis can be found at
 &lt;a href="http://unicode.org/emoji/charts/full-emoji-list.html" target=
 "_blank"&gt;http://unicode.org/emoji/charts/full-emoji-list.html&lt;/a&gt;&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE
 UNKNOWN_MESSAGE} &lt;br&gt;
 The provided {@code messageId} is unknown in this MessageChannel, either
 due to the id being invalid, or the message it referred to has already been
 deleted.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 The request was attempted after the channel was deleted.&lt;/li&gt;
 &lt;/ul&gt;
messageId: The messageId to attach the reaction to
emote: The not-null {@link net.dv8tion.jda.api.entities.Emote} to react
          with
Return type: @return:{@link net.dv8tion.jda.api.requests.RestAction}</comment>
            <returntype>net.dv8tion.jda.api.requests.RestAction</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>emote</name>
                <type>net.dv8tion.jda.api.entities.emoji.Emoji</type>
            </parameter>
        </method>
        <method>
            <name>GetIterableHistory4Backup</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>tag</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>logchannel</name>
                <type>net.dv8tion.jda.api.entities.channel.middleman.MessageChannel</type>
            </parameter>
        </method>
        <method>
            <name>putPermissionOverrideRole</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.PermissionOverride</returntype>
            <parameter>
                <name>role</name>
                <type>net.dv8tion.jda.api.entities.Role</type>
            </parameter>
        </method>
        <method>
            <name>retrieveMessageById</name>
            <comment>Attempts to get a Message from the Discord's servers that has the 
 same id as the id provided. 
 Note: when retrieving a Message, you must retrieve it from the channel it
 was sent in!

 return The Message defined by the provided id.</comment>
            <returntype>net.dv8tion.jda.api.entities.Message</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>addReactionById</name>
            <comment>Attempts to react to a message represented by the specified
 {@code messageId} in this MessageChannel.

 &lt;p&gt;
 The unicode provided has to be a unicode representation of the emoji that
 is supposed to be used for the Reaction. &lt;br&gt;
 To retrieve the characters needed you can use an api or the official
 discord client by escaping the emoji (\:emoji-name:) and copying the
 resulting emoji from the sent message.

 &lt;p&gt;
 This method encodes the provided unicode for you. &lt;b&gt;Do not encode the
 emoji before providing the unicode.&lt;/b&gt;

 &lt;h2&gt;Examples&lt;/h2&gt; &lt;code&gt;
 // custom&lt;br&gt;
 channel.addReactionById(messageId, "minn:245267426227388416").queue();&lt;br&gt;
 // unicode escape&lt;br&gt;
 channel.addReactionById(messageId, "&amp;#92;uD83D&amp;#92;uDE02").queue();&lt;br&gt;
 // codepoint notation&lt;br&gt;
 channel.addReactionById(messageId, "U+1F602").queue();
 &lt;/code&gt;

 &lt;p&gt;
 The following {@link net.dv8tion.jda.api.requests.ErrorResponse
 ErrorResponses} are possible:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 The request was attempted after the account lost access to the
 {@link net.dv8tion.jda.api.entities.Guild Guild} typically due to being
 kicked or removed, or after
 {@link net.dv8tion.jda.api.Permission#MESSAGE_READ Permission.MESSAGE_READ}
 was revoked in the {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel} &lt;br&gt;
 Also can happen if the account lost the
 {@link net.dv8tion.jda.api.Permission#MESSAGE_HISTORY
 Permission.MESSAGE_HISTORY}&lt;/li&gt;


 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS
 MISSING_PERMISSIONS} &lt;br&gt;
 The request was attempted after the account lost
 {@link net.dv8tion.jda.api.Permission#MESSAGE_ADD_REACTION
 Permission.MESSAGE_ADD_REACTION} in the
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel}.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_EMOJI
 UNKNOWN_EMOJI} &lt;br&gt;
 The provided unicode character does not refer to a known emoji unicode
 character. &lt;br&gt;
 Proper unicode characters for emojis can be found at
 &lt;a href="http://unicode.org/emoji/charts/full-emoji-list.html" target=
 "_blank"&gt;http://unicode.org/emoji/charts/full-emoji-list.html&lt;/a&gt;&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE
 UNKNOWN_MESSAGE} &lt;br&gt;
 The provided {@code messageId} is unknown in this MessageChannel, either
 due to the id being invalid, or the message it referred to has already been
 deleted.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 The request was attempted after the channel was deleted.&lt;/li&gt;
 &lt;/ul&gt;
messageId: The messageId to attach the reaction to
unicode: The unicode characters to react with
Return type: @return:{@link net.dv8tion.jda.api.requests.RestAction}</comment>
            <returntype>net.dv8tion.jda.api.requests.RestAction</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>unicode</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryFromBeginning</name>
            <comment>Retrieves messages from the beginning of this
 Channel. The limit determines the amount 
 of messages being retrieved.</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory</returntype>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>sendMessageembeds</name>
            <comment>Sends a specified {@link net.dv8tion.jda.api.entities.MessageEmbed
 MessageEmbed} as a {@link net.dv8tion.jda.api.entities.Message Message} to
 this channel.
 This will fail if this channel is an instance of
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel} and the
 currently logged in account does not have permissions to send a message to
 this channel.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>embeds</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>SetEventListener</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GrantWriteMember</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.PermissionOverride</returntype>
            <parameter>
                <name>member</name>
                <type>net.dv8tion.jda.api.entities.Member</type>
            </parameter>
        </method>
        <method>
            <name>editMessageById</name>
            <comment>Attempts to edit a message by its id in this MessageChannel. The string
 provided as {@code newContent} must have a length that is greater than 0
 and less-than or equal to 2000. This is a Discord message length
 limitation.</comment>
            <returntype>net.dv8tion.jda.api.entities.Message</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>newContent</name>
                <type>java.lang.CharSequence</type>
            </parameter>
        </method>
        <method>
            <name>purgeMessagesById</name>
            <comment>Convenience method to delete messages in the most efficient way available.
 &lt;br&gt;
 This combines both {@link TextChannel#deleteMessagesByIds(Collection)} as
 well as {@link #deleteMessageById(long)} to delete all messages provided.
 No checks will be done to prevent failures, use
 {@link java.util.concurrent.CompletionStage#exceptionally(Function)} to
 handle failures.

 &lt;p&gt;
 For possible ErrorResponses see {@link #purgeMessagesById(long...)}.
messageIds: The message ids to delete
Return type: @return:List of futures representing all deletion tasks</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>messageIds</name>
                <type>java.util.List</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryAfter</name>
            <comment>Uses the provided {@code id} of a message as a marker and retrieves
 messages sent after the marker ID. The {@code limit} determines the amount
 of messages retrieved near the marker.

 &lt;p&gt;
 &lt;b&gt;Examples:&lt;/b&gt; &lt;br&gt;
 Retrieve 100 messages from the middle of history. {@literal &gt;}100 message
 exist in history and the marker is {@literal &gt;}50 messages from the edge of
 history. &lt;br&gt;
 {@code getHistoryAfter(messageId, 100)} - This will retrieve 100 messages
 from history sent after the marker.

 &lt;p&gt;
 The following {@link net.dv8tion.jda.api.requests.ErrorResponse
 ErrorResponses} are possible:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 The request was attempted after the account lost access to the
 {@link net.dv8tion.jda.api.entities.Guild Guild} typically due to being
 kicked or removed, or after
 {@link net.dv8tion.jda.api.Permission#MESSAGE_READ Permission.MESSAGE_READ}
 was revoked in the {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel}&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS
 MISSING_PERMISSIONS} &lt;br&gt;
 The request was attempted after the account lost
 {@link net.dv8tion.jda.api.Permission#MESSAGE_HISTORY
 Permission.MESSAGE_HISTORY} in the
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel}.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE
 UNKNOWN_MESSAGE} &lt;br&gt;
 The provided {@code messageId} is unknown in this MessageChannel, either
 due to the id being invalid, or the message it referred to has already been
 deleted, thus could not be used as a marker.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 The request was attempted after the channel was deleted.&lt;/li&gt;
 &lt;/ul&gt;
messageId: The id of the message that will act as a marker.
limit: The amount of messages to be retrieved after the marker. Minimum:
          1, Max: 100.
Return type: @return:{@link net.dv8tion.jda.api.entities.MessageHistory.MessageRetrieveAction
         MessageHistory.MessageRetrieveAction} &lt;br&gt;
         Provides a {@link net.dv8tion.jda.api.entities.MessageHistory
         MessageHistory} object with messages after the provided message
         loaded into it.</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory.MessageRetrieveAction</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>delete</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>retrievePinnedMessages</name>
            <comment>Retrieves a List of {@link net.dv8tion.jda.api.entities.Message Messages}
 that have been pinned in this channel. &lt;br&gt;
 If no messages have been pinned, this retrieves an empty List.

 &lt;p&gt;
 The following {@link net.dv8tion.jda.api.requests.ErrorResponse
 ErrorResponses} are possible:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 The request was attempted after the account lost access to the
 {@link net.dv8tion.jda.api.entities.Guild Guild} typically due to being
 kicked or removed, or after
 {@link net.dv8tion.jda.api.Permission#MESSAGE_READ Permission.MESSAGE_READ}
 was revoked in the {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel}&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 The request was attempted after the channel was deleted.&lt;/li&gt;
 &lt;/ul&gt;
Return type: @return:{@link net.dv8tion.jda.api.requests.RestAction RestAction} - Type:
         List{@literal &lt;}{@link net.dv8tion.jda.api.entities.Message}{@literal &gt;}
         &lt;br&gt;
         Retrieves an immutable list of pinned messages</comment>
            <returntype>net.dv8tion.jda.api.requests.RestAction</returntype>
        </method>
        <method>
            <name>createThreadChannel</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.ThreadChannel</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetIterableHistory</name>
            <comment>A PaginationAction implementation that allows to
 iterate over recent Messages of this Channel. 
 This is not a cache for received messages and it can only view
 messages that were sent before. This iterates chronologically backwards
 (from present to past).

 It is recommended not to use this in an enhanced for-loop without end
 conditions as it might cause memory overflows in channels with a long
 message history.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>tag</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>channel</name>
                <type>net.dv8tion.jda.api.entities.channel.concrete.ThreadChannel</type>
            </parameter>
            <parameter>
                <name>logchannel</name>
                <type>net.dv8tion.jda.api.entities.channel.middleman.MessageChannel</type>
            </parameter>
        </method>
        <method>
            <name>retrieveMessageById2</name>
            <comment>Attempts to get a {@link net.dv8tion.jda.api.entities.Message Message} from
 the Discord's servers that has the same id as the id provided. &lt;br&gt;
 Note: when retrieving a Message, you must retrieve it from the channel it
 was sent in!

 &lt;p&gt;
 &lt;b&gt;Only bots can use this endpoint! A similar behaviour can be simulated
 using {@link #getHistoryAround(long, int)}!&lt;/b&gt;

 &lt;p&gt;
 The following {@link net.dv8tion.jda.api.requests.ErrorResponse
 ErrorResponses} are possible:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 The request was attempted after the account lost access to the
 {@link net.dv8tion.jda.api.entities.Guild Guild} typically due to being
 kicked or removed, or after
 {@link net.dv8tion.jda.api.Permission#MESSAGE_READ Permission.MESSAGE_READ}
 was revoked in the {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel}&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS
 MISSING_PERMISSIONS} &lt;br&gt;
 The request was attempted after the account lost
 {@link net.dv8tion.jda.api.Permission#MESSAGE_HISTORY
 Permission.MESSAGE_HISTORY} in the
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel}.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE
 UNKNOWN_MESSAGE} &lt;br&gt;
 The provided {@code id} does not refer to a message sent in this channel or
 the message has already been deleted.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 The request was attempted after the channel was deleted.&lt;/li&gt;
 &lt;/ul&gt;
messageId: The id of the sought after Message
Return type: @return:{@link net.dv8tion.jda.api.requests.RestAction RestAction} - Type:
         Message &lt;br&gt;
         The Message defined by the provided id.</comment>
            <returntype>net.dv8tion.jda.api.requests.RestAction</returntype>
            <parameter>
                <name>messageId</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>pinMessageById</name>
            <comment>Used to pin a message. Pinned messages are retrievable via
 {@link #retrievePinnedMessages()}.

 &lt;p&gt;
 The following {@link net.dv8tion.jda.api.requests.ErrorResponse
 ErrorResponses} are possible:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 The request was attempted after the account lost access to the
 {@link net.dv8tion.jda.api.entities.Guild Guild} typically due to being
 kicked or removed, or after
 {@link net.dv8tion.jda.api.Permission#MESSAGE_READ Permission.MESSAGE_READ}
 was revoked in the {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel}&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS
 MISSING_PERMISSIONS} &lt;br&gt;
 The request was attempted after the account lost
 {@link net.dv8tion.jda.api.Permission#MESSAGE_MANAGE
 Permission.MESSAGE_MANAGE} in the
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel}.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE
 UNKNOWN_MESSAGE} &lt;br&gt;
 The provided {@code messageId} is unknown in this MessageChannel, either
 due to the id being invalid, or the message it referred to has already been
 deleted.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 The request was attempted after the channel was deleted.&lt;/li&gt;
 &lt;/ul&gt;
messageId: The message to pin.
Return type: @return:{@link net.dv8tion.jda.api.requests.RestAction RestAction}</comment>
            <returntype>net.dv8tion.jda.api.requests.RestAction</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>createThreadChannelPrivate</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.ThreadChannel</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>inviteable</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>purgeMessages3</name>
            <comment>Convenience method to delete messages in the most efficient way available.
 &lt;br&gt;
 This combines both {@link TextChannel#deleteMessagesByIds(Collection)} as
 well as {@link Message#delete()} to delete all messages provided. No checks
 will be done to prevent failures, use
 {@link java.util.concurrent.CompletionStage#exceptionally(Function)} to
 handle failures.

 &lt;p&gt;
 For possible ErrorResponses see {@link #purgeMessagesById(long...)}.
messages: The messages to delete
Return type: @return:List of futures representing all deletion tasks</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>messages</name>
                <type>net.dv8tion.jda.api.entities.Message[]</type>
            </parameter>
        </method>
        <method>
            <name>purgeMessages4</name>
            <comment>Convenience method to delete messages in the most efficient way available.
 &lt;br&gt;
 This combines both {@link TextChannel#deleteMessagesByIds(Collection)} as
 well as {@link Message#delete()} to delete all messages provided. No checks
 will be done to prevent failures, use
 {@link java.util.concurrent.CompletionStage#exceptionally(Function)} to
 handle failures.

 &lt;p&gt;
 For possible ErrorResponses see {@link #purgeMessagesById(long...)}.
messages: The messages to delete
Return type: @return:List of futures representing all deletion tasks</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>messages</name>
                <type>java.util.List</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryBefore</name>
            <comment>Uses the provided {@code id} of a message as a marker and retrieves
 messages sent before the marker ID. The {@code limit} determines the amount
 of messages retrieved near the marker.

 &lt;p&gt;
 &lt;b&gt;Examples:&lt;/b&gt; &lt;br&gt;
 Retrieve 100 messages from the middle of history. {@literal &gt;}100 message
 exist in history and the marker is {@literal &gt;}50 messages from the edge of
 history. &lt;br&gt;
 {@code getHistoryBefore(messageId, 100)} - This will retrieve 100 messages
 from history sent before the marker.

 &lt;p&gt;
 The following {@link net.dv8tion.jda.api.requests.ErrorResponse
 ErrorResponses} are possible:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 The request was attempted after the account lost access to the
 {@link net.dv8tion.jda.api.entities.Guild Guild} typically due to being
 kicked or removed, or after
 {@link net.dv8tion.jda.api.Permission#MESSAGE_READ Permission.MESSAGE_READ}
 was revoked in the {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel}&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS
 MISSING_PERMISSIONS} &lt;br&gt;
 The request was attempted after the account lost
 {@link net.dv8tion.jda.api.Permission#MESSAGE_HISTORY
 Permission.MESSAGE_HISTORY} in the
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel}.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE
 UNKNOWN_MESSAGE} &lt;br&gt;
 The provided {@code messageId} is unknown in this MessageChannel, either
 due to the id being invalid, or the message it referred to has already been
 deleted, thus could not be used as a marker.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 The request was attempted after the channel was deleted.&lt;/li&gt;
 &lt;/ul&gt;
messageId: The id of the message that will act as a marker.
limit: The amount of messages to be retrieved after the marker. Minimum:
          1, Max: 100.
Return type: @return:{@link net.dv8tion.jda.api.entities.MessageHistory.MessageRetrieveAction
         MessageHistory.MessageRetrieveAction} &lt;br&gt;
         Provides a {@link net.dv8tion.jda.api.entities.MessageHistory
         MessageHistory} object with messages before the provided message
         loaded into it.</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>sendMessage</name>
            <comment>Sends a specified Message to this channel.
 This will fail if this channel is an instance of
 TextChannel and the currently logged in account 
 does not have permissions to send a message to
 this channel.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>mcd</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryAround</name>
            <comment>Uses the provided {@code id} of a message as a marker and retrieves
 messages sent around the marker. The {@code limit} determines the amount of
 messages retrieved near the marker. Discord will attempt to evenly split
 the limit between before and after the marker, however in the case that the
 marker is set near the beginning or near the end of the channel's history
 the amount of messages on each side of the marker may be different, and
 their total count may not equal the provided {@code limit}.

 &lt;p&gt;
 &lt;b&gt;Examples:&lt;/b&gt; &lt;br&gt;
 Retrieve 100 messages from the middle of history. {@literal &gt;}100 message
 exist in history and the marker is {@literal &gt;}50 messages from the edge of
 history. &lt;br&gt;
 {@code getHistoryAround(messageId, 100)} - This will retrieve 100 messages
 from history, 50 before the marker and 50 after the marker.

 &lt;p&gt;
 Retrieve 10 messages near the end of history. Provided id is for a message
 that is the 3rd most recent message. &lt;br&gt;
 {@code getHistoryAround(messageId, 10)} - This will retrieve 10 messages
 from history, 8 before the marker and 2 after the marker.

 &lt;p&gt;
 The following {@link net.dv8tion.jda.api.requests.ErrorResponse
 ErrorResponses} are possible:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 The request was attempted after the account lost access to the
 {@link net.dv8tion.jda.api.entities.Guild Guild} typically due to being
 kicked or removed, or after
 {@link net.dv8tion.jda.api.Permission#MESSAGE_READ Permission.MESSAGE_READ}
 was revoked in the {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel}&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS
 MISSING_PERMISSIONS} &lt;br&gt;
 The request was attempted after the account lost
 {@link net.dv8tion.jda.api.Permission#MESSAGE_HISTORY
 Permission.MESSAGE_HISTORY} in the
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel}.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE
 UNKNOWN_MESSAGE} &lt;br&gt;
 The provided {@code messageId} is unknown in this MessageChannel, either
 due to the id being invalid, or the message it referred to has already been
 deleted, thus could not be used as a marker.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 The request was attempted after the channel was deleted.&lt;/li&gt;
 &lt;/ul&gt;
messageId: The id of the message that will act as a marker.
limit: The amount of messages to be retrieved around the marker. Minimum:
          1, Max: 100.
Return type: @return:{@link net.dv8tion.jda.api.entities.MessageHistory.MessageRetrieveAction
         MessageHistory.MessageRetrieveAction} &lt;br&gt;
         Provides a {@link net.dv8tion.jda.api.entities.MessageHistory
         MessageHistory} object with messages around the provided message
         loaded into it.</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory.MessageRetrieveAction</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryBefore2</name>
            <comment>Uses the provided message as a marker and retrieves messages sent before
 the marker. The {@code limit} determines the amount of messages retrieved
 near the marker.

 &lt;p&gt;
 &lt;b&gt;Examples:&lt;/b&gt; &lt;br&gt;
 Retrieve 100 messages from the middle of history. {@literal &gt;}100 message
 exist in history and the marker is {@literal &gt;}50 messages from the edge of
 history. &lt;br&gt;
 {@code getHistoryAfter(message, 100)} - This will retrieve 100 messages
 from history sent before the marker.

 &lt;p&gt;
 The following {@link net.dv8tion.jda.api.requests.ErrorResponse
 ErrorResponses} are possible:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 The request was attempted after the account lost access to the
 {@link net.dv8tion.jda.api.entities.Guild Guild} typically due to being
 kicked or removed, or after
 {@link net.dv8tion.jda.api.Permission#MESSAGE_READ Permission.MESSAGE_READ}
 was revoked in the {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel}&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS
 MISSING_PERMISSIONS} &lt;br&gt;
 The request was attempted after the account lost
 {@link net.dv8tion.jda.api.Permission#MESSAGE_HISTORY
 Permission.MESSAGE_HISTORY} in the
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel}.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE
 UNKNOWN_MESSAGE} &lt;br&gt;
 The provided {@code messageId} is unknown in this MessageChannel, either
 due to the id being invalid, or the message it referred to has already been
 deleted, thus could not be used as a marker.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 The request was attempted after the channel was deleted.&lt;/li&gt;
 &lt;/ul&gt;
message: The message that will act as a marker.
limit: The amount of messages to be retrieved after the marker. Minimum:
          1, Max: 100.
Return type: @return:{@link net.dv8tion.jda.api.entities.MessageHistory.MessageRetrieveAction
         MessageHistory.MessageRetrieveAction} &lt;br&gt;
         Provides a {@link net.dv8tion.jda.api.entities.MessageHistory
         MessageHistory} object with messages before the provided message
         loaded into it.</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory.MessageRetrieveAction</returntype>
            <parameter>
                <name>message</name>
                <type>net.dv8tion.jda.api.entities.Message</type>
            </parameter>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>createThreadChannel2</name>
            <comment>duration can be TIME_1_HOUR, TIME_24_HOURS, TIME_3_DAYS or TIME_1_WEEK,</comment>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.ThreadChannel</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>duration</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>upsertPermissionOverride</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.PermissionOverride</returntype>
            <parameter>
                <name>mem</name>
                <type>net.dv8tion.jda.api.entities.Member</type>
            </parameter>
        </method>
        <method>
            <name>deleteMessageById2</name>
            <comment>Attempts to delete a {@link net.dv8tion.jda.api.entities.Message Message}
 from the Discord servers that has the same id as the id provided.

 &lt;p&gt;
 The following {@link net.dv8tion.jda.api.requests.ErrorResponse
 ErrorResponses} are possible:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 The request was attempted after the account lost access to the
 {@link net.dv8tion.jda.api.entities.Guild Guild} typically due to being
 kicked or removed, or after
 {@link net.dv8tion.jda.api.Permission#MESSAGE_READ Permission.MESSAGE_READ}
 was revoked in the {@link net.dv8tion.jda.api.entities.TextChannel
 TextChannel}&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS
 MISSING_PERMISSIONS} &lt;br&gt;
 The request attempted to delete a Message in a
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel} that was not
 sent by the currently logged in account.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#INVALID_DM_ACTION
 INVALID_DM_ACTION} &lt;br&gt;
 Attempted to delete a Message in a
 {@link net.dv8tion.jda.api.entities.PrivateChannel PrivateChannel} that was
 not sent by the currently logged in account.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE
 UNKNOWN_MESSAGE} &lt;br&gt;
 The provided {@code id} does not refer to a message sent in this channel or
 the message has already been deleted.&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 The request was attempted after the channel was deleted.&lt;/li&gt;
 &lt;/ul&gt;
messageId: The id of the Message that should be deleted
Return type: @return:{@link net.dv8tion.jda.api.requests.RestAction RestAction} - Type:
         Void</comment>
            <returntype>net.dv8tion.jda.api.requests.restaction.AuditableRestAction</returntype>
            <parameter>
                <name>messageId</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>sendTyping</name>
            <comment>Sends the typing status to discord. This is what is used to make the
 message "X is typing..." appear. &lt;br&gt;
 The typing status only lasts for 10 seconds or until a message is sent.
 &lt;br&gt;
 So if you wish to show continuous typing you will need to call this method
 once every 10 seconds.

 &lt;p&gt;
 The official discord client sends this every 5 seconds even though the
 typing status lasts 10.

 &lt;p&gt;
 The following {@link net.dv8tion.jda.api.requests.ErrorResponse
 ErrorResponses} are possible:
 &lt;ul&gt;
 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS
 MISSING_ACCESS} &lt;br&gt;
 The request was attempted after the account lost access to the
 {@link net.dv8tion.jda.api.entities.Guild Guild} typically due to being
 kicked or removed, or after
 {@link net.dv8tion.jda.api.Permission#MESSAGE_READ Permission.MESSAGE_READ}
 or {@link net.dv8tion.jda.api.Permission#MESSAGE_WRITE
 Permission.MESSAGE_WRITE} was revoked in the
 {@link net.dv8tion.jda.api.entities.TextChannel TextChannel}&lt;/li&gt;

 &lt;li&gt;{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL
 UNKNOWN_CHANNEL} &lt;br&gt;
 The request was attempted after the channel was deleted.&lt;/li&gt;
 &lt;/ul&gt;
Return type: @return:{@link net.dv8tion.jda.api.requests.RestAction RestAction} - Type:
         Void</comment>
            <returntype>net.dv8tion.jda.api.requests.RestAction</returntype>
        </method>
        <property>
            <name>TIME_3_DAYS</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.concrete.ThreadChannel.AutoArchiveDuration</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MemberPermissionOverrides</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>JDA</name>
            <returntype>net.dv8tion.jda.api.JDA</returntype>
            <comment>Returns the {@link net.dv8tion.jda.api.JDA JDA} instance of this
 MessageChannel</comment>
        </property>
        <property>
            <name>TIME_1_WEEK</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.concrete.ThreadChannel.AutoArchiveDuration</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TIME_1_HOUR</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.concrete.ThreadChannel.AutoArchiveDuration</returntype>
            <comment></comment>
        </property>
        <property>
            <name>LatestMessageIdLong</name>
            <returntype>long</returntype>
            <comment>The id for the most recent message sent in this current MessageChannel.
 &lt;br&gt;
 This should only be used if {@link #hasLatestMessage()} returns
 {@code true}!

 &lt;p&gt;
 This value is updated on each
 {@link net.dv8tion.jda.api.events.message.MessageReceivedEvent
 MessageReceivedEvent} and &lt;u&gt;&lt;b&gt;will be reset to {@code null} if the
 message associated with this ID gets deleted&lt;/b&gt;&lt;/u&gt;</comment>
        </property>
        <property>
            <name>History</name>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory</returntype>
            <comment>Creates a new {@link net.dv8tion.jda.api.entities.MessageHistory
 MessageHistory} object for each call of this method. &lt;br&gt;
 MessageHistory is &lt;b&gt;NOT&lt;/b&gt; an internal message cache, but rather it
 queries the Discord servers for previously sent messages.</comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment>This method is a shortcut method to return the following information in the
 following situation: If the MessageChannel is instance of..
 &lt;ul&gt;
 &lt;li&gt;&lt;b&gt;TextChannel&lt;/b&gt; - Returns {@link TextChannel#getName()}&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;PrivateChannel&lt;/b&gt; Returns
 {@link PrivateChannel#getUser()}{@link net.dv8tion.jda.api.entities.User#getName()
 .getName()}&lt;/li&gt;
 &lt;/ul&gt;</comment>
        </property>
        <property>
            <name>ParentCategory</name>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.Category</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Type</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.ChannelType</returntype>
            <comment>The {@link net.dv8tion.jda.api.entities.ChannelType ChannelType} of this
 MessageChannel.</comment>
        </property>
        <property>
            <name>TIME_24_HOURS</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.concrete.ThreadChannel.AutoArchiveDuration</returntype>
            <comment></comment>
        </property>
        <property>
            <name>LatestMessageId</name>
            <returntype>java.lang.String</returntype>
            <comment>The id for the most recent message sent in this current MessageChannel.
 &lt;br&gt;
 This should only be used if {@link #hasLatestMessage()} returns
 {@code true}!

 &lt;p&gt;
 This value is updated on each
 {@link net.dv8tion.jda.api.events.message.MessageReceivedEvent
 MessageReceivedEvent} and &lt;u&gt;&lt;b&gt;will be reset to {@code null} if the
 message associated with this ID gets deleted&lt;/b&gt;&lt;/u&gt;</comment>
        </property>
        <property>
            <name>Id</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>RolePermissionOverrides</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ThreadChannels</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.channel.ThreadChannelwrapper</name>
        <shortname>ThreadChannel</shortname>
        <objectwrapper>net.dv8tion.jda.api.entities.channel.concrete.ThreadChannel</objectwrapper>
        <owner>process</owner>
        <event>onMessage(msg As Mesage, msgID As String)</event>
        <event>onMembers(members As List)</event>
        <event>onHistoryMessage(msg As Message, msgID As String, tag As String)</event>
        <event>onBackupReady(tag As String, logchannel as Object, messages As List)</event>
        <event>onMessages(msgs As List)</event>
        <method>
            <name>removeThreadMember2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>user</name>
                <type>net.dv8tion.jda.api.entities.User</type>
            </parameter>
        </method>
        <method>
            <name>deleteMessageById</name>
            <comment>Attempts to delete a Message from the Discord servers 
 that has the same id as the id provided.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>addThreadMember2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>user</name>
                <type>net.dv8tion.jda.api.entities.User</type>
            </parameter>
        </method>
        <method>
            <name>sendMessage2</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.Message</returntype>
            <parameter>
                <name>mcd</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
        </method>
        <method>
            <name>purgeMessagesById5</name>
            <comment>Convenience method to delete messages in the most efficient way available.</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>messageIds</name>
                <type>long[]</type>
            </parameter>
        </method>
        <method>
            <name>sendMessageObject2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>mcd</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
        </method>
        <method>
            <name>sendMessageFormat</name>
            <comment>Sends a formatted text message to this channel.
 This will fail if this channel is an instance of
 TextChannel and the currently logged in account 
 does not have permissions to send a message to
 this channel.

 format
 The string that should be formatted, if this is null or
 empty the content of the Message would be empty and 
 cause a builder exception.
 args    The arguments for your format</comment>
            <returntype>void</returntype>
            <parameter>
                <name>format</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>args</name>
                <type>java.lang.Object[]</type>
            </parameter>
        </method>
        <method>
            <name>purgeMessagesById2</name>
            <comment>Convenience method to delete messages in the most efficient way available.</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>messageIds</name>
                <type>java.lang.String[]</type>
            </parameter>
        </method>
        <method>
            <name>unpinMessageById</name>
            <comment>Used to unpin a message. Pinned messages are retrievable via
 retrievePinnedMessages()</comment>
            <returntype>void</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>removeThreadMember</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>member</name>
                <type>net.dv8tion.jda.api.entities.Member</type>
            </parameter>
        </method>
        <method>
            <name>removeReactionById</name>
            <comment>Attempts to remove the reaction from a message represented by the specified
 messageId in this MessageChannel.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>unicode</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>sendFile5</name>
            <comment>Uploads a file to the Discord servers and sends it to this
 MessageChannel. Sends the provided Message with the uploaded file.
 If you want to send a Message with the uploaded file, you can add the file
 to the MessageAction returned by sendMessage(Message).
 This allows you to send an InputStream as substitute to a file.</comment>
            <returntype>net.dv8tion.jda.api.entities.Message</returntype>
            <parameter>
                <name>data</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>fileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryAfter2</name>
            <comment>Uses the provided message as a marker and retrieves messages sent after the
 marker. The {@code limit} determines the amount of messages retrieved near
 the marker.</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory</returntype>
            <parameter>
                <name>message</name>
                <type>net.dv8tion.jda.api.entities.Message</type>
            </parameter>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryAround2</name>
            <comment>Uses the provided Message as a marker and retrieves messages 
 around the marker. The limit determines the amount of messages 
 retrieved near the marker. Discord will attempt to evenly split 
 the limit between before and after the marker,
 however in the case that the marker is set near the beginning or near the
 end of the channel's history the amount of messages on each side of the
 marker may be different, and their total count may not equal the provided
 limit.</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory.MessageRetrieveAction</returntype>
            <parameter>
                <name>message</name>
                <type>net.dv8tion.jda.api.entities.Message</type>
            </parameter>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>retrieveMessage4ref</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.Message</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>addReactionById2</name>
            <comment>Attempts to react to a message represented by the specified
 messageId in this MessageChannel.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>messageId</name>
                <type>long</type>
            </parameter>
            <parameter>
                <name>unicode</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>addThreadMemberById</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>id</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>addReactionById3</name>
            <comment>Attempts to react to a message represented by the specified
 messageId in this MessageChannel.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>emote</name>
                <type>net.dv8tion.jda.api.entities.emoji.Emoji</type>
            </parameter>
        </method>
        <method>
            <name>GetIterableHistory4Backup</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>tag</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>logchannel</name>
                <type>net.dv8tion.jda.api.entities.channel.concrete.ThreadChannel</type>
            </parameter>
        </method>
        <method>
            <name>retrieveMessageById</name>
            <comment>Attempts to get a Message from the Discord's servers that has 
 the same id as the id provided.
 Note: when retrieving a Message, you must retrieve it from 
 the channel it was sent in!

 Only bots can use this endpoint!</comment>
            <returntype>void</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>editMessageFormatById</name>
            <comment>Attempts to edit a message by its id in this MessageChannel.</comment>
            <returntype>net.dv8tion.jda.api.requests.restaction.MessageEditAction</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>format</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>args</name>
                <type>java.lang.Object[]</type>
            </parameter>
        </method>
        <method>
            <name>addReactionById</name>
            <comment>Attempts to react to a message represented by the specified
 messageId in this MessageChannel.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>unicode</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryFromBeginning</name>
            <comment>Retrieves messages from the beginning of this MessageChannel. The
 limit determines the amount of messages being retrieved.</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory</returntype>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>sendMessageObjectAndFile</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>mcd</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
            <parameter>
                <name>data</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>fileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SetEventListener</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>sendMessagewithembed</name>
            <comment>Sends a specified MessageEmbed as a Message to
 this channel.
 This will fail if this channel is an instance of
 TextChannel and the currently logged in account 
 does not have permissions to send a message to
 this channel.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mcd</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
            <parameter>
                <name>rows</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>sendMessageEmbeds</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>rows</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>addThreadMember</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>member</name>
                <type>net.dv8tion.jda.api.entities.Member</type>
            </parameter>
        </method>
        <method>
            <name>editMessageById</name>
            <comment>Attempts to edit a message by its id in this MessageChannel. The string
 provided as newContent must have a length that is greater than 0
 and less-than or equal to 2000. This is a Discord message length
 limitation.</comment>
            <returntype>net.dv8tion.jda.api.requests.restaction.MessageEditAction</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>newContent</name>
                <type>java.lang.CharSequence</type>
            </parameter>
        </method>
        <method>
            <name>purgeMessagesById</name>
            <comment>Convenience method to delete messages in the most efficient way available.</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>messageIds</name>
                <type>java.util.List</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryAfter</name>
            <comment>Uses the provided id of a message as a marker and retrieves
 messages sent after the marker ID. The limit determines the amount
 of messages retrieved near the marker.</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>delete</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>retrievePinnedMessages</name>
            <comment>Retrieves a List of Messages that have been pinned in this 
 channel. If no messages have been pinned, this retrieves 
 an empty List.</comment>
            <returntype>java.util.List</returntype>
        </method>
        <method>
            <name>editMessageEmbedById</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>msgID</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>embed</name>
                <type>net.dv8tion.jda.api.entities.MessageEmbed</type>
            </parameter>
        </method>
        <method>
            <name>retrieveMessageById2</name>
            <comment>Attempts to get a Message from the Discord's servers that has 
 the same id as the id provided.
 Note: when retrieving a Message, you must retrieve it from the channel it
 was sent in!

 Only bots can use this endpoint!</comment>
            <returntype>void</returntype>
            <parameter>
                <name>messageId</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>pinMessageById</name>
            <comment>Used to pin a message. Pinned messages are retrievable via
 retrievePinnedMessages()</comment>
            <returntype>void</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>purgeMessages3</name>
            <comment>Convenience method to delete messages in the most efficient way available.</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>messages</name>
                <type>net.dv8tion.jda.api.entities.Message[]</type>
            </parameter>
        </method>
        <method>
            <name>purgeMessages4</name>
            <comment>Convenience method to delete messages in the most efficient way available.</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>messages</name>
                <type>java.util.List</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryBefore</name>
            <comment>Uses the provided {@code id} of a message as a marker and retrieves
 messages sent before the marker ID. The {@code limit} determines the amount
 of messages retrieved near the marker.</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>sendMessageObjectAsync</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>mcd</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
        </method>
        <method>
            <name>sendMessage</name>
            <comment>Sends a specified Message to this channel.
 This will fail if this channel is an instance of
 TextChannel and the currently logged in account 
 does not have permissions to send a message to
 this channel.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>mcd</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
        </method>
        <method>
            <name>sendMessageObjectandDelete</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>mcd</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
            <parameter>
                <name>deleteAfter</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryAround</name>
            <comment>Uses the provided id of a message as a marker and retrieves
 messages sent around the marker. The limit determines the amount of
 messages retrieved near the marker. Discord will attempt to evenly split
 the limit between before and after the marker, however in the case that the
 marker is set near the beginning or near the end of the channel's history
 the amount of messages on each side of the marker may be different, and
 their total count may not equal the provided limit.</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory.MessageRetrieveAction</returntype>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>retrieveThreadMembers</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>sendFile</name>
            <comment>Uploads a file to the Discord servers and sends it to this
 MessageChannel. Sends the provided Message with the
 uploaded file.
 If you want to send a Message with the uploaded file, you can add the file
 to the MessageAction returned by sendMessage(Message).

 Uploading images with Embeds
 When uploading an image you can reference said image using the
 specified filename as URI attachment://filename.ext.
 MessageChannel channel; // = reference of a MessageChannel
 EmbedBuilder embed = new EmbedBuilder();
 File file = new File("cat.gif");
 embed.setImage("attachment://cat.gif")
      .setDescription("This is a cute cat :3");
 channel.sendFile(file).embed(embed.build()).queue();</comment>
            <returntype>void</returntype>
            <parameter>
                <name>path</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>filename</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryBefore2</name>
            <comment>Uses the provided message as a marker and retrieves messages sent before
 the marker. The {@code limit} determines the amount of messages retrieved
 near the marker.</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory</returntype>
            <parameter>
                <name>message</name>
                <type>net.dv8tion.jda.api.entities.Message</type>
            </parameter>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>sendMessageObjectAndFileWithEmbed</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>mcd</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
            <parameter>
                <name>data</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>fileName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>embed</name>
                <type>net.dv8tion.jda.api.entities.MessageEmbed</type>
            </parameter>
        </method>
        <method>
            <name>deleteMessageById2</name>
            <comment>Attempts to delete a Message from the Discord servers that has 
 the same id as the id provided.	 *
messageId: The id of the Message that should be deleted</comment>
            <returntype>void</returntype>
            <parameter>
                <name>messageId</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>sendTyping</name>
            <comment>Sends the typing status to discord. This is what is used to make the
 message "X is typing..." appear.
 The typing status only lasts for 10 seconds or until a message is sent.
 
 So if you wish to show continuous typing you will need to call this method
 once every 10 seconds.</comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>isInvitable</name>
            <returntype>boolean</returntype>
            <comment>Whether this thread is invitable.
 &lt;br&gt;
 A thread that is invitable can have non-moderators invite other non-moderators to it.
 A thread that is not invitable can only have moderators invite others to it.

 &lt;p&gt;This property is exclusive to private threads.</comment>
        </property>
        <property>
            <name>PermissionVIEW_CHANNEL</name>
            <returntype EnumType="true">net.dv8tion.jda.api.Permission</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Owner</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Inviteable</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>AppliedTags</name>
            <returntype>java.util.List</returntype>
            <comment>The {@link net.dv8tion.jda.api.entities.channel.forums.ForumTag forum tags} applied to this thread.
 &lt;br&gt;This will be an empty list if the thread was not created in a {@link net.dv8tion.jda.api.entities.channel.concrete.ForumChannel ForumChannel}.</comment>
        </property>
        <property>
            <name>JDA</name>
            <returntype>net.dv8tion.jda.api.JDA</returntype>
            <comment>Returns the JDA instance of this MessageChannel

 return the corresponding JDA instance</comment>
        </property>
        <property>
            <name>LatestMessageIdLong</name>
            <returntype>long</returntype>
            <comment>The id for the most recent message sent in this current MessageChannel.
 This should only be used if hasLatestMessage() returns true!</comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment>Returns the {@link net.dv8tion.jda.api.entities.Guild Guild} that this GuildChannel is part of.</comment>
        </property>
        <property>
            <name>Manager</name>
            <returntype>net.dv8tion.jda.api.managers.channel.concrete.ThreadChannelManager</returntype>
            <comment></comment>
        </property>
        <property>
            <name>History</name>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory</returntype>
            <comment>Creates a new MessageHistory object for each call of 
 this method. MessageHistory is NOT an internal 
 message cache, but rather it queries the Discord servers 
 for previously sent messages.

 return A MessageHistory related to this channel.</comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment>This method is a shortcut method to return the following information in the
 following situation: If the MessageChannel is instance of..</comment>
        </property>
        <property>
            <name>Archived</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Locked</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>isLocked</name>
            <returntype>boolean</returntype>
            <comment>Whether this thread is locked or not.

 &lt;p&gt;Locked threads cannot have new messages posted to them, or members join or leave them.
 Threads can only be locked and unlocked by moderators.</comment>
        </property>
        <property>
            <name>LatestMessageId</name>
            <returntype>java.lang.String</returntype>
            <comment>The id for the most recent message sent in this current MessageChannel.
 This should only be used if hasLatestMessage() returns true!
 return The most recent message's id</comment>
        </property>
        <property>
            <name>ID</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ParentChannelName</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ParentChannel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.unions.IThreadContainerUnion</returntype>
            <comment></comment>
        </property>
        <property>
            <name>isPinned</name>
            <returntype>boolean</returntype>
            <comment>Whether this thread is a pinned forum post.</comment>
        </property>
        <property>
            <name>ThreadMembers</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Public</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Type</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.ChannelType</returntype>
            <comment>The ChannelType of this MessageChannel.</comment>
        </property>
        <property>
            <name>IterableHistory</name>
            <returntype>net.dv8tion.jda.api.requests.restaction.pagination.MessagePaginationAction</returntype>
            <comment>A PaginationAction implementation that allows to
 iterate over recent Messages of this MessageChannel.
 This is not a cache for received messages and it can only view
 messages that were sent before. This iterates 
 chronologically backwards (from present to past).

 It is recommended not to use this in an enhanced for-loop without end
 conditions as it might cause memory overflows in channels with a long
 message history.</comment>
        </property>
        <property>
            <name>ParentChannelId</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Joined</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Members</name>
            <returntype>java.util.List</returntype>
            <comment>A List of all Members that are in this GuildChannel</comment>
        </property>
        <property>
            <name>MessageCount</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.channel.VoiceChannelwrapper</name>
        <shortname>VoiceChannel</shortname>
        <objectwrapper>net.dv8tion.jda.api.entities.channel.concrete.VoiceChannel</objectwrapper>
        <owner>process</owner>
        <method>
            <name>GetPermissionOverride</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.PermissionOverride</returntype>
            <parameter>
                <name>role</name>
                <type>net.dv8tion.jda.api.entities.Role</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>IdLong</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ParentCategory</name>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.Category</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Parent</name>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.Category</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Id</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Manager</name>
            <returntype>net.dv8tion.jda.api.managers.channel.concrete.VoiceChannelManager</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Bitrate</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Members</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.command.AutoCompleteQuerywrapper</name>
        <shortname>AutoCompleteQuery</shortname>
        <objectwrapper>net.dv8tion.jda.api.interactions.AutoCompleteQuery</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Type</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Value</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.command.ButtonInteractionEventwrapper</name>
        <shortname>ButtonInteractionEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.interaction.component.ButtonInteractionEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>deferEditandQueue</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>deferReply</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.requests.restaction.interactions.ReplyCallbackAction</returntype>
        </method>
        <method>
            <name>reply2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>msg</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
        </method>
        <method>
            <name>deferReplyandQueue</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>editMessageEmbeds</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.InteractionHook</returntype>
            <parameter>
                <name>rows</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>editMessage2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>content</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>e</name>
                <type>net.dv8tion.jda.api.events.interaction.component.ButtonInteractionEvent</type>
            </parameter>
        </method>
        <method>
            <name>deferEdit</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.requests.restaction.interactions.MessageEditCallbackAction</returntype>
        </method>
        <method>
            <name>editMessage</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>content</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageEditData</type>
            </parameter>
        </method>
        <method>
            <name>replycomplete</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>content</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>editButton</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>btn</name>
                <type>net.dv8tion.jda.api.interactions.components.buttons.Button</type>
            </parameter>
        </method>
        <method>
            <name>reply</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>content</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>ComponentType</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.components.Component.Type</returntype>
            <comment></comment>
        </property>
        <property>
            <name>InteractionId</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>User</name>
            <returntype>net.dv8tion.jda.api.entities.User</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Message</name>
            <returntype>net.dv8tion.jda.api.entities.Message</returntype>
            <comment></comment>
        </property>
        <property>
            <name>isFromGuild</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>JDA</name>
            <returntype>net.dv8tion.jda.api.JDA</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Channel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.unions.MessageChannelUnion</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Native</name>
            <returntype>net.dv8tion.jda.api.events.interaction.component.ButtonInteractionEvent</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TypeRaw</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Type</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.InteractionType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>InteractionHook</name>
            <returntype>net.dv8tion.jda.api.interactions.InteractionHook</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Button</name>
            <returntype>net.dv8tion.jda.api.interactions.components.buttons.Button</returntype>
            <comment></comment>
        </property>
        <property>
            <name>isAcknowledged</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ResponseNumber</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Component</name>
            <returntype>net.dv8tion.jda.api.interactions.components.buttons.Button</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ChannelType</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.ChannelType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ComponentId</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Member</name>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.command.CommandAutoCompleteInteractionEventwrapper</name>
        <shortname>CommandAutoCompleteInteractionEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.interaction.command.CommandAutoCompleteInteractionEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>replyChoices</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>rows</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>getOptionAsRole</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.Role</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getOption</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.commands.OptionMapping</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getOptionAsLong</name>
            <comment></comment>
            <returntype>long</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getOptionsByType</name>
            <comment></comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>tp</name>
                <type EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>createChoice</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.commands.Command.Choice</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getOptionAsUser</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.User</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getOptionAsGuildChannel</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.channel.unions.GuildChannelUnion</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getOptionAsMember</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getOptionAsString</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getOptionsByName</name>
            <comment></comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>Options</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>FocusedOption</name>
            <returntype>net.dv8tion.jda.api.interactions.AutoCompleteQuery</returntype>
            <comment></comment>
        </property>
        <property>
            <name>InteractionId</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>User</name>
            <returntype>net.dv8tion.jda.api.entities.User</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SubcommandGroup</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>isFromGuild</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>JDA</name>
            <returntype>net.dv8tion.jda.api.JDA</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ChannelType2</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
        <property>
            <name>CommandIdLong</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TypeRaw</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Type</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.InteractionType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>CommandString</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MessageChannel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.middleman.MessageChannel</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SubcommandName</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>isAcknowledged</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>CommandId</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ResponseNumber</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ChannelType</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.ChannelType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Member</name>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.command.CommandDataBuilderContextwrapper</name>
        <shortname>CommandDataBuilderContext</shortname>
        <owner>process</owner>
        <method>
            <name>setName</name>
            <comment>Valid for Slashcommands only</comment>
            <returntype>de.donmanfred.command.CommandDataBuilderContextwrapper</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ctxType</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setGuildOnly</name>
            <comment>Valid for User-, MessageCommands</comment>
            <returntype>de.donmanfred.command.CommandDataBuilderContextwrapper</returntype>
            <parameter>
                <name>enabled</name>
                <type>boolean</type>
            </parameter>
        </method>
        <property>
            <name>CommandData</name>
            <returntype>net.dv8tion.jda.api.interactions.commands.build.CommandData</returntype>
            <comment>Valid for User, Message</comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment>Valid for User-, Message, Context-Commands</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.command.CommandDataBuilderMessagewrapper</name>
        <shortname>CommandDataBuilderMessage</shortname>
        <owner>process</owner>
        <method>
            <name>setName</name>
            <comment>Valid for Slashcommands only</comment>
            <returntype>de.donmanfred.command.CommandDataBuilderMessagewrapper</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setGuildOnly</name>
            <comment>Valid for User-, MessageCommands</comment>
            <returntype>de.donmanfred.command.CommandDataBuilderMessagewrapper</returntype>
            <parameter>
                <name>enabled</name>
                <type>boolean</type>
            </parameter>
        </method>
        <property>
            <name>UserName</name>
            <returntype>java.lang.String</returntype>
            <comment>Valid for User-, Message-Commands</comment>
        </property>
        <property>
            <name>CommandData</name>
            <returntype>net.dv8tion.jda.api.interactions.commands.build.CommandData</returntype>
            <comment>Valid for User, Message</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.command.CommandDataBuilderSlashwrapper</name>
        <shortname>CommandDataBuilderSlash</shortname>
        <owner>process</owner>
        <method>
            <name>setName</name>
            <comment>Valid for Slashcommands only</comment>
            <returntype>net.dv8tion.jda.api.interactions.commands.build.SlashCommandData</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>addOption</name>
            <comment>Valid for Slashcommands only</comment>
            <returntype>net.dv8tion.jda.api.interactions.commands.build.CommandData</returntype>
            <parameter>
                <name>type</name>
                <type EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</type>
            </parameter>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>description</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>required</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>autoComplete</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>addSubcommandGroups</name>
            <comment>Valid for Slashcommands only</comment>
            <returntype>net.dv8tion.jda.api.interactions.commands.build.CommandData</returntype>
            <parameter>
                <name>rows</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>setDescription</name>
            <comment>Valid for Slashcommands only</comment>
            <returntype>net.dv8tion.jda.api.interactions.commands.build.SlashCommandData</returntype>
            <parameter>
                <name>description</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>description</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>addOptions</name>
            <comment>Valid for Slashcommands only</comment>
            <returntype>net.dv8tion.jda.api.interactions.commands.build.CommandData</returntype>
            <parameter>
                <name>rows</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>setGuildOnly</name>
            <comment>Valid for User-, MessageCommands</comment>
            <returntype>net.dv8tion.jda.api.interactions.commands.build.SlashCommandData</returntype>
            <parameter>
                <name>enabled</name>
                <type>boolean</type>
            </parameter>
        </method>
        <property>
            <name>Description</name>
            <returntype>java.lang.String</returntype>
            <comment>Valid for Slashcommands only</comment>
        </property>
        <property>
            <name>CommandData</name>
            <returntype>net.dv8tion.jda.api.interactions.commands.build.SlashCommandData</returntype>
            <comment>Valid for Slashcommands only</comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment>Valid for Slashcommands only</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.command.CommandDataBuilderUserwrapper</name>
        <shortname>CommandDataBuilderUser</shortname>
        <owner>process</owner>
        <method>
            <name>setName</name>
            <comment>Valid for Slashcommands only</comment>
            <returntype>de.donmanfred.command.CommandDataBuilderUserwrapper</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setGuildOnly</name>
            <comment></comment>
            <returntype>de.donmanfred.command.CommandDataBuilderUserwrapper</returntype>
            <parameter>
                <name>enabled</name>
                <type>boolean</type>
            </parameter>
        </method>
        <property>
            <name>UserName</name>
            <returntype>java.lang.String</returntype>
            <comment>Valid for User-, Message-Commands</comment>
        </property>
        <property>
            <name>CommandData</name>
            <returntype>net.dv8tion.jda.api.interactions.commands.build.CommandData</returntype>
            <comment>Valid for User, Message</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.command.Commandwrapper</name>
        <shortname>Command</shortname>
        <objectwrapper>net.dv8tion.jda.api.interactions.commands.Command</objectwrapper>
        <owner>process</owner>
        <method>
            <name>toString</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>IdLong</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Options</name>
            <returntype>java.util.List</returntype>
            <comment>The Options of this command.

 return Immutable list of command options</comment>
        </property>
        <property>
            <name>Description</name>
            <returntype>java.lang.String</returntype>
            <comment>The description of this command.

 return The description</comment>
        </property>
        <property>
            <name>JDA</name>
            <returntype>net.dv8tion.jda.api.JDA</returntype>
            <comment>Returns the JDA instance of this Command
 return the corresponding JDA instance</comment>
        </property>
        <property>
            <name>SubcommandGroups</name>
            <returntype>java.util.List</returntype>
            <comment>The SubcommandGroups of this command.

 return Immutable list of subcommand groups</comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment>The name of this command.

 return The name</comment>
        </property>
        <property>
            <name>Subcommands</name>
            <returntype>java.util.List</returntype>
            <comment>The Subcommands of this command.</comment>
        </property>
        <property>
            <name>GuildOnly</name>
            <returntype>boolean</returntype>
            <comment>Whether this command is enabled for everyone by default.</comment>
        </property>
        <property>
            <name>ApplicationId</name>
            <returntype>java.lang.String</returntype>
            <comment>The id of the application this command belongs to.</comment>
        </property>
        <property>
            <name>AsMention</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ApplicationIdLong</name>
            <returntype>long</returntype>
            <comment>The id of the application this command belongs to.

 return The application id</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.command.EventButtonwrapper</name>
        <shortname>EventButton</shortname>
        <objectwrapper>net.dv8tion.jda.api.interactions.components.buttons.Button</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>withUrl</name>
            <comment>Returns a copy of this button with the provided url.

 param  url - The url to use</comment>
            <returntype>de.donmanfred.command.EventButtonwrapper</returntype>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>withId</name>
            <comment>Returns a copy of this button with the provided id.

 param  id - The id to use</comment>
            <returntype>de.donmanfred.command.EventButtonwrapper</returntype>
            <parameter>
                <name>id</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>asEnabled</name>
            <comment>Returns a copy of this button with isDisabled() set to false.

 return New enabled button instance</comment>
            <returntype>de.donmanfred.command.EventButtonwrapper</returntype>
        </method>
        <method>
            <name>withDisabled</name>
            <comment>Returns a copy of this button with isDisabled() set to the provided value.

 param  disabled  True, if this button should be disabled

 return New enabled/disabled button instance</comment>
            <returntype>de.donmanfred.command.EventButtonwrapper</returntype>
            <parameter>
                <name>disabled</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withStyle</name>
            <comment>Returns a copy of this button with the provided style.
 You cannot use this convert link buttons.

 param  style - The style to use

 throws IllegalArgumentException
         If the style is null or tries to change whether this button is a LINK button

 return New button with the changed style</comment>
            <returntype>de.donmanfred.command.EventButtonwrapper</returntype>
            <parameter>
                <name>style</name>
                <type EnumType="true">net.dv8tion.jda.api.interactions.components.buttons.ButtonStyle</type>
            </parameter>
        </method>
        <method>
            <name>withEmoji</name>
            <comment>Returns a copy of this button with the attached Emoji.</comment>
            <returntype>de.donmanfred.command.EventButtonwrapper</returntype>
            <parameter>
                <name>emoji</name>
                <type>net.dv8tion.jda.api.entities.emoji.Emoji</type>
            </parameter>
        </method>
        <method>
            <name>asDisabled</name>
            <comment>Returns a copy of this button with isDisabled() set to true.

 return New disabled button instance</comment>
            <returntype>de.donmanfred.command.EventButtonwrapper</returntype>
        </method>
        <method>
            <name>withLabel</name>
            <comment>Returns a copy of this button with the provided label.

 param  label - The label to use

 throws IllegalArgumentException
         If the label is not between 1-80 characters

 return New button with the changed label</comment>
            <returntype>de.donmanfred.command.EventButtonwrapper</returntype>
            <parameter>
                <name>label</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>DANGER</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.components.buttons.ButtonStyle</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SUCCESS</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.components.buttons.ButtonStyle</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Label</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SECONDARY</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.components.buttons.ButtonStyle</returntype>
            <comment></comment>
        </property>
        <property>
            <name>PRIMARY</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.components.buttons.ButtonStyle</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Url</name>
            <returntype>java.lang.String</returntype>
            <comment>The target URL for this button, if it is a {@link ButtonStyle#LINK LINK}-Style Button.</comment>
        </property>
        <property>
            <name>Native</name>
            <returntype>net.dv8tion.jda.api.interactions.components.buttons.Button</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Type</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.components.Component.Type</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Emoji</name>
            <returntype>net.dv8tion.jda.api.entities.emoji.Emoji</returntype>
            <comment>The emoji attached to this button.
 This can be either isUnicode isCustom.

 You can use withEmoji(Emoji) to create a button with an Emoji.

 return Emoji for this button</comment>
        </property>
        <property>
            <name>Style</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.components.buttons.ButtonStyle</returntype>
            <comment>The style of this button.
 return ButtonStyle</comment>
        </property>
        <property>
            <name>LINK</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.components.buttons.ButtonStyle</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Id</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>UNKNOWN</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.components.buttons.ButtonStyle</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Disabled</name>
            <returntype>boolean</returntype>
            <comment>Whether this button is disabled.

 You can use asDisabled() or asEnabled() to create enabled/disabled instances.

 return True, if this button is disabled</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.command.InteractionHookwrapper</name>
        <shortname>InteractionHook</shortname>
        <objectwrapper>net.dv8tion.jda.api.interactions.InteractionHook</objectwrapper>
        <owner>process</owner>
        <method>
            <name>editOriginalFormat</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.Message</returntype>
            <parameter>
                <name>format</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>args</name>
                <type>java.lang.Object[]</type>
            </parameter>
        </method>
        <method>
            <name>editOriginal</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>content</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>editOriginal5</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>message</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageEditData</type>
            </parameter>
        </method>
        <method>
            <name>editMessageComponentsOriginal</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>rows</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>deleteOriginal</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>setEphemeral</name>
            <comment></comment>
            <returntype>de.donmanfred.command.InteractionHookwrapper</returntype>
            <parameter>
                <name>ephemeral</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>ClearButtons</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>editMessageComponentsById</name>
            <comment></comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>messageID</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>rows</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <property>
            <name>InteractionToken</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>InteractionId</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>JDA</name>
            <returntype>net.dv8tion.jda.api.JDA</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.command.MessageCommandDatawrapper</name>
        <shortname>MessageCommandData</shortname>
        <objectwrapper>net.dv8tion.jda.api.interactions.commands.build.CommandData</objectwrapper>
        <owner>process</owner>
        <method>
            <name>setName</name>
            <comment></comment>
            <returntype>de.donmanfred.command.MessageCommandDatawrapper</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setGuildOnly</name>
            <comment></comment>
            <returntype>de.donmanfred.command.MessageCommandDatawrapper</returntype>
            <parameter>
                <name>enabled</name>
                <type>boolean</type>
            </parameter>
        </method>
        <property>
            <name>Type</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.commands.Command.Type</returntype>
            <comment></comment>
        </property>
        <property>
            <name>CommandData</name>
            <returntype>net.dv8tion.jda.api.interactions.commands.build.CommandData</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.command.MessageContextCommandwrapper</name>
        <shortname>MessageContextCommand</shortname>
        <objectwrapper>net.dv8tion.jda.api.interactions.commands.build.CommandData</objectwrapper>
        <owner>process</owner>
        <method>
            <name>setName</name>
            <comment></comment>
            <returntype>de.donmanfred.command.MessageContextCommandwrapper</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setGuildOnly</name>
            <comment></comment>
            <returntype>de.donmanfred.command.MessageContextCommandwrapper</returntype>
            <parameter>
                <name>enabled</name>
                <type>boolean</type>
            </parameter>
        </method>
        <property>
            <name>Type</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.commands.Command.Type</returntype>
            <comment></comment>
        </property>
        <property>
            <name>CommandData</name>
            <returntype>net.dv8tion.jda.api.interactions.commands.build.CommandData</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.command.MessageContextInteractionEventwrapper</name>
        <shortname>MessageContextInteractionEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.interaction.command.MessageContextInteractionEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>deferReply</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>reply2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>mcd</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
        </method>
        <method>
            <name>replywithActionRow</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>content</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>row</name>
                <type>net.dv8tion.jda.api.interactions.components.ActionComponent</type>
            </parameter>
        </method>
        <method>
            <name>getOptionAsRole</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.Role</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>reply3</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>mcd</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
            <parameter>
                <name>Ephemeral</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>getOption</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.commands.OptionMapping</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getOptionAsChannel</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.channel.unions.GuildChannelUnion</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getOptionAsLong</name>
            <comment></comment>
            <returntype>long</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getOptionsByType</name>
            <comment></comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>tp</name>
                <type EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>getOptionAsUser</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.User</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>replywithActionRow2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>content</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>row</name>
                <type>net.dv8tion.jda.api.interactions.components.ActionComponent</type>
            </parameter>
            <parameter>
                <name>Ephemeral</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>replycomplete</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.InteractionHook</returntype>
            <parameter>
                <name>content</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getOptionAsMember</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getOptionAsString</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getOptionsByName</name>
            <comment></comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>deferReply2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ephemeral</name>
                <type>boolean</type>
            </parameter>
        </method>
        <property>
            <name>Options</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>User</name>
            <returntype>net.dv8tion.jda.api.entities.User</returntype>
            <comment></comment>
        </property>
        <property>
            <name>JDA</name>
            <returntype>net.dv8tion.jda.api.JDA</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ChannelType2</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
        <property>
            <name>CommandIdLong</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Target</name>
            <returntype>net.dv8tion.jda.api.entities.Message</returntype>
            <comment></comment>
        </property>
        <property>
            <name>CommandString</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TargetType</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.commands.context.ContextInteraction.ContextTarget</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ResponseNumber</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Member</name>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <comment></comment>
        </property>
        <property>
            <name>InteractionId</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SubcommandGroup</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>isFromGuild</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Channel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.middleman.MessageChannel</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TypeRaw</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Type</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.InteractionType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>InteractionHook</name>
            <returntype>net.dv8tion.jda.api.interactions.InteractionHook</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MessageChannel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.middleman.MessageChannel</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SubcommandName</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>isAcknowledged</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>CommandId</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ChannelType</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.ChannelType</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.command.ModalInteractionEventwrapper</name>
        <shortname>ModalInteractionEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.interaction.ModalInteractionEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>deferReply</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>reply2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>mcd</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
        </method>
        <method>
            <name>replywithActionRow</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>content</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>row</name>
                <type>net.dv8tion.jda.api.interactions.components.ActionComponent</type>
            </parameter>
        </method>
        <method>
            <name>reply3</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>mcd</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
            <parameter>
                <name>Ephemeral</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>replywithActionRow2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>content</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>row</name>
                <type>net.dv8tion.jda.api.interactions.components.ActionComponent</type>
            </parameter>
            <parameter>
                <name>Ephemeral</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>replycomplete</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.InteractionHook</returntype>
            <parameter>
                <name>content</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>deferReply2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ephemeral</name>
                <type>boolean</type>
            </parameter>
        </method>
        <property>
            <name>InteractionId</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>User</name>
            <returntype>net.dv8tion.jda.api.entities.User</returntype>
            <comment></comment>
        </property>
        <property>
            <name>isFromGuild</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>JDA</name>
            <returntype>net.dv8tion.jda.api.JDA</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Channel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.unions.MessageChannelUnion</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Values</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ChannelType2</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Token</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ModalId</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TypeRaw</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>GuildChannel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.middleman.GuildChannel</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Type</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.InteractionType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>InteractionHook</name>
            <returntype>net.dv8tion.jda.api.interactions.InteractionHook</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MessageChannel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.middleman.MessageChannel</returntype>
            <comment></comment>
        </property>
        <property>
            <name>isAcknowledged</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ResponseNumber</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ChannelType</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.ChannelType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Member</name>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.command.ModalMappingwrapper</name>
        <shortname>ModalMapping</shortname>
        <objectwrapper>net.dv8tion.jda.api.interactions.modals.ModalMapping</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Type</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Value</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.command.Modalwrapper</name>
        <shortname>Modal</shortname>
        <objectwrapper>net.dv8tion.jda.api.interactions.modals.Modal</objectwrapper>
        <owner>process</owner>
        <method>
            <name>create</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.modals.Modal</returntype>
            <parameter>
                <name>customId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>title</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>rows</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Title</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Id</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ActionRows</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.command.OptionDatawrapper</name>
        <shortname>OptionData</shortname>
        <objectwrapper>net.dv8tion.jda.api.interactions.commands.build.OptionData</objectwrapper>
        <owner>process</owner>
        <method>
            <name>SetChannelTypePUBLIC_THREAD</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.commands.build.OptionData</returntype>
        </method>
        <method>
            <name>SetChannelTypeTextandVoice</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.commands.build.OptionData</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>param type can be one of 
 BOOLEAN, CHANNEL, INTEGER, NUMBER, ROLE, 
 USER, STRING, SUB_COMMAND, SUB_COMMAND_GROUP 
 or ATTACHMENT</comment>
            <returntype>void</returntype>
            <parameter>
                <name>type</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>description</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>isRequired</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>GetchannelType</name>
            <comment>Possible Values:
 CATEGORY, GROUP,GUILD_NEWS_THREAD, 
 GUILD_PRIVATE_THREAD, GUILD_PUBLIC_THREAD,
 NEWS, TEXT or VOICE</comment>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.ChannelType</returntype>
            <parameter>
                <name>channeltype</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>toJson</name>
            <comment></comment>
            <returntype>byte[]</returntype>
        </method>
        <method>
            <name>Initialize3</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>type</name>
                <type EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</type>
            </parameter>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>description</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>isRequired</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>AutoComplete</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>Initialize2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>type</name>
                <type EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</type>
            </parameter>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>description</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>isRequired</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>setChannelTypes</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.commands.build.OptionData</returntype>
            <parameter>
                <name>rows</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>addChoice</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.commands.build.OptionData</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SetChannelTypeText</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.commands.build.OptionData</returntype>
        </method>
        <method>
            <name>SetChannelTypeVOICE</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.commands.build.OptionData</returntype>
        </method>
        <property>
            <name>OptionTypeUSER</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>OptionTypeINTEGER</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>OptionTypeATTACHMENT</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>OptionTypeUNKNOWN</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>OptionTypeBOOLEAN</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>OptionTypeCHANNEL</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Type</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Required</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>required</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>OptionTypeSUB_COMMAND_GROUP</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>OptionData</name>
            <returntype>net.dv8tion.jda.api.interactions.commands.build.OptionData</returntype>
            <comment></comment>
        </property>
        <property>
            <name>OptionTypeSUB_COMMAND</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>OptionTypeNUMBER</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>AutoComplete</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>autocomplete</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>OptionTypeROLE</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>OptionTypeSTRING</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.command.OptionMappingwrapper</name>
        <shortname>OptionMapping</shortname>
        <objectwrapper>net.dv8tion.jda.api.interactions.commands.OptionMapping</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>OptionMapping</name>
            <returntype>net.dv8tion.jda.api.interactions.commands.OptionMapping</returntype>
            <comment></comment>
        </property>
        <property>
            <name>OptionTypeINTEGER</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>OptionTypeUNKNOWN</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>AsMentionable</name>
            <returntype>net.dv8tion.jda.api.entities.IMentionable</returntype>
            <comment></comment>
        </property>
        <property>
            <name>AsMember</name>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <comment></comment>
        </property>
        <property>
            <name>OptionTypeBOOLEAN</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>AsLong</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>AsRole</name>
            <returntype>net.dv8tion.jda.api.entities.Role</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MentionedRoles</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>AsString</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MentionedEmotes</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>OptionTypeSUB_COMMAND_GROUP</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MentionedUsers</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>AsUser</name>
            <returntype>net.dv8tion.jda.api.entities.User</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MentionedMembers</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>OptionTypeUSER</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>AsGuildChannel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.unions.GuildChannelUnion</returntype>
            <comment></comment>
        </property>
        <property>
            <name>AsBoolean</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>OptionTypeCHANNEL</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MentionedChannels</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Type</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>AsInt</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>AsAttachment</name>
            <returntype>net.dv8tion.jda.api.entities.Message.Attachment</returntype>
            <comment></comment>
        </property>
        <property>
            <name>OptionTypeSUB_COMMAND</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>OptionTypeROLE</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>OptionTypeSTRING</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.command.SelectMenuBuilderwrapper</name>
        <shortname>SelectMenuBuilder</shortname>
        <owner>process</owner>
        <method>
            <name>InitializeEntitySelectMenu</name>
            <comment>Supported entity types for a EntitySelectMenu.
 Note that some combinations are unsupported by Discord, 
 due to the restrictive API design.

 The only combination that is currently supported is USER + ROLE
 (often referred to as "mentionables").
 Combinations such as ROLE + CHANNEL are currently not supported.</comment>
            <returntype>net.dv8tion.jda.api.interactions.components.selections.SelectMenu</returntype>
            <parameter>
                <name>CustomID</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>placeholder</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>target</name>
                <type EnumType="true">net.dv8tion.jda.api.interactions.components.selections.EntitySelectMenu.SelectTarget</type>
            </parameter>
        </method>
        <method>
            <name>InitializeEntitySelectMenuMentionables</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.components.selections.SelectMenu</returntype>
            <parameter>
                <name>CustomID</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>placeholder</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>InitializeStringSelectMenu</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.components.selections.SelectMenu</returntype>
            <parameter>
                <name>CustomID</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>placeholder</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>rows</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>InitializeStringSelectMenu2</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.components.selections.SelectMenu</returntype>
            <parameter>
                <name>CustomID</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>placeholder</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>minimum</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>maximum</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>rows</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>de.donmanfred.command.SelectOptionwrapper</name>
        <shortname>SelectOption</shortname>
        <objectwrapper>net.dv8tion.jda.api.interactions.components.selections.SelectOption</objectwrapper>
        <owner>process</owner>
        <method>
            <name>toData</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Description</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Label</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Value</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Emoji</name>
            <returntype>net.dv8tion.jda.api.entities.emoji.Emoji</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Default</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.command.SelectTargetwrapper</name>
        <shortname>SelectTargets</shortname>
        <owner>process</owner>
        <property>
            <name>SelectTargetROLE</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.components.selections.EntitySelectMenu.SelectTarget</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SelectTargetCHANNEL</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.components.selections.EntitySelectMenu.SelectTarget</returntype>
            <comment>Supported entity types for a EntitySelectMenu.
 Note that some combinations are unsupported by Discord, 
 due to the restrictive API design.
 
  The only combination that is currently supported is USER + ROLE 
  (often referred to as "mentionables").
  Combinations such as ROLE + CHANNEL are currently not supported.</comment>
        </property>
        <property>
            <name>SelectTargetUSER</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.components.selections.EntitySelectMenu.SelectTarget</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.command.SlashCommandDatawrapper</name>
        <shortname>SlashCommandData</shortname>
        <objectwrapper>net.dv8tion.jda.api.interactions.commands.build.SlashCommandData</objectwrapper>
        <owner>process</owner>
        <method>
            <name>setName</name>
            <comment></comment>
            <returntype>de.donmanfred.command.SlashCommandDatawrapper</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>addSubcommand</name>
            <comment></comment>
            <returntype>de.donmanfred.command.SlashCommandDatawrapper</returntype>
            <parameter>
                <name>subcmd</name>
                <type>net.dv8tion.jda.api.interactions.commands.build.SubcommandData</type>
            </parameter>
        </method>
        <method>
            <name>setDescription</name>
            <comment></comment>
            <returntype>de.donmanfred.command.SlashCommandDatawrapper</returntype>
            <parameter>
                <name>description</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>description</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setGuildOnly</name>
            <comment></comment>
            <returntype>de.donmanfred.command.SlashCommandDatawrapper</returntype>
            <parameter>
                <name>enabled</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>toJson</name>
            <comment></comment>
            <returntype>byte[]</returntype>
        </method>
        <method>
            <name>addOption</name>
            <comment></comment>
            <returntype>de.donmanfred.command.SlashCommandDatawrapper</returntype>
            <parameter>
                <name>optType</name>
                <type EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</type>
            </parameter>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>description</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>addOptions</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.commands.build.CommandData</returntype>
            <parameter>
                <name>rows</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>addOption2</name>
            <comment></comment>
            <returntype>de.donmanfred.command.SlashCommandDatawrapper</returntype>
            <parameter>
                <name>optType</name>
                <type EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</type>
            </parameter>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>description</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>required</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>addSubcommandGroup</name>
            <comment></comment>
            <returntype>de.donmanfred.command.SlashCommandDatawrapper</returntype>
            <parameter>
                <name>group</name>
                <type>net.dv8tion.jda.api.interactions.commands.build.SubcommandGroupData</type>
            </parameter>
        </method>
        <property>
            <name>Description</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Subcommands</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>CommandData</name>
            <returntype>net.dv8tion.jda.api.interactions.commands.build.CommandData</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SubcommandGroups</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.command.SubcommandDatawrapper</name>
        <shortname>SubcommandData</shortname>
        <objectwrapper>net.dv8tion.jda.api.interactions.commands.build.SubcommandData</objectwrapper>
        <owner>process</owner>
        <method>
            <name>setName</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.commands.build.SubcommandData</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setDescription</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.commands.build.SubcommandData</returntype>
            <parameter>
                <name>description</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>description</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>addOptions</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.commands.build.SubcommandData</returntype>
            <parameter>
                <name>rows</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <property>
            <name>OptionTypeUSER</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Options</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>OptionTypeINTEGER</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Description</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>OptionTypeUNKNOWN</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>OptionTypeBOOLEAN</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>OptionTypeCHANNEL</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>OptionTypeSUB_COMMAND_GROUP</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>OptionTypeSUB_COMMAND</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>CommandData</name>
            <returntype>net.dv8tion.jda.api.interactions.commands.build.SubcommandData</returntype>
            <comment></comment>
        </property>
        <property>
            <name>OptionTypeROLE</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>OptionTypeSTRING</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.command.SubcommandGroupDatawrapper</name>
        <shortname>SubcommandGroupData</shortname>
        <objectwrapper>net.dv8tion.jda.api.interactions.commands.build.SubcommandGroupData</objectwrapper>
        <owner>process</owner>
        <method>
            <name>addSubcommand</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.commands.build.SubcommandGroupData</returntype>
            <parameter>
                <name>subcmddata</name>
                <type>net.dv8tion.jda.api.interactions.commands.build.SubcommandData</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>description</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>NativeObject</name>
            <returntype>net.dv8tion.jda.api.interactions.commands.build.SubcommandGroupData</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Description</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Subcommands</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SubcommandGroupData</name>
            <returntype>net.dv8tion.jda.api.interactions.commands.build.SubcommandGroupData</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.command.SubcommandGroupwrapper</name>
        <shortname>SubcommandGroup</shortname>
        <objectwrapper>net.dv8tion.jda.api.interactions.commands.Command.SubcommandGroup</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>SubCommands</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Description</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.command.SubCommandwrapper</name>
        <shortname>Subcommand</shortname>
        <objectwrapper>net.dv8tion.jda.api.interactions.commands.Command.Subcommand</objectwrapper>
        <owner>process</owner>
        <method>
            <name>toString</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Options</name>
            <returntype>java.util.List</returntype>
            <comment>The Options of this command.

 return Immutable list of command options</comment>
        </property>
        <property>
            <name>Description</name>
            <returntype>java.lang.String</returntype>
            <comment>The description of this command.

 return The description</comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment>The name of this command.

 return The name</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.command.TextInputBuilderwrapper</name>
        <shortname>TextInputBuilder</shortname>
        <objectwrapper>net.dv8tion.jda.api.interactions.components.text.TextInput.Builder</objectwrapper>
        <owner>process</owner>
        <method>
            <name>setRequired</name>
            <comment></comment>
            <returntype>de.donmanfred.command.TextInputBuilderwrapper</returntype>
            <parameter>
                <name>required</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Returns the JDA instance of this Command
 return the corresponding JDA instance
id: 
label: 
style: </comment>
            <returntype>de.donmanfred.command.TextInputBuilderwrapper</returntype>
            <parameter>
                <name>id</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>label</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>style</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>build</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.components.text.TextInput</returntype>
        </method>
        <method>
            <name>setPlaceholder</name>
            <comment></comment>
            <returntype>de.donmanfred.command.TextInputBuilderwrapper</returntype>
            <parameter>
                <name>placeholder</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setMinLength</name>
            <comment></comment>
            <returntype>de.donmanfred.command.TextInputBuilderwrapper</returntype>
            <parameter>
                <name>minlen</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>setValue</name>
            <comment></comment>
            <returntype>de.donmanfred.command.TextInputBuilderwrapper</returntype>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setId</name>
            <comment></comment>
            <returntype>de.donmanfred.command.TextInputBuilderwrapper</returntype>
            <parameter>
                <name>id</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setLabel</name>
            <comment></comment>
            <returntype>de.donmanfred.command.TextInputBuilderwrapper</returntype>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setStyle</name>
            <comment>One of "SHORT" or "PARAGRAPH"</comment>
            <returntype>de.donmanfred.command.TextInputBuilderwrapper</returntype>
            <parameter>
                <name>style</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>toString</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>setMaxLength</name>
            <comment></comment>
            <returntype>de.donmanfred.command.TextInputBuilderwrapper</returntype>
            <parameter>
                <name>maxlen</name>
                <type>int</type>
            </parameter>
        </method>
        <property>
            <name>Placeholder</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Required</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Value</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Label</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Style</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.components.text.TextInputStyle</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MinLength</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MaxLength</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.command.TextInputwrapper</name>
        <shortname>TextInput</shortname>
        <objectwrapper>net.dv8tion.jda.api.interactions.components.text.TextInput</objectwrapper>
        <owner>process</owner>
        <method>
            <name>create</name>
            <comment>Returns the JDA instance of this Command
 return the corresponding JDA instance
id: 
label: 
style: </comment>
            <returntype>net.dv8tion.jda.api.interactions.components.text.TextInput</returntype>
            <parameter>
                <name>id</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>label</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>style</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>toString</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Placeholder</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>asEnabled</name>
            <returntype>net.dv8tion.jda.api.interactions.components.ActionComponent</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Label</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Style</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.components.text.TextInputStyle</returntype>
            <comment></comment>
        </property>
        <property>
            <name>asDisabled</name>
            <returntype>net.dv8tion.jda.api.interactions.components.ActionComponent</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.command.UserCommandDatawrapper</name>
        <shortname>UserCommandData</shortname>
        <objectwrapper>net.dv8tion.jda.api.interactions.commands.build.CommandData</objectwrapper>
        <owner>process</owner>
        <method>
            <name>setName</name>
            <comment></comment>
            <returntype>de.donmanfred.command.UserCommandDatawrapper</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setGuildOnly</name>
            <comment></comment>
            <returntype>de.donmanfred.command.UserCommandDatawrapper</returntype>
            <parameter>
                <name>enabled</name>
                <type>boolean</type>
            </parameter>
        </method>
        <property>
            <name>Type</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.commands.Command.Type</returntype>
            <comment></comment>
        </property>
        <property>
            <name>CommandData</name>
            <returntype>net.dv8tion.jda.api.interactions.commands.build.CommandData</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.command.UserContextInteractionEventwrapper</name>
        <shortname>UserContextInteractionEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.interaction.command.UserContextInteractionEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>deferReply</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>reply2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>mcd</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
        </method>
        <method>
            <name>replywithActionRow</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>content</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>row</name>
                <type>net.dv8tion.jda.api.interactions.components.ActionComponent</type>
            </parameter>
        </method>
        <method>
            <name>getOptionAsRole</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.Role</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>reply3</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>mcd</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
            <parameter>
                <name>Ephemeral</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>getOption</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.commands.OptionMapping</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getOptionAsChannel</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.channel.unions.GuildChannelUnion</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getOptionAsLong</name>
            <comment></comment>
            <returntype>long</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getOptionsByType</name>
            <comment></comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>tp</name>
                <type EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>getOptionAsUser</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.User</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>replywithActionRow2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>content</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>row</name>
                <type>net.dv8tion.jda.api.interactions.components.ActionComponent</type>
            </parameter>
            <parameter>
                <name>Ephemeral</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>replycomplete</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.InteractionHook</returntype>
            <parameter>
                <name>content</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getOptionAsMember</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getOptionAsString</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getOptionsByName</name>
            <comment></comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>deferReply2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ephemeral</name>
                <type>boolean</type>
            </parameter>
        </method>
        <property>
            <name>Options</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>User</name>
            <returntype>net.dv8tion.jda.api.entities.User</returntype>
            <comment></comment>
        </property>
        <property>
            <name>JDA</name>
            <returntype>net.dv8tion.jda.api.JDA</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ChannelType2</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
        <property>
            <name>CommandIdLong</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Target</name>
            <returntype>net.dv8tion.jda.api.entities.User</returntype>
            <comment></comment>
        </property>
        <property>
            <name>CommandString</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TargetType</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.commands.context.ContextInteraction.ContextTarget</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ResponseNumber</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Member</name>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <comment></comment>
        </property>
        <property>
            <name>InteractionId</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SubcommandGroup</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>isFromGuild</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Channel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.Channel</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TypeRaw</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Type</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.InteractionType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>InteractionHook</name>
            <returntype>net.dv8tion.jda.api.interactions.InteractionHook</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MessageChannel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.middleman.MessageChannel</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SubcommandName</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>isAcknowledged</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>CommandId</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ChannelType</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.ChannelType</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.ActionComponentwrapper</name>
        <shortname>ActionComponent</shortname>
        <objectwrapper>net.dv8tion.jda.api.interactions.components.ActionComponent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>asEnabled</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.components.ActionComponent</returntype>
        </method>
        <method>
            <name>withDisabled</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.components.ActionComponent</returntype>
            <parameter>
                <name>disabled</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>toData</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>asDisabled</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.components.ActionComponent</returntype>
        </method>
        <property>
            <name>Native</name>
            <returntype>net.dv8tion.jda.api.interactions.components.ActionComponent</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Type</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.components.Component.Type</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Id</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Disabled</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.ChannelCreateEventwrapper</name>
        <shortname>ChannelCreateEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.channel.ChannelCreateEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>FromGuild</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Channel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.Channel</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ResponseNumber</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ChannelType</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.ChannelType</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.ChannelDeleteEventwrapper</name>
        <shortname>ChannelDeleteEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.channel.ChannelDeleteEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>FromGuild</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Channel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.Channel</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ResponseNumber</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ChannelType</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.ChannelType</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.EntitySelectInteractionwrapper</name>
        <shortname>EntitySelectInteraction</shortname>
        <objectwrapper>net.dv8tion.jda.api.interactions.components.selections.EntitySelectInteraction</objectwrapper>
        <owner>process</owner>
        <method>
            <name>deferEditandQueue</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>deferReply</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.InteractionHook</returntype>
        </method>
        <method>
            <name>reply2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>mcd</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
        </method>
        <method>
            <name>deferReplyandQueue</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>editMessageEmbeds</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.InteractionHook</returntype>
            <parameter>
                <name>rows</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>editMessage2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>content</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>deferEdit</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.InteractionHook</returntype>
        </method>
        <method>
            <name>editMessage</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>med</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageEditData</type>
            </parameter>
        </method>
        <method>
            <name>replycomplete</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>content</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>reply</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>content</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>ComponentType</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.components.Component.Type</returntype>
            <comment></comment>
        </property>
        <property>
            <name>User</name>
            <returntype>net.dv8tion.jda.api.entities.User</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Message</name>
            <returntype>net.dv8tion.jda.api.entities.Message</returntype>
            <comment></comment>
        </property>
        <property>
            <name>isFromGuild</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>JDA</name>
            <returntype>net.dv8tion.jda.api.JDA</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Channel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.unions.MessageChannelUnion</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Values</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Native</name>
            <returntype>net.dv8tion.jda.api.interactions.components.selections.SelectMenuInteraction</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TypeRaw</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Type</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.InteractionType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>InteractionHook</name>
            <returntype>net.dv8tion.jda.api.interactions.InteractionHook</returntype>
            <comment></comment>
        </property>
        <property>
            <name>isAcknowledged</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Component</name>
            <returntype>net.dv8tion.jda.api.interactions.components.selections.SelectMenu</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Member</name>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ChannelType</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.ChannelType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ComponentId</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.GenericMessageEventwrapper</name>
        <shortname>GenericMessageEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.message.GenericMessageEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Channel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.unions.MessageChannelUnion</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ResponseNumber</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ChannelType</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.ChannelType</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.GenericThreadEventwrapper</name>
        <shortname>GenericThreadEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.thread.GenericThreadEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>ResponseNumber</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Thread</name>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.ThreadChannel</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.GuildJoinEventwrapper</name>
        <shortname>GuildJoinEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.guild.GuildJoinEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>ResponseNumber</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.GuildMemberJoinEventwrapper</name>
        <shortname>GuildMemberJoinEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.guild.member.GuildMemberJoinEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>User</name>
            <returntype>net.dv8tion.jda.api.entities.User</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Member</name>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.GuildMemberRemoveEventwrapper</name>
        <shortname>GuildMemberRemoveEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.guild.member.GuildMemberRemoveEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>User</name>
            <returntype>net.dv8tion.jda.api.entities.User</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Member</name>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.GuildMemberRoleAddEventwrapper</name>
        <shortname>GuildMemberRoleAddEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.guild.member.GuildMemberRoleAddEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>User</name>
            <returntype>net.dv8tion.jda.api.entities.User</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Roles</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Member</name>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.GuildMemberRoleRemoveEventwrapper</name>
        <shortname>GuildMemberRoleRemoveEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.guild.member.GuildMemberRoleRemoveEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>MemberID</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>User</name>
            <returntype>net.dv8tion.jda.api.entities.User</returntype>
            <comment></comment>
        </property>
        <property>
            <name>UserID</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Roles</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Member</name>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.GuildReadyEventwrapper</name>
        <shortname>GuildReadyEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.guild.GuildReadyEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>RawData</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>JDA</name>
            <returntype>net.dv8tion.jda.api.JDA</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.GuildVoiceStreamEventwrapper</name>
        <shortname>GuildVoiceStreamEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.guild.voice.GuildVoiceStreamEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>RawData</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>VoiceState</name>
            <returntype>net.dv8tion.jda.api.entities.GuildVoiceState</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Stream</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ResponseNumber</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Member</name>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.GuildVoiceUpdateEventwrapper</name>
        <shortname>GuildVoiceUpdateEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.guild.voice.GuildVoiceUpdateEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>RawData</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Entity</name>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ChannelJoined</name>
            <returntype>net.dv8tion.jda.api.entities.channel.unions.AudioChannelUnion</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ChannelLeft</name>
            <returntype>net.dv8tion.jda.api.entities.channel.unions.AudioChannelUnion</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ResponseNumber</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.GuildVoiceVideoEventwrapper</name>
        <shortname>GuildVoiceVideoEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.guild.voice.GuildVoiceVideoEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>RawData</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>VoiceState</name>
            <returntype>net.dv8tion.jda.api.entities.GuildVoiceState</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SendingVideo</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ResponseNumber</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Member</name>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.MessageEmbedEventwrapper</name>
        <shortname>MessageEmbedEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.message.MessageEmbedEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>MessageEmbeds</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>JDA</name>
            <returntype>net.dv8tion.jda.api.JDA</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Channel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.unions.MessageChannelUnion</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ChannelType</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.ChannelType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MessageId</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.MessageReactionAddEventwrapper</name>
        <shortname>MessageReactionAddEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.message.react.MessageReactionAddEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>TextChannel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.unions.MessageChannelUnion</returntype>
            <comment></comment>
        </property>
        <property>
            <name>UserId</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Emoji</name>
            <returntype>net.dv8tion.jda.api.entities.emoji.EmojiUnion</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Reaction</name>
            <returntype>net.dv8tion.jda.api.entities.MessageReaction</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Member</name>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MessageId</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.MessageReactionRemoveAllEventwrapper</name>
        <shortname>MessageReactionRemoveAllEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.message.react.MessageReactionRemoveAllEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Channel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.unions.MessageChannelUnion</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MessageId</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.MessageReactionRemoveEventwrapper</name>
        <shortname>MessageReactionRemoveEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.message.react.MessageReactionRemoveEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>TextChannel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.unions.MessageChannelUnion</returntype>
            <comment></comment>
        </property>
        <property>
            <name>UserId</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Reaction</name>
            <returntype>net.dv8tion.jda.api.entities.MessageReaction</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Member</name>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ReactionEmote</name>
            <returntype>net.dv8tion.jda.api.entities.emoji.EmojiUnion</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MessageId</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.MessageReceivedEventwrapper</name>
        <shortname>MessageReceivedEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.message.MessageReceivedEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>WebhookMessage</name>
            <returntype>boolean</returntype>
            <comment>Whether or not the Message received was sent via a Webhook.
 This is a shortcut for isWebhookMessage().

 return True, if the Message was sent via Webhook</comment>
        </property>
        <property>
            <name>Message</name>
            <returntype>net.dv8tion.jda.api.entities.Message</returntype>
            <comment>return The received Message object.</comment>
        </property>
        <property>
            <name>Author</name>
            <returntype>net.dv8tion.jda.api.entities.User</returntype>
            <comment>The Author of the Message received as User object.
 This will be never-null but might be a fake user if Message was sent via
 Webhook (Guild only).

 return The Author of the Message.</comment>
        </property>
        <property>
            <name>Member</name>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <comment>The Author of the Message received as Member object.
 This will be {@code null} in case of Message being received in a
 PrivateChannel or isWebhookMessage() returning true.

 return The Author of the Message as null-able Member object.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.PermissionOverrideCreateEventEventwrapper</name>
        <shortname>PermissionOverrideCreateEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.guild.override.PermissionOverrideCreateEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>PermissionOverride</name>
            <returntype>net.dv8tion.jda.api.entities.PermissionOverride</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Role</name>
            <returntype>net.dv8tion.jda.api.entities.Role</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Channel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.middleman.GuildChannel</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
        <property>
            <name>PermissionHolder</name>
            <returntype>net.dv8tion.jda.api.entities.IPermissionHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Member</name>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MemberOverride</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>RoleOverride</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.PermissionOverrideDeleteEventwrapper</name>
        <shortname>PermissionOverrideDeleteEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.guild.override.PermissionOverrideDeleteEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>PermissionOverride</name>
            <returntype>net.dv8tion.jda.api.entities.PermissionOverride</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Role</name>
            <returntype>net.dv8tion.jda.api.entities.Role</returntype>
            <comment></comment>
        </property>
        <property>
            <name>RoleOverrideRole</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Channel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.middleman.GuildChannel</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
        <property>
            <name>PermissionHolder</name>
            <returntype>net.dv8tion.jda.api.entities.IPermissionHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Member</name>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MemberOverride</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.PermissionOverrideUpdateEventwrapper</name>
        <shortname>PermissionOverrideUpdateEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.guild.override.PermissionOverrideUpdateEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>PermissionOverride</name>
            <returntype>net.dv8tion.jda.api.entities.PermissionOverride</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Role</name>
            <returntype>net.dv8tion.jda.api.entities.Role</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Channel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.middleman.GuildChannel</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
        <property>
            <name>PermissionHolder</name>
            <returntype>net.dv8tion.jda.api.entities.IPermissionHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Member</name>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MemberOverride</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>RoleOverride</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.ReadyEventwrapper</name>
        <shortname>ReadyEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.session.ReadyEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>RawData</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>JDA</name>
            <returntype>net.dv8tion.jda.api.JDA</returntype>
            <comment></comment>
        </property>
        <property>
            <name>GuildTotalCount</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>GuildAvailableCount</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.ScheduledEventCreateEventwrapper</name>
        <shortname>ScheduledEventCreateEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.guild.scheduledevent.ScheduledEventCreateEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>ScheduledEvent</name>
            <returntype>net.dv8tion.jda.api.entities.ScheduledEvent</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ResponseNumber</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.ScheduledEventDeleteEventwrapper</name>
        <shortname>ScheduledEventDeleteEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.guild.scheduledevent.ScheduledEventDeleteEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>ScheduledEvent</name>
            <returntype>net.dv8tion.jda.api.entities.ScheduledEvent</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ResponseNumber</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.ScheduledEventUserAddEventwrapper</name>
        <shortname>ScheduledEventUserAddEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.guild.scheduledevent.ScheduledEventUserAddEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>retrieveMember</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>retrieveUser</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.User</returntype>
        </method>
        <property>
            <name>ScheduledEvent</name>
            <returntype>net.dv8tion.jda.api.entities.ScheduledEvent</returntype>
            <comment></comment>
        </property>
        <property>
            <name>User</name>
            <returntype>net.dv8tion.jda.api.entities.User</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ResponseNumber</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Member</name>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.ScheduledEventUserRemoveEventwrapper</name>
        <shortname>ScheduledEventUserRemoveEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.guild.scheduledevent.ScheduledEventUserRemoveEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>retrieveMember</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>retrieveUser</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.User</returntype>
        </method>
        <property>
            <name>ScheduledEvent</name>
            <returntype>net.dv8tion.jda.api.entities.ScheduledEvent</returntype>
            <comment></comment>
        </property>
        <property>
            <name>User</name>
            <returntype>net.dv8tion.jda.api.entities.User</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ResponseNumber</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Member</name>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.SlashCommandInteractionEventwrapper</name>
        <shortname>SlashCommandInteractionEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.interaction.command.SlashCommandInteractionEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>reply2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>mcd</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
        </method>
        <method>
            <name>replywithActionRow</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>content</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>row</name>
                <type>net.dv8tion.jda.api.interactions.components.ActionComponent</type>
            </parameter>
        </method>
        <method>
            <name>getOptionAsRole</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.Role</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>reply3</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>mcd</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
            <parameter>
                <name>Ephemeral</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>getOption</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.commands.OptionMapping</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getOptionAsLong</name>
            <comment></comment>
            <returntype>long</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getOptionsByType</name>
            <comment></comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>tp</name>
                <type EnumType="true">net.dv8tion.jda.api.interactions.commands.OptionType</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>replywithActionRow2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>content</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>row</name>
                <type>net.dv8tion.jda.api.interactions.components.ActionComponent</type>
            </parameter>
            <parameter>
                <name>Ephemeral</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>getOptionAsMember</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>replyFile</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>path</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>filename</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getOptionAsString</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>deferReply</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>getOptionAsUser</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.User</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>replyFile2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>data</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>replycomplete</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.InteractionHook</returntype>
            <parameter>
                <name>content</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getOptionsByName</name>
            <comment></comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>deferReply2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ephemeral</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>getAsChannel</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.channel.unions.GuildChannelUnion</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>Options</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>User</name>
            <returntype>net.dv8tion.jda.api.entities.User</returntype>
            <comment></comment>
        </property>
        <property>
            <name>JDA</name>
            <returntype>net.dv8tion.jda.api.JDA</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ChannelType2</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
        <property>
            <name>CommandIdLong</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>AsTextChannel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.middleman.MessageChannel</returntype>
            <comment></comment>
        </property>
        <property>
            <name>CommandString</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ResponseNumber</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Member</name>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <comment></comment>
        </property>
        <property>
            <name>AsThreadChannel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.ThreadChannel</returntype>
            <comment></comment>
        </property>
        <property>
            <name>InteractionId</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SubcommandGroup</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>FullCommandName</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>isFromGuild</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Channel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.middleman.MessageChannel</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TypeRaw</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Type</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.InteractionType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>InteractionHook</name>
            <returntype>net.dv8tion.jda.api.interactions.InteractionHook</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SubcommandName</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>isAcknowledged</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>CommandId</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ChannelType</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.ChannelType</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.StageInstanceCreateEventwrapper</name>
        <shortname>StageInstanceCreateEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.stage.StageInstanceCreateEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Instance</name>
            <returntype>net.dv8tion.jda.api.entities.StageInstance</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Channel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.StageChannel</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ResponseNumber</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.StageInstanceDeleteEventwrapper</name>
        <shortname>StageInstanceDeleteEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.stage.StageInstanceDeleteEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Instance</name>
            <returntype>net.dv8tion.jda.api.entities.StageInstance</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Channel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.StageChannel</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ResponseNumber</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.StageInstanceManagerwrapper</name>
        <shortname>StageInstanceManager</shortname>
        <objectwrapper>net.dv8tion.jda.api.managers.StageInstanceManager</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Topic</name>
            <parameter>
                <name>topic</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.StageInstanceUpdatePrivacyLevelEventwrapper</name>
        <shortname>StageInstanceUpdatePrivacyLevelEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.stage.update.StageInstanceUpdatePrivacyLevelEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Instance</name>
            <returntype>net.dv8tion.jda.api.entities.StageInstance</returntype>
            <comment></comment>
        </property>
        <property>
            <name>OldValue</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.StageInstance.PrivacyLevel</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Channel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.StageChannel</returntype>
            <comment></comment>
        </property>
        <property>
            <name>NewValue</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.StageInstance.PrivacyLevel</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ResponseNumber</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.StageInstanceUpdateTopicEventwrapper</name>
        <shortname>StageInstanceUpdateTopicEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.stage.update.StageInstanceUpdateTopicEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Instance</name>
            <returntype>net.dv8tion.jda.api.entities.StageInstance</returntype>
            <comment></comment>
        </property>
        <property>
            <name>OldValue</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Channel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.StageChannel</returntype>
            <comment></comment>
        </property>
        <property>
            <name>NewValue</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ResponseNumber</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.StageInstancewrapper</name>
        <shortname>StageInstance</shortname>
        <objectwrapper>net.dv8tion.jda.api.entities.StageInstance</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Audience</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Channel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.StageChannel</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Speakers</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Manager</name>
            <returntype>net.dv8tion.jda.api.managers.StageInstanceManager</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.StatusChangeEventwrapper</name>
        <shortname>StatusChangeEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.StatusChangeEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>EntityType</name>
            <returntype>java.lang.Class</returntype>
            <comment></comment>
        </property>
        <property>
            <name>RawData</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>OldStatus</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>OldValue</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>PropertyIdentifier</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>NewStatus</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>NewValue</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ResponseNumber</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.StringSelectInteractionwrapper</name>
        <shortname>StringSelectInteraction</shortname>
        <objectwrapper>net.dv8tion.jda.api.interactions.components.selections.StringSelectInteraction</objectwrapper>
        <owner>process</owner>
        <method>
            <name>deferEditandQueue</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>deferReply</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.InteractionHook</returntype>
        </method>
        <method>
            <name>reply2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>mcd</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
        </method>
        <method>
            <name>deferReplyandQueue</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>editMessageEmbeds</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.InteractionHook</returntype>
            <parameter>
                <name>rows</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>editMessage2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>content</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>deferEdit</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.InteractionHook</returntype>
        </method>
        <method>
            <name>editMessage</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>med</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageEditData</type>
            </parameter>
        </method>
        <method>
            <name>replycomplete</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>content</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>reply</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>content</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>ComponentType</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.components.Component.Type</returntype>
            <comment></comment>
        </property>
        <property>
            <name>User</name>
            <returntype>net.dv8tion.jda.api.entities.User</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Message</name>
            <returntype>net.dv8tion.jda.api.entities.Message</returntype>
            <comment></comment>
        </property>
        <property>
            <name>isFromGuild</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>JDA</name>
            <returntype>net.dv8tion.jda.api.JDA</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Channel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.unions.MessageChannelUnion</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Values</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SelectedOptions</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Native</name>
            <returntype>net.dv8tion.jda.api.interactions.components.selections.SelectMenuInteraction</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TypeRaw</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Type</name>
            <returntype EnumType="true">net.dv8tion.jda.api.interactions.InteractionType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>InteractionHook</name>
            <returntype>net.dv8tion.jda.api.interactions.InteractionHook</returntype>
            <comment></comment>
        </property>
        <property>
            <name>isAcknowledged</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Component</name>
            <returntype>net.dv8tion.jda.api.interactions.components.selections.StringSelectMenu</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Member</name>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ChannelType</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.ChannelType</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ComponentId</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.ThreadHiddenEventwrapper</name>
        <shortname>ThreadHiddenEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.thread.ThreadHiddenEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Thread</name>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.ThreadChannel</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.ThreadMemberJoinEventwrapper</name>
        <shortname>ThreadMemberJoinEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.thread.member.ThreadMemberJoinEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>ResponseNumber</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ThreadMember</name>
            <returntype>net.dv8tion.jda.api.entities.ThreadMember</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Member</name>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Thread</name>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.ThreadChannel</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.ThreadMemberLeaveEventwrapper</name>
        <shortname>ThreadMemberLeaveEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.thread.member.ThreadMemberLeaveEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>ResponseNumber</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ThreadMember</name>
            <returntype>net.dv8tion.jda.api.entities.ThreadMember</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Member</name>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Thread</name>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.ThreadChannel</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.ThreadMemberwrapper</name>
        <shortname>ThreadMember</shortname>
        <objectwrapper>net.dv8tion.jda.api.entities.ThreadMember</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
        <property>
            <name>AsMention</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Member</name>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Thread</name>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.ThreadChannel</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.events.ThreadRevealedEventwrapper</name>
        <shortname>ThreadRevealedEvent</shortname>
        <objectwrapper>net.dv8tion.jda.api.events.thread.ThreadRevealedEvent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Thread</name>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.ThreadChannel</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.guild.Attachmentwrapper</name>
        <shortname>Attachment</shortname>
        <objectwrapper>net.dv8tion.jda.api.entities.Message.Attachment</objectwrapper>
        <owner>process</owner>
        <method>
            <name>downloadToFile</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>path</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>filename</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Description</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ContentType</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Size</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>isVideo</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Filename</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Url</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>isImage</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>FileExtension</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Height</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Id</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Width</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.guild.AudioManagerwrapper</name>
        <shortname>AudioManager</shortname>
        <objectwrapper>net.dv8tion.jda.api.managers.AudioManager</objectwrapper>
        <owner>process</owner>
        <event>onPing(ping As Long)</event>
        <event>onStatusChange(status As Object)</event>
        <event>onUserSpeaking(usr As User, speaking As Boolean)</event>
        <event>handleEncodedAudio(opuspacket as Object)</event>
        <event>handleCombinedAudio(combaudio as Object, users As List, encoded() As Byte)</event>
        <event>handleUserAudio(useraudio as Object, user As User, encoded() As Byte)</event>
        <method>
            <name>includeUserInCombinedAudio</name>
            <comment>This method is a filter predicate used by JDA to determine whether or not to include a
 User's audio when creating a CombinedAudio packet.
 
 This method is especially useful in creating whitelist / blacklist 
 functionality for receiving audio.
 A few possible examples:
 - Have this method always return false for Users that are bots.&lt;/li&gt;
 - Have this method return false for users who have been placed on a blacklist for abusing the bot's functionality.&lt;/li&gt;
 - Have this method only return true if the user is in a special whitelist of power users.&lt;/li&gt;
 param  user
        The user whose audio was received

 return If true, JDA will include the user's audio when merging audio sources when created packets
         for handleCombinedAudio(CombinedAudio)}</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>user</name>
                <type>net.dv8tion.jda.api.entities.User</type>
            </parameter>
        </method>
        <method>
            <name>encodePcmToMp3</name>
            <comment></comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>pcm</name>
                <type>byte[]</type>
            </parameter>
        </method>
        <method>
            <name>canReceiveCombined</name>
            <comment>If this method returns true, then JDA will generate combined audio data and provide it to the handler.
 &lt;br&gt;&lt;b&gt;Only enable if you specifically want combined audio because combining audio is costly if unused.&lt;/b&gt;
Return type: @return:If true, JDA enables subsystems to combine all user audio into a single provided data packet.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>handleCombinedAudio</name>
            <comment>If {@link #canReceiveCombined()} returns true, JDA will provide a {@link net.dv8tion.jda.api.audio.CombinedAudio CombinedAudio}
 object to this method &lt;b&gt;every 20 milliseconds&lt;/b&gt;. The data provided by CombinedAudio is all audio that occurred
 during the 20 millisecond period mixed together into a single 20 millisecond packet. If no users spoke, this method
 will still be provided with a CombinedAudio object containing 20 milliseconds of silence and
 {@link CombinedAudio#getUsers()}'s list will be empty.
 &lt;p&gt;
 The main use of this method is if you are wanting to record audio. Because it automatically combines audio and
 maintains timeline (no gaps in audio due to silence) it is an incredible resource for audio recording.
 &lt;p&gt;
 If you are wanting to do audio processing (voice recognition) or you only want to deal with a single user's audio,
 please consider {@link #handleUserAudio(UserAudio)}.
 &lt;p&gt;
 Output audio format: 48KHz 16bit stereo signed BigEndian PCM
 &lt;br&gt;and is defined by: {@link net.dv8tion.jda.api.audio.AudioReceiveHandler#OUTPUT_FORMAT AudioRecieveHandler.OUTPUT_FORMAT}
combinedAudio: The combined audio data.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>combinedAudio</name>
                <type>net.dv8tion.jda.api.audio.CombinedAudio</type>
            </parameter>
        </method>
        <method>
            <name>openAudioConnection</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>audiochannel</name>
                <type>net.dv8tion.jda.api.entities.channel.middleman.AudioChannel</type>
            </parameter>
        </method>
        <method>
            <name>canReceiveEncoded</name>
            <comment>If this method returns true, then JDA will provide raw OPUS encoded packets to OpusPacket.
 This can be used in combination with the other receive methods but will not be combined 
 audio of multiple users.

 Each user sends their own stream of OPUS encoded audio and each packet is assigned with 
 a user id and SSRC. The decoder will be provided by JDA but need not be used.

 returns True</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>handleEncodedAudio</name>
            <comment>If canReceiveEncoded() returns true, JDA will provide raw OpusPackets
 to this method every 20 milliseconds. These packets are for specific 
 users rather than a combined packet of all users like handleCombinedAudio(CombinedAudio).

 This is useful for systems that want to either do lazy decoding of audio through OpusPacket#getAudioData(double)
 or for systems that can decode and transform the audio data manually without JDA involvement.
packet: The {@link net.dv8tion.jda.api.audio.OpusPacket}</comment>
            <returntype>void</returntype>
            <parameter>
                <name>packet</name>
                <type>net.dv8tion.jda.api.audio.OpusPacket</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>closeAudioConnection</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>canReceiveUser</name>
            <comment>If this method returns true, then JDA will provide audio data to the handleUserAudio(UserAudio) method.
Return type: @return:If true, JDA enables subsystems to provide user specific audio data.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>handleUserAudio</name>
            <comment>If {@link #canReceiveUser()} returns true, JDA will provide a UserAudio object to this 
 method every time the user speaks. 
 Continuing with the last statement: 
 This method is only fired when discord provides us audio data which is very different 
 from the scheduled firing time of handleCombinedAudio(CombinedAudio)
 
 The UserAudio object provided to this method will contain the
 User that spoke along with only the audio data sent by the specific user.
 The main use of this method is for listening to specific users. Whether that is for audio recording,
 custom mixing (possibly for user muting), or even voice recognition, this is the method you will want.
 
 If you are wanting to do audio recording, please consider handleCombinedAudio(CombinedAudio) as it 
 was created just for that reason.
 
 Output audio format: 48KHz 16bit stereo signed BigEndian PCM
 and is defined by: AudioRecieveHandler.OUTPUT_FORMAT

 param  userAudio
        The user audio data</comment>
            <returntype>void</returntype>
            <parameter>
                <name>userAudio</name>
                <type>net.dv8tion.jda.api.audio.UserAudio</type>
            </parameter>
        </method>
        <method>
            <name>SetEventListener</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>ConnectTimeout</name>
            <parameter>
                <name>timeout</name>
                <type>long</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>SelfMuted</name>
            <parameter>
                <name>muted</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>ConnectedChannel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.middleman.AudioChannel</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ConnectionStatus</name>
            <returntype EnumType="true">net.dv8tion.jda.api.audio.hooks.ConnectionStatus</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.guild.CategoryManagerwrapper</name>
        <shortname>CategoryManager</shortname>
        <objectwrapper>net.dv8tion.jda.api.managers.channel.concrete.CategoryManager</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Channel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.Category</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.guild.CustomEmojiwrapper</name>
        <shortname>CustomEmoji</shortname>
        <objectwrapper>net.dv8tion.jda.api.entities.emoji.CustomEmoji</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Formatted</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ImageUrl</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Id</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>AsReactionCode</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.guild.EmojiUnionwrapper</name>
        <shortname>EmojiUnion</shortname>
        <objectwrapper>net.dv8tion.jda.api.entities.emoji.EmojiUnion</objectwrapper>
        <owner>process</owner>
        <method>
            <name>toString</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>formatted</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>Formatted</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Type</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>AsReactionCode</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.guild.FileUploadwrapper</name>
        <shortname>FileUpload</shortname>
        <objectwrapper>net.dv8tion.jda.api.utils.FileUpload</objectwrapper>
        <owner>process</owner>
        <method>
            <name>InitializeFromFile</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.utils.FileUpload</returntype>
            <parameter>
                <name>path</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>filename</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>InitializeFromBytes</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.utils.FileUpload</returntype>
            <parameter>
                <name>data</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>filename</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>toAttachmentData</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.utils.data.DataObject</returntype>
            <parameter>
                <name>index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>close</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.guild.GuildVoiceStatewrapper</name>
        <shortname>GuildVoiceState</shortname>
        <objectwrapper>net.dv8tion.jda.api.entities.GuildVoiceState</objectwrapper>
        <owner>process</owner>
        <method>
            <name>inviteSpeaker</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>approveSpeaker</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>declineSpeaker</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>SetEventListener</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>Channel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.middleman.AudioChannel</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ID</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SessionId</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Member</name>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <comment></comment>
        </property>
        <property>
            <name>inAudioChannel</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>RequestToSpeakTimestamp</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Muted</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.guild.GuildWelcomeScreenManagerwrapper</name>
        <shortname>GuildWelcomeScreenManager</shortname>
        <objectwrapper>net.dv8tion.jda.api.managers.GuildWelcomeScreenManager</objectwrapper>
        <owner>process</owner>
        <event>onCommands(cmdlist As List)</event>
        <event>onMember(mem As Member)</event>
        <method>
            <name>CreateChannelOf</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.GuildWelcomeScreen.Channel</returntype>
            <parameter>
                <name>channel</name>
                <type>net.dv8tion.jda.api.entities.channel.middleman.StandardGuildChannel</type>
            </parameter>
            <parameter>
                <name>desc</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>CreateChannelOf2</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.GuildWelcomeScreen.Channel</returntype>
            <parameter>
                <name>channel</name>
                <type>net.dv8tion.jda.api.entities.channel.middleman.StandardGuildChannel</type>
            </parameter>
            <parameter>
                <name>desc</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>emoji</name>
                <type>net.dv8tion.jda.api.entities.emoji.Emoji</type>
            </parameter>
        </method>
        <method>
            <name>clearWelcomeChannels</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.managers.GuildWelcomeScreenManager</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>setWelcomechannels</name>
            <comment></comment>
            <returntype>de.donmanfred.guild.GuildWelcomeScreenManagerwrapper</returntype>
            <parameter>
                <name>channels</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>SetEventListener</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>WelcomeChannels</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.guild.Guildwrapper</name>
        <shortname>Guild</shortname>
        <objectwrapper>net.dv8tion.jda.api.entities.Guild</objectwrapper>
        <owner>process</owner>
        <event>onCommands(cmdlist As List)</event>
        <event>onMember(mem As Member)</event>
        <method>
            <name>getScheduledEventByIdLong</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.ScheduledEvent</returntype>
            <parameter>
                <name>id</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>retrieveMemberById</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <parameter>
                <name>id</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getScheduledEventsByName</name>
            <comment></comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>ignoreCase</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>getScheduledEventById</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.ScheduledEvent</returntype>
            <parameter>
                <name>id</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>createStageChannelinCategory</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>category</name>
                <type>net.dv8tion.jda.api.entities.channel.concrete.Category</type>
            </parameter>
        </method>
        <method>
            <name>addCommand</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>cmddata</name>
                <type>net.dv8tion.jda.api.interactions.commands.build.CommandData</type>
            </parameter>
        </method>
        <method>
            <name>createRole</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.Role</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>addRoleToMember2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ID</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>role</name>
                <type>net.dv8tion.jda.api.entities.Role</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>getMembersWithRole</name>
            <comment></comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>role</name>
                <type>net.dv8tion.jda.api.entities.Role</type>
            </parameter>
        </method>
        <method>
            <name>addRoleToMember</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>member</name>
                <type>net.dv8tion.jda.api.entities.Member</type>
            </parameter>
            <parameter>
                <name>role</name>
                <type>net.dv8tion.jda.api.entities.Role</type>
            </parameter>
        </method>
        <method>
            <name>getMembersWithRoles</name>
            <comment></comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>roles</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>CreateUpdateCommandsAction</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>getGuildChannelById</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.channel.middleman.GuildChannel</returntype>
            <parameter>
                <name>ID</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>retrieveCommandsbyIdlong</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.commands.Command</returntype>
            <parameter>
                <name>commandID</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>createCategory</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.Category</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>RoleID</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>createTextChannel2</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.TextChannel</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>RoleID</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>retrieveCommands</name>
            <comment></comment>
            <returntype>java.util.List</returntype>
        </method>
        <method>
            <name>removeRoleFromMember</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>member</name>
                <type>net.dv8tion.jda.api.entities.Member</type>
            </parameter>
            <parameter>
                <name>role</name>
                <type>net.dv8tion.jda.api.entities.Role</type>
            </parameter>
        </method>
        <method>
            <name>createStageChannel</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetMemberByUserID</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <parameter>
                <name>userID</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>createTextChannel</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.TextChannel</returntype>
            <parameter>
                <name>member</name>
                <type>net.dv8tion.jda.api.entities.Member</type>
            </parameter>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>shouldQueue</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>getVoiceChannelByName</name>
            <comment></comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>ignoreCase</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>getTextChannelById</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.TextChannel</returntype>
            <parameter>
                <name>ID</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>retrieveCommandsbyId</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.commands.Command</returntype>
            <parameter>
                <name>id</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>removeRoleFromMember2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ID</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>role</name>
                <type>net.dv8tion.jda.api.entities.Role</type>
            </parameter>
        </method>
        <method>
            <name>retrieveWebhooks</name>
            <comment></comment>
            <returntype>java.util.List</returntype>
        </method>
        <method>
            <name>CreateUpsertCommandAction</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>cmd</name>
                <type>net.dv8tion.jda.api.interactions.commands.build.CommandData</type>
            </parameter>
        </method>
        <method>
            <name>loadMembers</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>clearcommands</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>getGuildChannelById2</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.channel.middleman.GuildChannel</returntype>
            <parameter>
                <name>ID</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getVoiceChannelById</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.VoiceChannel</returntype>
            <parameter>
                <name>id</name>
                <type>java.lang.Long</type>
            </parameter>
        </method>
        <method>
            <name>getThreadChannelById</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.ThreadChannel</returntype>
            <parameter>
                <name>channelid</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>CompleteCommands</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>shouldQueue</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>GetMemberByUserID2</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <parameter>
                <name>userID</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>queueCommands</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>GetMemberByUser</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <parameter>
                <name>usr</name>
                <type>net.dv8tion.jda.api.entities.User</type>
            </parameter>
        </method>
        <method>
            <name>moveVoiceMember</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>member</name>
                <type>net.dv8tion.jda.api.entities.Member</type>
            </parameter>
            <parameter>
                <name>vchannel</name>
                <type>net.dv8tion.jda.api.entities.channel.middleman.AudioChannel</type>
            </parameter>
        </method>
        <method>
            <name>SetEventListener</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getTextChannelsByName</name>
            <comment>Gets a list of all TextChannels in this Guild that have the same
 name as the one provided.
 If there are no TextChannels with the provided name, then this returns an empty list.

 param  name
        The name used to filter the returned TextChannels.
 param  ignoreCase
        Determines if the comparison ignores case when comparing. True - case insensitive.

 return Possibly-empty immutable list of all TextChannels names that match the provided name.</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>ignoreCase</name>
                <type>boolean</type>
            </parameter>
        </method>
        <property>
            <name>StageChannels</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Categories</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>GuildChannels</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Manager</name>
            <returntype>net.dv8tion.jda.api.managers.GuildManager</returntype>
            <comment></comment>
        </property>
        <property>
            <name>VoiceStates</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TextChannels</name>
            <returntype>java.util.List</returntype>
            <comment>Gets all TextChannels in this Guild.
 The channels returned will be sorted according to their position.

 This copies the backing store into a list. This means every call
 creates a new list with O(n) complexity. It is recommended to store this into
 a local variable or use {@link #getTextChannelCache()} and use its more efficient
 versions of handling these values.</comment>
        </property>
        <property>
            <name>AudioManager</name>
            <returntype>net.dv8tion.jda.api.managers.AudioManager</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ForumChannels</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ScheduledEvents</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ID</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Members</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ThreadChannels</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>VoiceChannels</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Emojis</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.guild.Memberwrapper</name>
        <shortname>Member</shortname>
        <objectwrapper>net.dv8tion.jda.api.entities.Member</objectwrapper>
        <owner>process</owner>
        <method>
            <name>createTextChannel</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>hasAccess</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>access</name>
                <type>net.dv8tion.jda.api.entities.channel.middleman.GuildChannel</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>modifyNickname</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>nickname</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>hasPermission</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>channel</name>
                <type>net.dv8tion.jda.api.entities.channel.middleman.GuildChannel</type>
            </parameter>
            <parameter>
                <name>perms</name>
                <type EnumType="true">net.dv8tion.jda.api.Permission</type>
            </parameter>
        </method>
        <method>
            <name>createTextChannel2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>member</name>
                <type>net.dv8tion.jda.api.entities.Member</type>
            </parameter>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>TimeJoined</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>VoiceState</name>
            <returntype>net.dv8tion.jda.api.entities.GuildVoiceState</returntype>
            <comment></comment>
        </property>
        <property>
            <name>User</name>
            <returntype>net.dv8tion.jda.api.entities.User</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Roles</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Id</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>AsMention</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>EffectiveName</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Nickname</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TimeOutEnd</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.guild.PermissionOverridewrapper</name>
        <shortname>PermissionOverride</shortname>
        <objectwrapper>net.dv8tion.jda.api.entities.PermissionOverride</objectwrapper>
        <owner>process</owner>
        <method>
            <name>deny</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>permissions</name>
                <type EnumType="true">net.dv8tion.jda.api.Permission[]</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>grant</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>permissions</name>
                <type EnumType="true">net.dv8tion.jda.api.Permission[]</type>
            </parameter>
        </method>
        <method>
            <name>delete</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>Id</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.guild.Rolewrapper</name>
        <shortname>Role</shortname>
        <objectwrapper>net.dv8tion.jda.api.entities.Role</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>delete</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>Id</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>AsMention</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.guild.TextChannelManagerwrapper</name>
        <shortname>ChannelManager</shortname>
        <objectwrapper>net.dv8tion.jda.api.managers.channel.ChannelManager</objectwrapper>
        <owner>process</owner>
        <method>
            <name>setName</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.managers.channel.ChannelManager</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>submit</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.managers.channel.ChannelManager</returntype>
            <parameter>
                <name>shouldqueue</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
    </class>
    <class>
        <name>de.donmanfred.guild.ThreadChannelManagerwrapper</name>
        <shortname>ThreadChannelManager</shortname>
        <objectwrapper>net.dv8tion.jda.api.managers.channel.concrete.ThreadChannelManager</objectwrapper>
        <owner>process</owner>
        <method>
            <name>setName</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.managers.channel.concrete.ThreadChannelManager</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setArchived</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.managers.channel.concrete.ThreadChannelManager</returntype>
            <parameter>
                <name>archived</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>setSlowmode</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.managers.channel.concrete.ThreadChannelManager</returntype>
            <parameter>
                <name>slowmode</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>setInvitable</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.managers.channel.concrete.ThreadChannelManager</returntype>
            <parameter>
                <name>invitable</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>setLocked</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.managers.channel.concrete.ThreadChannelManager</returntype>
            <parameter>
                <name>locked</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>setAutoArchiveDuration</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.managers.channel.concrete.ThreadChannelManager</returntype>
            <parameter>
                <name>autoArchiveDuration</name>
                <type EnumType="true">net.dv8tion.jda.api.entities.channel.concrete.ThreadChannel.AutoArchiveDuration</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>de.donmanfred.guild.Userwrapper</name>
        <shortname>User</shortname>
        <objectwrapper>net.dv8tion.jda.api.entities.User</objectwrapper>
        <owner>process</owner>
        <event>onPrivateChannel(channel As Privatechannel)</event>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>openPrivateChannel</name>
            <comment>Opens a PrivateChannel with this User. 
 If a channel has already been opened with this user, it is immediately
 returned in the RestAction's success consumer without contacting the
 Discord API.
Return type: @return:</comment>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.PrivateChannel</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <property>
            <name>AsTag</name>
            <returntype>java.lang.String</returntype>
            <comment>The "tag" for this user
 &lt;p&gt;
 This is the equivalent of calling
 {@link java.lang.String#format(String, Object...) String.format}("%#s",
 user)</comment>
        </property>
        <property>
            <name>hasPrivateChannel</name>
            <returntype>boolean</returntype>
            <comment>Whether or not the currently logged in user and this user have a currently
 open {@link net.dv8tion.jda.api.entities.PrivateChannel PrivateChannel} or
 not.</comment>
        </property>
        <property>
            <name>Bot</name>
            <returntype>boolean</returntype>
            <comment>Returns whether or not the given user is a Bot-Account (special badge in
 client, some different behaviour)</comment>
        </property>
        <property>
            <name>DefaultAvatarId</name>
            <returntype>java.lang.String</returntype>
            <comment>The Discord Id for this user's default avatar image.</comment>
        </property>
        <property>
            <name>MutualGuilds</name>
            <returntype>java.util.List</returntype>
            <comment>Finds and collects all Guild instances that contain this 
 User within the current JDA instance.</comment>
        </property>
        <property>
            <name>Discriminator</name>
            <returntype>java.lang.String</returntype>
            <comment>&lt;br&gt;
 The discriminator of the {@link net.dv8tion.jda.api.entities.User User}.
 Used to differentiate between users with the same usernames. &lt;br&gt;
 This only contains the 4 digits after the username and the #. Ex: 6297</comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment>The username of the {@link net.dv8tion.jda.api.entities.User User}. Length is between 2 and 32 characters (inclusive).</comment>
        </property>
        <property>
            <name>AvatarUrl</name>
            <returntype>java.lang.String</returntype>
            <comment>The URL for the user's avatar image. If the user has not set an image, this
 will return null.</comment>
        </property>
        <property>
            <name>AvatarId</name>
            <returntype>java.lang.String</returntype>
            <comment>The Discord Id for this user's avatar image. If the user has not set an
 image, this will return null.</comment>
        </property>
        <property>
            <name>EffectiveAvatarUrl</name>
            <returntype>java.lang.String</returntype>
            <comment>The URL for the user's avatar image If they do not have an avatar set, this
 will return the URL of their default avatar</comment>
        </property>
        <property>
            <name>DefaultAvatarUrl</name>
            <returntype>java.lang.String</returntype>
            <comment>The URL for the for the user's default avatar image.</comment>
        </property>
        <property>
            <name>Id</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>AsMention</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.guild.Webhookwrapper</name>
        <shortname>Webhook</shortname>
        <objectwrapper>net.dv8tion.jda.api.entities.Webhook</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>TimeJoined</name>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Channel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.TextChannel</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Token</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Manager</name>
            <returntype>net.dv8tion.jda.api.managers.WebhookManager</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Url</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>DefaultUser</name>
            <returntype>net.dv8tion.jda.api.entities.User</returntype>
            <comment></comment>
        </property>
        <property>
            <name>WebhookType</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Id</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>AsMention</name>
            <returntype>net.dv8tion.jda.api.entities.User</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.msg.EmbedBuilderwrapper</name>
        <shortname>EmbedBuilder</shortname>
        <objectwrapper>net.dv8tion.jda.api.EmbedBuilder</objectwrapper>
        <owner>process</owner>
        <method>
            <name>setFooter2</name>
            <comment>Sets the Footer of the embed.

 Uploading images with Embeds
 When uploading an image  (using MessageChannel#sendFile(java.io.File, net.dv8tion.jda.api.utils.AttachmentOption...)
 MessageChannel.sendFile(...)}) you can reference said image using the
 specified filename as URI {@code attachment://filename.ext}.

 param text - the text of the footer of the embed. If this is not set, the
 footer will not appear in the embed.
 
 param iconUrl the url of the icon for the footer

 return the builder after the footer has been set</comment>
            <returntype>de.donmanfred.msg.EmbedBuilderwrapper</returntype>
            <parameter>
                <name>text</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>iconUrl</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>addBlankField</name>
            <comment>Adds a blank (empty) Field to the embed.</comment>
            <returntype>de.donmanfred.msg.EmbedBuilderwrapper</returntype>
            <parameter>
                <name>inline</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>clearFields</name>
            <comment>Clears all fields from the embed
 return the builder after the field has been added</comment>
            <returntype>de.donmanfred.msg.EmbedBuilderwrapper</returntype>
        </method>
        <method>
            <name>setDescription</name>
            <comment>Sets the Description of the embed. This is where the main chunk of text for
 an embed is typically placed.

 param description
          the description of the embed, null to reset

 return the builder after the description has been set</comment>
            <returntype>de.donmanfred.msg.EmbedBuilderwrapper</returntype>
            <parameter>
                <name>description</name>
                <type>java.lang.CharSequence</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>de.donmanfred.msg.EmbedBuilderwrapper</returntype>
        </method>
        <method>
            <name>setColorhex</name>
            <comment></comment>
            <returntype>de.donmanfred.msg.EmbedBuilderwrapper</returntype>
            <parameter>
                <name>color</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setTimestamp</name>
            <comment>Sets the Timestamp of the embed.

 &lt;p&gt;
 &lt;b&gt;Hint:&lt;/b&gt; You can get the current time using
 {@link java.time.Instant#now() Instant.now()} or convert time from a
 millisecond representation by using
 {@link java.time.Instant#ofEpochMilli(long) Instant.ofEpochMilli(long)};
temporal: the temporal accessor of the timestamp
Return type: @return:the builder after the timestamp has been set</comment>
            <returntype>de.donmanfred.msg.EmbedBuilderwrapper</returntype>
            <parameter>
                <name>epochms</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>setThumbnail</name>
            <comment>Sets the Thumbnail of the embed.

 Uploading images with Embeds
 When uploading an image (using
 MessageChannel#sendFile(java.io.File, net.dv8tion.jda.api.utils.AttachmentOption...)
 MessageChannel.sendFile(...)}) you can reference said image using the
 specified filename as URI attachment://filename.ext.

 Example
 
 &lt;code&gt;
 MessageChannel channel; // = reference of a MessageChannel
 EmbedBuilder embed = new EmbedBuilder();
 InputStream file = new URL("https://http.cat/500").openStream();
 embed.setThumbnail("attachment://cat.png") // we specify this in sendFile as "cat.png"
      .setDescription("This is a cute cat :3");
 channel.sendFile(file, "cat.png").embed(embed.build()).queue();
 &lt;/code&gt;
 &lt;/pre&gt;
url: the url of the thumbnail of the embed
Return type: @return:the builder after the thumbnail has been set</comment>
            <returntype>de.donmanfred.msg.EmbedBuilderwrapper</returntype>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>clear</name>
            <comment>Resets this builder to default state.
 All parts will be either empty or null after this method has returned.
Return type: @return:The current EmbedBuilder with default values</comment>
            <returntype>de.donmanfred.msg.EmbedBuilderwrapper</returntype>
        </method>
        <method>
            <name>addField</name>
            <comment>Adds a Field to the embed.

 param name the name of the Field, displayed in bold above the value.
 param value the contents of the field.
 param inline whether or not this field should display inline.</comment>
            <returntype>de.donmanfred.msg.EmbedBuilderwrapper</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>inline</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>setTitle</name>
            <comment>Sets the Title of the embed.
 You can provide {@code null} as url if no url should be used.
 return the builder after the title has been set</comment>
            <returntype>de.donmanfred.msg.EmbedBuilderwrapper</returntype>
            <parameter>
                <name>title</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setAuthor2</name>
            <comment>Sets the Author of the embed. The author appears in the top left of the
 embed and can have a small image beside it along with the author's name
 being made clickable by way of providing a url. This convenience method
 just sets the name and the url.</comment>
            <returntype>de.donmanfred.msg.EmbedBuilderwrapper</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setColor</name>
            <comment>Sets the Color of the embed.

 &lt;a href=
 "https://raw.githubusercontent.com/DV8FromTheWorld/JDA/assets/assets/docs/embeds/02-setColor.png"
 target="_blank"&gt;Example&lt;/a&gt;
color: The {@link java.awt.Color Color} of the embed or {@code null} to
          use no color
Return type: @return:the builder after the color has been set</comment>
            <returntype>de.donmanfred.msg.EmbedBuilderwrapper</returntype>
            <parameter>
                <name>color</name>
                <type>java.awt.Color</type>
            </parameter>
        </method>
        <method>
            <name>setAuthor3</name>
            <comment>Sets the Author of the embed. The author appears in the top left of the
 embed and can have a small image beside it along with the author's name
 being made clickable by way of providing a url.</comment>
            <returntype>de.donmanfred.msg.EmbedBuilderwrapper</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>iconUrl</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setAuthor</name>
            <comment>Sets the Author of the embed. The author appears in the top left of the
 embed and can have a small image beside it along with the author's name
 being made clickable by way of providing a url. This convenience method
 just sets the name.

 param name
          the name of the author of the embed. If this is not set, the
          author will not appear in the embed

 return the builder after the author has been set</comment>
            <returntype>de.donmanfred.msg.EmbedBuilderwrapper</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>build</name>
            <comment>Returns a MessageEmbed that has been checked as being valid for sending.

 java.lang.IllegalStateException
           If the embed is empty. Can be checked with {@link #isEmpty()}.

 return the built, sendable MessageEmbed</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageEmbed</returntype>
        </method>
        <method>
            <name>setFooter</name>
            <comment>Sets the Footer of the embed without icon.

 param text
          the text of the footer of the embed. If this is not set or set to
          null, the footer will not appear in the embed.

 throws java.lang.IllegalArgumentException
           If the length of text is longer than MessageEmbed#TEXT_MAX_LENGTH}.</comment>
            <returntype>de.donmanfred.msg.EmbedBuilderwrapper</returntype>
            <parameter>
                <name>text</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setColor2</name>
            <comment></comment>
            <returntype>de.donmanfred.msg.EmbedBuilderwrapper</returntype>
            <parameter>
                <name>color</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>appendDescription</name>
            <comment>Appends to the description of the embed. This is where the main chunk of
 text for an embed is typically placed.

 param description
       the string to append to the description of the embed

 return the builder after the description has been set</comment>
            <returntype>de.donmanfred.msg.EmbedBuilderwrapper</returntype>
            <parameter>
                <name>description</name>
                <type>java.lang.CharSequence</type>
            </parameter>
        </method>
        <method>
            <name>setImage</name>
            <comment>Sets the Image of the embed. Uploading images with Embeds 
 When uploading an image you can reference said image using 
 the specified filename as URI attachment://filename.ext</comment>
            <returntype>de.donmanfred.msg.EmbedBuilderwrapper</returntype>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>GRAY</name>
            <returntype>java.awt.Color</returntype>
            <comment></comment>
        </property>
        <property>
            <name>WHITE</name>
            <returntype>java.awt.Color</returntype>
            <comment></comment>
        </property>
        <property>
            <name>BLUE</name>
            <returntype>java.awt.Color</returntype>
            <comment></comment>
        </property>
        <property>
            <name>GREEN</name>
            <returntype>java.awt.Color</returntype>
            <comment></comment>
        </property>
        <property>
            <name>RED</name>
            <returntype>java.awt.Color</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Empty</name>
            <returntype>boolean</returntype>
            <comment>Checks if the given embed is empty. Empty embeds will throw an exception if
 built

 return true if the embed is empty and cannot be built</comment>
        </property>
        <property>
            <name>PINK</name>
            <returntype>java.awt.Color</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Fields</name>
            <returntype>java.util.List</returntype>
            <comment>Modifiable list of MessageEmbed Fields that the builder will use for build(). 
 You can add/remove Fields and restructure this List
 and it will then be applied in the built MessageEmbed. These fields will be
 available again through</comment>
        </property>
        <property>
            <name>LIGHT_GRAY</name>
            <returntype>java.awt.Color</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Length</name>
            <returntype>int</returntype>
            <comment>The overall length of the current EmbedBuilder in displayed characters.
 Represents the MessageEmbed.getLength()} value.

 return length of the current builder state</comment>
        </property>
        <property>
            <name>DescriptionBuilder</name>
            <returntype>java.lang.StringBuilder</returntype>
            <comment>The StringBuilder used to build the
 description for the embed. 
 Note: To reset the description use setDescription(null)

 return StringBuilder with current description context</comment>
        </property>
        <property>
            <name>BLACK</name>
            <returntype>java.awt.Color</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MAGENTA</name>
            <returntype>java.awt.Color</returntype>
            <comment></comment>
        </property>
        <property>
            <name>YELLOW</name>
            <returntype>java.awt.Color</returntype>
            <comment></comment>
        </property>
        <property>
            <name>CYAN</name>
            <returntype>java.awt.Color</returntype>
            <comment></comment>
        </property>
        <property>
            <name>DARK_GRAY</name>
            <returntype>java.awt.Color</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ORANGE</name>
            <returntype>java.awt.Color</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.msg.Interactionwrapper</name>
        <shortname>Interaction</shortname>
        <objectwrapper>net.dv8tion.jda.api.entities.Message.Interaction</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>TimeCreated</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>IdLong</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TypeRaw</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Type</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>User</name>
            <returntype>net.dv8tion.jda.api.entities.User</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Id</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Member</name>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.msg.MessageCreateBuilderwrapper</name>
        <shortname>MessageCreateBuilder</shortname>
        <objectwrapper>net.dv8tion.jda.api.utils.messages.MessageCreateBuilder</objectwrapper>
        <owner>process</owner>
        <method>
            <name>createPrimary</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.components.buttons.Button</returntype>
            <parameter>
                <name>id</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>label</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>createSecondary2</name>
            <comment>Creates a button with ButtonStyle SECONDARY Style.
 The button is enabled and has no text label.

 param     id - The custom button ID
 param  emoji - The emoji to use as the button label
 return The button instance</comment>
            <returntype>net.dv8tion.jda.api.interactions.components.buttons.Button</returntype>
            <parameter>
                <name>id</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>emoji</name>
                <type>net.dv8tion.jda.api.entities.emoji.Emoji</type>
            </parameter>
        </method>
        <method>
            <name>appendFormat</name>
            <comment></comment>
            <returntype>de.donmanfred.msg.MessageCreateBuilderwrapper</returntype>
            <parameter>
                <name>format</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>text</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>appendCodeLine</name>
            <comment>Appends a code-line to the Message. Code Lines are similar to code-blocks,
 however they are displayed in-line and do not support language specific
 highlighting.
text: the code to append
Return type: @return:The MessageBuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.msg.MessageCreateBuilderwrapper</returntype>
            <parameter>
                <name>text</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>createDanger2</name>
            <comment>Creates a button with ButtonStyle DANGER Style.
 The button is enabled and has no text label.
 param  id - The custom button ID
 param  emoji - The emoji to use as the button label

 throws IllegalArgumentException
 If any argument is empty or null or the 
 id is longer than 100 characters

 return The button instance</comment>
            <returntype>net.dv8tion.jda.api.interactions.components.buttons.Button</returntype>
            <parameter>
                <name>id</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>emoji</name>
                <type>net.dv8tion.jda.api.entities.emoji.Emoji</type>
            </parameter>
        </method>
        <method>
            <name>appendUserMention</name>
            <comment>Appends a mention to the Message. 
 Typical usage would be providing an IMentionable like
 User or TextChannel.
Return type: @return:The MessageBuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.msg.MessageCreateBuilderwrapper</returntype>
            <parameter>
                <name>mention</name>
                <type>net.dv8tion.jda.api.entities.User</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>de.donmanfred.msg.MessageCreateBuilderwrapper</returntype>
        </method>
        <method>
            <name>createLink</name>
            <comment>Creates a button with ButtonStyle LINK Style.
 The button is enabled and has no emoji attached by default.

 Note that link buttons never send a ButtonClickEvent.
 These buttons only open a link for the user.

 param url - The target URL for this button
 param label - The text to display on the button

 throws IllegalArgumentException
 If any argument is empty or null, the label 
 is longer than 80 characters, or the url 
 is longer than 512 characters

 return The button instance</comment>
            <returntype>net.dv8tion.jda.api.interactions.components.buttons.Button</returntype>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>label</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SetContent</name>
            <comment>Sets the content of the resulting Message &lt;br&gt;
 This will replace already added content.
content: The content to use, or {@code null} to reset the content
Return type: @return:The MessageBuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.msg.MessageCreateBuilderwrapper</returntype>
            <parameter>
                <name>content</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>appendRoleMention</name>
            <comment></comment>
            <returntype>de.donmanfred.msg.MessageCreateBuilderwrapper</returntype>
            <parameter>
                <name>mention</name>
                <type>net.dv8tion.jda.api.entities.Role</type>
            </parameter>
        </method>
        <method>
            <name>CreateActionRow</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.components.ActionRow</returntype>
            <parameter>
                <name>rows</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>createSuccess2</name>
            <comment>Creates a button with ButtonStyle SUCCESS Style.
 The button is enabled and has no text label.

 param  id    - The custom button ID
 param  emoji - The emoji to use as the button label

 return The button instance</comment>
            <returntype>net.dv8tion.jda.api.interactions.components.buttons.Button</returntype>
            <parameter>
                <name>id</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>emoji</name>
                <type>net.dv8tion.jda.api.entities.emoji.Emoji</type>
            </parameter>
        </method>
        <method>
            <name>createDanger</name>
            <comment>Creates a button with ButtonStyle DANGER Style.
 The button is enabled and has no emoji attached by default.
 param  id - The custom button ID
 param  label - The text to display on the button

 throws IllegalArgumentException
 If any argument is empty or null, the 
 label is longer than 80 characters, or 
 the id is longer than 100 characters

 return The button instance</comment>
            <returntype>net.dv8tion.jda.api.interactions.components.buttons.Button</returntype>
            <parameter>
                <name>id</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>label</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>CreateActionRow2</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.components.ActionRow</returntype>
            <parameter>
                <name>rows</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>createLink2</name>
            <comment>Creates a button with {@link ButtonStyle#LINK LINK} Style.
 &lt;br&gt;The button is enabled and has no text label.
 To use labels you can use {@code link(url, label).withEmoji(emoji)}

 &lt;p&gt;To disable the button you can use {@link #asDisabled()}.

 &lt;p&gt;Note that link buttons never send a {@link net.dv8tion.jda.api.events.interaction.ButtonClickEvent ButtonClickEvent}.
 These buttons only open a link for the user.
url: The target URL for this button
emoji: The emoji to use as the button label
Return type: @return:The button instance</comment>
            <returntype>net.dv8tion.jda.api.interactions.components.buttons.Button</returntype>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>emoji</name>
                <type>net.dv8tion.jda.api.entities.emoji.Emoji</type>
            </parameter>
        </method>
        <method>
            <name>appendEmojiMention</name>
            <comment></comment>
            <returntype>de.donmanfred.msg.MessageCreateBuilderwrapper</returntype>
            <parameter>
                <name>mention</name>
                <type>net.dv8tion.jda.api.entities.emoji.Emoji</type>
            </parameter>
        </method>
        <method>
            <name>EmojiFromUnicode</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.emoji.UnicodeEmoji</returntype>
            <parameter>
                <name>code</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>addFiles</name>
            <comment></comment>
            <returntype>de.donmanfred.msg.MessageCreateBuilderwrapper</returntype>
            <parameter>
                <name>files</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>createSecondary</name>
            <comment>Creates a button with ButtonStyle SECONDARY Style.
 The button is enabled and has no emoji attached by default.
 param  id    - The custom button ID
 param  label - The text to display on the button

 throws IllegalArgumentException
 If any argument is empty or null, the label 
 is longer than 80 characters, or the id is longer than 100 characters

 return The button instance</comment>
            <returntype>net.dv8tion.jda.api.interactions.components.buttons.Button</returntype>
            <parameter>
                <name>id</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>label</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>length</name>
            <comment>Returns the current length of the content that will be built into a
 {@link net.dv8tion.jda.api.entities.Message Message} when {@link #build()}
 is called. &lt;br&gt;
 If this value is {@code 0} (and there is no embed) or greater than
 {@code 2000} when {@link #build()} is called, an exception will be raised
 as you cannot send an empty message to Discord and Discord has a hard limit
 of 2000 characters per message.

 &lt;p&gt;
 &lt;b&gt;Hint:&lt;/b&gt; You can use {@link #build(int, int)} or
 {@link #buildAll(net.dv8tion.jda.api.MessageBuilder.SplitPolicy...)
 buildAll(SplitPolicy...)} as possible ways to deal with the 2000 character
 cap.
Return type: @return:the current length of the content that will be built into a
         Message.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>clear</name>
            <comment>Clears the current builder. Useful for mass message creation.
Return type: @return:The MessageBuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.msg.MessageCreateBuilderwrapper</returntype>
        </method>
        <method>
            <name>clearActionRows</name>
            <comment></comment>
            <returntype>de.donmanfred.msg.MessageCreateBuilderwrapper</returntype>
        </method>
        <method>
            <name>createPrimary2</name>
            <comment>Creates a button with ButtonStyle PRIMARY Style.
 The button is enabled and has an emoji and no label attached by default.

 param  id    - The custom button ID
 param  emoji - The emoji to display on the button
 throws IllegalArgumentException
 If any argument is empty or null, or the id is longer than 100 characters

 return The button instance</comment>
            <returntype>net.dv8tion.jda.api.interactions.components.buttons.Button</returntype>
            <parameter>
                <name>id</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>emoji</name>
                <type>net.dv8tion.jda.api.entities.emoji.Emoji</type>
            </parameter>
        </method>
        <method>
            <name>EmojifromFormatted</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.emoji.Emoji</returntype>
            <parameter>
                <name>code</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setEmbeds</name>
            <comment>Adds {@link net.dv8tion.jda.api.entities.MessageEmbed} a list of Embed to the Message.
 Embeds can be built using the {@link net.dv8tion.jda.api.EmbedBuilder} and
 offer specialized formatting.
embed: the embed to add, or null to remove
Return type: @return:The MessageBuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.msg.MessageCreateBuilderwrapper</returntype>
            <parameter>
                <name>rows</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>setTTS</name>
            <comment>Makes the created Message a TTS message. &lt;br&gt;
 TTS stands for Text-To-Speech. When a TTS method is received by the Discord
 client, it is vocalized so long as the user has not disabled TTS.
tts: whether the created Message should be a tts message
Return type: @return:The MessageBuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.msg.MessageCreateBuilderwrapper</returntype>
            <parameter>
                <name>tts</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>CreateFileUpload2</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.utils.FileUpload</returntype>
            <parameter>
                <name>data</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>filename</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>build</name>
            <comment>Creates a Message object from this MessageBuilder</comment>
            <returntype>net.dv8tion.jda.api.utils.messages.MessageCreateData</returntype>
        </method>
        <method>
            <name>addActionRow</name>
            <comment></comment>
            <returntype>de.donmanfred.msg.MessageCreateBuilderwrapper</returntype>
            <parameter>
                <name>rows</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>createSuccess</name>
            <comment>Creates a button with ButtonStyle SUCCESS Style.
 The button is enabled and has no emoji attached by default.
 return The button instance</comment>
            <returntype>net.dv8tion.jda.api.interactions.components.buttons.Button</returntype>
            <parameter>
                <name>id</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>label</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>appendChannelMention</name>
            <comment></comment>
            <returntype>de.donmanfred.msg.MessageCreateBuilderwrapper</returntype>
            <parameter>
                <name>mention</name>
                <type>net.dv8tion.jda.api.entities.channel.concrete.TextChannel</type>
            </parameter>
        </method>
        <method>
            <name>CreateFileUpload</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.utils.FileUpload</returntype>
            <parameter>
                <name>path</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>filename</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>append</name>
            <comment></comment>
            <returntype>de.donmanfred.msg.MessageCreateBuilderwrapper</returntype>
            <parameter>
                <name>text</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>Empty</name>
            <returntype>boolean</returntype>
            <comment>Checks if the message contains any contend. This includes text as well as
 embeds.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.msg.MessageEditBuilderwrapper</name>
        <shortname>MessageEditBuilder</shortname>
        <objectwrapper>net.dv8tion.jda.api.utils.messages.MessageEditBuilder</objectwrapper>
        <owner>process</owner>
        <method>
            <name>setContent</name>
            <comment>Sets the content of the resulting Message &lt;br&gt;
 This will replace already added content.
content: The content to use, or {@code null} to reset the content
Return type: @return:The MessageBuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.msg.MessageEditBuilderwrapper</returntype>
            <parameter>
                <name>text</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>createPrimary</name>
            <comment>Creates a button with ButtonStyle PRIMARY Style.
 The button is enabled and has no emoji attached by default.

 param  id    - The custom button ID
 param  label - The text to display on the button
 throws IllegalArgumentException
 If any argument is empty or null, the label is longer than 80 characters, 
 or the id is longer than 100 characters

 return The button instance</comment>
            <returntype>net.dv8tion.jda.api.interactions.components.buttons.Button</returntype>
            <parameter>
                <name>id</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>label</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>createSecondary2</name>
            <comment>Creates a button with ButtonStyle SECONDARY Style.
 The button is enabled and has no text label.

 param     id - The custom button ID
 param  emoji - The emoji to use as the button label
 return The button instance</comment>
            <returntype>net.dv8tion.jda.api.interactions.components.buttons.Button</returntype>
            <parameter>
                <name>id</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>emoji</name>
                <type>net.dv8tion.jda.api.entities.emoji.Emoji</type>
            </parameter>
        </method>
        <method>
            <name>createDanger2</name>
            <comment>Creates a button with ButtonStyle DANGER Style.
 The button is enabled and has no text label.
 param  id - The custom button ID
 param  emoji - The emoji to use as the button label

 throws IllegalArgumentException
 If any argument is empty or null or the 
 id is longer than 100 characters

 return The button instance</comment>
            <returntype>net.dv8tion.jda.api.interactions.components.buttons.Button</returntype>
            <parameter>
                <name>id</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>emoji</name>
                <type>net.dv8tion.jda.api.entities.emoji.Emoji</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>de.donmanfred.msg.MessageEditBuilderwrapper</returntype>
        </method>
        <method>
            <name>createLink</name>
            <comment>Creates a button with ButtonStyle LINK Style.
 The button is enabled and has no emoji attached by default.

 Note that link buttons never send a ButtonClickEvent.
 These buttons only open a link for the user.

 param url - The target URL for this button
 param label - The text to display on the button

 throws IllegalArgumentException
 If any argument is empty or null, the label 
 is longer than 80 characters, or the url 
 is longer than 512 characters

 return The button instance</comment>
            <returntype>net.dv8tion.jda.api.interactions.components.buttons.Button</returntype>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>label</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>CreateActionRow</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.components.ActionRow</returntype>
            <parameter>
                <name>rows</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>InitializefromMessageCreateData</name>
            <comment>Factory method to start a builder from an existing instance of 
 MessageCreateData.
 Equivalent to MessageEditBuilder().applyCreateData(data).
data: The message create data to apply
Return type: @return:A new MessageEditBuilder instance with the applied data</comment>
            <returntype>de.donmanfred.msg.MessageEditBuilderwrapper</returntype>
            <parameter>
                <name>data</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
        </method>
        <method>
            <name>createSuccess2</name>
            <comment>Creates a button with ButtonStyle SUCCESS Style.
 The button is enabled and has no text label.

 param  id    - The custom button ID
 param  emoji - The emoji to use as the button label

 return The button instance</comment>
            <returntype>net.dv8tion.jda.api.interactions.components.buttons.Button</returntype>
            <parameter>
                <name>id</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>emoji</name>
                <type>net.dv8tion.jda.api.entities.emoji.Emoji</type>
            </parameter>
        </method>
        <method>
            <name>createDanger</name>
            <comment>Creates a button with ButtonStyle DANGER Style.
 The button is enabled and has no emoji attached by default.
 param  id - The custom button ID
 param  label - The text to display on the button

 throws IllegalArgumentException
 If any argument is empty or null, the 
 label is longer than 80 characters, or 
 the id is longer than 100 characters

 return The button instance</comment>
            <returntype>net.dv8tion.jda.api.interactions.components.buttons.Button</returntype>
            <parameter>
                <name>id</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>label</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>createLink2</name>
            <comment>Creates a button with {@link ButtonStyle#LINK LINK} Style.
 &lt;br&gt;The button is enabled and has no text label.
 To use labels you can use {@code link(url, label).withEmoji(emoji)}

 &lt;p&gt;To disable the button you can use {@link #asDisabled()}.

 &lt;p&gt;Note that link buttons never send a {@link net.dv8tion.jda.api.events.interaction.ButtonClickEvent ButtonClickEvent}.
 These buttons only open a link for the user.
url: The target URL for this button
emoji: The emoji to use as the button label
Return type: @return:The button instance</comment>
            <returntype>net.dv8tion.jda.api.interactions.components.buttons.Button</returntype>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>emoji</name>
                <type>net.dv8tion.jda.api.entities.emoji.Emoji</type>
            </parameter>
        </method>
        <method>
            <name>EmojiFromUnicode</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.emoji.UnicodeEmoji</returntype>
            <parameter>
                <name>code</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>createSecondary</name>
            <comment>Creates a button with ButtonStyle SECONDARY Style.
 The button is enabled and has no emoji attached by default.
 param  id    - The custom button ID
 param  label - The text to display on the button

 throws IllegalArgumentException
 If any argument is empty or null, the label 
 is longer than 80 characters, or the id is longer than 100 characters

 return The button instance</comment>
            <returntype>net.dv8tion.jda.api.interactions.components.buttons.Button</returntype>
            <parameter>
                <name>id</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>label</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>length</name>
            <comment>Returns the current length of the content that will be built into a
 {@link net.dv8tion.jda.api.entities.Message Message} when {@link #build()}
 is called. &lt;br&gt;
 If this value is {@code 0} (and there is no embed) or greater than
 {@code 2000} when {@link #build()} is called, an exception will be raised
 as you cannot send an empty message to Discord and Discord has a hard limit
 of 2000 characters per message.

 &lt;p&gt;
 &lt;b&gt;Hint:&lt;/b&gt; You can use {@link #build(int, int)} or
 {@link #buildAll(net.dv8tion.jda.api.MessageBuilder.SplitPolicy...)
 buildAll(SplitPolicy...)} as possible ways to deal with the 2000 character
 cap.
Return type: @return:the current length of the content that will be built into a
         Message.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>clear</name>
            <comment>Clears the current builder. Useful for mass message creation.
Return type: @return:The MessageBuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.msg.MessageEditBuilderwrapper</returntype>
        </method>
        <method>
            <name>createPrimary2</name>
            <comment>Creates a button with ButtonStyle PRIMARY Style.
 The button is enabled and has an emoji and no label attached by default.

 param  id    - The custom button ID
 param  emoji - The emoji to display on the button
 throws IllegalArgumentException
 If any argument is empty or null, or the id is longer than 100 characters

 return The button instance</comment>
            <returntype>net.dv8tion.jda.api.interactions.components.buttons.Button</returntype>
            <parameter>
                <name>id</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>emoji</name>
                <type>net.dv8tion.jda.api.entities.emoji.Emoji</type>
            </parameter>
        </method>
        <method>
            <name>EmojifromFormatted</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.emoji.Emoji</returntype>
            <parameter>
                <name>code</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setEmbeds</name>
            <comment>Adds {@link net.dv8tion.jda.api.entities.MessageEmbed} a list of Embed to the Message.
 Embeds can be built using the {@link net.dv8tion.jda.api.EmbedBuilder} and
 offer specialized formatting.
embed: the embed to add, or null to remove
Return type: @return:The MessageBuilder instance. Useful for chaining.</comment>
            <returntype>de.donmanfred.msg.MessageEditBuilderwrapper</returntype>
            <parameter>
                <name>rows</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>Initialize3</name>
            <comment></comment>
            <returntype>de.donmanfred.msg.MessageEditBuilderwrapper</returntype>
            <parameter>
                <name>data</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
        </method>
        <method>
            <name>setActionRows</name>
            <comment></comment>
            <returntype>de.donmanfred.msg.MessageEditBuilderwrapper</returntype>
            <parameter>
                <name>rows</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>Initialize2</name>
            <comment>Factory method to start a builder from an existing instance of {@link MessageEditData}.
 &lt;br&gt;Equivalent to {@code new MessageEditBuilder().applyData(data)}.
data: The message edit data to apply
Return type: @return:A new MessageEditBuilder instance with the applied data</comment>
            <returntype>de.donmanfred.msg.MessageEditBuilderwrapper</returntype>
            <parameter>
                <name>data</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageEditData</type>
            </parameter>
        </method>
        <method>
            <name>build</name>
            <comment>Creates a Message object from this MessageBuilder</comment>
            <returntype>net.dv8tion.jda.api.utils.messages.MessageEditData</returntype>
        </method>
        <method>
            <name>applyData</name>
            <comment></comment>
            <returntype>de.donmanfred.msg.MessageEditBuilderwrapper</returntype>
            <parameter>
                <name>data</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageEditData</type>
            </parameter>
        </method>
        <method>
            <name>applyCreateData</name>
            <comment></comment>
            <returntype>de.donmanfred.msg.MessageEditBuilderwrapper</returntype>
            <parameter>
                <name>createdata</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
        </method>
        <method>
            <name>createSuccess</name>
            <comment>Creates a button with ButtonStyle SUCCESS Style.
 The button is enabled and has no emoji attached by default.
 return The button instance</comment>
            <returntype>net.dv8tion.jda.api.interactions.components.buttons.Button</returntype>
            <parameter>
                <name>id</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>label</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>InitializeFromMessage</name>
            <comment>Factory method to start a builder from an existing instance of {@link Message}.
 &lt;br&gt;Equivalent to {@code new MessageEditBuilder().applyMessage(data)}.

 &lt;p&gt;This will set the request to be {@link #setReplace(boolean) replacing}.
message: The message to apply
Return type: @return:A new MessageEditBuilder instance with the applied data</comment>
            <returntype>de.donmanfred.msg.MessageEditBuilderwrapper</returntype>
            <parameter>
                <name>message</name>
                <type>net.dv8tion.jda.api.entities.Message</type>
            </parameter>
        </method>
        <property>
            <name>Empty</name>
            <returntype>boolean</returntype>
            <comment>Checks if the message contains any contend. This includes text as well as
 embeds.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.msg.MessageEmbedwrapper</name>
        <shortname>MessageEmbed</shortname>
        <objectwrapper>net.dv8tion.jda.api.entities.MessageEmbed</objectwrapper>
        <owner>process</owner>
        <method>
            <name>toJson</name>
            <comment></comment>
            <returntype>byte[]</returntype>
        </method>
        <method>
            <name>toPrettyString</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>toString</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>toData</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.utils.data.DataObject</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Description</name>
            <returntype>java.lang.String</returntype>
            <comment>The description of the embedded resource. &lt;br&gt;
 This is provided only if Discord could find a description for the embedded
 resource using the provided url. &lt;br&gt;
 Commonly, this is null. Be careful when using it.</comment>
        </property>
        <property>
            <name>Color</name>
            <returntype>java.awt.Color</returntype>
            <comment>The color of the stripe on the side of the embed. &lt;br&gt;
 If the color is 0 (no color), this will return null.</comment>
        </property>
        <property>
            <name>Title</name>
            <returntype>java.lang.String</returntype>
            <comment>The title of the embed. Typically this will be the html title of the
 webpage that is being embedded.
 If no title could be found, like the case of EmbedType = IMAGE, this method
 will return null.

 return Possibly-null String containing the title of the embedded resource.</comment>
        </property>
        <property>
            <name>VideoInfo</name>
            <returntype>net.dv8tion.jda.api.entities.MessageEmbed.VideoInfo</returntype>
            <comment>The information about the video which should be displayed as an embed. &lt;br&gt;
 This is used when sites with HTML5 players are linked and embedded. Most
 commonly Youtube. &lt;br&gt;
 If this {@link net.dv8tion.jda.api.entities.EmbedType EmbedType} !=
 {@link net.dv8tion.jda.api.entities.EmbedType#VIDEO VIDEO} this will always
 return null.</comment>
        </property>
        <property>
            <name>Thumbnail</name>
            <returntype>net.dv8tion.jda.api.entities.MessageEmbed.Thumbnail</returntype>
            <comment>The information about the
 {@link net.dv8tion.jda.api.entities.MessageEmbed.Thumbnail Thumbnail} image
 to be displayed with the embed. &lt;br&gt;
 If a {@link net.dv8tion.jda.api.entities.MessageEmbed.Thumbnail Thumbnail}
 was not part of this embed, this returns null.</comment>
        </property>
        <property>
            <name>Image</name>
            <returntype>net.dv8tion.jda.api.entities.MessageEmbed.ImageInfo</returntype>
            <comment>The information about the image in the message embed</comment>
        </property>
        <property>
            <name>Timestamp</name>
            <returntype>java.time.OffsetDateTime</returntype>
            <comment>The timestamp of the embed.</comment>
        </property>
        <property>
            <name>Type</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.EmbedType</returntype>
            <comment>The {@link net.dv8tion.jda.api.entities.EmbedType EmbedType} of this embed.</comment>
        </property>
        <property>
            <name>Empty</name>
            <returntype>boolean</returntype>
            <comment>Whether this embed is empty.</comment>
        </property>
        <property>
            <name>SiteProvider</name>
            <returntype>net.dv8tion.jda.api.entities.MessageEmbed.Provider</returntype>
            <comment>The information on site from which the embed was generated from. &lt;br&gt;
 If Discord did not generate any deliverable information about the site,
 this returns null.</comment>
        </property>
        <property>
            <name>Fields</name>
            <returntype>java.util.List</returntype>
            <comment>The fields in a message embed. &lt;br&gt;
 Message embeds can contain multiple fields, each with a name, value, and a
 boolean to determine if it will fall in-line with other fields. If the
 embed contains no fields, an empty list will be returned.</comment>
        </property>
        <property>
            <name>Length</name>
            <returntype>int</returntype>
            <comment>The total amount of characters that is displayed when this embed is
 displayed by the Discord client.

 &lt;p&gt;
 An Embed can only have, at max, {@value #EMBED_MAX_LENGTH_BOT} displayable
 text characters for {@link net.dv8tion.jda.api.AccountType#BOT
 AccountType.BOT} accounts or {@value #EMBED_MAX_LENGTH_CLIENT} displayable
 text characters for {@link net.dv8tion.jda.api.AccountType#CLIENT
 AccountType.CLIENT} accounts.

 &lt;p&gt;
 Both of these values are defined by {@link #EMBED_MAX_LENGTH_BOT
 EMBED_MAX_LENGTH_BOT} and {@link #EMBED_MAX_LENGTH_CLIENT
 EMBED_MAX_LENGTH_CLIENT} respectively.</comment>
        </property>
        <property>
            <name>Footer</name>
            <returntype>net.dv8tion.jda.api.entities.MessageEmbed.Footer</returntype>
            <comment>The footer (bottom) of the embedded content. &lt;br&gt;
 This is typically used for timestamps or site icons.</comment>
        </property>
        <property>
            <name>Author</name>
            <returntype>net.dv8tion.jda.api.entities.MessageEmbed.AuthorInfo</returntype>
            <comment>The information on the creator of the embedded content. &lt;br&gt;
 This is typically used to represent the account on the providing site.</comment>
        </property>
        <property>
            <name>ColorRaw</name>
            <returntype>int</returntype>
            <comment>The raw RGB color value for this embed &lt;br&gt;
 Defaults to {@link Role#DEFAULT_COLOR_RAW} if no color is set</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.msg.MessageHistorywrapper</name>
        <shortname>MessageHistory</shortname>
        <objectwrapper>net.dv8tion.jda.api.entities.MessageHistory</objectwrapper>
        <owner>process</owner>
        <event>onMessages(msgs As List)</event>
        <method>
            <name>getMessageById</name>
            <comment>Used to get a Message from the set of already retrieved message 
 via it's message Id.
 If a Message with the provided id has not already been retrieved 
 (thus, doesn't not exist in this MessageHistory object), then 
 this method returns null.</comment>
            <returntype>net.dv8tion.jda.api.entities.Message</returntype>
            <parameter>
                <name>id</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryBefore</name>
            <comment>Constructs a MessageHistory with the initially retrieved history
 of messages sent before the mentioned message ID (exclusive).
 The provided ID need not be valid!</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory.MessageRetrieveAction</returntype>
            <parameter>
                <name>channel</name>
                <type>net.dv8tion.jda.api.entities.channel.middleman.MessageChannel</type>
            </parameter>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>getHistoryAfter</name>
            <comment>Constructs a MessageHistory with the initially retrieved 
 history of messages sent after the mentioned message 
 ID (exclusive).
 The provided ID need not be valid!</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory.MessageRetrieveAction</returntype>
            <parameter>
                <name>channel</name>
                <type>net.dv8tion.jda.api.entities.channel.middleman.MessageChannel</type>
            </parameter>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryAround</name>
            <comment>Constructs a MessageHistory with the initially retrieved history
 of messages sent around the mentioned message ID (inclusive).
 The provided ID need not be valid!</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory.MessageRetrieveAction</returntype>
            <parameter>
                <name>channel</name>
                <type>net.dv8tion.jda.api.entities.channel.middleman.MessageChannel</type>
            </parameter>
            <parameter>
                <name>messageId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getHistoryFromBeginning</name>
            <comment>Constructs a MessageHistory with the initially retrieved history
 of messages sent.</comment>
            <returntype>net.dv8tion.jda.api.entities.MessageHistory.MessageRetrieveAction</returntype>
            <parameter>
                <name>channel</name>
                <type>net.dv8tion.jda.api.entities.channel.middleman.MessageChannel</type>
            </parameter>
        </method>
        <method>
            <name>retrievePast</name>
            <comment>Retrieves messages from Discord that were sent before the oldest 
 sent message in MessageHistory's history cache.
 Can only retrieve a maximum of 100 messages at a time.
 This method has 2 modes of operation: initial retrieval 
 and additional retrieval.
 Initial Retrieval
 This mode is what is used when no Messages have been retrieved
 yet (RetrievedHistory()'s size is 0). Initial retrieval starts 
 from the most recent message sent to the channel and retrieves 
 backwards from there. So, if 50 messages are retrieved during 
 this mode, the most recent 50 messages will be retrieved.

 Additional Retrieval
 This mode is used once some Messages have already been retrieved
 from Discord and are stored in MessageHistory's history (RetrievedHistory()}).
 When retrieving messages in this mode, MessageHistory will retrieve 
 previous messages starting from the oldest message stored in 
 MessageHistory.
 E.g: If you initially retrieved 10 messages, the next call to this 
 method to retrieve 10 messages would retrieve the next 10 messages,
 starting from the oldest message of the 10 previously retrieved 
 messages.</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>amount</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>retrieveFuture</name>
            <comment>Retrieves messages from Discord that were sent more recently 
 than the most recently sent message in MessageHistory's 
 history cache.
 Use case for this method is for getting more recent messages 
 after jumping to a specific point in history</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>amount</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SetEventListener</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getMessageById2</name>
            <comment>Used to get a Message from the set of already retrieved 
 message via it's message Id.
 If a Message with the provided id has not already been 
 retrieved (thus, doesn't not exist in this MessageHistory
 object), then this method returns null.</comment>
            <returntype>net.dv8tion.jda.api.entities.Message</returntype>
            <parameter>
                <name>id</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>retrievePast2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>amount</name>
                <type>int</type>
            </parameter>
        </method>
        <property>
            <name>Empty</name>
            <returntype>boolean</returntype>
            <comment>Whether this MessageHistory instance has retrieved any messages.</comment>
        </property>
        <property>
            <name>size</name>
            <returntype>int</returntype>
            <comment>The amount of retrieved Messages by this MessageHistory.
 This returns 0 until any call to retrieve messages has completed.</comment>
        </property>
        <property>
            <name>Channel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.middleman.MessageChannel</returntype>
            <comment></comment>
        </property>
        <property>
            <name>RetrievedHistory</name>
            <returntype>java.util.List</returntype>
            <comment>The List of Messages, sorted starting from newest to oldest, 
 of all message that have already been retrieved
 from Discord with this MessageHistory object using the retrievePast(int), 
 retrieveFuture(int), and getHistoryAround(String, int) methods.

 This will be empty if it was just created using getHistory() or 
 similar methods. You first have to retrieve messages.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.msg.MessageReactionwrapper</name>
        <shortname>MessageReaction</shortname>
        <objectwrapper>net.dv8tion.jda.api.entities.MessageReaction</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Channel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.middleman.MessageChannel</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Emoji</name>
            <returntype>net.dv8tion.jda.api.entities.emoji.Emoji</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Count</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Users</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MessageId</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.msg.MessageReferencewrapper</name>
        <shortname>MessageReference</shortname>
        <objectwrapper>net.dv8tion.jda.api.entities.MessageReference</objectwrapper>
        <owner>process</owner>
        <method>
            <name>resolve</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Message</name>
            <returntype>net.dv8tion.jda.api.entities.Message</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Channel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.middleman.MessageChannel</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ChannelId</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MessageId</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.msg.Messagewrapper</name>
        <shortname>Message</shortname>
        <objectwrapper>net.dv8tion.jda.api.entities.Message</objectwrapper>
        <owner>process</owner>
        <method>
            <name>editMessageobj</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>med</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageEditData</type>
            </parameter>
        </method>
        <method>
            <name>clearButtons</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>getButtonsByLabel</name>
            <comment></comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>display</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>ignorecase</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>editMessageEmbeds</name>
            <comment>Edits this Message's content to the provided MessageEmbed.
 Messages can only be edited by the account that sent them!

 This message instance will not be updated by this operation, 
 please use the response message instead.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>rows</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>removeReaction</name>
            <comment>Removes a reaction from this Message using an Emote.


 Reactions are the small emoji/emotes below a message that have a counter beside them
 showing how many users have reacted with the same emoji/emote.

 Neither success nor failure of this request will affect this Message's {@link #getReactions()} return as Message is immutable.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>emoji</name>
                <type>net.dv8tion.jda.api.entities.emoji.Emoji</type>
            </parameter>
        </method>
        <method>
            <name>getButtonById</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.interactions.components.buttons.Button</returntype>
            <parameter>
                <name>id</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>delete</name>
            <comment>Deletes this Message from Discord.
 If this Message was not sent by the currently 
 logged in account, then this will fail unless 
 the Message is from a TextChannel and the current 
 account has Permission.MESSAGE_MANAGE in the channel.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>getFromType</name>
            <comment>Used to determine if this Message was received from a {@link net.dv8tion.jda.api.entities.MessageChannel MessageChannel}
 of the {@link net.dv8tion.jda.api.entities.ChannelType ChannelType} specified.
 &lt;br&gt;This will always be false for {@link net.dv8tion.jda.api.entities.ChannelType#VOICE} as Messages can't be sent to
 {@link net.dv8tion.jda.api.entities.VoiceChannel VoiceChannels}.

 &lt;p&gt;Useful for restricting functionality to a certain type of channels.
type: The {@link net.dv8tion.jda.api.entities.ChannelType ChannelType} to check against.
Return type: @return:True if the {@link net.dv8tion.jda.api.entities.ChannelType ChannelType} which this message was received
         from is the same as the one specified by {@code type}.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>type</name>
                <type EnumType="true">net.dv8tion.jda.api.entities.channel.ChannelType</type>
            </parameter>
        </method>
        <method>
            <name>addReaction</name>
            <comment>Adds a reaction to this Message using an Emote.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>emoji</name>
                <type>net.dv8tion.jda.api.entities.emoji.Emoji</type>
            </parameter>
        </method>
        <method>
            <name>pin</name>
            <comment>Used to add the Message to the MessageChannel's pinned message list.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>getMentionedMembersInGuild</name>
            <comment>Creates an immutable list of {@link net.dv8tion.jda.api.entities.Member Members}
 representing the users of {@link #getMentionedUsers()} in the specified
 {@link net.dv8tion.jda.api.entities.Guild Guild}.
 &lt;br&gt;This is only a convenience method and will skip all users that are not in the specified
 Guild.
guild: Non-null {@link net.dv8tion.jda.api.entities.Guild Guild}
         that will be used to retrieve Members.
Return type: @return:Immutable list of mentioned Members</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>guild</name>
                <type>net.dv8tion.jda.api.entities.Guild</type>
            </parameter>
        </method>
        <method>
            <name>reply</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>mcd</name>
                <type>net.dv8tion.jda.api.utils.messages.MessageCreateData</type>
            </parameter>
        </method>
        <method>
            <name>clearReactions</name>
            <comment>Removes all reactions from this Message.
 This is useful for moderator commands that wish to remove all 
 reactions at once from a specific message.

 Neither success nor failure of this request will affect this Message's {@link #getReactions()} return as Message is immutable.</comment>
            <returntype>java.lang.Void</returntype>
        </method>
        <method>
            <name>editMessageFormat</name>
            <comment>Edits this Message's content to the provided format.
 Messages can only be edited by the account that sent them!.

 &lt;p&gt;This message instance will not be updated by this operation, please use the response message instead.</comment>
            <returntype>net.dv8tion.jda.api.requests.restaction.MessageEditAction</returntype>
            <parameter>
                <name>format</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>args</name>
                <type>java.lang.Object[]</type>
            </parameter>
        </method>
        <method>
            <name>getMentions</name>
            <comment>Combines all instances of IMentionable filtered by the 
 specified MentionType values.</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>types</name>
                <type EnumType="true">net.dv8tion.jda.api.entities.Message.MentionType[]</type>
            </parameter>
        </method>
        <method>
            <name>retrieveReactionUsers</name>
            <comment>This obtains the users who reacted using the given emote.</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>emoji</name>
                <type>net.dv8tion.jda.api.entities.emoji.Emoji</type>
            </parameter>
        </method>
        <method>
            <name>removeReaction2</name>
            <comment>Removes a User's reaction from this Message using an Emote.

 This message instance will not be updated by this operation.

 Reactions are the small emoji/emotes below a message that have a counter beside them
 showing how many users have reacted with the same emoji/emote.

 Neither success nor failure of this request will affect this Message's {@link #getReactions()} return as Message is immutable.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>emote</name>
                <type>net.dv8tion.jda.api.entities.emoji.Emoji</type>
            </parameter>
            <parameter>
                <name>user</name>
                <type>net.dv8tion.jda.api.entities.User</type>
            </parameter>
        </method>
        <method>
            <name>isMentioned</name>
            <comment>Checks if given {@link net.dv8tion.jda.api.entities.IMentionable IMentionable}
 was mentioned in this message in any way (@User, @everyone, @here, @Role).
 &lt;br&gt;If no filtering {@link net.dv8tion.jda.api.entities.Message.MentionType MentionTypes} are
 specified this will fallback to all mention types.

 &lt;p&gt;{@link Message.MentionType#HERE MentionType.HERE} and {@link Message.MentionType#EVERYONE MentionType.EVERYONE}
 will only be checked, if the given {@link net.dv8tion.jda.api.entities.IMentionable IMentionable} is of type
 {@link net.dv8tion.jda.api.entities.User User} or {@link net.dv8tion.jda.api.entities.Member Member}.
 &lt;br&gt;Online status of Users/Members is &lt;b&gt;NOT&lt;/b&gt; considered when checking {@link Message.MentionType#HERE MentionType.HERE}.
mentionable: The mentionable entity to check on.
types: The types to include when checking whether this type was mentioned.
         This will be used with {@link #getMentions(Message.MentionType...) getMentions(MentionType...)}
Return type: @return:True, if the given mentionable was mentioned in this message</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>mentionable</name>
                <type>net.dv8tion.jda.api.entities.IMentionable</type>
            </parameter>
            <parameter>
                <name>types</name>
                <type EnumType="true">net.dv8tion.jda.api.entities.Message.MentionType[]</type>
            </parameter>
        </method>
        <method>
            <name>editMessageComponents</name>
            <comment></comment>
            <returntype>net.dv8tion.jda.api.entities.Message</returntype>
            <parameter>
                <name>rows</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>suppressEmbeds</name>
            <comment>Enables/Disables suppression of Embeds on this Message.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>suppressed</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>QueueClearReactions</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>editMessage</name>
            <comment>Edits this Message's content to the provided String.
 Messages can only be edited by the account that sent them!

 This message instance will not be updated by this operation, 
 please use the response message instead.
newContent: the new content of the Message</comment>
            <returntype>net.dv8tion.jda.api.entities.Message</returntype>
            <parameter>
                <name>newContent</name>
                <type>java.lang.CharSequence</type>
            </parameter>
        </method>
        <method>
            <name>unpin</name>
            <comment>Used to remove the Message from the {@link #getChannel() MessageChannel's} pinned message list.
 This is a shortcut method to {@link MessageChannel#unpinMessageById(String)}.

 The success or failure of this action will not affect the return of {@link #isPinned()}.</comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>Category</name>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.Category</returntype>
            <comment>The Category this message was sent in. This will always 
 be null for DMs.
 Equivalent to TextChannel().getParent() if this was sent in 
 a TextChannel.</comment>
        </property>
        <property>
            <name>MsgTyp</name>
            <returntype>java.lang.String</returntype>
            <comment>This specifies the {@link net.dv8tion.jda.api.entities.MessageType MessageType} of this Message.

 &lt;p&gt;Messages can represent more than just simple text sent by Users, they can also be special messages that
 inform about events that occur. Messages can either be {@link net.dv8tion.jda.api.entities.MessageType#DEFAULT default messages}
 or special messages like {@link net.dv8tion.jda.api.entities.MessageType#GUILD_MEMBER_JOIN welcome messages}.</comment>
        </property>
        <property>
            <name>JDA</name>
            <returntype>net.dv8tion.jda.api.JDA</returntype>
            <comment>Returns the JDA instance related to this Message.

 throws java.lang.UnsupportedOperationException
        If this is not a Received Message from MessageType.DEFAULT

 return  the corresponding JDA instance</comment>
        </property>
        <property>
            <name>Pinned</name>
            <returntype>boolean</returntype>
            <comment>Whether or not this Message has been pinned in its parent channel.</comment>
        </property>
        <property>
            <name>mentionsEveryone</name>
            <returntype>boolean</returntype>
            <comment>Indicates if this Message mentions everyone using @everyone or @here.</comment>
        </property>
        <property>
            <name>Reactions</name>
            <returntype>java.util.List</returntype>
            <comment>All MessageReactions that are on this Message.
 return Immutable list of all MessageReactions on this message.</comment>
        </property>
        <property>
            <name>Activity</name>
            <returntype>net.dv8tion.jda.api.entities.MessageActivity</returntype>
            <comment>A MessageActivity that contains its type and party id.

 return The activity, or null if no activity was added to the message.</comment>
        </property>
        <property>
            <name>ReactionById2</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Guild</name>
            <returntype>net.dv8tion.jda.api.entities.Guild</returntype>
            <comment>Returns the Guild that this message was sent in.
 This is just a shortcut to TextChannel().getGuild().
 This is only valid if the Message was actually sent in a TextChannel.
 You can check the type of channel this message was sent from 
 using isFromType(ChannelType) or ChannelType().</comment>
        </property>
        <property>
            <name>Attachments</name>
            <returntype>java.util.List</returntype>
            <comment>An immutable list of Attachments that are attached to this message.
 Most likely this will only ever be 1 Attachment at most.</comment>
        </property>
        <property>
            <name>MentionedRoles</name>
            <returntype>java.util.List</returntype>
            <comment>A immutable list of all mentioned {@link net.dv8tion.jda.api.entities.Role Roles}.
 &lt;br&gt;If none were mentioned, this list is empty. Elements are sorted in order of appearance. This only
 counts direct mentions of the role and not mentions through the everyone tag.

 &lt;p&gt;&lt;b&gt;This may include Roles from other {@link net.dv8tion.jda.api.entities.Guild Guilds}&lt;/b&gt;</comment>
        </property>
        <property>
            <name>TimeCreated</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Stickers</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TTS</name>
            <returntype>boolean</returntype>
            <comment>Defines whether or not this Message triggers TTS (Text-To-Speech).</comment>
        </property>
        <property>
            <name>MentionedUsers</name>
            <returntype>java.util.List</returntype>
            <comment>An immutable list of all mentioned {@link net.dv8tion.jda.api.entities.User Users}.
 &lt;br&gt;If no user was mentioned, this list is empty. Elements are sorted in order of appearance. This only
 counts direct mentions of the user and not mentions through roles or the everyone tag.</comment>
        </property>
        <property>
            <name>ContentRaw</name>
            <returntype>java.lang.String</returntype>
            <comment>The raw textual content of this message. Does not resolve IMentionable
 entities like ContentDisplay does. This means that this is the completely 
 raw textual content of the message received from Discord and can 
 contain mentions specified by Discord's Message Formatting.</comment>
        </property>
        <property>
            <name>ID</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MentionedMembers</name>
            <returntype>java.util.List</returntype>
            <comment>Creates an immutable list of Members representing the users 
 of MentionedUsers() in the Guild this Message was sent in.</comment>
        </property>
        <property>
            <name>Member</name>
            <returntype>net.dv8tion.jda.api.entities.Member</returntype>
            <comment>Returns the author of this Message as a {@link net.dv8tion.jda.api.entities.Member member}.
 &lt;br&gt;This is just a shortcut to {@link #getGuild()}{@link net.dv8tion.jda.api.entities.Guild#getMember(User) .getMember(getAuthor())}.
 &lt;br&gt;&lt;b&gt;This is only valid if the Message was actually sent in a TextChannel.&lt;/b&gt; This will return {@code null}
 if it was not sent from a TextChannel.
 &lt;br&gt;You can check the type of channel this message was sent from using {@link #isFromType(ChannelType)} or {@link #getChannelType()}.</comment>
        </property>
        <property>
            <name>Interaction</name>
            <returntype>net.dv8tion.jda.api.entities.Message.Interaction</returntype>
            <comment>This is sent on the message object when the message is a response to 
 an Interaction without an existing message.
 This means responses to Message Components do not include this property, 
 instead including a message reference object as components always 
 exist on preexisting messages.

 throws java.lang.UnsupportedOperationException
         If this is a system message

 return The Interaction of this message.</comment>
        </property>
        <property>
            <name>Invites</name>
            <returntype>java.util.List</returntype>
            <comment>Creates an immutable List of {@link net.dv8tion.jda.api.entities.Invite Invite} codes
 that are included in this Message.
 &lt;br&gt;This will use the {@link java.util.regex.Pattern Pattern} provided
 under {@link #INVITE_PATTERN} to construct a {@link java.util.regex.Matcher Matcher} that will
 parse the {@link #getContentRaw()} output and include all codes it finds in a list.

 &lt;p&gt;You can use the codes to retrieve/validate invites via
 {@link net.dv8tion.jda.api.entities.Invite#resolve(JDA, String) Invite.resolve(JDA, String)}</comment>
        </property>
        <property>
            <name>FromGuild</name>
            <returntype>boolean</returntype>
            <comment>Whether this message was sent in a Guild.
 If this is false then #getGuild() will throw an IllegalStateException.</comment>
        </property>
        <property>
            <name>TimeEdited</name>
            <returntype>java.time.OffsetDateTime</returntype>
            <comment>Provides the {@link java.time.OffsetDateTime OffsetDateTime} defining when this Message was last
 edited. If this Message has not been edited ({@link #isEdited()} is {@code false}), then this method
 will return {@code null}.</comment>
        </property>
        <property>
            <name>Channel</name>
            <returntype>net.dv8tion.jda.api.entities.channel.unions.MessageChannelUnion</returntype>
            <comment>Returns the MessageChannel that this message was sent in.

 throws java.lang.UnsupportedOperationException
        If this is not a Received Message from MessageType.DEFAULT

 return The MessageChannel of this Message</comment>
        </property>
        <property>
            <name>JumpUrl</name>
            <returntype>java.lang.String</returntype>
            <comment>Returns the jump-to URL for the received message. Clicking this URL in the Discord client will cause the client to
 jump to the specified message.</comment>
        </property>
        <property>
            <name>Emotes</name>
            <returntype>java.util.List</returntype>
            <comment>All Emotes used in this Message.
 This only includes Custom Emotes, not unicode Emojis.
 JDA classifies Emotes as the Custom Emojis uploaded
 to a Guild and retrievable with getEmotes(). These are 
 not the same as the unicode emojis that Discord also 
 supports. Elements are sorted in order of appearance.
 This may or may not contain fake Emotes which means 
 they can be displayed but not used by the logged in account.
 To check whether an Emote is fake you can test if Emote#isFake()
 returns true.</comment>
        </property>
        <property>
            <name>Flags</name>
            <returntype>java.lang.Object[]</returntype>
            <comment>Returns an EnumSet of all MessageFlags present for this Message.</comment>
        </property>
        <property>
            <name>MessageReference</name>
            <returntype>net.dv8tion.jda.api.entities.MessageReference</returntype>
            <comment></comment>
        </property>
        <property>
            <name>StartedThread</name>
            <returntype>net.dv8tion.jda.api.entities.channel.concrete.ThreadChannel</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Nonce</name>
            <returntype>java.lang.String</returntype>
            <comment>Validation nonce for this Message This can be used to validate that 
 a Message was properly sent to the Discord Service. To set a nonce 
 before sending you may use MessageBuilder.setNonce(String)!

 return The validation nonce</comment>
        </property>
        <property>
            <name>WebhookMessage</name>
            <returntype>boolean</returntype>
            <comment>Indicates if this Message was sent by a Webhook instead of a
 User.
 Useful if you want to ignore non-users.

 return True if this message was sent by a Webhook.</comment>
        </property>
        <property>
            <name>MentionedChannels</name>
            <returntype>java.util.List</returntype>
            <comment>A immutable list of all mentioned {@link net.dv8tion.jda.api.entities.TextChannel TextChannels}.
 &lt;br&gt;If none were mentioned, this list is empty. Elements are sorted in order of appearance.

 &lt;p&gt;&lt;b&gt;This may include TextChannels from other {@link net.dv8tion.jda.api.entities.Guild Guilds}&lt;/b&gt;</comment>
        </property>
        <property>
            <name>ContentDisplay</name>
            <returntype>java.lang.String</returntype>
            <comment>The textual content of this message in the format that would be shown 
 to the Discord client. All IMentionable entities will be resolved to 
 the format shown by the Discord client instead of the "id" format.</comment>
        </property>
        <property>
            <name>Embeds</name>
            <returntype>java.util.List</returntype>
            <comment>An immutable list of MessageEmbeds that are part of this
 Message.</comment>
        </property>
        <property>
            <name>ContentStripped</name>
            <returntype>java.lang.String</returntype>
            <comment>Gets the textual content of this message using getContentDisplay() and then strips it of markdown characters 
 like *, **, __, ~~, || that provide text formatting. Any characters that match these but are not being used 
 for formatting are escaped to prevent possible formatting.

 return The textual content from getContentDisplay() with all text formatting characters removed or escaped.</comment>
        </property>
        <property>
            <name>ReferencedMessage</name>
            <returntype>net.dv8tion.jda.api.entities.Message</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Edited</name>
            <returntype>boolean</returntype>
            <comment>Returns whether or not this Message has been edited before.</comment>
        </property>
        <property>
            <name>Author</name>
            <returntype>net.dv8tion.jda.api.entities.User</returntype>
            <comment>The author of this Message</comment>
        </property>
        <property>
            <name>Buttons</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ApplicationId</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ActionRows</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ChannelType</name>
            <returntype EnumType="true">net.dv8tion.jda.api.entities.channel.ChannelType</returntype>
            <comment>Gets the ChannelType that this message was received from.
 This will never be ChannelType#VOICE as Messages can't be sent to
 VoiceChannels.

 return The ChannelType which this message was received from.</comment>
        </property>
        <property>
            <name>SuppressedEmbeds</name>
            <returntype>boolean</returntype>
            <comment>Whether embeds are suppressed for this message.
 When Embeds are suppressed, they are not displayed on clients nor provided via API until un-suppressed.
 &lt;br&gt;This is a shortcut method for checking if {@link #getFlags() getFlags()} contains
 {@link net.dv8tion.jda.api.entities.Message.MessageFlag#EMBEDS_SUPPRESSED MessageFlag#EMBEDS_SUPPRESSED}</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.msg.Splitutilwrapper</name>
        <shortname>SplitUtil</shortname>
        <objectwrapper>net.dv8tion.jda.api.utils.SplitUtil</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>de.donmanfred.msg.Splitutilwrapper</returntype>
        </method>
        <method>
            <name>splitNL</name>
            <comment></comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>input</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>splitOn</name>
            <comment></comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>input</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>onchar</name>
                <type>char</type>
            </parameter>
        </method>
        <method>
            <name>splitAnwhere</name>
            <comment></comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>input</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>splitSpace</name>
            <comment>Apply a list of {@link Strategy Strategies} to split the provided string into chunks of a maximum {@code limit} characters.
 &lt;br&gt;The substring chunks will not be trimmed of whitespace, you can use {@link #split(String, int, boolean, Strategy...)} to trim them.

 &lt;p&gt;If no strategies are provided, ie. {@code split(string, limit, true)}, then it only uses the limit to split with {@link Strategy#ANYWHERE}.

 &lt;p&gt;Strategies are applied in order, each trying to split with different criteria.
 When a strategy fails, the next in the list is tried until all strategies are exhausted.
 If not a single strategy can split the string, an {@link IllegalStateException} is thrown.
input: The input string to split up
limit: The maximum string length for each chunk
strategies: The split strategies
Return type: @return:{@link List} of each substring which is at most {@code limit} characters long</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>input</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>limit</name>
                <type>int</type>
            </parameter>
        </method>
    </class>
    <version>1.84</version>
    <comment>&lt;link&gt;...|http://www.b4x.com&lt;/link&gt;</comment>
    <author>DonManfred</author>
</root>
