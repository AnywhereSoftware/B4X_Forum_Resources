#Lines starting with '#' are comments.
#Backslash character at the end of line means that the command continues in the next line.

#jRDC CONFIGURATION
#Be warned. A wrong IP address here will keep the server from starting correctly.
#IPAddress=192.168.5.110
#Java server port
ServerPort=17178

#DATABASE CONFIGURATION
#SQLite
#DriverClass=com.sqlite.JdbcUrl
#JdbcUrl=jdbc:sqlite:test2.db
#SQLite spcecific. Set CreateFile to create file if it does not exist.
#CreateFile=True


#PoolType: C3P0, H2, HSQLDB, Hikari, Vibur, Tomcat
PoolType=Hikari
#Pool related. Pool sizing information: https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing
#PoolSize=8

#H2
DriverClass=org.h2.Driver
DriverShortName=h2
JdbcUrl=jdbc:h2:./test2h2
User=sa
Password=sa

#Apachy Derby - Embedded
#DriverClass=org.apache.derby.jdbc.EmbeddedDriver
#DriverShortName=derby
#JdbcUrl=jdbc:derby:derbyDB;create=true
#User=sa
#Password=sa

#http://hsqldb.org/doc/src/org/hsqldb/jdbc/JDBCDriver.html
#HSQLDB
#DriverClass=org.hsqldb.jdbc.JDBCDriver
#JdbcUrl=jdbc:hsqldb:file:./test_hsqldb
#DriverShortName=hsqldb
#User=sa
#Password=sa

#MySQL
#DriverClass=com.mysql.jdbc.Driver
#JdbcUrl=jdbc:mysql://localhost/test?characterEncoding=utf8
#User=root
#Password=

#example of MS SQL Server configuration:
#DriverClass=net.sourceforge.jtds.jdbc.Driver
#JdbcUrl=jdbc:jtds:sqlserver://<server address>/<database>

#example of postegres configuration:
#JdbcUrl=jdbc:postgresql://localhost/test
#DriverClass=org.postgresql.Driver


###########################
#POOL CONFIGURATOIN OPTIONS
###########################
#
##############################
#H2 connection pool properties
##############################
#
#http://www.h2database.com/javadoc/org/h2/jdbcx/JdbcConnectionPool.html
#
#pool.H2.LoginTimeout=0

##################################
#HSQLDB connection pool properties
##################################
#
#http://hsqldb.org/doc/src/org/hsqldb/jdbc/JDBCPool.html
#
#pool.HSQLDB.LoginTimeout=30

#C3PO connection pool properties
#As taken for B4J_Server source
#  link: https://github.com/AnywhereSoftware/B4J_Server/blob/a40477dc3b7acc851f2c99d5a27731f0a6bf376e/src/anywheresoftware/b4j/object/ConnectionPool.java#L27
pool.C3P0.MaxStatements=150
pool.C3P0.MaxIdleTime=1800
pool.C3P0.IdleConnectionTestPeriod=600
pool.C3P0.CheckoutTimeout=20000
pool.C3P0.TestConnectionOnCheckout=true

################################
#3CP0 connection pool properties
################################
#
#https://www.mchange.com/projects/c3p0/#configuration
#
#**Basic Pool Configuration
#pool.3CP0.AquireIncrement=3
#pool.3CP0.InitialPoolSize=3
#pool.3CP0.MaxPoolSize=15
#pool.3CP0.MaxIdleTime=0
#pool.3CP0.MinPoolSize=3
#
#**Managing Pool Size and Connection Age
#pool.3CP0.MaxConnectionAge=0
##pool.3CP0.MaxIdleTime=0
#pool.3CP0.MaxIdleTimeExcessConnections=0
#
#**Configure Connection Testing
#pool.3CP0.AutomaticTestTable=null
#pool.3CP0.IdleConnectionTestPeriod=0
#pool.3CP0.PreferredTestQuery=null
#pool.3CP0.TestConnectionOnCheckin=false
#pool.3CP0.TestConnectionOnCheckout=false
#
#**Configuring Statement Pooling
#pool.3CP0.MaxStatements=0
#pool.3CP0.MaxStatementsPerConnection=0
#pool.3CP0.StatementCacheNumDeferredCloseThreads=0
#
#**Configuring Recovery From Database Outages
#pool.3CP0.AcquireRetryAttempts=30
#pool.3CP0.AcquireRetryDelay=1000
#pool.3CP0.BreakAfterAcquireFailure=false
#
#**Configuring Unresolved Transaction Handling
#pool.3CP0.AutoCommitOnClose=false
#pool.3CP0.ForceIgnoreUnresolvedTransactions=false
#
#**Configuring to Debug and Workaround Broken Client Applications
#pool.3CP0.DebugUnreturnedConnectionStackTraces=false
#pool.3CP0.UnreturnedConnectionTimeout=0
#
#**Configuring To Avoid Memory Leaks On Hot Redeploy Of Clients
#pool.3CP0.PrivilegeSpawnedThreads=false
#
#**Other DataSource Configuration
#pool.3CP0.CheckoutTimeout=0
#pool.3CP0.ForceSynchronousCheckins=false
#pool.3CP0.MaxAdministrativeTaskTime=0
#pool.3CP0.NumHelperThreads=3

##################################
#Tomcat connection pool properties
##################################
#
#**Common Attributes
#pool.Tomcat.MaxActive=100
#pool.Tomcat.MaxIdle=100
#pool.Tomcat.MinIdle=10
#pool.Tomcat.InitialSize=10
#pool.Tomcat.MaxWait=30000
#pool.Tomcat.TestOnBorrow=false
#pool.Tomcat.TestOnConnect=false
#pool.Tomcat.TestOnReturn=false
#pool.Tomcat.TestWhileIdle=false
#pool.Tomcat.ValidationQuery=null
#pool.Tomcat.ValidationQueryTimeout=-1
#pool.Tomcat.TimeBetweenEvictionRunsMillis=5000
#pool.Tomcat.MinEvictableIdleTimeMillies=60000
#pool.Tomcat.RemoveAbandoned=false
#pool.Tomcat.RemoveAbandonedTimeout=60
#pool.Tomcat.LogAbandoned=false
#pool.Tomcat.ConnectionProperties=null
#
#**Tomcat JDBC Enhanced Attributes
#pool.Tomcat.InitSQL=null
#pool.Tomcat.ValidationInterval=3000
#pool.Tomcat.JmxEnabled=true
#pool.Tomcat.FairQueue=true
#pool.Tomcat.AbandonWhenPercentageFull=0
#pool.Tomcat.MaxAge=0
#pool.Tomcat.UseEquals=true
#pool.Tomcat.SuspectTimeout=0
#pool.Tomcat.RollbackOnReturn=false
#pool.Tomcat.CommitOnReturn=false
#pool.Tomcat.LogValidationErrors=false
#
###############################
#Vibur Database Connection Pool
###############################
#
#http://www.vibur.org/
#
#**Pool Sizing and Fairness Settings
#pool.Vibur.PoolInitialSize=5
#pool.Vibur.PoolMaxSize=10
#pool.Vibur.PoolFair=true
#pool.Vibur.PoolEnableConnectionTracking=false
#
#**Connection Timeouts and Retries Settings
#pool.Vibur.ConnectionTimeOutInMs=15000
#pool.Vibur.LoginTimeoutInSeconds=5
#pool.Vibur.AquireRetryDealyInMs=500
#pool.Vibur.AquireRetryAttempt=3
#
#**Connection Validation Settings
#pool.Vibur.ConnectionIdleLimitInSeconds=5
#pool.Vibur.ValidateTimeoutInSeconds=3
#pool.Vibur.TestConnectionQuery=isValid
#pool.Vibur.InitSQL=null
#
#**Slow SQL Queries and Large ResultSets Logging Settings
#pool.Vibur.LogQueryExecutionLongerThanMs=3000
#pool.Vibur.LogStackTraceForLongQueryExecution=false
#pool.Vibur.LogLargeResultSet=500
#pool.Vibur.LogStackTraceForLargeResultSet=false
#pool.Vibur.IncludeQueryParameters=true
#
#**Slow getConnection() Calls and Timeouts Logging Settings
#pool.Vibur.LogConnectionLongerThanMs=3000
#pool.Vibur.LogStackTraceForLongConnection=false
#pool.Vibur.LogTakenConnectionsOnTimeout=false
#pool.Vibur.LogAllStackTracesOnTimeout=false
#
#**Connection Default Behavior Settings
#pool.Vibur.ClearSQLWarnings=false
#pool.Vibur.ResetDefaultsAfterUse=false
#
#**JDBC Statement Caching Settings
#pool.Vibur.StatementCacheMaxSize=0
#
#**JMX Related Settings
#pool.Vibur.EnableJMX=true

########################
#Hikari Connection Pool
#######################
#
#https://github.com/brettwooldridge/HikariCP
#
#F**Frequently used
#pool.Hikari.AutoCommit=true
#pool.Hikari.ConnectionTimeout=30000
#pool.Hikari.IdleTimeout=600000
#pool.Hikari.MaxLifetime=1800000
#pool.Hikari.ConnectionTestQuery=
#pool.Hikari.MinimumIdle=10
#pool.Hikari.MaximumPoolSize=10
#pool.Hikari.PoolName=
#
#**Infrequently used
#pool.Hikari.InitializationFailTimeout=1
#pool.Hikari.IsolateInternalQueries=false
#pool.Hikari.AllowPoolSuspension=false
#pool.Hikari.ReadOnly=false
#pool.Hikari.RegisterMbeans=false
#pool.Hikari.ConnectionInitSql=
#pool.Hikari.ValidationTimeout=5000
#pool.Hikari.LeakDetectionThreshold=0

#
#JDBC DRIVER OPTIONS
#
#https://github.com/brettwooldridge/HikariCP/wiki/MySQL-Configuration
driver.mysql.cachePrepStmts.boolean=true
driver.mysql.prepStmtCacheSize.int=250
driver.mysql.prepStmtCacheSqlLimit.int=2048
driver.mysql.useServerPrepStmts.boolean=true
driver.mysql.useLocalSessionState.boolean=true
driver.mysql.rewriteBatchedStatements.boolean=true
driver.mysql.cacheResultSetMetadata.boolean=true
driver.mysql.cacheServerConfiguration.boolean=true
driver.mysql.elideSetAutoCommits.boolean=true
driver.mysql.maintainTimeStats.boolean=false


#SQL COMMANDS
#sql.create_table=CREATE TABLE IF NOT EXISTS animals (\
#     id INTEGER PRIMARY KEY AUTO_INCREMENT,\
#     name CHAR(30) NOT NULL,\
#     image BLOB)
#sql.insert_animal=INSERT INTO animals VALUES (null, ?,?)
#sql.select_animal=SELECT name, image, id FROM animals
#sql.create_table=CREATE TABLE article (col1 numeric(10,4) ,col2 text);
#sql.select=select * from article
#sql.insert=INSERT INTO article VALUES(?, ?)
sql.drop_students=DROP TABLE IF EXISTS Students
sql.drop_students2=DROP TABLE IF EXISTS Students2
sql.drop_grades=DROP TABLE IF EXISTS Grades
sql.drop_dbversion=DROP TABLE IF EXISTS DBVersion
sql.count_students=SELECT COUNT(*) FROM Students
sql.count_students2=SELECT COUNT(*) FROM Students2
sql.create_table_students=CREATE TABLE IF NOT EXISTS Students (\
	Id VARCHAR(255) PRIMARY KEY,\
	`First Name` TEXT,\
	`Last Name` TEXT,\
	Birthday BIGINT)
sql.create_table_students2=CREATE TABLE IF NOT EXISTS Students2 (\
	Id VARCHAR(255) PRIMARY KEY,\
	`First Name` TEXT,\
	`Last Name` TEXT,\
	Birthday BIGINT,\
	Image BLOB)
sql.create_table_grades=CREATE TABLE IF NOT EXISTS Grades (\
	Id VARCHAR(255),\
	Test TEXT,\
	Grade INTEGER)
#In H2, TEXT is mapped to a CLOB and will cause the following error on the server side
#  (RuntimeException) java.lang.RuntimeException: Cannot serialize object: clob0: 'John'
#Note: 1) 'John' is a current value pulled for the 'First Name' column
#      2) This was thrown for the sql.select_students statement listed below
#Solution(s):
#  1) Use VARCHAR (as done here)
#  2) Could use "CREATE DOMAIN TEXT AS VARCHAR" to remap TEXT as a VARCHAR
#     Source: https://groups.google.com/d/msg/h2-database/1yQ10TgsOcQ/4n30-azn0_cJ
sql_h2.create_table_students=CREATE TABLE IF NOT EXISTS Students (\
	Id VARCHAR(255) PRIMARY KEY,\
	`First Name` VARCHAR,\
	`Last Name` VARCHAR,\
	Birthday BIGINT)
sql_h2.create_table_students2=CREATE TABLE IF NOT EXISTS Students2 (\
	Id VARCHAR(255) PRIMARY KEY,\
	`First Name` VARCHAR,\
	`Last Name` VARCHAR,\
	Birthday BIGINT,\
	Image BLOB)
sql_h2.create_table_grades=CREATE TABLE IF NOT EXISTS Grades (\
	Id VARCHAR(255),\
	Test VARCHAR,\
	Grade INTEGER)
#In HSQLDB, without compatibility mode, TEXT is not a valid type
#  (HsqlException) org.hsqldb.HsqlException: type not found or user lacks privilege: TEXT
#VARCHAR needs length
#  (HsqlException) org.hsqldb.HsqlException: length must be specified in type definition: VARCHAR
#Quoted identifiers start and end in "". The `` quoting produced
#   (HsqlException) org.hsqldb.HsqlException: type not found or user lacks privilege:
sql_hsqldb.create_table_students=CREATE TABLE IF NOT EXISTS Students (\
	Id VARCHAR(255) PRIMARY KEY,\
	"First Name" VARCHAR(255),\
	"Last Name" VARCHAR(255),\
	Birthday BIGINT)
sql_hsqldb.create_table_students2=CREATE TABLE IF NOT EXISTS Students2 (\
	Id VARCHAR(255) PRIMARY KEY,\
	"First Name" VARCHAR(255),\
	"Last Name" VARCHAR(255),\
	Birthday BIGINT,\
	Image BLOB)
sql_hsqldb.create_table_grades=CREATE TABLE IF NOT EXISTS Grades (\
	Id VARCHAR(255),\
	Test VARCHAR(255),\
	Grade INTEGER)
sql_derby.drop_students=DROP TABLE Students
sql_derby.drop_grades=DROP TABLE Grades
sql_derby.drop_dbversion=DROP TABLE DBVersion
sql_derby.create_table_students=CREATE TABLE Students (\
	Id VARCHAR(255) PRIMARY KEY,\
	"First Name" TEXT,\
	"Last Name" TEXT,\
	Birthday BIGINT)
sql_derby.create_table_grades=CREATE TABLE Grades (\
	Id VARCHAR(255),\
	Test TEXT,\
	Grade INTEGER)
sql.insert_students=INSERT INTO Students (Id, `First Name`, `Last Name`, Birthday) VALUES (?, ?, ?, ?)
sql.insert_students2=INSERT INTO Students2 (Id, `First Name`, `Last Name`, Birthday, Image) VALUES (?, ?, ?, ?, ?)
sql_hsqldb.insert_students=INSERT INTO Students (Id, "First Name", "Last Name", Birthday) VALUES (?, ?, ?, ?)
sql_hsqldb.insert_students2=INSERT INTO Students2 (Id, "First Name", "Last Name", Birthday, Image) VALUES (?, ?, ?, ?, ?)
sql.insert_grades=INSERT INTO Grades (Id, Test, Grade) VALUES (?, ?, ?)
sql.select_studentids=SELECT Id FROM Students
sql.select_students=SELECT Id, `First Name`, `Last Name`, Birthday FROM students
sql_hsqldb.select_students=SELECT Id, "First Name", "Last Name", Birthday FROM students
sql.select_student=SELECT Id, `First Name`, `Last Name`, Birthday FROM students WHERE id = ?
sql_hsqldb.select_student=SELECT Id, "First Name", "Last Name", Birthday FROM students WHERE id = ?
sql.select_tests=SELECT Test FROM Grades WHERE id = ?
sql.select_testgrades=SELECT test || ', Grade: ' || grade FROM Grades WHERE id = ? AND grade <= 55
#MySQL version
#sql.select_testgrades=SELECT CONCAT(test, ', Grade: ', grade) FROM Grades WHERE id = ? AND grade <= 55
sql.select_grade=SELECT Grade FROM Grades WHERE id = ? AND test = ?
sql.update_grade=UPDATE Grades SET Grade = ? WHERE id = ? AND test = ?
