AppType=JavaFX
Build1=Default,b4j.example
File1=1.bjl
FileGroup1=Default Group
Group=Default Group
Library1=jaudiotrack2-b4xlib
Library2=jcore
Library3=jfx
Library4=jxui
Library5=xui views
NumberOfFiles=1
NumberOfLibraries=5
NumberOfModules=0
Version=9.8
@EndOfDesignText@
#Region Project Attributes 
	#MainFormWidth: 600
	#MainFormHeight: 600 
#End Region


Sub Process_Globals
	Private fx As JFX
	Private MainForm As Form
	Private InitialFilePath As String
	Private FileName As String
	Private BtnFile As Button
	Private lblFileName As Label
	Private btnPlay As B4XView
	Private btnStop As B4XView
	Private btnPause As B4XView
	Private PlayStream1 As PlayStream
	Private tfURL As TextField
	
	Private Devices As List
	Private OutDevice As JavaObject
	
	Private SampleRateInHz As Float
	Private SampleSizeInBits As Int
	Private Channels As Int
	
	
	Private AIS As JavaObject
	Private SDL As SourceDataLineWrapper
	Private AudioFormat As JavaObject
	
	Private cbOutputs As B4XComboBox
	
	Private SelectedMixerInfo As JavaObject
	Private sbPosition As B4XSeekBar
	Private lblTime As B4XView
	Private lblDuration As B4XView
End Sub


Sub AppStart (Form1 As Form, Args() As String)
	MainForm = Form1
	MainForm.RootPane.LoadLayout("1") 'Load the layout file.
	MainForm.Show
	
	MainForm.Title = "jAudioTrack2 - Demo"
	
	sbPosition.mBase.As(JavaObject).RunMethod("setMouseTransparent",Array(True))
	
	PlayStream1.Initialize
	
	PlayStream1.AddPositionListener(Me,"PlayStream1")
	
'	btnPlay.Enabled=False

	'For file dialog
	InitialFilePath = GetSystemProperty("user.home","")
	
	'Setup Device names in a B$XCombobox and MixerInfo objects in a list
	Dim MixerInfos As List = jAudioTrack2_Utils.GetDevices(jAudioTrack2_Utils.DEVICETYPE_OUTPUT,"")
	
	Dim L As List
	L.Initialize
	Devices.Initialize
	For Each MI As JavaObject In MixerInfos
		'Add the name to the list for the B4xCombobox
		L.add(MI.RunMethod("getName",Null))
		'Add the MixerInfo to the corresponding Devices List
		Devices.Add(MI)
	Next
	
	'Set the list for the B4xCombobox
	cbOutputs.SetItems(L)
	cbOutputs_SelectedIndexChanged (0)
End Sub

'Return true to allow the default exceptions handler to handle the uncaught exception.
Sub Application_Error (Error As Exception, StackTrace As String) As Boolean
	Return True
End Sub

Private Sub MainForm_CloseRequest (EventData As Event)
	If PlayStream1.IsRunning Then
		PlayStream1.Stop
	End If
	
	'Check if targetDataLine is initialized and  is Running and stop and/or close as required
	If SDL.IsInitialized And  SDL.IsReady Then
		If SDL.IsRunning Then
			SDL.Stop
		End If
		SDL.Close
	End If
	
End Sub

Sub BtnFile_Click

	'Get a file to play from the user
	Dim FC As FileChooser
	
	FC.Initialize
	FC.Title="Choose a Wav file"
	FC.SetExtensionFilter("Wav files",Array As String("*.wav"))
	FC.InitialDirectory = InitialFilePath
	Dim response As String = FC.ShowOpen(MainForm)
	If response = "" Then Return
	InitialFilePath = File.GetFileParent(response)
	FileName =  File.GetName(response)
	lblFileName.Text=File.Combine(InitialFilePath,FileName)
	btnPlay.Enabled=True
	
End Sub


Sub btnStop_Click
	PlayStream1.Stop
	Sleep(0)
	sbPosition.Value = 0
End Sub

Private Sub btnPause_Click
	PlayStream1.Pause
End Sub

Sub btnPlay_Click
	If PlayStream1.IsInitialized Then
	
		If PlayStream1.IsPaused Then
			PlayStream1.Resume
			Return
		End If
	
		If PlayStream1.IsRunning Then
			PlayStream1.Stop
			Sleep(500)
		End If
	
	End If
	'Stop and close the TargetDataLine if needed
	If SDL.IsInitialized And SDL.IsReady Then
		If SDL.IsRunning Then
			SDL.Stop
		End If
		SDL.Close
	End If
	
	If AIS.IsInitialized Then AIS.RunMethod("close",Null)
	
	Dim AIS As JavaObject
	
	If tfURL.Text <> "" Then
		If tfURL.Text.ToLowerCase.StartsWith("http") Then
			AIS = jAudioTrack2_Utils.GetAudioInputStream3(tfURL.Text)
		Else
			AIS = jAudioTrack2_Utils.GetAudioInputStream3(File.GetUri(tfURL.Text,"UTF-8"))
		End If
	Else If FileName <> "" Then

		AIS = jAudioTrack2_Utils.GetAudioInputStream(InitialFilePath,FileName)
		
	End If
	
	If AIS.IsInitialized = False Then Return
	
	AudioFormat = AIS.RunMethod("getFormat",Null)
	
	SampleRateInHz = AudioFormat.RunMethod("getSampleRate",Null)
	SampleSizeInBits = AudioFormat.RunMethod("getSampleSizeInBits",Null)
	Channels = AudioFormat.RunMethod("getChannels",Null)
	
	OutDevice = jAudioTrack2_Utils.GetSourceDataLine2(AudioFormat, SelectedMixerInfo)
	
	Dim DurationMS As Long = 1000 * AIS.RunMethod("getFrameLength",Null) / AudioFormat.RunMethod("getFrameRate",Null)
	lblDuration.Text = ConvertMillisecondsToString(DurationMS)
	
	sbPosition.MinValue = 0
	sbPosition.MaxValue = DurationMS / 1000
	sbPosition.Value = 0
				
	Dim SDL As SourceDataLineWrapper
	SDL.Initialize(OutDevice)
	
	'Add a Listener to the TargetDataLine so we can get events for Start, Stop etc.
	SDL.AddLineListener(Me,"DataLine")
		
	PlayStream1.Start(SDL,AIS)
End Sub

Private Sub cbOutputs_SelectedIndexChanged (Index As Int)
	
	If PlayStream1.IsRunning Then
		PlayStream1.Stop
		Sleep(500)
		sbPosition.Value = 0
	End If
	
	'Get the selected Mixer Object from the Devices List
	SelectedMixerInfo = Devices.Get(Index)
	
	Log("Changed " & cbOutputs.GetItem(Index))
	
End Sub

Private Sub PlayStream1_PosEvent(Pos As Long)
	Dim SecPos As Long = Pos / (SampleRateInHz * (SampleSizeInBits / 8 ) * Channels)
	lblTime.Text = ConvertMillisecondsToString(1000 * SecPos)
	sbPosition.Value = SecPos
End Sub

Sub ConvertMillisecondsToString(t As Long) As String
	Dim hours, minutes, seconds As Int
	hours = t / DateTime.TicksPerHour
	minutes = (t Mod DateTime.TicksPerHour) / DateTime.TicksPerMinute
	seconds = (t Mod DateTime.TicksPerMinute) / DateTime.TicksPerSecond
	Return $"$1.0{hours}:$2.0{minutes}:$2.0{seconds}"$
End Sub