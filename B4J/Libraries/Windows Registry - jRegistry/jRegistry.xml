<?xml version="1.0" encoding="UTF-8"?>
<root>
    <doclet-version-NOT-library-version>1.07</doclet-version-NOT-library-version>
    <class>
        <name>de.ralleytn.simple.registry.Registry</name>
        <shortname>jRegistry</shortname>
        <owner>process</owner>
        <method>
            <name>deleteAllValues</name>
            <comment>Deletes all values of a registry key.
path: path of the key</comment>
            <returntype>void</returntype>
            <parameter>
                <name>path</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getValue</name>
            <comment>
path: path of the key
name: name of the value
Return type: @return:a value</comment>
            <returntype>de.ralleytn.simple.registry.RegistryValue</returntype>
            <parameter>
                <name>path</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getKey</name>
            <comment>
path: path of the key
Return type: @return:key with the specified path</comment>
            <returntype>de.ralleytn.simple.registry.RegistryKey</returntype>
            <parameter>
                <name>path</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>deleteDefaultValue</name>
            <comment>Deletes the default value of a registry key.
path: path of the key</comment>
            <returntype>void</returntype>
            <parameter>
                <name>path</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setDeafultValue</name>
            <comment>Sets the default value of a registry key.
path: path of the key
type: the data type
seperator: only important when the data type is {@linkplain RegistryValue.Type#REG_MULTI_SZ}; specifies at which character the string should be split; some characters do not work as seperator and simply do nothing like '|' for instance
rawValue: the value data</comment>
            <returntype>void</returntype>
            <parameter>
                <name>path</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>type</name>
                <type EnumType="true">de.ralleytn.simple.registry.RegistryValue.Type</type>
            </parameter>
            <parameter>
                <name>seperator</name>
                <type>char</type>
            </parameter>
            <parameter>
                <name>rawValue</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>exportKey</name>
            <comment>Exports a registry key to a specified file.
path: the key that should be exported
exportFile: the export target</comment>
            <returntype>void</returntype>
            <parameter>
                <name>path</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>exportFile</name>
                <type>java.io.File</type>
            </parameter>
        </method>
        <method>
            <name>setValue</name>
            <comment>Sets a value of a registry key.
path: path of the key
name: name of the value
type: the data type
seperator: only important when the data type is {@linkplain RegistryValue.Type#REG_MULTI_SZ}; specifies at which character the string should be split; some characters do not work as seperator and simply do nothing like '|' for instance
rawValue: the value data</comment>
            <returntype>void</returntype>
            <parameter>
                <name>path</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>type</name>
                <type EnumType="true">de.ralleytn.simple.registry.RegistryValue.Type</type>
            </parameter>
            <parameter>
                <name>seperator</name>
                <type>char</type>
            </parameter>
            <parameter>
                <name>rawValue</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>importFile</name>
            <comment>Imports keys and values from a file.
file: file containing the data to import</comment>
            <returntype>void</returntype>
            <parameter>
                <name>file</name>
                <type>java.io.File</type>
            </parameter>
        </method>
        <method>
            <name>deleteKey</name>
            <comment>Deletes a key. It will be deleted without asking!
path: path of the key</comment>
            <returntype>void</returntype>
            <parameter>
                <name>path</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>deleteValue</name>
            <comment>Deletes a value from a registry key.
path: path of the key
name: name of the value that should be deleted</comment>
            <returntype>void</returntype>
            <parameter>
                <name>path</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>Key</name>
            <parameter>
                <name>path</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Adds or replaces a key. Keys will be replaced without asking first!</comment>
        </property>
        <field>
            <name>HKEY_USERS</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>REG_QWORD</name>
            <comment></comment>
            <returntype EnumType="true">de.ralleytn.simple.registry.RegistryValue.Type</returntype>
        </field>
        <field>
            <name>HKEY_LOCAL_MACHINE</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>HKEY_CURRENT_CONFIG</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>REG_BINARY</name>
            <comment></comment>
            <returntype EnumType="true">de.ralleytn.simple.registry.RegistryValue.Type</returntype>
        </field>
        <field>
            <name>HKEY_CURRENT_USER</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>REG_SZ</name>
            <comment></comment>
            <returntype EnumType="true">de.ralleytn.simple.registry.RegistryValue.Type</returntype>
        </field>
        <field>
            <name>REG_EXPAND_SZ</name>
            <comment></comment>
            <returntype EnumType="true">de.ralleytn.simple.registry.RegistryValue.Type</returntype>
        </field>
        <field>
            <name>HKEY_CLASSES_ROOT</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>REG_FULL_RESOURCE_DESCRIPTOR</name>
            <comment></comment>
            <returntype EnumType="true">de.ralleytn.simple.registry.RegistryValue.Type</returntype>
        </field>
        <field>
            <name>REG_MULTI_SZ</name>
            <comment></comment>
            <returntype EnumType="true">de.ralleytn.simple.registry.RegistryValue.Type</returntype>
        </field>
        <field>
            <name>REG_NONE</name>
            <comment></comment>
            <returntype EnumType="true">de.ralleytn.simple.registry.RegistryValue.Type</returntype>
        </field>
        <field>
            <name>REG_DWORD</name>
            <comment></comment>
            <returntype EnumType="true">de.ralleytn.simple.registry.RegistryValue.Type</returntype>
        </field>
        <field>
            <name>HKEY_DYN_DATA</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
    </class>
    <class>
        <name>de.ralleytn.simple.registry.RegistryKey</name>
        <shortname>RegistryKey</shortname>
        <owner>process</owner>
        <method>
            <name>deleteAllValues</name>
            <comment>Deletes all values.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>setDefaultValue</name>
            <comment>Sets the default value.
type: data type of value data
seperator: only important when the data type is {@linkplain RegistryValue.Type#REG_MULTI_SZ}; specifies at which character the string should be split; some characters do not work as seperator and simply do nothing like '|' for instance
rawValue: the raw value data</comment>
            <returntype>void</returntype>
            <parameter>
                <name>type</name>
                <type EnumType="true">de.ralleytn.simple.registry.RegistryValue.Type</type>
            </parameter>
            <parameter>
                <name>seperator</name>
                <type>char</type>
            </parameter>
            <parameter>
                <name>rawValue</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>reload</name>
            <comment>Reloads the key. Should be called after setting or deleting values.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>deleteDefaultValue</name>
            <comment>Deletes the default value.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>setValue</name>
            <comment>Sets a value.
name: the value name
type: data type of value data
seperator: only important when the data type is {@linkplain RegistryValue.Type#REG_MULTI_SZ}; specifies at which character the string should be split; some characters do not work as seperator and simply do nothing like '|' for instance
rawValue: the raw value data</comment>
            <returntype>void</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>type</name>
                <type EnumType="true">de.ralleytn.simple.registry.RegistryValue.Type</type>
            </parameter>
            <parameter>
                <name>seperator</name>
                <type>char</type>
            </parameter>
            <parameter>
                <name>rawValue</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getChild</name>
            <comment>
name: name of the child
Return type: @return:the child with the specified name, or {@code null} if this key has no child with that name; case insensitive</comment>
            <returntype>de.ralleytn.simple.registry.RegistryKey</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>toString</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>deleteValue</name>
            <comment>Deletes the value with the specified name.
name: name of the value you wish to delete</comment>
            <returntype>void</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>export</name>
            <comment>Exports the key to the specified file.
exportFile: target of the export</comment>
            <returntype>void</returntype>
            <parameter>
                <name>exportFile</name>
                <type>java.io.File</type>
            </parameter>
        </method>
        <method>
            <name>delete</name>
            <comment>Deletes the key.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>getValueByName</name>
            <comment>
name: value name
Return type: @return:the value if the specified name, or {@code null} if no value was found; case insensitive</comment>
            <returntype>de.ralleytn.simple.registry.RegistryValue</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>Path</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>DefaultValue</name>
            <returntype>de.ralleytn.simple.registry.RegistryValue</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Parent</name>
            <returntype>de.ralleytn.simple.registry.RegistryKey</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Childs</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Values</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.ralleytn.simple.registry.RegistryValue</name>
        <shortname>RegistryValue</shortname>
        <owner>process</owner>
        <method>
            <name>reload</name>
            <comment>Reloads the value.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>toString</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <property>
            <name>Path</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Type</name>
            <returntype EnumType="true">de.ralleytn.simple.registry.RegistryValue.Type</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Value</name>
            <returntype>java.lang.Object</returntype>
            <comment>&lt;ul&gt;
 &lt;li&gt;REG_BINARY = byte[]&lt;/li&gt;
 &lt;li&gt;REG_DWORD = int&lt;/li&gt;
 &lt;li&gt;REG_QWORD = long&lt;/li&gt;
 &lt;li&gt;REG_SZ = String&lt;/li&gt;
 &lt;li&gt;REG_EXPAND_SZ = String&lt;/li&gt;
 &lt;li&gt;REG_MULTI_SZ = List&amp;lt;String&amp;gt;&lt;/li&gt;
 &lt;li&gt;REG_FULL_RESOURCE_DESCRIPTOR = String&lt;/li&gt;
 &lt;li&gt;REG_NONE = String&lt;/li&gt;
 &lt;/ul&gt;</comment>
        </property>
        <property>
            <name>RawValue</name>
            <returntype>java.lang.String</returntype>
            <comment>In case of {@link RegistryValue.Type#REG_MULTI_SZ} you have to replace the character that you defined as separator with {@code "\\0"}.</comment>
        </property>
        <property>
            <name>Key</name>
            <returntype>de.ralleytn.simple.registry.RegistryKey</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.ralleytn.simple.registry.RegistryValue.Type</name>
        <comment>Represents the data type of a value in a registry key.</comment>
        <owner>process</owner>
        <method>
            <name>getTypeByName</name>
            <comment>
name: data type name
Return type: @return:the data type with the specified name, or {@code null} if no such data type exists</comment>
            <returntype EnumType="true">de.ralleytn.simple.registry.RegistryValue.Type</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>valueOf</name>
            <comment></comment>
            <returntype EnumType="true">de.ralleytn.simple.registry.RegistryValue.Type</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>hashCode</name>
            <comment></comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>values</name>
            <comment></comment>
            <returntype EnumType="true">de.ralleytn.simple.registry.RegistryValue.Type[]</returntype>
        </method>
        <method>
            <name>equals</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>name</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>clone</name>
            <comment></comment>
            <returntype>java.lang.Object</returntype>
        </method>
        <method>
            <name>toString</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>finalize</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>parseValue</name>
            <comment>Parses a registry value based on the implementing type and returns the result.
toParse: the value that should be parsed
Return type: @return:the result</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>toParse</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>compareTo</name>
            <comment></comment>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>E</type>
            </parameter>
        </method>
        <method>
            <name>ordinal</name>
            <comment></comment>
            <returntype>int</returntype>
        </method>
        <property>
            <name>DeclaringClass</name>
            <returntype>java.lang.Class</returntype>
            <comment></comment>
        </property>
    </class>
</root>
