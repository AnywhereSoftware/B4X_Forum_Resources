<?xml version="1.0" encoding="UTF-8"?>
<root>
    <doclet-version-NOT-library-version>1.07</doclet-version-NOT-library-version>
    <class>
        <name>de.donmanfred.NtlmPasswordAuthenticationwrapper</name>
        <shortname>NtlmPasswordAuthentication</shortname>
        <objectwrapper>jcifs.smb.NtlmPasswordAuthentication</objectwrapper>
        <owner>process</owner>
        <method>
            <name>getAnsiHash</name>
            <comment>{@inheritDoc}</comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>tc</name>
                <type>jcifs.CIFSContext</type>
            </parameter>
            <parameter>
                <name>chlng</name>
                <type>byte[]</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>ctx</name>
                <type>jcifs.CIFSContext</type>
            </parameter>
        </method>
        <method>
            <name>getUserSessionKey2</name>
            <comment></comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>tc</name>
                <type>jcifs.CIFSContext</type>
            </parameter>
            <parameter>
                <name>chlng</name>
                <type>byte[]</type>
            </parameter>
        </method>
        <method>
            <name>getUnicodeHash</name>
            <comment></comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>tc</name>
                <type>jcifs.CIFSContext</type>
            </parameter>
            <parameter>
                <name>chlng</name>
                <type>byte[]</type>
            </parameter>
        </method>
        <method>
            <name>areHashesExternal</name>
            <comment>
Return type: @return:whether the hashes are externally supplied</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize3</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>user</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>ctx</name>
                <type>jcifs.CIFSContext</type>
            </parameter>
        </method>
        <method>
            <name>getUserSessionKey</name>
            <comment>{@inheritDoc}</comment>
            <returntype>void</returntype>
            <parameter>
                <name>tc</name>
                <type>jcifs.CIFSContext</type>
            </parameter>
            <parameter>
                <name>chlng</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>dest</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>offset</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Initialize2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>ctx</name>
                <type>jcifs.CIFSContext</type>
            </parameter>
            <parameter>
                <name>domain</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>username</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>password</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>de.donmanfred.SMBClientwrapper</name>
        <shortname>SMBClient</shortname>
        <owner>process</owner>
        <event>Resource(success As Boolean, smbResource As SMBResource, smbfile As SMBFile, info As String)</event>
        <event>ResourceAvailable(smbResource As SMBResource)</event>
        <event>FileAvailable(smbfile As SMBFile)</event>
        <event>CopyProgress(totalBytes As Int, path As String, filename As String)</event>
        <event>ListFiles(filelist As List)</event>
        <event>Children(success As Boolean, children As List)</event>
        <event>CopyTo(success As Boolean, smbResource As SMBResource, smbfile As SMBFile)</event>
        <event>CopyResult(success As Boolean, path As String, filename As String)</event>
        <event>TouchResult(success As Boolean)</event>
        <event>Delete(success As Boolean)</event>
        <permission>android.permission.INTERNET</permission>
        <permission>android.permission.ACCESS_NETWORK_STATE</permission>
        <method>
            <name>GetChildren2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>res</name>
                <type>jcifs.SmbResource</type>
            </parameter>
            <parameter>
                <name>filter</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Touch</name>
            <comment>Set the lastAccessTime to the given SmbFile.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>totouch</name>
                <type>jcifs.smb.SmbFile</type>
            </parameter>
            <parameter>
                <name>lastAccessTime</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>pba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>domain</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>userName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>password</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>delete</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>todelete</name>
                <type>jcifs.smb.SmbFile</type>
            </parameter>
        </method>
        <method>
            <name>listFiles2</name>
            <comment>The CIFS protocol provides for DOS "wildcards" to be used as
 a performance enhancement. The client does not have to filter
 the names and the server does not have to return all directory
 entries.
 &lt;p&gt;
 The wildcard expression may consist of two special meta
 characters in addition to the normal filename characters. The '*'
 character matches any number of characters in part of a name. If
 the expression begins with one or more '?'s then exactly that
 many characters will be matched whereas if it ends with '?'s
 it will match that many characters &lt;i&gt;or less&lt;/i&gt;.
 &lt;p&gt;
 Wildcard expressions will not filter workgroup names or server names.

 &lt;blockquote&gt;
 
 &lt;pre&gt;
 winnt&amp;gt; ls c?o*
 clock.avi                  -rw--      82944 Mon Oct 14 1996 1:38 AM
 Cookies                    drw--          0 Fri Nov 13 1998 9:42 PM
 2 items in 5ms
 &lt;/pre&gt;
 
 &lt;/blockquote&gt;
 
 If strict resource lifecycle is used, make sure you close the individual files after use.
wildcard: a wildcard expression
Return type: @return:An array of &lt;code&gt;SmbResource&lt;/code&gt; objects representing file
         and directories, workgroups, servers, or shares depending on the context
         of the resource URL</comment>
            <returntype>void</returntype>
            <parameter>
                <name>inputFile</name>
                <type>jcifs.smb.SmbFile</type>
            </parameter>
            <parameter>
                <name>wildcard</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetSmbFilefromUrl</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>pba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>CreateSmbFile</name>
            <comment></comment>
            <returntype>jcifs.smb.SmbFile</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>parent</name>
                <type>jcifs.smb.SmbFile</type>
            </parameter>
            <parameter>
                <name>fileorfolder</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>folder</name>
                <type>java.lang.Boolean</type>
            </parameter>
        </method>
        <method>
            <name>GetResourcefromUrl2</name>
            <comment>Get a SmbResource AND a SmbFile from the given URL
 Raises the Event SMBClient_Resource(smbobjres As Object,smbobj As Object)</comment>
            <returntype>void</returntype>
            <parameter>
                <name>pba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Initialize2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>pba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>domain</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>userName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>password</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>cifsProps</name>
                <type>java.util.Properties</type>
            </parameter>
        </method>
        <method>
            <name>Copy</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>inputFile</name>
                <type>jcifs.smb.SmbFile</type>
            </parameter>
            <parameter>
                <name>destPath</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>destFilename</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>CopyTo</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>src</name>
                <type>jcifs.smb.SmbFile</type>
            </parameter>
            <parameter>
                <name>dest</name>
                <type>jcifs.smb.SmbFile</type>
            </parameter>
        </method>
        <method>
            <name>Copy2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>srcPath</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>srcFilename</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>smbdestfolder</name>
                <type>jcifs.SmbResource</type>
            </parameter>
            <parameter>
                <name>destFilename</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>blockSize</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetResourcefromUrl</name>
            <comment>Get a SmbResource AND a SmbFile from the given URL
 Raises the Event SMBClient_Resource(smbobjres As Object,smbobj As Object)</comment>
            <returntype>void</returntype>
            <parameter>
                <name>pba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Touch2</name>
            <comment>Set the lastModifiedTime to the given SmbFile.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>totouch</name>
                <type>jcifs.smb.SmbFile</type>
            </parameter>
            <parameter>
                <name>lastModifiedTime</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>GetChildren</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>res</name>
                <type>jcifs.SmbResource</type>
            </parameter>
        </method>
        <method>
            <name>listFiles</name>
            <comment>List the contents of this SMB resource as an array of
 &lt;code&gt;SmbResource&lt;/code&gt; objects. This method is much more efficient than
 the regular &lt;code&gt;list&lt;/code&gt; method when querying attributes of each
 file in the result set.
 &lt;p&gt;
 The list of &lt;code&gt;SmbResource&lt;/code&gt;s returned by this method will be;

 &lt;ul&gt;
 &lt;li&gt;files and directories contained within this resource if the
 resource is a normal disk file directory,
 &lt;li&gt;all available NetBIOS workgroups or domains if this resource is
 the top level URL &lt;code&gt;smb://&lt;/code&gt;,
 &lt;li&gt;all servers registered as members of a NetBIOS workgroup if this
 resource refers to a workgroup in a &lt;code&gt;smb://workgroup/&lt;/code&gt; URL,
 &lt;li&gt;all browseable shares of a server including printers, IPC
 services, or disk volumes if this resource is a server URL in the form
 &lt;code&gt;smb://server/&lt;/code&gt;,
 &lt;li&gt;or &lt;code&gt;null&lt;/code&gt; if the resource cannot be resolved.
 &lt;/ul&gt;
 
 If strict resource lifecycle is used, make sure you close the individual files after use.
Return type: @return:An array of &lt;code&gt;SmbResource&lt;/code&gt; objects representing file
         and directories, workgroups, servers, or shares depending on the context
         of the resource URL</comment>
            <returntype>void</returntype>
            <parameter>
                <name>inputFile</name>
                <type>jcifs.smb.SmbFile</type>
            </parameter>
        </method>
        <property>
            <name>CifContext</name>
            <returntype>jcifs.CIFSContext</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.SMBFilewrapper</name>
        <shortname>SMBFile</shortname>
        <objectwrapper>jcifs.smb.SmbFile</objectwrapper>
        <owner>process</owner>
        <event>Exists(success As Boolean)</event>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>ctx</name>
                <type>jcifs.CIFSContext</type>
            </parameter>
        </method>
        <method>
            <name>setEventname</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>close</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>connect</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>listByFilter</name>
            <comment>List the contents of this SMB resource. The list returned will be
 identical to the list returned by the parameterless &lt;code&gt;list()&lt;/code&gt;
 method minus filenames filtered by the specified filter.
filter: a filename filter to exclude filenames from the results
Return type: @return:&lt;code&gt;String[]&lt;/code&gt; array of matching files and directories,
         workgroups, servers, or shares depending on the context of the
         resource URL</comment>
            <returntype>java.lang.String[]</returntype>
            <parameter>
                <name>filter</name>
                <type>jcifs.smb.SmbFilenameFilter</type>
            </parameter>
        </method>
        <method>
            <name>fileIndex</name>
            <comment></comment>
            <returntype>long</returntype>
        </method>
        <method>
            <name>addRequestProperty</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>exists</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>processBA</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>createNewFile</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>ContentType</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Server</name>
            <returntype>java.lang.String</returntype>
            <comment>Retrieve the hostname of the server for this SMB resource. If this
 &lt;code&gt;SmbFile&lt;/code&gt; references a workgroup, the name of the workgroup
 is returned. If this &lt;code&gt;SmbFile&lt;/code&gt; refers to the root of this
 SMB network hierarchy, &lt;code&gt;null&lt;/code&gt; is returned.</comment>
        </property>
        <property>
            <name>Parent</name>
            <returntype>java.lang.String</returntype>
            <comment>Everything but the last component of the URL representing this SMB
 resource is effectively it's parent. The root URL &lt;code&gt;smb://&lt;/code&gt;
 does not have a parent. In this case &lt;code&gt;smb://&lt;/code&gt; is returned.</comment>
        </property>
        <property>
            <name>OutputStream</name>
            <returntype>java.io.OutputStream</returntype>
            <comment></comment>
        </property>
        <property>
            <name>AllowUserInteraction</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Attributes</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ContentEncoding</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ContentLengthLong</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>CanonicalUncPath</name>
            <returntype>java.lang.String</returntype>
            <comment>Returns the Windows UNC style path with backslashes instead of forward slashes.</comment>
        </property>
        <property>
            <name>Context</name>
            <returntype>jcifs.CIFSContext</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Path</name>
            <returntype>java.lang.String</returntype>
            <comment>Returns the full uncanonicalized URL of this SMB resource. An
 &lt;code&gt;SmbFile&lt;/code&gt; constructed with the result of this method will
 result in an &lt;code&gt;SmbFile&lt;/code&gt; that is equal to the original.</comment>
        </property>
        <property>
            <name>ConnectTimeout</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>DefaultUseCaches</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TreeHandle</name>
            <returntype>jcifs.SmbTreeHandle</returntype>
            <comment></comment>
        </property>
        <property>
            <name>isFile</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>InputStream</name>
            <returntype>java.io.InputStream</returntype>
            <comment></comment>
        </property>
        <property>
            <name>DfsPath</name>
            <returntype>java.lang.String</returntype>
            <comment>If the path of this &lt;code&gt;SmbFile&lt;/code&gt; falls within a DFS volume,
 this method will return the referral path to which it maps. Otherwise
 &lt;code&gt;null&lt;/code&gt; is returned.</comment>
        </property>
        <property>
            <name>length</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>lastAccess</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Date</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ServerWithDfs</name>
            <returntype>java.lang.String</returntype>
            <comment>Retrieve the hostname of the server for this SMB resource. If the resources has been resolved by DFS this will
 return the target name.</comment>
        </property>
        <property>
            <name>isHidden</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>UncPath</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>createTime</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Content</name>
            <returntype>java.lang.Object</returntype>
            <comment></comment>
        </property>
        <property>
            <name>DiskFreeSpace</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>CanonicalPath</name>
            <returntype>java.lang.String</returntype>
            <comment>Returns the full URL of this SMB resource with '.' and '..' components
 factored out. An &lt;code&gt;SmbFile&lt;/code&gt; constructed with the result of
 this method will result in an &lt;code&gt;SmbFile&lt;/code&gt; that is equal to
 the original.</comment>
        </property>
        <property>
            <name>lastModified</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Share</name>
            <returntype>java.lang.String</returntype>
            <comment>Retrieves the share associated with this SMB resource. In
 the case of &lt;code&gt;smb://&lt;/code&gt;, &lt;code&gt;smb://workgroup/&lt;/code&gt;,
 and &lt;code&gt;smb://server/&lt;/code&gt; URLs which do not specify a share,
 &lt;code&gt;null&lt;/code&gt; will be returned.</comment>
        </property>
        <property>
            <name>isDirectory</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.SMBPropertieswrapper</name>
        <shortname>SMBProperties</shortname>
        <owner>process</owner>
        <method>
            <name>getProperty</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setProperty</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <property>
            <name>Properties</name>
            <returntype>java.util.Properties</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.SMBResourcewrapper</name>
        <shortname>SMBResource</shortname>
        <objectwrapper>jcifs.SmbResource</objectwrapper>
        <owner>process</owner>
        <method>
            <name>renameTo</name>
            <comment>Changes the name of the file this &lt;code&gt;SmbResource&lt;/code&gt; represents to the name
 designated by the &lt;code&gt;SmbResource&lt;/code&gt; argument.
 &lt;br&gt;
 &lt;i&gt;Remember: &lt;code&gt;SmbResource&lt;/code&gt;s are immutable and therefore
 the path associated with this &lt;code&gt;SmbResource&lt;/code&gt; object will not
 change). To access the renamed file it is necessary to construct a
 new &lt;tt&gt;SmbResource&lt;/tt&gt;&lt;/i&gt;.
dest: An &lt;code&gt;SmbResource&lt;/code&gt; that represents the new pathname</comment>
            <returntype>void</returntype>
            <parameter>
                <name>dest</name>
                <type>jcifs.SmbResource</type>
            </parameter>
        </method>
        <method>
            <name>resolve</name>
            <comment>Fetch a child resource
name: 
Return type: @return:the child resource</comment>
            <returntype>jcifs.SmbResource</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>canRead</name>
            <comment>Tests to see if the file this &lt;code&gt;SmbResource&lt;/code&gt; represents can be
 read. Because any file, directory, or other resource can be read if it
 exists, this method simply calls the &lt;code&gt;exists&lt;/code&gt; method.
Return type: @return:&lt;code&gt;true&lt;/code&gt; if the file is read-only</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>openInputStream3</name>
            <comment>Opens an input stream reading the file (read only)
flags: open flags
access: desired access flags
sharing: flags indicating for which operations others may open the file (FILE_SHARING_*)
Return type: @return:input stream, needs to be closed when finished</comment>
            <returntype>java.io.InputStream</returntype>
            <parameter>
                <name>flags</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>access</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>sharing</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>openRandomAccess2</name>
            <comment>Opens the file for random access
mode: access mode (r|rw)
sharing: flags indicating for which operations others may concurrently open the file
Return type: @return:random access file, needs to be closed when finished</comment>
            <returntype>jcifs.SmbRandomAccess</returntype>
            <parameter>
                <name>mode</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>sharing</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>openInputStream2</name>
            <comment>Opens an input stream reading the file (read only)
sharing: flags indicating for which operations others may open the file (FILE_SHARING_*)
Return type: @return:input stream, needs to be closed when finished</comment>
            <returntype>java.io.InputStream</returntype>
            <parameter>
                <name>sharing</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>renameTo2</name>
            <comment>Changes the name of the file this &lt;code&gt;SmbResource&lt;/code&gt; represents to the name
 designated by the &lt;code&gt;SmbResource&lt;/code&gt; argument.
 &lt;br&gt;
 &lt;i&gt;Remember: &lt;code&gt;SmbResource&lt;/code&gt;s are immutable and therefore
 the path associated with this &lt;code&gt;SmbResource&lt;/code&gt; object will not
 change). To access the renamed file it is necessary to construct a
 new &lt;tt&gt;SmbResource&lt;/tt&gt;&lt;/i&gt;.
dest: An &lt;code&gt;SmbResource&lt;/code&gt; that represents the new pathname
replace: Whether an existing destination file should be replaced (only supported with SMB2)</comment>
            <returntype>void</returntype>
            <parameter>
                <name>dest</name>
                <type>jcifs.SmbResource</type>
            </parameter>
            <parameter>
                <name>replace</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>ctx</name>
                <type>jcifs.SmbResource</type>
            </parameter>
        </method>
        <method>
            <name>delete</name>
            <comment>This method will delete the file or directory specified by this
 &lt;code&gt;SmbResource&lt;/code&gt;. If the target is a directory, the contents of
 the directory will be deleted as well. If a file within the directory or
 it's sub-directories is marked read-only, the read-only status will
 be removed and the file will be deleted.
 
 If the file has been opened before, it will be closed.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>copyTo</name>
            <comment>This method will copy the file or directory represented by this
 SmbResource and it's sub-contents to the location specified by the
 "dest" parameter. This file and the destination file do not
 need to be on the same host. This operation does not copy extended
 file attributes such as ACLs but it does copy regular attributes as
 well as create and last write times. This method is almost twice as
 efficient as manually copying as it employs an additional write
 thread to read and write data concurrently.
 &lt;br&gt;
 It is not possible (nor meaningful) to copy entire workgroups or
 servers.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>dest</name>
                <type>jcifs.SmbResource</type>
            </parameter>
        </method>
        <method>
            <name>openOutputStream0</name>
            <comment>Opens an output stream writing to the file (truncating, write only, sharable)
Return type: @return:output stream, needs to be closed when finished</comment>
            <returntype>java.io.OutputStream</returntype>
        </method>
        <method>
            <name>openOutputStream2</name>
            <comment>Opens an output stream writing to the file (write only, exclusive write access)
append: whether to append to or truncate the input
sharing: flags indicating for which operations others may open the file (FILE_SHARING_*)
Return type: @return:output stream, needs to be closed when finished</comment>
            <returntype>java.io.OutputStream</returntype>
            <parameter>
                <name>append</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>sharing</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getSecurity2</name>
            <comment>Return an array of Access Control Entry (ACE) objects representing
 the security descriptor associated with this file or directory.
 If no DACL is present, null is returned. If the DACL is empty, an array with 0 elements is returned.
resolveSids: Attempt to resolve the SIDs within each ACE form
            their numeric representation to their corresponding account names.
Return type: @return:array of ACEs</comment>
            <returntype>jcifs.ACE[]</returntype>
            <parameter>
                <name>resolveSids</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>children</name>
            <comment>Fetch all children
Return type: @return:an iterator over the child resources</comment>
            <returntype>jcifs.CloseableIterator</returntype>
        </method>
        <method>
            <name>setReadWrite</name>
            <comment>Turn off the read-only attribute of this file. This is shorthand for
 &lt;tt&gt;setAttributes( getAttributes() &amp;amp; ~ATTR_READONLY )&lt;/tt&gt;.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>openOutputStream</name>
            <comment>Opens an output stream writing to the file (write only, read sharable)
append: whether to append to or truncate the input
Return type: @return:output stream, needs to be closed when finished</comment>
            <returntype>java.io.OutputStream</returntype>
            <parameter>
                <name>append</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>mkdir</name>
            <comment>Creates a directory with the path specified by this
 &lt;code&gt;SmbResource&lt;/code&gt;. For this method to be successful, the target
 must not already exist. This method will fail when
 used with &lt;code&gt;smb://&lt;/code&gt;, &lt;code&gt;smb://workgroup/&lt;/code&gt;,
 &lt;code&gt;smb://server/&lt;/code&gt;, or &lt;code&gt;smb://server/share/&lt;/code&gt; URLs
 because workgroups, servers, and shares cannot be dynamically created
 (although in the future it may be possible to create shares).</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>openOutputStream4</name>
            <comment>Opens an output stream writing to the file (write only, exclusive write access)
append: whether to append to or truncate the input
openFlags: flags for open operation
access: desired file access flags
sharing: flags indicating for which operations others may open the file
Return type: @return:output stream, needs to be closed when finished</comment>
            <returntype>java.io.OutputStream</returntype>
            <parameter>
                <name>append</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>openFlags</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>access</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>sharing</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>close</name>
            <comment>Close/release the file
 
 This releases all resources that this file holds. If not using strict mode this is currently a no-op.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>watch2</name>
            <comment>Creates a directory watch
 
 The server will notify the client when there are changes to the directories contents
filter: see constants in {@link FileNotifyInformation}
recursive: whether to also watch subdirectories
Return type: @return:watch context, needs to be closed when finished</comment>
            <returntype>jcifs.SmbWatchHandle</returntype>
            <parameter>
                <name>filter</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>recursive</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>openInputStream</name>
            <comment>Opens an input stream reading the file (read only, sharable)
Return type: @return:input stream, needs to be closed when finished</comment>
            <returntype>java.io.InputStream</returntype>
        </method>
        <method>
            <name>getOwnerUser2</name>
            <comment>Return the owner user SID for this file or directory
resolve: whether to resolve the user name
Return type: @return:the owner user SID, &lt;code&gt;null&lt;/code&gt; if not present</comment>
            <returntype>jcifs.SID</returntype>
            <parameter>
                <name>resolve</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>fileIndex</name>
            <comment>Get the file index
Return type: @return:server side file index, 0 if unavailable</comment>
            <returntype>long</returntype>
        </method>
        <method>
            <name>isFile</name>
            <comment>Tests to see if the file this &lt;code&gt;SmbResource&lt;/code&gt; represents is not a directory.
Return type: @return:&lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;SmbResource&lt;/code&gt; is not a directory</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>getShareSecurity</name>
            <comment>Return an array of Access Control Entry (ACE) objects representing
 the share permissions on the share exporting this file or directory.
 If no DACL is present, null is returned. If the DACL is empty, an array with 0 elements is returned.
 &lt;p&gt;
 Note that this is different from calling &lt;tt&gt;getSecurity&lt;/tt&gt; on a
 share. There are actually two different ACLs for shares - the ACL on
 the share and the ACL on the folder being shared.
 Go to &lt;i&gt;Computer Management&lt;/i&gt;
 &amp;gt; &lt;i&gt;System Tools&lt;/i&gt; &amp;gt; &lt;i&gt;Shared Folders&lt;/i&gt; &amp;gt; &lt;i&gt;Shares&lt;/i&gt; and
 look at the &lt;i&gt;Properties&lt;/i&gt; for a share. You will see two tabs - one
 for "Share Permissions" and another for "Security". These correspond to
 the ACLs returned by &lt;tt&gt;getShareSecurity&lt;/tt&gt; and &lt;tt&gt;getSecurity&lt;/tt&gt;
 respectively.
resolveSids: Attempt to resolve the SIDs within each ACE form
            their numeric representation to their corresponding account names.
Return type: @return:array of ACEs</comment>
            <returntype>jcifs.ACE[]</returntype>
            <parameter>
                <name>resolveSids</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>length</name>
            <comment>Returns the length of this &lt;tt&gt;SmbResource&lt;/tt&gt; in bytes. If this object
 is a &lt;tt&gt;TYPE_SHARE&lt;/tt&gt; the total capacity of the disk shared in
 bytes is returned. If this object is a directory or a type other than
 &lt;tt&gt;TYPE_SHARE&lt;/tt&gt;, 0L is returned.
Return type: @return:The length of the file in bytes or 0 if this
         &lt;code&gt;SmbResource&lt;/code&gt; is not a file.</comment>
            <returntype>long</returntype>
        </method>
        <method>
            <name>canWrite</name>
            <comment>Tests to see if the file this &lt;code&gt;SmbResource&lt;/code&gt; represents
 exists and is not marked read-only. By default, resources are
 considered to be read-only and therefore for &lt;code&gt;smb://&lt;/code&gt;,
 &lt;code&gt;smb://workgroup/&lt;/code&gt;, and &lt;code&gt;smb://server/&lt;/code&gt; resources
 will be read-only.
Return type: @return:&lt;code&gt;true&lt;/code&gt; if the resource exists is not marked
         read-only</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>openRandomAccess</name>
            <comment>Opens the file for random access
mode: access mode (r|rw)
Return type: @return:random access file, needs to be closed when finished</comment>
            <returntype>jcifs.SmbRandomAccess</returntype>
            <parameter>
                <name>mode</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>isHidden</name>
            <comment>Tests to see if the file this SmbResource represents is marked as
 hidden. This method will also return true for shares with names that
 end with '$' such as &lt;code&gt;IPC$&lt;/code&gt; or &lt;code&gt;C$&lt;/code&gt;.
Return type: @return:&lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;SmbResource&lt;/code&gt; is marked as being hidden</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>children2</name>
            <comment>Fetch children matching pattern, server-side filtering
 
 &lt;p&gt;
 The wildcard expression may consist of two special meta
 characters in addition to the normal filename characters. The '*'
 character matches any number of characters in part of a name. If
 the expression begins with one or more '?'s then exactly that
 many characters will be matched whereas if it ends with '?'s
 it will match that many characters &lt;i&gt;or less&lt;/i&gt;.
 &lt;p&gt;
 Wildcard expressions will not filter workgroup names or server names.
wildcard: 
Return type: @return:an iterator over the child resources</comment>
            <returntype>jcifs.CloseableIterator</returntype>
            <parameter>
                <name>wildcard</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>children4</name>
            <comment>
filter: filter acting on SmbResource instances
Return type: @return:an iterator over the child resources</comment>
            <returntype>jcifs.CloseableIterator</returntype>
            <parameter>
                <name>filter</name>
                <type>jcifs.ResourceFilter</type>
            </parameter>
        </method>
        <method>
            <name>children3</name>
            <comment></comment>
            <returntype>jcifs.CloseableIterator</returntype>
            <parameter>
                <name>filter</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>watch</name>
            <comment></comment>
            <returntype>jcifs.SmbWatchHandle</returntype>
            <parameter>
                <name>filter</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>recursive</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>createTime</name>
            <comment>Retrieve the time this &lt;code&gt;SmbResource&lt;/code&gt; was created. The value
 returned is suitable for constructing a {@link java.util.Date} object
 (i.e. seconds since Epoch 1970). Times should be the same as those
 reported using the properties dialog of the Windows Explorer program.

 For Win95/98/Me this is actually the last write time. It is currently
 not possible to retrieve the create time from files on these systems.
Return type: @return:The number of milliseconds since the 00:00:00 GMT, January 1,
         1970 as a &lt;code&gt;long&lt;/code&gt; value</comment>
            <returntype>long</returntype>
        </method>
        <method>
            <name>mkdirs</name>
            <comment>Creates a directory with the path specified by this &lt;tt&gt;SmbResource&lt;/tt&gt;
 and any parent directories that do not exist. This method will fail
 when used with &lt;code&gt;smb://&lt;/code&gt;, &lt;code&gt;smb://workgroup/&lt;/code&gt;,
 &lt;code&gt;smb://server/&lt;/code&gt;, or &lt;code&gt;smb://server/share/&lt;/code&gt; URLs
 because workgroups, servers, and shares cannot be dynamically created
 (although in the future it may be possible to create shares).</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>exists</name>
            <comment>Tests to see if the SMB resource exists. If the resource refers
 only to a server, this method determines if the server exists on the
 network and is advertising SMB services. If this resource refers to
 a workgroup, this method determines if the workgroup name is valid on
 the local SMB network. If this &lt;code&gt;SmbResource&lt;/code&gt; refers to the root
 &lt;code&gt;smb://&lt;/code&gt; resource &lt;code&gt;true&lt;/code&gt; is always returned. If
 this &lt;code&gt;SmbResource&lt;/code&gt; is a traditional file or directory, it will
 be queried for on the specified server as expected.
Return type: @return:&lt;code&gt;true&lt;/code&gt; if the resource exists or is alive or
         &lt;code&gt;false&lt;/code&gt; otherwise</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>getOwnerGroup2</name>
            <comment>Return the owner group SID for this file or directory
resolve: whether to resolve the group name
Return type: @return:the owner group SID, &lt;code&gt;null&lt;/code&gt; if not present</comment>
            <returntype>jcifs.SID</returntype>
            <parameter>
                <name>resolve</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>createNewFile</name>
            <comment>Create a new file but fail if it already exists. The check for
 existence of the file and it's creation are an atomic operation with
 respect to other filesystem activities.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>isDirectory</name>
            <comment>Tests to see if the file this &lt;code&gt;SmbResource&lt;/code&gt; represents is a directory.
Return type: @return:&lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;SmbResource&lt;/code&gt; is a directory</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>setReadOnly</name>
            <comment>Make this file read-only. This is shorthand for &lt;tt&gt;setAttributes(
 getAttributes() | ATTR_READ_ONLY )&lt;/tt&gt;.</comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>Context</name>
            <returntype>jcifs.CIFSContext</returntype>
            <comment>The context this file was opened with</comment>
        </property>
        <property>
            <name>OwnerUser</name>
            <returntype>jcifs.SID</returntype>
            <comment>Return the resolved owner user SID for this file or directory</comment>
        </property>
        <property>
            <name>Attributes</name>
            <returntype>int</returntype>
            <parameter>
                <name>attrs</name>
                <type>int</type>
            </parameter>
            <comment>Return the attributes of this file. Attributes are represented as a
 bitset that must be masked with &lt;tt&gt;ATTR_*&lt;/tt&gt; constants to determine
 if they are set or unset. The value returned is suitable for use with
 the &lt;tt&gt;setAttributes()&lt;/tt&gt; method.</comment>
        </property>
        <property>
            <name>Security</name>
            <returntype>jcifs.ACE[]</returntype>
            <comment>Return an array of Access Control Entry (ACE) objects representing
 the security descriptor associated with this file or directory.
 &lt;p&gt;
 Initially, the SIDs within each ACE will not be resolved however when
 &lt;tt&gt;getType()&lt;/tt&gt;, &lt;tt&gt;getDomainName()&lt;/tt&gt;, &lt;tt&gt;getAccountName()&lt;/tt&gt;,
 or &lt;tt&gt;toString()&lt;/tt&gt; is called, the names will attempt to be
 resolved. If the names cannot be resolved (e.g. due to temporary
 network failure), the said methods will return default values (usually
 &lt;tt&gt;S-X-Y-Z&lt;/tt&gt; strings of fragments of).
 &lt;p&gt;
 Alternatively &lt;tt&gt;getSecurity(true)&lt;/tt&gt; may be used to resolve all
 SIDs together and detect network failures.</comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment>Returns the last component of the target URL. This will
 effectively be the name of the file or directory represented by this
 &lt;code&gt;SmbResource&lt;/code&gt; or in the case of URLs that only specify a server
 or workgroup, the server or workgroup will be returned. The name of
 the root URL &lt;code&gt;smb://&lt;/code&gt; is also &lt;code&gt;smb://&lt;/code&gt;. If this
 &lt;tt&gt;SmbResource&lt;/tt&gt; refers to a workgroup, server, share, or directory,
 the name will include a trailing slash '/' so that composing new
 &lt;tt&gt;SmbResource&lt;/tt&gt;s will maintain the trailing slash requirement.</comment>
        </property>
        <property>
            <name>LastModified</name>
            <parameter>
                <name>time</name>
                <type>long</type>
            </parameter>
            <comment>Set the last modified time of the file. The time is specified as milliseconds
 from Jan 1, 1970 which is the same as that which is returned by the
 &lt;tt&gt;lastModified()&lt;/tt&gt;, &lt;tt&gt;getLastModified()&lt;/tt&gt;, and &lt;tt&gt;getDate()&lt;/tt&gt; methods.
 &lt;br&gt;
 This method does not apply to workgroups, servers, or shares.</comment>
        </property>
        <property>
            <name>Locator</name>
            <returntype>jcifs.SmbResourceLocator</returntype>
            <comment>Gets the file locator for this file
 
 The file locator provides details about</comment>
        </property>
        <property>
            <name>Type</name>
            <returntype>int</returntype>
            <comment>Returns type of of object this &lt;tt&gt;SmbResource&lt;/tt&gt; represents.</comment>
        </property>
        <property>
            <name>DiskFreeSpace</name>
            <returntype>long</returntype>
            <comment>This method returns the free disk space in bytes of the drive this share
 represents or the drive on which the directory or file resides. Objects
 other than &lt;tt&gt;TYPE_SHARE&lt;/tt&gt; or &lt;tt&gt;TYPE_FILESYSTEM&lt;/tt&gt; will result
 in 0L being returned.</comment>
        </property>
        <property>
            <name>LastAccess</name>
            <parameter>
                <name>time</name>
                <type>long</type>
            </parameter>
            <comment>Set the last access time of the file. The time is specified as milliseconds
 from Jan 1, 1970 which is the same as that which is returned by the
 &lt;tt&gt;lastModified()&lt;/tt&gt;, &lt;tt&gt;getLastModified()&lt;/tt&gt;, and &lt;tt&gt;getDate()&lt;/tt&gt; methods.
 &lt;br&gt;
 This method does not apply to workgroups, servers, or shares.</comment>
        </property>
        <property>
            <name>OwnerGroup</name>
            <returntype>jcifs.SID</returntype>
            <comment>Return the resolved owner group SID for this file or directory</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.SMBSIDwrapper</name>
        <shortname>SMBSID</shortname>
        <objectwrapper>jcifs.SID</objectwrapper>
        <owner>process</owner>
        <method>
            <name>toDisplayString</name>
            <comment>Return a String representing this SID ideal for display to
 users. This method should return the same text that the ACL
 editor in Windows would display.
 &lt;p&gt;
 Specifically, if the SID has
 been resolved and it is not a domain SID or builtin account,
 the full DOMAIN\name form of the account will be
 returned (e.g. MYDOM\alice or MYDOM\Domain Users).
 If the SID has been resolved but it is is a domain SID,
 only the domain name will be returned (e.g. MYDOM).
 If the SID has been resolved but it is a builtin account,
 only the name component will be returned (e.g. SYSTEM).
 If the sid cannot be resolved the numeric representation from
 toString() is returned.
Return type: @return:display format, potentially with resolved names</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>ctx</name>
                <type>jcifs.SID</type>
            </parameter>
        </method>
        <property>
            <name>DomainSid</name>
            <returntype>jcifs.SID</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Type</name>
            <returntype>int</returntype>
            <comment>Returns the type of this SID indicating the state or type of account.
 &lt;p&gt;
 SID types are described in the following table.
 &lt;table summary="Type codes"&gt;
 &lt;tr&gt;
 &lt;th&gt;Type&lt;/th&gt;
 &lt;th&gt;Name&lt;/th&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;SID_TYPE_USE_NONE&lt;/td&gt;
 &lt;td&gt;0&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;SID_TYPE_USER&lt;/td&gt;
 &lt;td&gt;User&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;SID_TYPE_DOM_GRP&lt;/td&gt;
 &lt;td&gt;Domain group&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;SID_TYPE_DOMAIN&lt;/td&gt;
 &lt;td&gt;Domain&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;SID_TYPE_ALIAS&lt;/td&gt;
 &lt;td&gt;Local group&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;SID_TYPE_WKN_GRP&lt;/td&gt;
 &lt;td&gt;Builtin group&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;SID_TYPE_DELETED&lt;/td&gt;
 &lt;td&gt;Deleted&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;SID_TYPE_INVALID&lt;/td&gt;
 &lt;td&gt;Invalid&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;SID_TYPE_UNKNOWN&lt;/td&gt;
 &lt;td&gt;Unknown&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/table&gt;</comment>
        </property>
        <property>
            <name>DomainName</name>
            <returntype>java.lang.String</returntype>
            <comment>Return the domain name of this SID unless it could not be
 resolved in which case the numeric representation is returned.</comment>
        </property>
        <property>
            <name>Rid</name>
            <returntype>int</returntype>
            <comment>Get the RID
 
 This is the last subauthority identifier</comment>
        </property>
        <property>
            <name>TypeText</name>
            <returntype>java.lang.String</returntype>
            <comment>Return text representing the SID type suitable for display to
 users. Text includes 'User', 'Domain group', 'Local group', etc.</comment>
        </property>
        <property>
            <name>AccountName</name>
            <returntype>java.lang.String</returntype>
            <comment>Return the sAMAccountName of this SID unless it could not
 be resolved in which case the numeric RID is returned. If this
 SID is a domain SID, this method will return an empty String.</comment>
        </property>
    </class>
    <version>0.33</version>
    <author>DonManfred</author>
    <dependsOn>jcifs-ng-2.1.2</dependsOn>
</root>
