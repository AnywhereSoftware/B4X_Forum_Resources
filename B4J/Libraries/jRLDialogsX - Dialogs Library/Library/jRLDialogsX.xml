<?xml version="1.0" encoding="utf-8"?>
<root>
  <doclet-version-NOT-library-version>1.00</doclet-version-NOT-library-version>
  <b4x_version>9.80</b4x_version>
  <dependsOn>jcore</dependsOn>
  <dependsOn>jfx</dependsOn>
  <dependsOn>javaobject</dependsOn>
  <dependsOn>json</dependsOn>
  <dependsOn>jrldialogsxfiles</dependsOn>
  <class>
    <name>de.rwblinn.dialogsX.dialogsx</name>
    <shortname>DialogsX</shortname>
    <method>
      <name>IsInitialized</name>
      <comment>Tests whether the object has been initialized.</comment>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="AlertSelectionDialog">_alertselectiondialog</name>
      <comment>Alert dialog with button selection option.
The alert is from type Confirmation. It is mandatory to select an option.
Note if there are many buttons, the dialog window is rather large.
Title - string to show in the title bar.
Header - string to show in the dialog header area.
Content - string to show in the content area (below the header).
Buttons - string array with button text.
Returns: Integer starting with 0 .. number of buttons - 1.
Use &lt;code&gt;
Dim buttons() As String = Array As String ("A", "B", "C", "D", "E")
Dim selection As Int = AlertSelectionDialog("Title", "Select an option", $""$, buttons)
Log($"Selected option: index=${selection}, buttontext=${buttons(selection)}"$)
&lt;/code&gt;
</comment>
      <returntype>int</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Content</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Buttons</name>
        <type>String[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ChoiceDialog">_choicedialog</name>
      <comment>Title - string to show in the title bar.
Header - string to show in the dialog header area.
Label - string to show as label left from the input field.
Choices - List
Defaultitem - Selected item between 0 and choices.size - 1.
Returns: Selection as string or an empty string.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Label</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Choices</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
      <parameter>
        <name>Defaultitem</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ColorNameDialog">_colornamedialog</name>
      <comment>Title - string to show in the title bar.
Header - string to show in the dialog header area.
Default - Color index to show as default selected.
Returns: Selected color as paint or null if cancelled
Example &lt;code&gt;
Dim default As Int = 9
Dim color As Paint = ColorNameDialog("jRLDialogsX Color Dialog", "Header", default)
If color.IsInitialized Then
	Dim ColorInt As Int  = fx.Colors.To32Bit(color)
	Dim HexARGB As String = Bit.ToHexString(ColorInt)
	Dim HexRGB As String = HexARGB.SubString2(2,8)
	Log($"Color Int:${ColorInt}${CRLF}HEXARGB:${HexARGB}${CRLF}HexRGB:${HexRGB}"$)
End If
&lt;/code&gt;
</comment>
      <returntype>anywheresoftware.b4j.objects.JFX.PaintWrapper</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Default</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ColorPickerDialog">_colorpickerdialog</name>
      <comment>Title - string to show in the title bar.
Header - string to show in the dialog header area.
Default - Color as Paint to show as default selected.
Returns: Selected color as paint or null if cancelled
Example &lt;code&gt;
Dim default As Int = 9
Dim color As Paint = ColorPickerDialog("jRLDialogsX Color Picker Dialog", "Header", fx.Colors.blue)
If color.IsInitialized Then
	Dim ColorInt As Int  = fx.Colors.To32Bit(color)
	Dim HexARGB As String = Bit.ToHexString(ColorInt)
	Dim HexRGB As String = HexARGB.SubString2(2,8)
	Log($"Color Int:${ColorInt}${CRLF}HEXARGB:${HexARGB}${CRLF}HexRGB:${HexRGB}"$)
End If
&lt;/code&gt;
</comment>
      <returntype>anywheresoftware.b4j.objects.JFX.PaintWrapper</returntype>
      <parameter>
        <name>Message</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Default</name>
        <type>anywheresoftware.b4j.objects.JFX.PaintWrapper</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ConfirmationDialog">_confirmationdialog</name>
      <comment>Title - string to show in the title bar.
Header - string to show in the dialog header area.
Content - string to show in the content area (below the header).
Returns: True for OK or False for Cancel.
</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Content</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="CustomAlertDialog">_customalertdialog</name>
      <comment>Custom Alert Dialog which is highly configurable.
AlertType - String CONFIRMATION, ERROR, INFORMATION, NONE, WARNING. The default is INFORMATION.
Title - String with the title bar text. If empty, the title bar is not shown.
Header - String with the header text.
Content - String with the content text.
PrefWidth - Pref width of the dialog window. Set to -1 uses the system default. If not -1, ensure to set the right width.
PrefHeight - Pref height of the dialog window. Set to -1 uses the system default. If not -1, ensure to set the right height.
StageStyle - String DECORATED, TRANSPARENT, UNDECORATED, UNIFIED, UTILITY. The default is UTILITY.
DialogStyle - String defining the CSS dialog style.
HeaderStyle - String defining the CSS header style.
ContentStyle - String defining the CSS content style.
ButtonYesText - String setting the YES button text. If empty, the button is not displayed.
ButtonNoText - String setting the NO button text. If empty, the button is not displayed.
ButtonCancelText - String setting the CANCEL button text. If empty, the button is not displayed.
ButtonYesStyle - String defining the CSS style of the YES button.
ButtonNoStyle - String defining the CSS style of the NO button.
ButtonCancelStyle - String defining the CSS style of the CANCEL button.
Returns: Integer with Yes = 1, No = 0, Cancel = -1.
Use &lt;code&gt;
Simple dialog with OK button
Dim DialogStyle As String	= "-fx-background-color: #e2e2e2; -fx-border-color: DarkSlateGray; -fx-border-width: 2; -fx-border-radius: 0;"
Dim HeaderStyle As String	= "-fx-background-color: cadetblue; -fx-font-style: italic; -fx-font-size: 24px;-fx-text-fill: #FF0000; -fx-font-weight: bold;"
Dim ContentStyle As String	= "-fx-background-color: #00FF00; -fx-font-size: 33px;-fx-text-fill: #0000FF; -fx-font-weight: bold;"
Dlg.CustomAlertDialog("INFORMATION", "Information", "Header", $"Content${CRLF}..."$, -1, -1, "TRANSPARENT", DialogStyle, HeaderStyle, ContentStyle, "OK", "", "", "-fx-background-color: #FF0000; -fx-text-fill: #FFFFFF; -fx-font-weight: bold;", "", "")
&lt;/code&gt;
</comment>
      <returntype>int</returntype>
      <parameter>
        <name>AlertType</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Content</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>PrefWidth</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>PrefHeight</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>StageStyle</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>DialogStyle</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>HeaderStyle</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>ContentStyle</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>ButtonYesText</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>ButtonNoText</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>ButtonCancelText</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>ButtonYesStyle</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>ButtonNoStyle</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>ButtonCancelStyle</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="DatePickerDialog">_datepickerdialog</name>
      <comment>DatePicker Dialog with default date, weeknumbers.
Title - string to show in the title bar.
Header - string to show in the dialog header area.
Label - Label shown left from the date picker.
Returns: String with selected date or an empty string if cancelled.
Note: Important to set the pattern (i.e. DateTime.DateFormat = "yyyy-MM-dd") prior calling this method; If the default date left empty (""), the actual date is set.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Label</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>DefaultDate</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="DidYouKnowDialog">_didyouknowdialog</name>
      <comment>Did You Know Dialog with Icon.
Title - string to show in the title bar.
Header - string to show in the dialog header area.
Content - string to show in the content area (below the header).
Returns: None.
</comment>
      <returntype>anywheresoftware.b4a.objects.collections.Map</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Content</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="DidYouKnowDialog2">_didyouknowdialog2</name>
      <comment>Did You Know Dialog 2 with list of did you know strings and icon.
Title - string to show in the title bar.
Header - string to show in the dialog header area.
Content - string to show in the content area (below the header).
Items - string list with did you know's
DefaultItem - integer between 0 and items.size - 1
Width - width of the dialog. -1 uses the default 500
Height - height of the dialog. -1 uses the default 400
Returns: Last selected did you know string index
</comment>
      <returntype>int</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Items</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
      <parameter>
        <name>Defaultitem</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>Width</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>Height</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="DoNotAskAgainDialog">_donotaskagaindialog</name>
      <comment>Title - string to show in the title bar.
Header - string to show in the dialog header area.
Content - string to show in the content area (below the header).
DoNotAskAgainMessage - string to show the option of not asking this dialog again.
DefaultOption - boolean to indicate the choice of not asking this dialog again.
Returns:
1. From the Buttons: True = Yes, False = No
2. From the DoNotAskAgain Checkbox: True if checked which means, do not ask again to show the dialog.
Example &lt;code&gt;
Dim result As Boolean = Dlg.DoNotAskAgainDialog("DoNotAskMeAgain Title", "Header", "Content", "Do Not ask Me again", True)
Dim resultOption As Boolean = Dlg.DoNotAskAgainOption
Log($"Do Not Ask Me Again${CRLF}Result:${result}${CRLF}Option:${resultOption}"$)
&lt;/code&gt;
</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Content</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>DoNotAskAgainMessage</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>DefaultOption</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ErrorDialog">_errordialog</name>
      <comment>Title - string to show in the title bar.
Header - string to show in the dialog header area.
Content - string to show in the content area (below the header).
Returns: None.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Content</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ExceptionDialog">_exceptiondialog</name>
      <comment>Exception Dialog in an expanded text area.
Title - string to show in the title bar.
Header - string to show in the dialog header area.
Content - string to show in the content area (below the header).
ExceptionContent - string containing the exception shown in the text area.
Returns: None.
Note: For the content, an option is to use LastException.Message and for Ex the LastException.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Content</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>ExceptionContent</name>
        <type>anywheresoftware.b4a.objects.B4AException</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ExtendedDialog">_extendeddialog</name>
      <comment>Show an Extended Dialog which has a expandable Textarea. The textarea is by default not expanded.
Title - string to show in the title bar.
Header - string to show in the dialog header area.
Content - string to show in the content area (below the header).
Extended Content - string to show in a text area if the clicked on the show details options.
Returns: None.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Content</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>ContentExtended</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="getCancelButtonText" HideFromIDE="true">_getcancelbuttontext</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getDoNotAskAgainOption" HideFromIDE="true">_getdonotaskagainoption</name>
      <comment>Get the Do Not Ask Again Message option true or false
</comment>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="getExtendedDialogExpanded" HideFromIDE="true">_getextendeddialogexpanded</name>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="getExtendedDialogHideDetails" HideFromIDE="true">_getextendeddialoghidedetails</name>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="getExtendedDialogShowLessDetailsText" HideFromIDE="true">_getextendeddialogshowlessdetailstext</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getExtendedDialogShowMoreDetailsText" HideFromIDE="true">_getextendeddialogshowmoredetailstext</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getLoginButtonText" HideFromIDE="true">_getloginbuttontext</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getMessageDialogDialogExpanded" HideFromIDE="true">_getmessagedialogdialogexpanded</name>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="getMessageDialogShowLessDetailsText" HideFromIDE="true">_getmessagedialogshowlessdetailstext</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getMessageDialogShowMoreDetailsText" HideFromIDE="true">_getmessagedialogshowmoredetailstext</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getMessageDialogWrapText" HideFromIDE="true">_getmessagedialogwraptext</name>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="getMessageHTMLDialogDialogExpanded" HideFromIDE="true">_getmessagehtmldialogdialogexpanded</name>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="getMessageHTMLDialogHideDetails" HideFromIDE="true">_getmessagehtmldialoghidedetails</name>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="getMessageHTMLDialogShowLessDetailsText" HideFromIDE="true">_getmessagehtmldialogshowlessdetailstext</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getMessageHTMLDialogShowMoreDetailsText" HideFromIDE="true">_getmessagehtmldialogshowmoredetailstext</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getNextButtonText" HideFromIDE="true">_getnextbuttontext</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getNoButtonText" HideFromIDE="true">_getnobuttontext</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getOKButtonText" HideFromIDE="true">_getokbuttontext</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getPasswordLabel" HideFromIDE="true">_getpasswordlabel</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getPasswordPrompt" HideFromIDE="true">_getpasswordprompt</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getPreviousButtonText" HideFromIDE="true">_getpreviousbuttontext</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getSelectButtonText" HideFromIDE="true">_getselectbuttontext</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getSimpleFormComboBoxEditable" HideFromIDE="true">_getsimpleformcomboboxeditable</name>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="getSimpleFormComboBoxValue" HideFromIDE="true">_getsimpleformcomboboxvalue</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getSimpleFormDatePickerValue" HideFromIDE="true">_getsimpleformdatepickervalue</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getSimpleFormSplitFields" HideFromIDE="true">_getsimpleformsplitfields</name>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="getSimpleFormWidth" HideFromIDE="true">_getsimpleformwidth</name>
      <returntype>int</returntype>
    </method>
    <method>
      <name DesignerName="getSliderBlockIncrement" HideFromIDE="true">_getsliderblockincrement</name>
      <returntype>double</returntype>
    </method>
    <method>
      <name DesignerName="getSliderMajorTickUnit" HideFromIDE="true">_getslidermajortickunit</name>
      <returntype>double</returntype>
    </method>
    <method>
      <name DesignerName="getSliderMinorTickCount" HideFromIDE="true">_getsliderminortickcount</name>
      <returntype>int</returntype>
    </method>
    <method>
      <name DesignerName="getSliderPrefWidth" HideFromIDE="true">_getsliderprefwidth</name>
      <returntype>double</returntype>
    </method>
    <method>
      <name DesignerName="getSliderShowTickLabels" HideFromIDE="true">_getslidershowticklabels</name>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="getSliderShowTickMarks" HideFromIDE="true">_getslidershowtickmarks</name>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="getSliderShowValue" HideFromIDE="true">_getslidershowvalue</name>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="getSliderSnapToTicks" HideFromIDE="true">_getslidersnaptoticks</name>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="getSliderValueStyle" HideFromIDE="true">_getslidervaluestyle</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getToastMessageBackgroundColor" HideFromIDE="true">_gettoastmessagebackgroundcolor</name>
      <returntype>anywheresoftware.b4j.objects.JFX.PaintWrapper</returntype>
    </method>
    <method>
      <name DesignerName="getToastMessageBorderColor" HideFromIDE="true">_gettoastmessagebordercolor</name>
      <returntype>anywheresoftware.b4j.objects.JFX.PaintWrapper</returntype>
    </method>
    <method>
      <name DesignerName="getToastMessageBorderWidth" HideFromIDE="true">_gettoastmessageborderwidth</name>
      <returntype>int</returntype>
    </method>
    <method>
      <name DesignerName="getToastMessageFontSize" HideFromIDE="true">_gettoastmessagefontsize</name>
      <returntype>int</returntype>
    </method>
    <method>
      <name DesignerName="getUsernameLabel" HideFromIDE="true">_getusernamelabel</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getUsernamePrompt" HideFromIDE="true">_getusernameprompt</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getYesButtonText" HideFromIDE="true">_getyesbuttontext</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="InformationDialog">_informationdialog</name>
      <comment>Title - string to show in the title bar.
Header - string to show in the dialog header area.
Content - string to show in the content area (below the header).
Returns: None.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Content</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Initialize">_initialize</name>
      <comment>Initializes the object. You can add parameters to this method if needed.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>ba</name>
        <type>anywheresoftware.b4a.BA</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IntegerInputDialog">_integerinputdialog</name>
      <comment>Show a Integer Input Dialog
Title - string to show in the title bar.
Header - string to show in the dialog header area.
Label - string to show as label left from the input field.
Default - default value as integer in range -32768 to +32767.
Returns: Value or if cancelled the default give.
Example &lt;code&gt;
Dim default As Int = 9
Dim result As Int = IntegerInputDialog("jRLDialogsX Integer Input Dialog", "Header", "Label", default)
If result &lt;&gt;  default Then
	Log(result)
End If
&lt;/code&gt;
</comment>
      <returntype>int</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Label</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Default</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ListDialog">_listdialog</name>
      <comment>List Dialog with single selection.
Title - string to show in the title bar.
Header - string to show in the dialog header area.
Items - List of items to select
Defaultitem - set between 0 - items.size - 1. If -1, then no item selected.
Returns: Selected item as String or an empty String.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Items</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
      <parameter>
        <name>Defaultitem</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ListDialog2">_listdialog2</name>
      <comment>List Dialog with multiple selection.
Title - string to show in the title bar.
Header - string to show in the dialog header area.
Items - List of items to select
Defaultitem - set between 0 - items.size - 1. If -1, then no item selected.
Returns: One or more selected items as a Map (nr:item) or a non initialized Map.
</comment>
      <returntype>anywheresoftware.b4a.objects.collections.Map</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Items</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
      <parameter>
        <name>Defaultitem</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ListFindDialog">_listfinddialog</name>
      <comment>List Find Dialog with single selection.
Title - string to show in the title bar.
Items - List of items to select
Defaultitem - set between 0 - items.size - 1.
Returns: Selected item as String or an empty String.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Items</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
      <parameter>
        <name>Defaultitem</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>Width</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>Height</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="LoginDialog">_logindialog</name>
      <comment>Title - string to show in the title bar.
Header - string to show in the dialog header area.
Returns: Map username:username, password:password.
If cancel selected, the returned map will not be initialized.
</comment>
      <returntype>anywheresoftware.b4a.objects.collections.Map</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="LoginDialog2">_logindialog2</name>
      <comment>Login Dialog with Icon and default UserName.
Title - string to show in the title bar.
Header - string to show in the dialog header area.
Username - string as the default username.
Returns: Map username:username, password:password.
If cancel selected, the returned map will not be initialized.
Note: Ensure the icon file login.png is added to the B4J project.
</comment>
      <returntype>anywheresoftware.b4a.objects.collections.Map</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>UserName</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="MaskInputDialog">_maskinputdialog</name>
      <comment>MaskInput Dialog with one mask formatted field with user cancel handling.
Title - string to show in the title bar (optional).
Header - string to show in the dialog header area (optional).
Label - string to show as label left from the input field (optional).
Text - string as default for the input field (optional).
Mask - string containing the mask (mandatory) , i.e. ###_####. Following characters:
# 	Any valid number, uses Character.isDigit.
' 	Escape character, used to escape any of the special formatting characters.
U	Any character (Character.isLetter). All lowercase letters are mapped To upper Case.
L	Any character (Character.isLetter). All upper Case letters are mapped To lower Case.
A	Any character Or number (Character.isLetter Or Character.isDigit)
?	Any character (Character.isLetter).
*	Anything.
H	Any hex character (0-9, a-f Or A-F).
Returns: Formatted text entered as string or an empty string or null in case error.
To test the result of the dialog use i.e. If result.EqualsIgnoreCase(Null) Then ...
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Label</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Text</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Mask</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="MessageDialog">_messagedialog</name>
      <comment>Title - string to show in the title bar.
Content - string with plain text in an expanded text area.
Returns: None.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Content</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="MessageHTMLDialog">_messagehtmldialog</name>
      <comment>Title - string to show in the title bar.
Content - string with HTML formatted content in an expanded webview.
Note - Anchors are handled if defined like [a href="#myanchor"]Jump To myanchor[/a] ... [a name="myanchor"][/a] (replace brackets by left/right arrows).
Returns: None.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Content</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="MessageHTMLDialog2">_messagehtmldialog2</name>
      <comment>Title - string to show in the title bar.
Header - string to show in the dialog header area.
Content - string with HTML formatted content in an expanded webview.
Note - Anchors are handled if defined like [a href="#myanchor"]Jump To myanchor[/a] ... [a name="myanchor"][/a] (replace brackets by left/right arrows).
Note - The content is always expanded and can not be hide.
Returns: None.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Content</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="MessageHTMLDialog3">_messagehtmldialog3</name>
      <comment>Title - string to show in the title bar.
Content - string with HTML formatted content in an expanded webview.
Note - Anchors are handled if defined like [a href="#myanchor"]Jump To myanchor[/a] ... [a name="myanchor"][/a] (replace brackets by left/right arrows).
Returns: True for OK, False for Cancel.
</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Content</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="MultiInputFieldDialog">_multiinputfielddialog</name>
      <comment>Multi Input Field build from a field map.
Title - string to show in the title bar.
Header - string to show in the dialog header area.
Fields- map which holds for each field the pair label:text.
FieldCount - size of the field map.
Returns: Map holding for each field the pair fieldN:fieldtext Or if cancelled, a non initialized map.
N is the fieldnumber, starting with 0. The max number of fields is determined by the Field Map size.
Example &lt;code&gt;
SetParentWindow
Dlg.OKButtonText = tfOKButtonText.Text
Dim fieldmap As Map = CreateMap("FieldA": "Value FieldA", "FieldB": "Value FieldB", "FieldC": "Value FieldC", "FieldD": "Value FieldD")
Dim resultmap As Map = Dlg.MultiInputFieldDialog("MultiInputField Title", "Header", fieldmap, fieldmap.size)
'The resultmap holds for each field the pair fieldN:text
For i = 0 To resultmap.Size - 1
	Log($"${resultmap.GetKeyAt(i)} = ${resultmap.GetValueAt(i)}"$)
Next
&lt;/code&gt;
</comment>
      <returntype>anywheresoftware.b4a.objects.collections.Map</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Fields</name>
        <type>anywheresoftware.b4a.objects.collections.Map</type>
      </parameter>
      <parameter>
        <name>FieldCount</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SelectDialog">_selectdialog</name>
      <comment>Title - string to show in the title bar.
Items - List of items to select
Height - Dialog height
Width - Dialog width.
Returns: Selected item as Int or -1 if nothing selected.
</comment>
      <returntype>int</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Items</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
      <parameter>
        <name>Defaultitem</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>Height</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>Width</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setCancelButtonStyle" HideFromIDE="true">_setcancelbuttonstyle</name>
      <comment>Set the Cancel Button Style
Use &lt;code&gt;
Dlg.CancelButtonStyle = "-fx-font-size: 24px;-fx-background-color: indianred;"
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>stl</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setCancelButtonText" HideFromIDE="true">_setcancelbuttontext</name>
      <comment>Set / Get the Cancel Button Text
Use &lt;code&gt;
Dlg.CancelButtonText = "Cancel"
Dim cancelbuttontext As String = Dlg.CancelButtonText
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>txt</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setDoNotAskAgainOption" HideFromIDE="true">_setdonotaskagainoption</name>
      <comment>Property get / set the option for not asking again, to true or false.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>askagain</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setExtendedDialogExpanded" HideFromIDE="true">_setextendeddialogexpanded</name>
      <comment>Get / Set the option to show the content of the ExtendedDialog expanded.
Expanded - False = do not expand the textarea with extended information.
Returns: None.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Expanded</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setExtendedDialogHideDetails" HideFromIDE="true">_setextendeddialoghidedetails</name>
      <comment>Get / Set the option to hide or show the details hyperlink button of the ExtendedDialog.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Hide</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setExtendedDialogShowLessDetailsText" HideFromIDE="true">_setextendeddialogshowlessdetailstext</name>
      <comment>Set / Get the Extended Dialog Show Less Details Hyperlink Button Text
Use &lt;code&gt;
Dlg.ExtendedDialogShowLessDetailsText = "Less..."
Dim ExtendedDialogShowLessDetailsText As String = Dlg.ExtendedDialogShowLessDetailsText
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>txt</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setExtendedDialogShowMoreDetailsText" HideFromIDE="true">_setextendeddialogshowmoredetailstext</name>
      <comment>Set / Get the Extended Dialog Show More Details Hyperlink Button Text
Use &lt;code&gt;
Dlg.ExtendedDialogShowMoreDetailsText = "More..."
Dim ExtendedDialogShowMoreDetailsText As String = Dlg.ExtendedDialogShowMoreDetailsText
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>txt</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setLoginButtonStyle" HideFromIDE="true">_setloginbuttonstyle</name>
      <comment>Set the Login Button Style
Use &lt;code&gt;
Dlg.LoginButtonStyle = "-fx-font-size: 24px;-fx-background-color: indianred;"
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>stl</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setLoginButtonText" HideFromIDE="true">_setloginbuttontext</name>
      <comment>Set / Get the Login Button Text
Use &lt;code&gt;
Dlg.LoginButtonText = "Login"
Dim loginnbuttontext As String = Dlg.LoginButtonText
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>txt</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setMessageDialogDialogExpanded" HideFromIDE="true">_setmessagedialogdialogexpanded</name>
      <comment>Get / Set the option to show the content of the MessageDialog expanded.
Expanded - False = do not expand the textarea with extended information.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Expanded</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setMessageDialogShowLessDetailsText" HideFromIDE="true">_setmessagedialogshowlessdetailstext</name>
      <comment>Set / Get the MessageDialog Show Less Details Hyperlink Button Text
Use &lt;code&gt;
Dlg.MessageDialogShowLessDetailsText = "Less..."
Dim MessageDialogShowLessDetailsText As String = Dlg.MessageDialogShowLessDetailsText
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>txt</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setMessageDialogShowMoreDetailsText" HideFromIDE="true">_setmessagedialogshowmoredetailstext</name>
      <comment>Set / Get the MessageDialog Show More Details Hyperlink Button Text
Use &lt;code&gt;
Dlg.MessageDialogShowMoreDetailsText = "More..."
Dim MessageDialogShowMoreDetailsText As String = Dlg.MessageDialogShowMoreDetailsText
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>txt</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setMessageDialogWrapText" HideFromIDE="true">_setmessagedialogwraptext</name>
      <comment>Get / Set the option to show the content of the MessageDialog wrapped.
Wrap - False = do not wrap the textarea with extended information.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Wrap</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setMessageHTMLDialogDialogExpanded" HideFromIDE="true">_setmessagehtmldialogdialogexpanded</name>
      <comment>Get / Set the option to show the content of the MessageHTMLDialog expanded.
Expanded - False = do not expand the textarea with extended information.
Returns: None.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Expanded</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setMessageHTMLDialogHideDetails" HideFromIDE="true">_setmessagehtmldialoghidedetails</name>
      <comment>Get / Set the option to hide or show the details hyperlink button of the MessageHTMLDialog.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Hide</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setMessageHTMLDialogShowLessDetailsText" HideFromIDE="true">_setmessagehtmldialogshowlessdetailstext</name>
      <comment>Set / Get the MessageHTML Dialog Show Less Details Hyperlink Button Text
Use &lt;code&gt;
Dlg.MessageHTMLDialogShowLessDetailsText = "Less..."
Dim MessageHTMLDialogShowLessDetailsText As String = Dlg.MessageHTMLDialogShowLessDetailsText
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>txt</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setMessageHTMLDialogShowMoreDetailsText" HideFromIDE="true">_setmessagehtmldialogshowmoredetailstext</name>
      <comment>Set / Get the MessageHTML Dialog Show More Details Hyperlink Button Text
Use &lt;code&gt;
Dlg.MessageHTMLDialogShowMoreDetailsText = "More..."
Dim MessageHTMLDialogShowMoreDetailsText As String = Dlg.MessageHTMLDialogShowMoreDetailsText
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>txt</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setNextButtonStyle" HideFromIDE="true">_setnextbuttonstyle</name>
      <comment>Set the Next Button Style
Use &lt;code&gt;
Dlg.NextButtonStyle = "-fx-font-size: 24px;-fx-background-color: indianred;"
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>stl</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setNextButtonText" HideFromIDE="true">_setnextbuttontext</name>
      <comment>Set / Get the Next Button Text
Use &lt;code&gt;
Dlg.NextButtonText = "&gt;"
Dim nextbuttontext As String = Dlg.NextButtonText
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>txt</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setNoButtonStyle" HideFromIDE="true">_setnobuttonstyle</name>
      <comment>Set the No Button Style
Use &lt;code&gt;
Dlg.NoButtonStyle = "-fx-font-size: 24px;-fx-background-color: indianred;"
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>stl</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setNoButtonText" HideFromIDE="true">_setnobuttontext</name>
      <comment>Set / Get the NO Button Text
Use &lt;code&gt;
Dlg.NoButtonText = "NO"
Dim nobuttontext As String = Dlg.NoButtonText
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>txt</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setOKButtonStyle" HideFromIDE="true">_setokbuttonstyle</name>
      <comment>Set the OK Button Style
Use &lt;code&gt;
Dlg.OKButtonStyle = "-fx-font-size: 24px;-fx-background-color: indianred;"
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>stl</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setOKButtonText" HideFromIDE="true">_setokbuttontext</name>
      <comment>Set / Get the OK Button Text
Use &lt;code&gt;
Dlg.OKButtonText = "OK"
Dim okbuttontext As String = Dlg.OKButtonText
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>txt</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SetParentWindow">_setparentwindow</name>
      <comment>Set the parent window for the dialogs.
ParentForm - Form to be used as parent window.
Use &lt;code&gt;
SetParentWindow(MainForm)
&lt;/code&gt;
&lt;b&gt;Notes:&lt;/b&gt;
To reset the parentwindow, call SetParentWindow(Null).
The parent window can not be set for the ToastMessage dialog.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>ParentForm</name>
        <type>anywheresoftware.b4j.objects.Form</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setPasswordLabel" HideFromIDE="true">_setpasswordlabel</name>
      <comment>Set / Get the Password Label
Use &lt;code&gt;
Dlg.PasswordLabel = "Password:"
Dim passwordlabel As String = Dlg.PasswordLabel
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>lbl</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setPasswordPrompt" HideFromIDE="true">_setpasswordprompt</name>
      <comment>Set / Get the Password Prompt
Use &lt;code&gt;
Dlg.PasswordPrompt = "Enter Password"
Dim passwordprompt As String = Dlg.PasswordPrompt
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>prompt</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setPreviousButtonStyle" HideFromIDE="true">_setpreviousbuttonstyle</name>
      <comment>Set the Previous Button Style
Use &lt;code&gt;
Dlg.PreviousButtonStyle = "-fx-font-size: 24px;-fx-background-color: indianred;"
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>stl</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setPreviousButtonText" HideFromIDE="true">_setpreviousbuttontext</name>
      <comment>Set / Get the Previous Button Text
Use &lt;code&gt;
Dlg.PreviousButtonText = "&lt;"
Dim prevbuttontext As String = Dlg.PreviousButtonText
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>txt</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setSelectButtonStyle" HideFromIDE="true">_setselectbuttonstyle</name>
      <comment>Set the Select Button Style
Use &lt;code&gt;
Dlg.SelectButtonStyle = "-fx-font-size: 24px;-fx-background-color: indianred;"
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>stl</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setSelectButtonText" HideFromIDE="true">_setselectbuttontext</name>
      <comment>Set / Get the Select Button Text
Use &lt;code&gt;
Dlg.SelectButtonText = "Select"
Dim selectbuttontext As String = Dlg.SelectButtonText
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>txt</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setSimpleFormComboBoxEditable" HideFromIDE="true">_setsimpleformcomboboxeditable</name>
      <comment>Property get / set the SimpleFormDialog ComboBox editable
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>editable</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setSimpleFormComboBoxValue" HideFromIDE="true">_setsimpleformcomboboxvalue</name>
      <comment>Property get / set the SimpleFormDialog ComboBox Value
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>value</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setSimpleFormDatePickerValue" HideFromIDE="true">_setsimpleformdatepickervalue</name>
      <comment>Property get / set the SimpleFormDialog DatePicker Value
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>value</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setSimpleFormSplitFields" HideFromIDE="true">_setsimpleformsplitfields</name>
      <comment>Property get / set the SimpleFormDialog content per form row
If value false, then row contains label : field else row contains label or field.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setSimpleFormWidth" HideFromIDE="true">_setsimpleformwidth</name>
      <comment>Property get / set the SimpleFormDialog width
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>width</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setSliderBlockIncrement" HideFromIDE="true">_setsliderblockincrement</name>
      <comment>Property get / set block increment
Increment - amount by which to adjust the slider if the track of the slider is clicked.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>increment</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setSliderMajorTickUnit" HideFromIDE="true">_setslidermajortickunit</name>
      <comment>SliderDialog - Property get / set major tick unit
Unit - unit distance between major tick marks..
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>unit</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setSliderMinorTickCount" HideFromIDE="true">_setsliderminortickcount</name>
      <comment>SliderDialog - Property get / set minor tick count
Count - number of minor ticks to place between any two major ticks.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>count</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setSliderPrefWidth" HideFromIDE="true">_setsliderprefwidth</name>
      <comment>SliderDialog - Property get / set the width of the slider.
Width - Slider width. If 0, then the default setting is used.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>width</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setSliderShowTickLabels" HideFromIDE="true">_setslidershowticklabels</name>
      <comment>SliderDialog - Property get / set show the tick labels
Show - Indicates that the labels for tick marks should be shown.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>show</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setSliderShowTickMarks" HideFromIDE="true">_setslidershowtickmarks</name>
      <comment>SliderDialog - Property get / set show the tick marks.
Show - Specifies whether the Skin implementation should show tick marks.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>show</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setSliderShowValue" HideFromIDE="true">_setslidershowvalue</name>
      <comment>SliderDialog - Property get / set to show the value in a seperate label.
Show - Value in a label.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>show</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setSliderSnapToTicks" HideFromIDE="true">_setslidersnaptoticks</name>
      <comment>SliderDialog - Property get / set snap to ticks.
Snap - Indicates whether the value of the Slider should always be aligned with the tick marks.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>snap</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setSliderValueStyle" HideFromIDE="true">_setslidervaluestyle</name>
      <comment>SliderDialog - Property get / set the CSS style of the value label.
Style - CSS style, i.e. "-fx-text-fill: red; -fx-font-size: 24pt;".
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>style</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setToastMessageBackgroundColor" HideFromIDE="true">_settoastmessagebackgroundcolor</name>
      <comment>Property get / set back ground color
Parameters: Color as Paint
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>color</name>
        <type>anywheresoftware.b4j.objects.JFX.PaintWrapper</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setToastMessageBorderColor" HideFromIDE="true">_settoastmessagebordercolor</name>
      <comment>Property get / set border line color
Color - Paint
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>color</name>
        <type>anywheresoftware.b4j.objects.JFX.PaintWrapper</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setToastMessageBorderWidth" HideFromIDE="true">_settoastmessageborderwidth</name>
      <comment>Property get / set message border width
Parameters: Width as Int
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>width</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setToastMessageFontSize" HideFromIDE="true">_settoastmessagefontsize</name>
      <comment>Property get / set message font size
Parameters: Fontsize as Int.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>size</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setUsernameLabel" HideFromIDE="true">_setusernamelabel</name>
      <comment>Set / Get the Username Label
Use &lt;code&gt;
Dlg.UsernameLabel = "Username:"
Dim usernamelabel As String = Dlg.UsernameLabel
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>lbl</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setUsernamePrompt" HideFromIDE="true">_setusernameprompt</name>
      <comment>Set / Get the Username Prompt
Use &lt;code&gt;
Dlg.UsernamePrompt = "Enter Username"
Dim usernameprompt As String = Dlg.UsernamePrompt
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>prompt</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setYesButtonStyle" HideFromIDE="true">_setyesbuttonstyle</name>
      <comment>Set the Yes Button Style
Use &lt;code&gt;
Dlg.YesButtonStyle = "-fx-font-size: 24px;-fx-background-color: indianred;"
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>stl</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setYesButtonText" HideFromIDE="true">_setyesbuttontext</name>
      <comment>Set / Get the YES Button Text
Use &lt;code&gt;
Dlg.YesButtonText = "YES"
Dim yesbuttontext As String = Dlg.YesButtonText
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>txt</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SimpleFormDialog">_simpleformdialog</name>
      <comment>Simple Form Dialog enabling Text- / Password- / Numeric fields.
Title - string to show in the title bar.
Header - string to show in the dialog header area.
FieldList - list of maps. Each map represents a field with id, label, value, fieldtype.
The fieldtypes (must be uppercase) TextField "T", Password "P" , Numeric "N", TextArea "A", CheckBox "C", ComboBox "B", Datepicker "D"
Returns: Map with for each field the key:value pair id:value.
The returned fieldvalues are strings, means for numberfields conversion has to be done manually.
Example &lt;code&gt;
Dim fieldlist As List
fieldlist.Initialize
fieldlist.Add(CreateMap("id":"textfield", "label":"Textfield", "value":"textfield", "type":"T"))
fieldlist.Add(CreateMap("id":"numeric", "label":"Numeric", "value":"1958", "type":"N"))
fieldlist.Add(CreateMap("id":"password", "label":"Password", "value":"password", "type":"P"))
fieldlist.Add(CreateMap("id":"checkbox", "label":"Checkbox", "value":"1", "type":"C"))
fieldlist.Add(CreateMap("id":"combobox", "label":"Combobox", "value":"Item 1,Item 2,Item 3", "type":"B"))
IMPORTANT TO SET THIS FORMAT prior adding datepicker
DateTime.DateFormat = "yyyy-MM-dd"
fieldlist.Add(CreateMap("id":"datepicker", "label":"DatePicker", "value":"2019-01-01", "type":"D"))
Dim resultmap As Map = SimpleFormDialog("jRLDialogsX Simple Form Dialog", "Header", fieldlist)
If resultmap.IsInitialized Then
	Dim sb As StringBuilder
	sb.Initialize
	For i = 0 To resultmap.Size - 1
		sb.Append($"${resultmap.GetKeyAt(i)} = ${resultmap.GetValueAt(i)}"$).Append(CRLF)
	Next
	Log(sb.tostring)
End If
&lt;/code&gt;
</comment>
      <returntype>anywheresoftware.b4a.objects.collections.Map</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>FieldList</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SliderDialog">_sliderdialog</name>
      <comment>Title - string to show in the title bar.
Header - string to show in the dialog header area.
Label - Label shown left from the spinner.
MinValue - Minimum value of the slider (start value).
MaxValue - Maximum value of the slider (end value).
DefaultValue - Default value set in range Min / Max value.
Returns: Slider value As Double or if cancelled the default value given
Note: The slider style can be customized by using an external CSS file called Slider.css (case sensitive) which must be placed in the B4J Project Files (DirAssets) folder.
Example &lt;code&gt;
Dim defaultValue As Double = 58
Dlg.SliderShowTickLabels = True
Dlg.SliderShowTickMarks = True
Dlg.SliderShowValue = True
Dlg.SliderBlockIncrement = 10
Dlg.SliderMajorTickUnit = 10
Dlg.SliderValueStyle = "-fx-text-fill: red; -fx-font-size: 24pt;"
Dim value As Double = Dlg.SliderDialog("SliderDialog Title", "Header", 0, 100, defaultValue)
If value &lt;&gt; defaultValue Then
	Log($"Slider Value:${CRLF}${value}"$)
Else
	Log($"User Abort.${CRLF}Selected Value ${value} = Default Value ${defaultValue}"$)
End If
&lt;/code&gt;
</comment>
      <returntype>double</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>MinValue</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>MaxValue</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>DefaultValue</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SpinnerDoubleDialog">_spinnerdoubledialog</name>
      <comment>Title - string to show in the title bar.
Header - string to show in the dialog header area.
Label - Label shown left from the spinner.
MinValue - Spinner minimum value.
MaxValue - Spinner maximum value (must be greater minimum value).
InitialValue - Integer as the defalt value.
AmountToStepBy - Value to increase or decrease when stepping up or down.
Returns: Double with selected value or -1 if cancelled.
</comment>
      <returntype>double</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Label</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>MinValue</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>MaxValue</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>InitialValue</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>AmountToStepBy</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SpinnerIntegerDialog">_spinnerintegerdialog</name>
      <comment>Title - string to show in the title bar.
Header - string to show in the dialog header area.
Label - Label shown left from the spinner.
MinValue - Spinner minimum value.
MaxValue - Spinner maximum value (must be greater minimum value).
InitialValue - Integer as the defalt value.
AmountToStepBy - Value to increase or decrease when stepping up or down.
Returns: Integer with selected value or -1 if cancelled.
</comment>
      <returntype>int</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Label</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>MinValue</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>MaxValue</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>InitialValue</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>AmountToStepBy</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SpinnerListDialog">_spinnerlistdialog</name>
      <comment>Title - string to show in the title bar.
Header - string to show in the dialog header area.
Label - Label shown left from the spinner.
Items - List of items to select from.
Returns: String with selected value or empty string if cancelled.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Label</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Items</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="TextAreaDialog">_textareadialog</name>
      <comment>Title - string to show in the title bar.
Header - string to show in the dialog header area.
Label - Label shown left from the text area.
Text - Content of the text area.
Returns: Text entered as string or a null string if dialog cancelled.
To test the result of the dialog use e.g. If result.EqualsIgnoreCase(Null) Then ...
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Label</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Text</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="TextInputDialog">_textinputdialog</name>
      <comment>TextInput Dialog with one field.
Title - string to show in the title bar.
Header - string to show in the dialog header area.
Label - string to show as label left from the input field.
Text - string as default for the input field.
Returns: Text entered as string or an empty string.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Label</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Text</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="TextInputDialog2">_textinputdialog2</name>
      <comment>TextInputDialog with two fields.
Title - string to show in the title bar.
Header - string to show in the dialog header area.
Label1 - Label for field 1
Label2 - Label for field 2
Field1 - Default values for field1.
Field2 - Default values for field2.
Returns: Map with 2 entries holding field1:textinputfield1, field2:textinputfield2 or if cancelled a non initialized Map.
Example &lt;code&gt;
Dim m As Map = Dlg.TextInputDialog2("Text Input Dialog 2", "Name &amp; EMail", "Name", "EMail", "name", "email")
Log($"${m.Get("field1")} ${m.Get("field2")}"$)
&lt;/code&gt;
</comment>
      <returntype>anywheresoftware.b4a.objects.collections.Map</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Label1</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Label2</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Field1</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Field2</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="TextInputDialog3">_textinputdialog3</name>
      <comment>TextInput Dialog with one field with user cancel handling.
Title - string to show in the title bar.
Header - string to show in the dialog header area.
Label - string to show as label left from the input field.
Text - string as default for the input field.
Returns: Text entered as string or an empty string.
To test the result of the dialog use i.e. If result.EqualsIgnoreCase(Null) Then ...
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Label</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Text</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="TextInputDialog4">_textinputdialog4</name>
      <comment>TextInput Dialog with one field with user cancel handling.
Title - string to show in the title bar.
Header - string to show in the dialog header area.
Text - string as default for the input field.
Width - Width of the input field. Set to 0 to use the default width.
Returns: Text entered as string or an empty string.
To test the result of the dialog use i.e. If result.EqualsIgnoreCase(Null) Then ...
Example &lt;code&gt;
Dim url As String = Dlg.TextInputDialog4("Text Input Dialog 4", "Enter the URL", "http://www.rwblinn.de", 600)
lblTextInputDialog.Text = url
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Text</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Width</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="TimePicker12Dialog">_timepicker12dialog</name>
      <comment>12hr Time Picker Dialog with default values hours, minutes, AMPM
Title - string to show in the title bar.
Header - string to show in the dialog header area.
Hours - 0-11
Minutes - 0-59
AMPM - "AM" or "PM"
SetNow - True = Set the actual time (parameter Hours, Minutes are omitted).
Returns: Time String HH:mm:ss or empty string if cancelled.
Example &lt;code&gt;
Dlg.OKButtonText = "Pick"
'Pick a time with current time as default. The given hours and minutes are not used.
Dim timepicked As String = Dlg.TimePicker12Dialog("TimePicker", "Pick your time", 0,0,"", True)
'Pick a time with a default time set 0:08 AM
Dim timepicked As String = Dlg.TimePicker12Dialog("TimePicker", "Pick your time", 10,8,"AM", False)
Log(timepicked)
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Hours</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>Minutes</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>AMPM</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>SetNow</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="TimePicker24Dialog">_timepicker24dialog</name>
      <comment>24hr Time Picker Dialog with default values hours, minutes
Title - string to show in the title bar.
Header - string to show in the dialog header area.
Hours - 0-23
Minutes - 0-59
SetNow - True = Set the actual time (parameter Hours, Minutes are omitted).
Returns: Time String HH:mm or empty string if cancelled.
Example &lt;code&gt;
Dlg.OKButtonText = "Pick"
'Pick a time with current time as default. The given hours and minutes are not used.
Dim timepicked As String = Dlg.TimePicker24Dialog("TimePicker", "Pick your time", 0,0, True)
'Pick a time with a default time set 17:08.
Dim timepicked As String = Dlg.TimePicker24Dialog("TimePicker", "Pick your time", 17,8, False)
Log(timepicked)
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Hours</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>Minutes</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>SetNow</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToastMessage">_toastmessage</name>
      <comment>Message - String which can include html tags (ensure to include the start html and end /html tags.
Duration - miliseconds keeping the message visible. Must be greater 0.
Returns: None
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Message</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Duration</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToastMessageAlert">_toastmessagealert</name>
      <comment>Display a ToastMessage using JavaFX Alert Dialog
AlertType - String, types are Information, Warning, Error
Header - String, Header displayed above the content
Content - String, Content
Miliseconds - int, duration of the dialog being displayed
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>AlertType</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Content</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Duration</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToastMessageAlertStyle">_toastmessagealertstyle</name>
      <comment>Property get / set the style properties of the Alert Dialog
BorderColor - String, i.e. BLUE
BorderWidth - int, default Is 1
BorderRadius - int, default Is 0
Fontsize - int, defaullt Is 16
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>BorderColor</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>BorderWidth</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>BorderRadius</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>Fontsize</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="WarningDialog">_warningdialog</name>
      <comment>Title - string to show in the title bar.
Header - string to show in the dialog header area.
Content - string to show in the content area (below the header).
Returns: None.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Content</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="YesNoCancelDialog">_yesnocanceldialog</name>
      <comment>Title - string to show in the title bar.
Header - string to show in the dialog header area.
Content - string to show in the content area (below the header).
Returns: Integer with Yes = 1, No = 0, Cancel = -1.
</comment>
      <returntype>int</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Content</name>
        <type>String</type>
      </parameter>
    </method>
    <property>
      <name DesignerName="CancelButtonText">_cancelbuttontext</name>
      <comment>Set / Get the Cancel Button Text
Use &lt;code&gt;
Dlg.CancelButtonText = "Cancel"
Dim cancelbuttontext As String = Dlg.CancelButtonText
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="DoNotAskAgainOption">_donotaskagainoption</name>
      <comment>Get the Do Not Ask Again Message option true or false
</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Value</name>
        <type>boolean</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="ExtendedDialogExpanded">_extendeddialogexpanded</name>
      <comment>Get / Set the option to show the content of the ExtendedDialog expanded.
Expanded - False = do not expand the textarea with extended information.
Returns: None.
</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Value</name>
        <type>boolean</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="ExtendedDialogHideDetails">_extendeddialoghidedetails</name>
      <comment>Get / Set the option to hide or show the details hyperlink button of the ExtendedDialog.
</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Value</name>
        <type>boolean</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="ExtendedDialogShowLessDetailsText">_extendeddialogshowlessdetailstext</name>
      <comment>Set / Get the Extended Dialog Show Less Details Hyperlink Button Text
Use &lt;code&gt;
Dlg.ExtendedDialogShowLessDetailsText = "Less..."
Dim ExtendedDialogShowLessDetailsText As String = Dlg.ExtendedDialogShowLessDetailsText
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="ExtendedDialogShowMoreDetailsText">_extendeddialogshowmoredetailstext</name>
      <comment>Set / Get the Extended Dialog Show More Details Hyperlink Button Text
Use &lt;code&gt;
Dlg.ExtendedDialogShowMoreDetailsText = "More..."
Dim ExtendedDialogShowMoreDetailsText As String = Dlg.ExtendedDialogShowMoreDetailsText
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="LoginButtonText">_loginbuttontext</name>
      <comment>Set / Get the Login Button Text
Use &lt;code&gt;
Dlg.LoginButtonText = "Login"
Dim loginnbuttontext As String = Dlg.LoginButtonText
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="MessageDialogDialogExpanded">_messagedialogdialogexpanded</name>
      <comment>Get / Set the option to show the content of the MessageDialog expanded.
Expanded - False = do not expand the textarea with extended information.
</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Value</name>
        <type>boolean</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="MessageDialogShowLessDetailsText">_messagedialogshowlessdetailstext</name>
      <comment>Set / Get the MessageDialog Show Less Details Hyperlink Button Text
Use &lt;code&gt;
Dlg.MessageDialogShowLessDetailsText = "Less..."
Dim MessageDialogShowLessDetailsText As String = Dlg.MessageDialogShowLessDetailsText
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="MessageDialogShowMoreDetailsText">_messagedialogshowmoredetailstext</name>
      <comment>Set / Get the MessageDialog Show More Details Hyperlink Button Text
Use &lt;code&gt;
Dlg.MessageDialogShowMoreDetailsText = "More..."
Dim MessageDialogShowMoreDetailsText As String = Dlg.MessageDialogShowMoreDetailsText
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="MessageDialogWrapText">_messagedialogwraptext</name>
      <comment>Get / Set the option to show the content of the MessageDialog wrapped.
Wrap - False = do not wrap the textarea with extended information.
</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Value</name>
        <type>boolean</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="MessageHTMLDialogDialogExpanded">_messagehtmldialogdialogexpanded</name>
      <comment>Get / Set the option to show the content of the MessageHTMLDialog expanded.
Expanded - False = do not expand the textarea with extended information.
Returns: None.
</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Value</name>
        <type>boolean</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="MessageHTMLDialogHideDetails">_messagehtmldialoghidedetails</name>
      <comment>Get / Set the option to hide or show the details hyperlink button of the MessageHTMLDialog.
</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Value</name>
        <type>boolean</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="MessageHTMLDialogShowLessDetailsText">_messagehtmldialogshowlessdetailstext</name>
      <comment>Set / Get the MessageHTML Dialog Show Less Details Hyperlink Button Text
Use &lt;code&gt;
Dlg.MessageHTMLDialogShowLessDetailsText = "Less..."
Dim MessageHTMLDialogShowLessDetailsText As String = Dlg.MessageHTMLDialogShowLessDetailsText
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="MessageHTMLDialogShowMoreDetailsText">_messagehtmldialogshowmoredetailstext</name>
      <comment>Set / Get the MessageHTML Dialog Show More Details Hyperlink Button Text
Use &lt;code&gt;
Dlg.MessageHTMLDialogShowMoreDetailsText = "More..."
Dim MessageHTMLDialogShowMoreDetailsText As String = Dlg.MessageHTMLDialogShowMoreDetailsText
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="NextButtonText">_nextbuttontext</name>
      <comment>Set / Get the Next Button Text
Use &lt;code&gt;
Dlg.NextButtonText = "&gt;"
Dim nextbuttontext As String = Dlg.NextButtonText
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="NoButtonText">_nobuttontext</name>
      <comment>Set / Get the NO Button Text
Use &lt;code&gt;
Dlg.NoButtonText = "NO"
Dim nobuttontext As String = Dlg.NoButtonText
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="OKButtonText">_okbuttontext</name>
      <comment>Set / Get the OK Button Text
Use &lt;code&gt;
Dlg.OKButtonText = "OK"
Dim okbuttontext As String = Dlg.OKButtonText
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="PasswordLabel">_passwordlabel</name>
      <comment>Set / Get the Password Label
Use &lt;code&gt;
Dlg.PasswordLabel = "Password:"
Dim passwordlabel As String = Dlg.PasswordLabel
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="PasswordPrompt">_passwordprompt</name>
      <comment>Set / Get the Password Prompt
Use &lt;code&gt;
Dlg.PasswordPrompt = "Enter Password"
Dim passwordprompt As String = Dlg.PasswordPrompt
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="PreviousButtonText">_previousbuttontext</name>
      <comment>Set / Get the Previous Button Text
Use &lt;code&gt;
Dlg.PreviousButtonText = "&lt;"
Dim prevbuttontext As String = Dlg.PreviousButtonText
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="SelectButtonText">_selectbuttontext</name>
      <comment>Set / Get the Select Button Text
Use &lt;code&gt;
Dlg.SelectButtonText = "Select"
Dim selectbuttontext As String = Dlg.SelectButtonText
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="SimpleFormComboBoxEditable">_simpleformcomboboxeditable</name>
      <comment>Property get / set the SimpleFormDialog ComboBox editable
</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Value</name>
        <type>boolean</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="SimpleFormComboBoxValue">_simpleformcomboboxvalue</name>
      <comment>Property get / set the SimpleFormDialog ComboBox Value
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="SimpleFormDatePickerValue">_simpleformdatepickervalue</name>
      <comment>Property get / set the SimpleFormDialog DatePicker Value
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="SimpleFormSplitFields">_simpleformsplitfields</name>
      <comment>Property get / set the SimpleFormDialog content per form row
If value false, then row contains label : field else row contains label or field.
</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Value</name>
        <type>boolean</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="SimpleFormWidth">_simpleformwidth</name>
      <comment>Property get / set the SimpleFormDialog width
</comment>
      <returntype>int</returntype>
      <parameter>
        <name>Value</name>
        <type>int</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="SliderBlockIncrement">_sliderblockincrement</name>
      <comment>Property get / set block increment
Increment - amount by which to adjust the slider if the track of the slider is clicked.
</comment>
      <returntype>double</returntype>
      <parameter>
        <name>Value</name>
        <type>double</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="SliderMajorTickUnit">_slidermajortickunit</name>
      <comment>SliderDialog - Property get / set major tick unit
Unit - unit distance between major tick marks..
</comment>
      <returntype>double</returntype>
      <parameter>
        <name>Value</name>
        <type>double</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="SliderMinorTickCount">_sliderminortickcount</name>
      <comment>SliderDialog - Property get / set minor tick count
Count - number of minor ticks to place between any two major ticks.
</comment>
      <returntype>int</returntype>
      <parameter>
        <name>Value</name>
        <type>int</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="SliderPrefWidth">_sliderprefwidth</name>
      <comment>SliderDialog - Property get / set the width of the slider.
Width - Slider width. If 0, then the default setting is used.
</comment>
      <returntype>double</returntype>
      <parameter>
        <name>Value</name>
        <type>double</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="SliderShowTickLabels">_slidershowticklabels</name>
      <comment>SliderDialog - Property get / set show the tick labels
Show - Indicates that the labels for tick marks should be shown.
</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Value</name>
        <type>boolean</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="SliderShowTickMarks">_slidershowtickmarks</name>
      <comment>SliderDialog - Property get / set show the tick marks.
Show - Specifies whether the Skin implementation should show tick marks.
</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Value</name>
        <type>boolean</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="SliderShowValue">_slidershowvalue</name>
      <comment>SliderDialog - Property get / set to show the value in a seperate label.
Show - Value in a label.
</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Value</name>
        <type>boolean</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="SliderSnapToTicks">_slidersnaptoticks</name>
      <comment>SliderDialog - Property get / set snap to ticks.
Snap - Indicates whether the value of the Slider should always be aligned with the tick marks.
</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Value</name>
        <type>boolean</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="SliderValueStyle">_slidervaluestyle</name>
      <comment>SliderDialog - Property get / set the CSS style of the value label.
Style - CSS style, i.e. "-fx-text-fill: red; -fx-font-size: 24pt;".
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="ToastMessageBackgroundColor">_toastmessagebackgroundcolor</name>
      <comment>Property get / set back ground color
Parameters: Color as Paint
</comment>
      <returntype>anywheresoftware.b4j.objects.JFX.PaintWrapper</returntype>
      <parameter>
        <name>Value</name>
        <type>anywheresoftware.b4j.objects.JFX.PaintWrapper</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="ToastMessageBorderColor">_toastmessagebordercolor</name>
      <comment>Property get / set border line color
Color - Paint
</comment>
      <returntype>anywheresoftware.b4j.objects.JFX.PaintWrapper</returntype>
      <parameter>
        <name>Value</name>
        <type>anywheresoftware.b4j.objects.JFX.PaintWrapper</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="ToastMessageBorderWidth">_toastmessageborderwidth</name>
      <comment>Property get / set message border width
Parameters: Width as Int
</comment>
      <returntype>int</returntype>
      <parameter>
        <name>Value</name>
        <type>int</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="ToastMessageFontSize">_toastmessagefontsize</name>
      <comment>Property get / set message font size
Parameters: Fontsize as Int.
</comment>
      <returntype>int</returntype>
      <parameter>
        <name>Value</name>
        <type>int</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="UsernameLabel">_usernamelabel</name>
      <comment>Set / Get the Username Label
Use &lt;code&gt;
Dlg.UsernameLabel = "Username:"
Dim usernamelabel As String = Dlg.UsernameLabel
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="UsernamePrompt">_usernameprompt</name>
      <comment>Set / Get the Username Prompt
Use &lt;code&gt;
Dlg.UsernamePrompt = "Enter Username"
Dim usernameprompt As String = Dlg.UsernamePrompt
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="YesButtonText">_yesbuttontext</name>
      <comment>Set / Get the YES Button Text
Use &lt;code&gt;
Dlg.YesButtonText = "YES"
Dim yesbuttontext As String = Dlg.YesButtonText
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="CancelButtonStyle">_cancelbuttonstyle</name>
      <comment>Set the Cancel Button Style
Use &lt;code&gt;
Dlg.CancelButtonStyle = "-fx-font-size: 24px;-fx-background-color: indianred;"
&lt;/code&gt;
</comment>
      <returntype>void</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="LoginButtonStyle">_loginbuttonstyle</name>
      <comment>Set the Login Button Style
Use &lt;code&gt;
Dlg.LoginButtonStyle = "-fx-font-size: 24px;-fx-background-color: indianred;"
&lt;/code&gt;
</comment>
      <returntype>void</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="NextButtonStyle">_nextbuttonstyle</name>
      <comment>Set the Next Button Style
Use &lt;code&gt;
Dlg.NextButtonStyle = "-fx-font-size: 24px;-fx-background-color: indianred;"
&lt;/code&gt;
</comment>
      <returntype>void</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="NoButtonStyle">_nobuttonstyle</name>
      <comment>Set the No Button Style
Use &lt;code&gt;
Dlg.NoButtonStyle = "-fx-font-size: 24px;-fx-background-color: indianred;"
&lt;/code&gt;
</comment>
      <returntype>void</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="OKButtonStyle">_okbuttonstyle</name>
      <comment>Set the OK Button Style
Use &lt;code&gt;
Dlg.OKButtonStyle = "-fx-font-size: 24px;-fx-background-color: indianred;"
&lt;/code&gt;
</comment>
      <returntype>void</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="PreviousButtonStyle">_previousbuttonstyle</name>
      <comment>Set the Previous Button Style
Use &lt;code&gt;
Dlg.PreviousButtonStyle = "-fx-font-size: 24px;-fx-background-color: indianred;"
&lt;/code&gt;
</comment>
      <returntype>void</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="SelectButtonStyle">_selectbuttonstyle</name>
      <comment>Set the Select Button Style
Use &lt;code&gt;
Dlg.SelectButtonStyle = "-fx-font-size: 24px;-fx-background-color: indianred;"
&lt;/code&gt;
</comment>
      <returntype>void</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="YesButtonStyle">_yesbuttonstyle</name>
      <comment>Set the Yes Button Style
Use &lt;code&gt;
Dlg.YesButtonStyle = "-fx-font-size: 24px;-fx-background-color: indianred;"
&lt;/code&gt;
</comment>
      <returntype>void</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <field>
      <name DesignerName="Version">_version</name>
      <returntype>String</returntype>
    </field>
  </class>
  <class>
    <name>de.rwblinn.dialogsX.listfinddialog</name>
    <shortname>ListFindDialog</shortname>
    <method>
      <name>IsInitialized</name>
      <comment>Tests whether the object has been initialized.</comment>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="getButton_CancelText" HideFromIDE="true">_getbutton_canceltext</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getButton_SelectText" HideFromIDE="true">_getbutton_selecttext</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getFindItem" HideFromIDE="true">_getfinditem</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getFindItemPromptText" HideFromIDE="true">_getfinditemprompttext</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getFindItemVisible" HideFromIDE="true">_getfinditemvisible</name>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="getItemSelected" HideFromIDE="true">_getitemselected</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getTitle" HideFromIDE="true">_gettitle</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getTitleStyle" HideFromIDE="true">_gettitlestyle</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="Initialize">_initialize</name>
      <comment>Initializes the object.
Owner - set the owner, i.e.MainForm
Title - set the title text
Items - the items as list
DefaultItem - set the default item between 0 and items.size - 1 or -1 to set the first item
Width - the dialog width. -1 sets default 300.
Height - the dialog height. -1 sets default 400
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>ba</name>
        <type>anywheresoftware.b4a.BA</type>
      </parameter>
      <parameter>
        <name>Owner</name>
        <type>anywheresoftware.b4j.objects.Form</type>
      </parameter>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Items</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
      <parameter>
        <name>DefaultItem</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>Width</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>Height</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setButton_CancelText" HideFromIDE="true">_setbutton_canceltext</name>
      <comment>Set or get the text of the cancel button.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Text</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setButton_SelectText" HideFromIDE="true">_setbutton_selecttext</name>
      <comment>Set or get the text of the select button.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Text</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setFindItem" HideFromIDE="true">_setfinditem</name>
      <comment>Set or get the content of the textfield FindItem
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setFindItemPromptText" HideFromIDE="true">_setfinditemprompttext</name>
      <comment>Set or get the text of the textfield find item.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>PromptText</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setFindItemVisible" HideFromIDE="true">_setfinditemvisible</name>
      <comment>Set or get the visibility of the textfield FindItem
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Visible</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setItemSelected" HideFromIDE="true">_setitemselected</name>
      <comment>Set or get the item selected in the listview.
Item - text of the item to be selected
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Item</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setTitle" HideFromIDE="true">_settitle</name>
      <comment>Set or get the text of the title.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setTitleStyle" HideFromIDE="true">_settitlestyle</name>
      <comment>Set or get the style property of the title label.
Example &lt;code&gt;
Dim lfd As ListFindDialog
lfd.TitleStyle = "-fx-text-fill:blue;-fx-background-color:white;"
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Style</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ShowAndWait">_showandwait</name>
      <returntype>String</returntype>
    </method>
    <property>
      <name DesignerName="Button_CancelText">_button_canceltext</name>
      <comment>Set or get the text of the cancel button.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="Button_SelectText">_button_selecttext</name>
      <comment>Set or get the text of the select button.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="FindItem">_finditem</name>
      <comment>Set or get the content of the textfield FindItem
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="FindItemPromptText">_finditemprompttext</name>
      <comment>Set or get the text of the textfield find item.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="FindItemVisible">_finditemvisible</name>
      <comment>Set or get the visibility of the textfield FindItem
</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Value</name>
        <type>boolean</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="ItemSelected">_itemselected</name>
      <comment>Set or get the item selected in the listview.
Item - text of the item to be selected
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="Title">_title</name>
      <comment>Set or get the text of the title.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="TitleStyle">_titlestyle</name>
      <comment>Set or get the style property of the title label.
Example &lt;code&gt;
Dim lfd As ListFindDialog
lfd.TitleStyle = "-fx-text-fill:blue;-fx-background-color:white;"
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
  </class>
  <class>
    <name>de.rwblinn.dialogsX.didyouknowdialog2</name>
    <shortname>DidYouKnowDialog2</shortname>
    <method>
      <name>IsInitialized</name>
      <comment>Tests whether the object has been initialized.</comment>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="getButton_CloseText" HideFromIDE="true">_getbutton_closetext</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getButton_NextTipText" HideFromIDE="true">_getbutton_nexttiptext</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getButton_NextTipToolTipText" HideFromIDE="true">_getbutton_nexttiptooltiptext</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getButton_PreviousTipText" HideFromIDE="true">_getbutton_previoustiptext</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getButton_PreviousTipToolTipText" HideFromIDE="true">_getbutton_previoustiptooltiptext</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getHeader" HideFromIDE="true">_getheader</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getHeaderStyle" HideFromIDE="true">_getheaderstyle</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getTitle" HideFromIDE="true">_gettitle</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="Initialize">_initialize</name>
      <comment>Initializes the object.
Owner - set the owner, i.e.MainForm
Title - set the title text
Items - the items as list
DefaultItem - set the default item between 0 and items.size - 1 or -1 to set the first item
Width - the dialog width. -1 sets default 500.
Height - the dialog height. -1 sets default 400
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>ba</name>
        <type>anywheresoftware.b4a.BA</type>
      </parameter>
      <parameter>
        <name>Owner</name>
        <type>anywheresoftware.b4j.objects.Form</type>
      </parameter>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Items</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
      <parameter>
        <name>DefaultItem</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>Width</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>Height</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setButton_CloseText" HideFromIDE="true">_setbutton_closetext</name>
      <comment>Set or get the text of the close button.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Text</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setButton_NextTipText" HideFromIDE="true">_setbutton_nexttiptext</name>
      <comment>Set or get the text of the next tip button.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Text</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setButton_NextTipToolTipText" HideFromIDE="true">_setbutton_nexttiptooltiptext</name>
      <comment>Set or get the tooltip text of the next tip button.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Text</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setButton_PreviousTipText" HideFromIDE="true">_setbutton_previoustiptext</name>
      <comment>Set or get the tip text of the previous tip button.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Text</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setButton_PreviousTipToolTipText" HideFromIDE="true">_setbutton_previoustiptooltiptext</name>
      <comment>Set or get the tooltip text of the previous tip button.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Text</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setHeader" HideFromIDE="true">_setheader</name>
      <comment>Set or get the text of the header.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Header</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setHeaderStyle" HideFromIDE="true">_setheaderstyle</name>
      <comment>Set or get the style property of the header label.
Example &lt;code&gt;
Dim dyk As DYK2Dialog
lfd.HeaderStyle = "-fx-text-fill:blue;-fx-background-color:white;"
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Style</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="setTitle" HideFromIDE="true">_settitle</name>
      <comment>Set or get the text of the title.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Title</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ShowAndWait">_showandwait</name>
      <returntype>String</returntype>
    </method>
    <property>
      <name DesignerName="Button_CloseText">_button_closetext</name>
      <comment>Set or get the text of the close button.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="Button_NextTipText">_button_nexttiptext</name>
      <comment>Set or get the text of the next tip button.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="Button_NextTipToolTipText">_button_nexttiptooltiptext</name>
      <comment>Set or get the tooltip text of the next tip button.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="Button_PreviousTipText">_button_previoustiptext</name>
      <comment>Set or get the tip text of the previous tip button.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="Button_PreviousTipToolTipText">_button_previoustiptooltiptext</name>
      <comment>Set or get the tooltip text of the previous tip button.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="Header">_header</name>
      <comment>Set or get the text of the header.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="HeaderStyle">_headerstyle</name>
      <comment>Set or get the style property of the header label.
Example &lt;code&gt;
Dim dyk As DYK2Dialog
lfd.HeaderStyle = "-fx-text-fill:blue;-fx-background-color:white;"
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
    <property>
      <name DesignerName="Title">_title</name>
      <comment>Set or get the text of the title.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </property>
  </class>
  <version>1.88</version>
  <author>Robert W.B. Linn (Build 20221122)</author>
</root>