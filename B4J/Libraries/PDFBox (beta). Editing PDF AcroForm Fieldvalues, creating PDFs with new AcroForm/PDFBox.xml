<?xml version="1.0" encoding="UTF-8"?>
<root>
    <doclet-version-NOT-library-version>1.07</doclet-version-NOT-library-version>
    <class>
        <name>de.donmanfred.pdfbox.COSDictionarywrapper</name>
        <shortname>COSDictionary</shortname>
        <objectwrapper>org.apache.pdfbox.cos.COSDictionary</objectwrapper>
        <owner>process</owner>
        <method>
            <name>getObjectFromPath</name>
            <comment>Nice method, gives you every object you want Arrays works properly too. Try
 "P/Annots/[k]/Rect" where k means the index of the Annotsarray.
objPath: the relative path to the object.
Return type: @return:the object</comment>
            <returntype>org.apache.pdfbox.cos.COSBase</returntype>
            <parameter>
                <name>objPath</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getNameAsString</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a name and convert it to a string. Null is returned if the
 entry does not exist in the dictionary.
key: The key to the item in the dictionary.
Return type: @return:The name converted to a string.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getEmbeddedString3</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a name and convert it to a string.
embedded: The embedded dictionary.
key: The key to the item in the dictionary.
defaultValue: The default value to return.
Return type: @return:The name converted to a string.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>embedded</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getEmbeddedString4</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a name and convert it to a string.
embedded: The embedded dictionary.
key: The key to the item in the dictionary.
defaultValue: The default value to return.
Return type: @return:The name converted to a string.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>embedded</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getItem</name>
            <comment>This will do a lookup into the dictionary.
key: The key to the object.
Return type: @return:The item that matches the key.</comment>
            <returntype>org.apache.pdfbox.cos.COSBase</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getEmbeddedString2</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a name and convert it to a string. Null is returned if the
 entry does not exist in the dictionary.
embedded: The embedded dictionary.
key: The key to the item in the dictionary.
Return type: @return:The name converted to a string.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>embedded</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>doc</name>
                <type>org.apache.pdfbox.pdmodel.PDDocument</type>
            </parameter>
        </method>
        <method>
            <name>containsValue</name>
            <comment>
value: The value to find in the map.
Return type: @return:true if the map contains this value.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>value</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>setItem2</name>
            <comment>This will set an item in the dictionary. If value is null then the result
 will be the same as removeItem( key ).
key: The key to the dictionary object.
value: The value to the dictionary object.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>org.apache.pdfbox.pdmodel.common.COSObjectable</type>
            </parameter>
        </method>
        <method>
            <name>setEmbeddedString2</name>
            <comment>This is a convenience method that will convert the value to a COSString
 object. If it is null then the object will be removed.
embedded: The embedded dictionary to set the item in.
key: The key to the object,
value: The string value for the name.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>embedded</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setItem3</name>
            <comment>This will set an item in the dictionary. If value is null then the result
 will be the same as removeItem( key ).
key: The key to the dictionary object.
value: The value to the dictionary object.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>org.apache.pdfbox.pdmodel.common.COSObjectable</type>
            </parameter>
        </method>
        <method>
            <name>getInt2</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be an integer. If the dictionary value is null then the default
 value will be returned.
keyList: The key to the item in the dictionary.
defaultValue: The value to return if the dictionary item is null.
Return type: @return:The integer value.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>keyList</name>
                <type>java.lang.String[]</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getInt3</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be an integer. If the dictionary value is null then the default
 value -1 will be returned.
firstKey: The first key to the item in the dictionary.
secondKey: The second key to the item in the dictionary.
Return type: @return:The integer value.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>firstKey</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>secondKey</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>getCOSObject</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a COSObject. Null is returned if the entry does not exist in
 the dictionary.
key: The key to the item in the dictionary.
Return type: @return:The COSObject.</comment>
            <returntype>org.apache.pdfbox.cos.COSObject</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>getInt4</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be an integer. If the dictionary value is null then the default
 value will be returned.
firstKey: The first key to the item in the dictionary.
secondKey: The second key to the item in the dictionary.
defaultValue: The value to return if the dictionary item is null.
Return type: @return:The integer value.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>firstKey</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>secondKey</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getDictionaryObject</name>
            <comment>This will get an object from this dictionary. If the object is a reference
 then it will dereference it and get it from the document. If the object is
 COSNull then null will be returned.
key: The key to the object that we are getting.
Return type: @return:The object that matches the key.</comment>
            <returntype>org.apache.pdfbox.cos.COSBase</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getFlag</name>
            <comment>Gets the boolean value from the flags at the given bit position.
field: The COSName of the field to get the flag from.
bitFlag: the bitPosition to get the value from.
Return type: @return:true if the number at bitPos is '1'</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>field</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>bitFlag</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getCOSName2</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a name. Default is returned if the entry does not exist in
 the dictionary.
key: The key to the item in the dictionary.
defaultValue: The value to return if the dictionary item is null.
Return type: @return:The COS name.</comment>
            <returntype>org.apache.pdfbox.cos.COSName</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>setName2</name>
            <comment>This is a convenience method that will convert the value to a COSName
 object. If it is null then the object will be removed.
key: The key to the object,
value: The string value for the name.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setFlag</name>
            <comment>Sets the given boolean value at bitPos in the flags.
field: The COSName of the field to set the value into.
bitFlag: the bit position to set the value in.
value: the value the bit position should have.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>field</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>bitFlag</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>setLong2</name>
            <comment>This is a convenience method that will convert the value to a COSInteger
 object.
key: The key to the object,
value: The int value for the name.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>entrySet</name>
            <comment>Returns the name-value entries in this dictionary. The returned set is in
 the order the entries were added to the dictionary.
Return type: @return:name-value entries in this dictionary</comment>
            <returntype>java.util.Set</returntype>
        </method>
        <method>
            <name>containsKey</name>
            <comment>
name: The key to find in the map.
Return type: @return:true if the map contains this key.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getCOSName</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a name. Null is returned if the entry does not exist in the
 dictionary.
key: The key to the item in the dictionary.
Return type: @return:The COS name.</comment>
            <returntype>org.apache.pdfbox.cos.COSName</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>setBoolean2</name>
            <comment>This will set an item in the dictionary.
key: The key to the dictionary object.
value: The value to the dictionary object.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>getString2</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a string. Null is returned if the entry does not exist in
 the dictionary.
key: The key to the item in the dictionary.
Return type: @return:The name converted to a string.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>containsKey2</name>
            <comment>
name: The key to find in the map.
Return type: @return:true if the map contains this key.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>name</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>getEmbeddedDate</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a name and convert it to a string. Null is returned if the
 entry does not exist in the dictionary.
embedded: The embedded dictionary to get.
key: The key to the item in the dictionary.
Return type: @return:The name converted to a string.</comment>
            <returntype>java.util.Calendar</returntype>
            <parameter>
                <name>embedded</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getString4</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a string.
key: The key to the item in the dictionary.
defaultValue: The default value to return.
Return type: @return:The name converted to a string.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setInt</name>
            <comment>This is a convenience method that will convert the value to a COSInteger
 object.
key: The key to the object,
value: The int value for the name.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getString3</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a string.
key: The key to the item in the dictionary.
defaultValue: The default value to return.
Return type: @return:The name converted to a string.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>accept</name>
            <comment>visitor pattern double dispatch method.
visitor: The object to notify when visiting this object.
Return type: @return:The object that the visitor returns.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>visitor</name>
                <type>org.apache.pdfbox.cos.ICOSVisitor</type>
            </parameter>
        </method>
        <method>
            <name>getInt</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be an integer. If the dictionary value is null then the default
 value will be returned.
key: The key to the item in the dictionary.
defaultValue: The value to return if the dictionary item is null.
Return type: @return:The integer value.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>setString</name>
            <comment>This is a convenience method that will convert the value to a COSString
 object. If it is null then the object will be removed.
key: The key to the object,
value: The string value for the name.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setLong</name>
            <comment>This is a convenience method that will convert the value to a COSInteger
 object.
key: The key to the object,
value: The int value for the name.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>getEmbeddedString</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a name and convert it to a string. Null is returned if the
 entry does not exist in the dictionary.
embedded: The embedded dictionary.
key: The key to the item in the dictionary.
Return type: @return:The name converted to a string.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>embedded</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setEmbeddedString</name>
            <comment>This is a convenience method that will convert the value to a COSString
 object. If it is null then the object will be removed.
embedded: The embedded dictionary to set the item in.
key: The key to the object,
value: The string value for the name.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>embedded</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getCOSDictionary</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a COSDictionary. Null is returned if the entry does not
 exist in the dictionary.
key: The key to the item in the dictionary.
Return type: @return:The COSDictionary.</comment>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>setName</name>
            <comment>This is a convenience method that will convert the value to a COSName
 object. If it is null then the object will be removed.
key: The key to the object,
value: The string value for the name.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getLong5</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be an integer. If the dictionary value is null then the default
 value will be returned.
key: The key to the item in the dictionary.
defaultValue: The value to return if the dictionary item is null.
Return type: @return:The integer value.</comment>
            <returntype>long</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>getLong4</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be an integer. If the dictionary value is null then the default
 value will be returned.
key: The key to the item in the dictionary.
defaultValue: The value to return if the dictionary item is null.
Return type: @return:The integer value.</comment>
            <returntype>long</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>removeItem</name>
            <comment>This will remove an item for the dictionary. This will do nothing of the
 object does not exist.
key: The key to the item to remove from the dictionary.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>getNameAsString2</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a name and convert it to a string. Null is returned if the
 entry does not exist in the dictionary.
key: The key to the item in the dictionary.
Return type: @return:The name converted to a string.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>getDate2</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a name and convert it to a string. Null is returned if the
 entry does not exist in the dictionary or if the date was invalid.
key: The key to the item in the dictionary.
Return type: @return:The name converted to a date.</comment>
            <returntype>java.util.Calendar</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>getLong3</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be an long. If the dictionary value is null then the default
 value will be returned.
keyList: The key to the item in the dictionary.
defaultValue: The value to return if the dictionary item is null.
Return type: @return:The long value.</comment>
            <returntype>long</returntype>
            <parameter>
                <name>keyList</name>
                <type>java.lang.String[]</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>getNameAsString3</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a name and convert it to a string.
key: The key to the item in the dictionary.
defaultValue: The value to return if the dictionary item is null.
Return type: @return:The name converted to a string.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getDate3</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a date.
key: The key to the item in the dictionary.
defaultValue: The default value to return if the entry does not exist in the
          dictionary or if the date was invalid.
Return type: @return:The name converted to a date.</comment>
            <returntype>java.util.Calendar</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>java.util.Calendar</type>
            </parameter>
        </method>
        <method>
            <name>getLong2</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be an long. -1 is returned if there is no value.
key: The key to the item in the dictionary.
Return type: @return:The long value.</comment>
            <returntype>long</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>asUnmodifiableDictionary</name>
            <comment>Returns an unmodifiable view of this dictionary.
Return type: @return:an unmodifiable view of this dictionary</comment>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
        </method>
        <method>
            <name>getFloat</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a float. If the dictionary value is null then the default
 value will be returned.
key: The key to the item in the dictionary.
defaultValue: The value to return if the dictionary item is null.
Return type: @return:The float value.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>mergeInto</name>
            <comment>This will add all of the dictionaries keys/values to this dictionary, but
 only if they don't already exist. If a key already exists in this
 dictionary then nothing is changed.
dic: The dictionaries to get the keys from.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>dic</name>
                <type>org.apache.pdfbox.cos.COSDictionary</type>
            </parameter>
        </method>
        <method>
            <name>getItem3</name>
            <comment>This is a special case of getItem that takes multiple keys, it will handle
 the situation where multiple keys could get the same value, ie if either CS
 or ColorSpace is used to get the colorspace. This will get an object from
 this dictionary.
firstKey: The first key to try.
secondKey: The second key to try.
Return type: @return:The object that matches the key.</comment>
            <returntype>org.apache.pdfbox.cos.COSBase</returntype>
            <parameter>
                <name>firstKey</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>secondKey</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>getItem2</name>
            <comment>This will do a lookup into the dictionary.
key: The key to the object.
Return type: @return:The item that matches the key.</comment>
            <returntype>org.apache.pdfbox.cos.COSBase</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>setEmbeddedInt</name>
            <comment>This is a convenience method that will convert the value to a COSInteger
 object.
embeddedDictionary: The embedded dictionary.
key: The key to the object,
value: The int value for the name.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>embeddedDictionary</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>setDate2</name>
            <comment>Set the date object.
key: The key to the date.
date: The date to set.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>date</name>
                <type>java.util.Calendar</type>
            </parameter>
        </method>
        <method>
            <name>setFloat2</name>
            <comment>This is a convenience method that will convert the value to a COSFloat
 object.
key: The key to the object,
value: The int value for the name.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>getDate</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a name and convert it to a string. Null is returned if the
 entry does not exist in the dictionary or if the date was invalid.
key: The key to the item in the dictionary.
Return type: @return:The name converted to a date.</comment>
            <returntype>java.util.Calendar</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getBoolean</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a cos boolean and convert it to a primitive boolean.
key: The key to the item in the dictionary.
defaultValue: The value returned if the entry is null.
Return type: @return:The value converted to a boolean.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>getNameAsString4</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a name and convert it to a string.
key: The key to the item in the dictionary.
defaultValue: The value to return if the dictionary item is null.
Return type: @return:The name converted to a string.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getDate4</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a date.
key: The key to the item in the dictionary.
defaultValue: The default value to return if the entry does not exist in the
          dictionary or if the date was invalid.
Return type: @return:The name converted to a date.</comment>
            <returntype>java.util.Calendar</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>java.util.Calendar</type>
            </parameter>
        </method>
        <method>
            <name>keySet</name>
            <comment>Returns the names of the entries in this dictionary. The returned set is in
 the order the entries were added to the dictionary.
Return type: @return:names of the entries in this dictionary</comment>
            <returntype>java.util.Set</returntype>
        </method>
        <method>
            <name>setItem</name>
            <comment>This will set an item in the dictionary. If value is null then the result
 will be the same as removeItem( key ).
key: The key to the dictionary object.
value: The value to the dictionary object.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>org.apache.pdfbox.cos.COSBase</type>
            </parameter>
        </method>
        <method>
            <name>setFloat</name>
            <comment>This is a convenience method that will convert the value to a COSFloat
 object.
key: The key to the object,
value: The int value for the name.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>getDictionaryObject4</name>
            <comment>This will get an object from this dictionary. If the object is a reference
 then it will dereference it and get it from the document. If the object is
 COSNull then null will be returned.
key: The key to the object that we are getting.
Return type: @return:The object that matches the key.</comment>
            <returntype>org.apache.pdfbox.cos.COSBase</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>getDictionaryObject3</name>
            <comment>This is a special case of getDictionaryObject that takes multiple keys, it
 will handle the situation where multiple keys could get the same value, ie
 if either CS or ColorSpace is used to get the colorspace. This will get an
 object from this dictionary. If the object is a reference then it will
 dereference it and get it from the document. If the object is COSNull then
 null will be returned.
keyList: The list of keys to find a value.
Return type: @return:The object that matches the key.</comment>
            <returntype>org.apache.pdfbox.cos.COSBase</returntype>
            <parameter>
                <name>keyList</name>
                <type>java.lang.String[]</type>
            </parameter>
        </method>
        <method>
            <name>getKeyForValue</name>
            <comment>Search in the map for the value that matches the parameter and return the
 first key that maps to that value.
value: The value to search for in the map.
Return type: @return:The key for the value in the map or null if it does not exist.</comment>
            <returntype>org.apache.pdfbox.cos.COSName</returntype>
            <parameter>
                <name>value</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>clear</name>
            <comment>This will clear all items in the map.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>getDictionaryObject2</name>
            <comment>This is a special case of getDictionaryObject that takes multiple keys, it
 will handle the situation where multiple keys could get the same value, ie
 if either CS or ColorSpace is used to get the colorspace. This will get an
 object from this dictionary. If the object is a reference then it will
 dereference it and get it from the document. If the object is COSNull then
 null will be returned.
firstKey: The first key to try.
secondKey: The second key to try.
Return type: @return:The object that matches the key.</comment>
            <returntype>org.apache.pdfbox.cos.COSBase</returntype>
            <parameter>
                <name>firstKey</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>secondKey</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>setString2</name>
            <comment>This is a convenience method that will convert the value to a COSString
 object. If it is null then the object will be removed.
key: The key to the object,
value: The string value for the name.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getString</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a string. Null is returned if the entry does not exist in
 the dictionary.
key: The key to the item in the dictionary.
Return type: @return:The name converted to a string.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setInt2</name>
            <comment>This is a convenience method that will convert the value to a COSInteger
 object.
key: The key to the object,
value: The int value for the name.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getCOSArray</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a COSArray. Null is returned if the entry does not exist in
 the dictionary.
key: The key to the item in the dictionary.
Return type: @return:The COSArray.</comment>
            <returntype>org.apache.pdfbox.cos.COSArray</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>getLong</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be an long. -1 is returned if there is no value.
key: The key to the item in the dictionary.
Return type: @return:The long value.</comment>
            <returntype>long</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getCOSStream</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a COSStream. Null is returned if the entry does not exist in
 the dictionary.
key: The key to the item in the dictionary.
Return type: @return:The COSStream.</comment>
            <returntype>org.apache.pdfbox.cos.COSStream</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>setEmbeddedDate</name>
            <comment>Set the value of a date entry in the dictionary.
embedded: The embedded dictionary.
key: The key to the date value.
date: The date value.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>embedded</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>date</name>
                <type>java.util.Calendar</type>
            </parameter>
        </method>
        <method>
            <name>getEmbeddedDate3</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a date.
embedded: The embedded dictionary to get.
key: The key to the item in the dictionary.
defaultValue: The default value to return if the entry does not exist in the
          dictionary or if the date was invalid.
Return type: @return:The name converted to a string.</comment>
            <returntype>java.util.Calendar</returntype>
            <parameter>
                <name>embedded</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>java.util.Calendar</type>
            </parameter>
        </method>
        <method>
            <name>getEmbeddedDate2</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a name and convert it to a string. Null is returned if the
 entry does not exist in the dictionary.
embedded: The embedded dictionary to get.
key: The key to the item in the dictionary.
Return type: @return:The name converted to a string.</comment>
            <returntype>java.util.Calendar</returntype>
            <parameter>
                <name>embedded</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>addAll</name>
            <comment>This will add all of the dictionaries keys/values to this dictionary. Only
 called when adding keys to a trailer that already exists.
dic: The dictionaries to get the keys from.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>dic</name>
                <type>org.apache.pdfbox.cos.COSDictionary</type>
            </parameter>
        </method>
        <method>
            <name>getEmbeddedDate4</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a date.
embedded: The embedded dictionary to get.
key: The key to the item in the dictionary.
defaultValue: The default value to return if the entry does not exist in the
          dictionary or if the date was invalid.
Return type: @return:The name converted to a string.</comment>
            <returntype>java.util.Calendar</returntype>
            <parameter>
                <name>embedded</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>java.util.Calendar</type>
            </parameter>
        </method>
        <method>
            <name>setDate</name>
            <comment>Set the value of a date entry in the dictionary.
key: The key to the date value.
date: The date value.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>date</name>
                <type>java.util.Calendar</type>
            </parameter>
        </method>
        <method>
            <name>toString</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>setEmbeddedInt2</name>
            <comment>This is a convenience method that will convert the value to a COSInteger
 object.
embeddedDictionary: The embedded dictionary.
key: The key to the object,
value: The int value for the name.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>embeddedDictionary</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>setBoolean</name>
            <comment>This will set an item in the dictionary.
key: The key to the dictionary object.
value: The value to the dictionary object.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>getEmbeddedInt</name>
            <comment>Get an integer from an embedded dictionary. Useful for 1-1 mappings.
embeddedDictionary: The name of the embedded dictionary.
key: The key in the embedded dictionary.
defaultValue: The value if there is no embedded dictionary or it does not
          contain the key.
Return type: @return:The value of the embedded integer.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>embeddedDictionary</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>int</type>
            </parameter>
        </method>
        <property>
            <name>NativeObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment></comment>
        </property>
        <property>
            <name>size</name>
            <returntype>int</returntype>
            <comment>This will return the number of elements in this dictionary.</comment>
        </property>
        <property>
            <name>Values</name>
            <returntype>java.util.Collection</returntype>
            <comment>This will get all of the values for the dictionary.</comment>
        </property>
        <property>
            <name>NeedToBeUpdated</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>flag</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.CreateVisibleSignaturewrapper</name>
        <shortname>CreateVisibleSignature</shortname>
        <owner>process</owner>
        <method>
            <name>Sign</name>
            <comment>
keystoreFilename: 
password: 
pdf2SignFilename: 
x: 
y: 
zoomPercent: 
imageStream: 
page:: page is 1-based here</comment>
            <returntype>void</returntype>
            <parameter>
                <name>keystoreFilename</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>password</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>pdf2SignFilename</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>zoomPercent</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>imageStream</name>
                <type>java.io.InputStream</type>
            </parameter>
            <parameter>
                <name>page</name>
                <type>int</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.PDDestinationNameTreeNodewrapper</name>
        <shortname>PDDestinationNameTreeNode</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.PDDestinationNameTreeNode</objectwrapper>
        <owner>process</owner>
        <method>
            <name>getValue</name>
            <comment>The name to retrieve.
name: The name in the tree.
Return type: @return:The value of the name in the tree.</comment>
            <returntype>org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageDestination</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>doc</name>
                <type>org.apache.pdfbox.pdmodel.PDDocument</type>
            </parameter>
            <parameter>
                <name>str</name>
                <type>java.io.InputStream</type>
            </parameter>
        </method>
        <property>
            <name>Names</name>
            <returntype>java.util.Map</returntype>
            <parameter>
                <name>names</name>
                <type>java.util.Map</type>
            </parameter>
            <comment>This will return a map of names on this level. The key will be a string,
 and the value will depend on where this class is being used.</comment>
        </property>
        <property>
            <name>RootNode</name>
            <returntype>boolean</returntype>
            <comment>Determines if this is a root node or not.</comment>
        </property>
        <property>
            <name>Parent</name>
            <returntype>org.apache.pdfbox.pdmodel.common.PDNameTreeNode</returntype>
            <parameter>
                <name>parentNode</name>
                <type>org.apache.pdfbox.pdmodel.common.PDNameTreeNode</type>
            </parameter>
            <comment>Returns the parent node.</comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment>Convert this standard java object to a COS object.</comment>
        </property>
        <property>
            <name>LowerLimit</name>
            <returntype>java.lang.String</returntype>
            <comment>Get the lowest value for a key in the name map.</comment>
        </property>
        <property>
            <name>UpperLimit</name>
            <returntype>java.lang.String</returntype>
            <comment>Get the highest value for a key in the name map.</comment>
        </property>
        <property>
            <name>Kids</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>kids</name>
                <type>java.util.List</type>
            </parameter>
            <comment>Return the children of this node. This list will contain PDNameTreeNode
 objects.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.PDDocumentCatalogwrapper</name>
        <shortname>PDDocumentCatalog</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.PDDocumentCatalog</objectwrapper>
        <owner>process</owner>
        <method>
            <name>findNamedDestinationPage</name>
            <comment>Find the page destination from a named destination.
namedDest: the named destination.
Return type: @return:a PDPageDestination object or null if not found.</comment>
            <returntype>org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageDestination</returntype>
            <parameter>
                <name>namedDest</name>
                <type>org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDNamedDestination</type>
            </parameter>
        </method>
        <method>
            <name>addOutputIntent</name>
            <comment>Add an OutputIntent to the list. If there is not OutputIntent, the list is
 created and the first element added.
outputIntent: the OutputIntent to add.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>outputIntent</name>
                <type>org.apache.pdfbox.pdmodel.graphics.color.PDOutputIntent</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Creates an empty PDF document. You need to add at least one page for the
 document to be valid.
doc: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>doc</name>
                <type>org.apache.pdfbox.pdmodel.PDDocument</type>
            </parameter>
        </method>
        <property>
            <name>PageMode</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>mode</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Returns the page display mode.</comment>
        </property>
        <property>
            <name>Actions</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.action.PDDocumentCatalogAdditionalActions</returntype>
            <parameter>
                <name>actions</name>
                <type>org.apache.pdfbox.pdmodel.interactive.action.PDDocumentCatalogAdditionalActions</type>
            </parameter>
            <comment>Sets the additional actions for the document.</comment>
        </property>
        <property>
            <name>DocumentOutline</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDDocumentOutline</returntype>
            <parameter>
                <name>outlines</name>
                <type>org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDDocumentOutline</type>
            </parameter>
            <comment>Get the outline associated with this document or null if it does not exist.</comment>
        </property>
        <property>
            <name>Metadata</name>
            <returntype>org.apache.pdfbox.pdmodel.common.PDMetadata</returntype>
            <parameter>
                <name>meta</name>
                <type>org.apache.pdfbox.pdmodel.common.PDMetadata</type>
            </parameter>
            <comment>Get the metadata that is part of the document catalog. This will return
 null if there is no meta data for this object.</comment>
        </property>
        <property>
            <name>StructureTreeRoot</name>
            <returntype>org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot</returntype>
            <parameter>
                <name>treeRoot</name>
                <type>org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot</type>
            </parameter>
            <comment>Get the document's structure tree root, or null if none exists.</comment>
        </property>
        <property>
            <name>OutputIntents</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>outputIntents</name>
                <type>java.util.List</type>
            </parameter>
            <comment>Get the list of OutputIntents defined in the document.</comment>
        </property>
        <property>
            <name>PageLabels</name>
            <returntype>org.apache.pdfbox.pdmodel.common.PDPageLabels</returntype>
            <parameter>
                <name>labels</name>
                <type>org.apache.pdfbox.pdmodel.common.PDPageLabels</type>
            </parameter>
            <comment>Returns the page labels descriptor of the document.</comment>
        </property>
        <property>
            <name>OCProperties</name>
            <returntype>org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties</returntype>
            <parameter>
                <name>ocProperties</name>
                <type>org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties</type>
            </parameter>
            <comment>Get the optional content properties dictionary associated with this
 document.</comment>
        </property>
        <property>
            <name>URI</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.action.PDURIDictionary</returntype>
            <parameter>
                <name>uri</name>
                <type>org.apache.pdfbox.pdmodel.interactive.action.PDURIDictionary</type>
            </parameter>
            <comment>Returns the document-level URI.</comment>
        </property>
        <property>
            <name>Pages</name>
            <returntype>de.donmanfred.pdfbox.PDPageTreewrapper</returntype>
            <comment>Returns all pages in the document, as a page tree.</comment>
        </property>
        <property>
            <name>Threads</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>threads</name>
                <type>java.util.List</type>
            </parameter>
            <comment>Returns the document's article threads.</comment>
        </property>
        <property>
            <name>Names</name>
            <returntype>org.apache.pdfbox.pdmodel.PDDocumentNameDictionary</returntype>
            <parameter>
                <name>names</name>
                <type>org.apache.pdfbox.pdmodel.PDDocumentNameDictionary</type>
            </parameter>
            <comment>Sets the names dictionary for the document.</comment>
        </property>
        <property>
            <name>OpenAction</name>
            <returntype>org.apache.pdfbox.pdmodel.common.PDDestinationOrAction</returntype>
            <parameter>
                <name>action</name>
                <type>org.apache.pdfbox.pdmodel.common.PDDestinationOrAction</type>
            </parameter>
            <comment>Get the Document Open Action for this object.</comment>
        </property>
        <property>
            <name>Language</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>language</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Returns the language for the document, or null.</comment>
        </property>
        <property>
            <name>Version</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>version</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Returns the PDF specification version this document conforms to.</comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>de.donmanfred.pdfbox.COSDictionarywrapper</returntype>
            <comment>Convert this standard java object to a COS object.</comment>
        </property>
        <property>
            <name>PageLayout</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>layout</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Returns the page layout.</comment>
        </property>
        <property>
            <name>AcroForm</name>
            <returntype>de.donmanfred.pdfbox.pdfbox.acroform.PDAcroFormwrapper</returntype>
            <parameter>
                <name>acroForm</name>
                <type>org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm</type>
            </parameter>
            <comment>Get the documents AcroForm. This will return null if no AcroForm is part of
 the document.</comment>
        </property>
        <property>
            <name>ViewerPreferences</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences</returntype>
            <parameter>
                <name>prefs</name>
                <type>org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences</type>
            </parameter>
            <comment>Get the viewer preferences associated with this document or null if they do
 not exist.</comment>
        </property>
        <property>
            <name>Dests</name>
            <returntype>de.donmanfred.pdfbox.PDDocumentNameDestinationDictionarywrapper</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MarkInfo</name>
            <returntype>org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkInfo</returntype>
            <parameter>
                <name>markInfo</name>
                <type>org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkInfo</type>
            </parameter>
            <comment>Get info about doc's usage of tagged features. This will return null if
 there is no information.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.PDDocumentInformationwrapper</name>
        <shortname>PDDocumentInformation</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.PDDocumentInformation</objectwrapper>
        <owner>process</owner>
        <method>
            <name>getPropertyStringValue</name>
            <comment>Return the properties String value.
 &lt;p&gt;
 Allows to retrieve the low level date for validation purposes.
 &lt;/p&gt;
propertyKey: the dictionaries key
Return type: @return:the properties value</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>propertyKey</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getCustomMetadataValue</name>
            <comment>This will get the value of a custom metadata information field for the
 document. This will return null if one is not found.
fieldName: Name of custom metadata field from pdf document.
Return type: @return:String Value of metadata field</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>fieldName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>setCustomMetadataValue</name>
            <comment>Set the custom metadata value.
fieldName: The name of the custom metadata field.
fieldValue: The value to the custom metadata field.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>fieldName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>fieldValue</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>CreationDate</name>
            <returntype>long</returntype>
            <parameter>
                <name>date</name>
                <type>long</type>
            </parameter>
            <comment>This will get the creation date of the document. This will return null if
 no creation date exists.</comment>
        </property>
        <property>
            <name>Keywords</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>keywords</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the keywords of the document. This will return null if no
 keywords exists.</comment>
        </property>
        <property>
            <name>Title</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>title</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the title of the document. This will return null if no title
 exists.</comment>
        </property>
        <property>
            <name>Creator</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>creator</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the creator of the document. This will return null if no
 creator exists.</comment>
        </property>
        <property>
            <name>Subject</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>subject</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the subject of the document. This will return null if no
 subject exists.</comment>
        </property>
        <property>
            <name>Producer</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>producer</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the producer of the document. This will return null if no
 producer exists.</comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment>This will get the underlying dictionary that this object wraps.</comment>
        </property>
        <property>
            <name>ModificationDate</name>
            <returntype>long</returntype>
            <parameter>
                <name>date</name>
                <type>long</type>
            </parameter>
            <comment>This will get the modification date of the document. This will return null
 if no modification date exists.</comment>
        </property>
        <property>
            <name>Author</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>author</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the author of the document. This will return null if no
 author exists.</comment>
        </property>
        <property>
            <name>Trapped</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the trapped value for the document. This will return null if
 one is not found.</comment>
        </property>
        <property>
            <name>MetadataKeys</name>
            <returntype>java.util.Set</returntype>
            <comment>This will get the keys of all metadata information fields for the document.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.PDDocumentNameDestinationDictionarywrapper</name>
        <shortname>PDDocumentNameDestinationDictionary</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.PDDocumentNameDestinationDictionary</objectwrapper>
        <owner>process</owner>
        <method>
            <name>getDestination</name>
            <comment>Returns the destination corresponding to the parameter.
name: The destination name.
Return type: @return:The destination for that name, or null if there isn't any.</comment>
            <returntype>org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDDestination</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>catalog</name>
                <type>org.apache.pdfbox.cos.COSDictionary</type>
            </parameter>
        </method>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment>Convert this standard java object to a COS object.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.PDDocumentNameDictionarywrapper</name>
        <shortname>PDDocumentNameDictionary</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.PDDocumentNameDictionary</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>catalog</name>
                <type>org.apache.pdfbox.pdmodel.PDDocumentCatalog</type>
            </parameter>
        </method>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment>Convert this standard java object to a COS object.</comment>
        </property>
        <property>
            <name>Dests</name>
            <returntype>org.apache.pdfbox.pdmodel.PDDestinationNameTreeNode</returntype>
            <parameter>
                <name>dests</name>
                <type>org.apache.pdfbox.pdmodel.PDDestinationNameTreeNode</type>
            </parameter>
            <comment>Get the destination name tree node. The values in this name tree will be
 PDPageDestination objects.</comment>
        </property>
        <property>
            <name>EmbeddedFiles</name>
            <returntype>org.apache.pdfbox.pdmodel.PDEmbeddedFilesNameTreeNode</returntype>
            <parameter>
                <name>ef</name>
                <type>org.apache.pdfbox.pdmodel.PDEmbeddedFilesNameTreeNode</type>
            </parameter>
            <comment>Get the embedded files named tree node. The values in this name tree will
 be PDComplexFileSpecification objects.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.PDDocumentwrapper</name>
        <shortname>PDDocument</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.PDDocument</objectwrapper>
        <owner>process</owner>
        <method>
            <name>saveIncrementalForExternalSigning</name>
            <comment>&lt;p&gt;
 &lt;b&gt;(This is a new feature for 2.0.3. The API for external signing might
 change based on feedback after release!)&lt;/b&gt;
 &lt;p&gt;
 Save PDF incrementally without closing for external signature creation
 scenario. The general sequence is:
 
 &lt;pre&gt;
    PDDocument pdDocument = ...;
    OutputStream outputStream = ...;
    SignatureOptions signatureOptions = ...; // options to specify fine tuned signature options or null for defaults
    PDSignature pdSignature = ...;

    // add signature parameters to be used when creating signature dictionary
    pdDocument.addSignature(pdSignature, signatureOptions);
    // prepare PDF for signing and obtain helper class to be used
    ExternalSigningSupport externalSigningSupport = pdDocument.saveIncrementalForExternalSigning(outputStream);
    // get data to be signed
    InputStream dataToBeSigned = externalSigningSupport.getContent();
    // invoke signature service
    byte[] signature = sign(dataToBeSigned);
    // set resulted CMS signature
    externalSigningSupport.setSignature(signature);

    // last step is to close the document
    pdDocument.close();
 &lt;/pre&gt;
 &lt;p&gt;
 Note that after calling this method, only {@code close()} method may
 invoked for {@code PDDocument} instance and only AFTER
 {@link ExternalSigningSupport} instance is used.
 &lt;/p&gt;
output: stream to write the final PDF. It will be closed when the document
          is closed. It &lt;i&gt;&lt;b&gt;must never&lt;/b&gt;&lt;/i&gt; point to the source file or
          that one will be harmed!
Return type: @return:instance to be used for external signing and setting CMS signature</comment>
            <returntype>org.apache.pdfbox.pdmodel.interactive.digitalsignature.ExternalSigningSupport</returntype>
            <parameter>
                <name>output</name>
                <type>java.io.OutputStream</type>
            </parameter>
        </method>
        <method>
            <name>save</name>
            <comment>Save the document to a file.
fileName: The file to save as.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>fileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>removePage</name>
            <comment>Remove the page from the document.
pageNumber: 0 based index to page number.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>pageNumber</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Creates an empty PDF document. You need to add at least one page for the
 document to be valid.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>addSignature</name>
            <comment>Add parameters of signature to be created externally using default
 signature options. See
 {@link #saveIncrementalForExternalSigning(OutputStream)} method description
 on external signature creation scenario details.
 &lt;p&gt;
 Only one signature may be added in a document. To sign several times, load
 document, add signature, save incremental and close again.
sigObject: is the PDSignatureField model</comment>
            <returntype>void</returntype>
            <parameter>
                <name>sigObject</name>
                <type>org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature</type>
            </parameter>
        </method>
        <method>
            <name>save2</name>
            <comment>This will save the document to an output stream.
output: The stream to write to. It will be closed when done. It is
          recommended to wrap it in a {@link java.io.BufferedOutputStream},
          unless it is already buffered.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>output</name>
                <type>java.io.OutputStream</type>
            </parameter>
        </method>
        <method>
            <name>addPage</name>
            <comment>This will add a page to the document. This is a convenience method, that
 will add the page to the root of the hierarchy and set the parent of the
 page to the root.
page: The page to add to the document.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>page</name>
                <type>org.apache.pdfbox.pdmodel.PDPage</type>
            </parameter>
        </method>
        <method>
            <name>GetPage</name>
            <comment>Returns the page at the given 0-based index.
 This method is too slow to get all the pages from a large PDF document
 (1000 pages or more). For such documents, use the iterator of
 pageIndex the 0-based page index
 
 returns the page at the given index.</comment>
            <returntype>org.apache.pdfbox.pdmodel.PDPage</returntype>
            <parameter>
                <name>pageIndex</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>addSignature4</name>
            <comment>This will add a signature to the document. If the 0-based page number in
 the options parameter is smaller than 0 or larger than max, the nearest
 valid page number will be used (i.e. 0 or max) and no exception will be
 thrown.
 &lt;p&gt;
 Only one signature may be added in a document. To sign several times, load
 document, add signature, save incremental and close again.
sigObject: is the PDSignatureField model
signatureInterface: is an interface whose implementation provides signing
          capabilities. Can be null if external signing if used.
options: signature options</comment>
            <returntype>void</returntype>
            <parameter>
                <name>sigObject</name>
                <type>org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature</type>
            </parameter>
            <parameter>
                <name>signatureInterface</name>
                <type>org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureInterface</type>
            </parameter>
            <parameter>
                <name>options</name>
                <type>org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureOptions</type>
            </parameter>
        </method>
        <method>
            <name>addSignature3</name>
            <comment>Add a signature to be created using the instance of given interface.
 &lt;p&gt;
 Only one signature may be added in a document. To sign several times, load
 document, add signature, save incremental and close again.
sigObject: is the PDSignatureField model
signatureInterface: is an interface whose implementation provides signing
          capabilities. Can be null if external signing if used.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>sigObject</name>
                <type>org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature</type>
            </parameter>
            <parameter>
                <name>signatureInterface</name>
                <type>org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureInterface</type>
            </parameter>
        </method>
        <method>
            <name>protect</name>
            <comment>Protects the document with a protection policy. The document content will
 be really encrypted when it will be saved. This method only marks the
 document for encryption. It also calls
 {@link #setAllSecurityToBeRemoved(boolean)} with a false argument if it was
 set to true previously and logs a warning.
policy: The protection policy.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>policy</name>
                <type>org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy</type>
            </parameter>
        </method>
        <method>
            <name>addSignature2</name>
            <comment>Add parameters of signature to be created externally. See
 {@link #saveIncrementalForExternalSigning(OutputStream)} method description
 on external signature creation scenario details.
 &lt;p&gt;
 Only one signature may be added in a document. To sign several times, load
 document, add signature, save incremental and close again.
sigObject: is the PDSignatureField model
options: signature options</comment>
            <returntype>void</returntype>
            <parameter>
                <name>sigObject</name>
                <type>org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature</type>
            </parameter>
            <parameter>
                <name>options</name>
                <type>org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureOptions</type>
            </parameter>
        </method>
        <method>
            <name>close</name>
            <comment>This will close the underlying COSDocument object.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>registerTrueTypeFontForClosing</name>
            <comment>For internal PDFBox use when creating PDF documents: register a
 TrueTypeFont to make sure it is closed when the PDDocument is closed to
 avoid memory leaks. Users don't have to call this method, it is done by the
 appropriate PDFont classes.
ttf: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>ttf</name>
                <type>org.apache.fontbox.ttf.TrueTypeFont</type>
            </parameter>
        </method>
        <method>
            <name>saveIncremental</name>
            <comment>Save the PDF as an incremental update. This is only possible if the PDF was
 loaded from a file or a stream, not if the document was created in PDFBox
 itself. There must be a path of objects that have
 {@link COSUpdateInfo#isNeedToBeUpdated()} set, starting from the document
 catalog. For signatures this is taken care by PDFBox itself.
 &lt;p&gt;
 Other usages of this method are for experienced users only. You will
 usually never need it. It is useful only if you are required to keep the
 current revision and append the changes. A typical use case is changing a
 signed file without invalidating the signature.
output: stream to write to. It will be closed when done. It &lt;i&gt;&lt;b&gt;must
          never&lt;/b&gt;&lt;/i&gt; point to the source file or that one will be harmed!</comment>
            <returntype>void</returntype>
            <parameter>
                <name>output</name>
                <type>java.io.OutputStream</type>
            </parameter>
        </method>
        <method>
            <name>Initialize4</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>doc</name>
                <type>org.apache.pdfbox.pdmodel.PDDocument</type>
            </parameter>
        </method>
        <method>
            <name>Initialize3</name>
            <comment>Constructor that uses an existing document. The COSDocument that is passed
 in must be valid.
doc: The COSDocument that this document wraps.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>doc</name>
                <type>org.apache.pdfbox.cos.COSDocument</type>
            </parameter>
        </method>
        <method>
            <name>Initialize2</name>
            <comment>Creates an empty PDF document. You need to add at least one page for the
 document to be valid.
memUsageSetting: defines how memory is used for buffering PDF streams</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>memUsageSetting</name>
                <type>org.apache.pdfbox.io.MemoryUsageSetting</type>
            </parameter>
        </method>
        <method>
            <name>removePage2</name>
            <comment>Remove the page from the document.
page: The page to remove from the document.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>page</name>
                <type>org.apache.pdfbox.pdmodel.PDPage</type>
            </parameter>
        </method>
        <method>
            <name>importPage</name>
            <comment>This will import and copy the contents from another location. Currently the
 content stream is stored in a scratch file. The scratch file is associated
 with the document. If you are adding a page to this document from another
 document and want to copy the contents to this document's scratch file then
 use this method otherwise just use the {@link #addPage addPage()} method.
 &lt;p&gt;
 Unlike {@link #addPage addPage()}, this method creates a new PDPage object.
 If your page has annotations, and if these link to pages not in the target
 document, then the target document might become huge. What you need to do
 is to delete page references of such annotations. See
 &lt;a href="http://stackoverflow.com/a/35477351/535646"&gt;here&lt;/a&gt; for how to do
 this.
 &lt;p&gt;
 Inherited (global) resources are ignored because these can contain
 resources not needed for this page which could bloat your document, see
 &lt;a href="https://issues.apache.org/jira/browse/PDFBOX-28"&gt;PDFBOX-28&lt;/a&gt; and
 related issues. If you need them, call
 &lt;code&gt;importedPage.setResources(page.getResources());&lt;/code&gt;
 &lt;p&gt;
 This method should only be used to import a page from a loaded document,
 not from a generated document because these can contain unfinished parts,
 e.g. font subsetting information.
page: The page to import.
Return type: @return:The page that was imported.</comment>
            <returntype>org.apache.pdfbox.pdmodel.PDPage</returntype>
            <parameter>
                <name>page</name>
                <type>org.apache.pdfbox.pdmodel.PDPage</type>
            </parameter>
        </method>
        <method>
            <name>addSignatureField</name>
            <comment>This will add a list of signature fields to the document.
sigFields: are the PDSignatureFields that should be added to the document
signatureInterface: is an interface whose implementation provides signing
          capabilities. Can be null if external signing if used.
options: signature options</comment>
            <returntype>void</returntype>
            <parameter>
                <name>sigFields</name>
                <type>java.util.List</type>
            </parameter>
            <parameter>
                <name>signatureInterface</name>
                <type>org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureInterface</type>
            </parameter>
            <parameter>
                <name>options</name>
                <type>org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureOptions</type>
            </parameter>
        </method>
        <property>
            <name>LastSignatureDictionary</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature</returntype>
            <comment>This will return the last signature from the field tree. Note that this may
 not be the last in time when empty signature fields are created first but
 signed after other fields.</comment>
        </property>
        <property>
            <name>Encrypted</name>
            <returntype>boolean</returntype>
            <comment>This will tell if this document is encrypted or not.</comment>
        </property>
        <property>
            <name>DocumentInformation</name>
            <returntype>org.apache.pdfbox.pdmodel.PDDocumentInformation</returntype>
            <parameter>
                <name>info</name>
                <type>org.apache.pdfbox.pdmodel.PDDocumentInformation</type>
            </parameter>
            <comment>This will get the document info dictionary. If it doesn't exist, an empty
 document info dictionary is created in the document trailer.
 &lt;p&gt;
 In PDF 2.0 this is deprecated except for two entries, /CreationDate and
 /ModDate. For any other document level metadata, a metadata stream should
 be used instead, see {@link PDDocumentCatalog#getMetadata()}.</comment>
        </property>
        <property>
            <name>DocumentId</name>
            <returntype>java.lang.Long</returntype>
            <parameter>
                <name>docId</name>
                <type>java.lang.Long</type>
            </parameter>
            <comment>Provides the document ID.</comment>
        </property>
        <property>
            <name>Encryption</name>
            <returntype>org.apache.pdfbox.pdmodel.encryption.PDEncryption</returntype>
            <comment>This will get the encryption dictionary for this document. This will still
 return the parameters if the document was decrypted. As the encryption
 architecture in PDF documents is plugable this returns an abstract class,
 but the only supported subclass at this time is a PDStandardEncryption
 object.</comment>
        </property>
        <property>
            <name>NumberOfPages</name>
            <returntype>int</returntype>
            <comment>This will return the total page count of the PDF document.</comment>
        </property>
        <property>
            <name>Document</name>
            <returntype>org.apache.pdfbox.cos.COSDocument</returntype>
            <comment>This will get the low level document.</comment>
        </property>
        <property>
            <name>EncryptionDictionary</name>
            <parameter>
                <name>encryption</name>
                <type>org.apache.pdfbox.pdmodel.encryption.PDEncryption</type>
            </parameter>
            <comment>This will set the encryption dictionary for this document.</comment>
        </property>
        <property>
            <name>DocumentCatalog</name>
            <returntype>de.donmanfred.pdfbox.PDDocumentCatalogwrapper</returntype>
            <comment>This will get the document CATALOG. This is guaranteed to not return null.</comment>
        </property>
        <property>
            <name>CurrentAccessPermission</name>
            <returntype>org.apache.pdfbox.pdmodel.encryption.AccessPermission</returntype>
            <comment>Returns the access permissions granted when the document was decrypted. If
 the document was not decrypted this method returns the access permission
 for a document owner (ie can do everything). The returned object is in read
 only mode so that permissions cannot be changed. Methods providing access
 to content should rely on this object to verify if the current user is
 allowed to proceed.</comment>
        </property>
        <property>
            <name>Pages</name>
            <returntype>org.apache.pdfbox.pdmodel.PDPageTree</returntype>
            <comment>Returns the page tree.</comment>
        </property>
        <property>
            <name>SignatureFields</name>
            <returntype>java.util.List</returntype>
            <comment>Retrieve all signature fields from the document.</comment>
        </property>
        <property>
            <name>SignatureDictionaries</name>
            <returntype>java.util.List</returntype>
            <comment>Retrieve all signature dictionaries from the document.</comment>
        </property>
        <property>
            <name>Version</name>
            <returntype>float</returntype>
            <parameter>
                <name>newVersion</name>
                <type>float</type>
            </parameter>
            <comment>Returns the PDF specification version this document conforms to.</comment>
        </property>
        <property>
            <name>AllSecurityToBeRemoved</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>removeAllSecurity</name>
                <type>boolean</type>
            </parameter>
            <comment>Indicates if all security is removed or not when writing the pdf.</comment>
        </property>
        <property>
            <name>ResourceCache</name>
            <returntype>org.apache.pdfbox.pdmodel.ResourceCache</returntype>
            <parameter>
                <name>resourceCache</name>
                <type>org.apache.pdfbox.pdmodel.ResourceCache</type>
            </parameter>
            <comment>Returns the resource cache associated with this document, or null if there
 is none.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.PDFBoxwrapper</name>
        <shortname>PDFBox</shortname>
        <owner>process</owner>
        <method>
            <name>setFieldValue</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getPage</name>
            <comment></comment>
            <returntype>de.donmanfred.pdfbox.PDPagewrapper</returntype>
            <parameter>
                <name>pageIndex</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>PDFtoText</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>srcFilename</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>outputFilename</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ExportDocumenttopng</name>
            <comment>
document: 
pdfFilename: 
dpi: page set to -1 to exxport all pages. Otherwise use the page index
          of the page you want to export. Note to use zerobased pagenumbers.
          The exported pngs get a +1 when writing.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>document</name>
                <type>org.apache.pdfbox.pdmodel.PDDocument</type>
            </parameter>
            <parameter>
                <name>pdfFilename</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>dpi</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>pageno</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getField</name>
            <comment></comment>
            <returntype>org.apache.pdfbox.pdmodel.interactive.form.PDField</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>save</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>outputPdfFile</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>addBarcode39</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>document</name>
                <type>org.apache.pdfbox.pdmodel.PDDocument</type>
            </parameter>
            <parameter>
                <name>page</name>
                <type>org.apache.pdfbox.pdmodel.PDPage</type>
            </parameter>
            <parameter>
                <name>text</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>dpi</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>addBarcodeImage</name>
            <comment>Adds a BarcodeImage using ZXING library Params are - contentStream the
 stream to write to - doc the PDDocument to create a PDImageXObject for -
 barcodetype a String representating the Type of Barcode you want to create.
 Possible values are: AZTEC, CODABAR, CODE_128, CODE_39, CODE_93, DATA_MATRIX, 
 EAN_13, EAN_8, ITF, MAXICODE, PDF_417, QR_CODE, RSS_14, RSS_EXPANDED, UPC_A,
 UPC_E, UPC_EAN_EXTENSION
 
 - text the Text to use in Barcode 
 - posx, posy, width and height are for the Position of the Barcode
 throws IOException
 throws WriterException</comment>
            <returntype>void</returntype>
            <parameter>
                <name>contentStream</name>
                <type>org.apache.pdfbox.pdmodel.PDPageContentStream</type>
            </parameter>
            <parameter>
                <name>doc</name>
                <type>org.apache.pdfbox.pdmodel.PDDocument</type>
            </parameter>
            <parameter>
                <name>barcodetype</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>text</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>posx</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>posy</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>width</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>height</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>inputPdfFile</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>addSignature</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>sigObject</name>
                <type>org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature</type>
            </parameter>
        </method>
        <method>
            <name>splitpdf</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>sourcepdf</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>destinationfilenamePrefix</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Initialize4</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>input</name>
                <type>java.io.InputStream</type>
            </parameter>
            <parameter>
                <name>password</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Initialize3</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>input</name>
                <type>java.io.InputStream</type>
            </parameter>
        </method>
        <method>
            <name>Initialize2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>inputPdfFile</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>password</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getPDFName</name>
            <comment></comment>
            <returntype>org.apache.pdfbox.cos.COSName</returntype>
            <parameter>
                <name>aName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>addPage</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>page</name>
                <type>org.apache.pdfbox.pdmodel.PDPage</type>
            </parameter>
        </method>
        <method>
            <name>addBarcodePdf417</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>document</name>
                <type>org.apache.pdfbox.pdmodel.PDDocument</type>
            </parameter>
            <parameter>
                <name>page</name>
                <type>org.apache.pdfbox.pdmodel.PDPage</type>
            </parameter>
            <parameter>
                <name>text</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>dpi</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>addBarcode128</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>document</name>
                <type>org.apache.pdfbox.pdmodel.PDDocument</type>
            </parameter>
            <parameter>
                <name>page</name>
                <type>org.apache.pdfbox.pdmodel.PDPage</type>
            </parameter>
            <parameter>
                <name>text</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>dpi</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>ExportDocumenttoImage</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>document</name>
                <type>org.apache.pdfbox.pdmodel.PDDocument</type>
            </parameter>
            <parameter>
                <name>pdfFilename</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>dpi</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>pageno</name>
                <type>int</type>
            </parameter>
        </method>
        <property>
            <name>DocumentInformation</name>
            <returntype>org.apache.pdfbox.pdmodel.PDDocumentInformation</returntype>
            <comment></comment>
        </property>
        <property>
            <name>DocumentId</name>
            <returntype>java.lang.Long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>NumberOfPages</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Document</name>
            <returntype>de.donmanfred.pdfbox.PDDocumentwrapper</returntype>
            <comment></comment>
        </property>
        <property>
            <name>AcroFormFDF</name>
            <returntype>org.apache.pdfbox.pdmodel.fdf.FDFDocument</returntype>
            <comment></comment>
        </property>
        <property>
            <name>DocumentCatalog</name>
            <returntype>de.donmanfred.pdfbox.PDDocumentCatalogwrapper</returntype>
            <comment></comment>
        </property>
        <property>
            <name>CurrentAccessPermission</name>
            <returntype>org.apache.pdfbox.pdmodel.encryption.AccessPermission</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Pages</name>
            <returntype>de.donmanfred.pdfbox.PDPageTreewrapper</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SignatureDictionaries</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SignatureFields</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Fields</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Version</name>
            <returntype>float</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ResourceCache</name>
            <returntype>org.apache.pdfbox.pdmodel.ResourceCache</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.PDFormXObjectwrapper</name>
        <shortname>PDFormXObject</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>doc</name>
                <type>org.apache.pdfbox.pdmodel.PDDocument</type>
            </parameter>
        </method>
        <property>
            <name>Group</name>
            <returntype>org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroupAttributes</returntype>
            <comment>Returns the group attributes dictionary.</comment>
        </property>
        <property>
            <name>ContentStream</name>
            <returntype>org.apache.pdfbox.pdmodel.common.PDStream</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Contents</name>
            <returntype>java.io.InputStream</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Matrix</name>
            <returntype>org.apache.pdfbox.util.Matrix</returntype>
            <comment>This will get the optional matrix of an XObjectForm. It maps the form space
 to user space.</comment>
        </property>
        <property>
            <name>StructParents</name>
            <returntype>int</returntype>
            <parameter>
                <name>structParent</name>
                <type>int</type>
            </parameter>
            <comment>This will get the key of this XObjectForm in the structural parent tree.
 Required if the form XObject contains marked-content sequences that are
 structural content items.</comment>
        </property>
        <property>
            <name>BBox</name>
            <returntype>org.apache.pdfbox.pdmodel.common.PDRectangle</returntype>
            <parameter>
                <name>bbox</name>
                <type>org.apache.pdfbox.pdmodel.common.PDRectangle</type>
            </parameter>
            <comment>An array of four numbers in the form coordinate system (see below), giving
 the coordinates of the left, bottom, right, and top edges, respectively, of
 the form XObject's bounding box. These boundaries are used to clip the form
 XObject and to determine its size for caching.</comment>
        </property>
        <property>
            <name>FormType</name>
            <returntype>int</returntype>
            <parameter>
                <name>formType</name>
                <type>int</type>
            </parameter>
            <comment>This will get the form type, currently 1 is the only form type.</comment>
        </property>
        <property>
            <name>Resources</name>
            <returntype>org.apache.pdfbox.pdmodel.PDResources</returntype>
            <parameter>
                <name>resources</name>
                <type>org.apache.pdfbox.pdmodel.PDResources</type>
            </parameter>
            <comment>This will get the resources for this Form XObject. This will return null if
 no resources are available.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.PDFPageablewrapper</name>
        <shortname>PDFPageable</shortname>
        <objectwrapper>org.apache.pdfbox.printing.PDFPageable</objectwrapper>
        <owner>process</owner>
        <method>
            <name>getPrintable</name>
            <comment></comment>
            <returntype>java.awt.print.Printable</returntype>
            <parameter>
                <name>i</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Creates a new PDFPageable.
document: the document to print</comment>
            <returntype>void</returntype>
            <parameter>
                <name>document</name>
                <type>org.apache.pdfbox.pdmodel.PDDocument</type>
            </parameter>
        </method>
        <method>
            <name>Initialize4</name>
            <comment>Creates a new PDFPageable with the given page orientation and with optional page borders
 shown. The image will be rasterized at the given DPI before being sent to the printer.
document: the document to print
orientation: page orientation policy
showPageBorder: true if page borders are to be printed
dpi: if non-zero then the image will be rasterized at the given DPI
Return type: @return:</comment>
            <returntype>void</returntype>
            <parameter>
                <name>document</name>
                <type>org.apache.pdfbox.pdmodel.PDDocument</type>
            </parameter>
            <parameter>
                <name>orientation</name>
                <type EnumType="true">org.apache.pdfbox.printing.Orientation</type>
            </parameter>
            <parameter>
                <name>showPageBorder</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>dpi</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>Initialize3</name>
            <comment>Creates a new PDFPageable with the given page orientation and with optional page borders
 shown. The image will be rasterized at the given DPI before being sent to the printer.
document: the document to print
orientation: page orientation policy
showPageBorder: true if page borders are to be printed
Return type: @return:</comment>
            <returntype>void</returntype>
            <parameter>
                <name>document</name>
                <type>org.apache.pdfbox.pdmodel.PDDocument</type>
            </parameter>
            <parameter>
                <name>orientation</name>
                <type EnumType="true">org.apache.pdfbox.printing.Orientation</type>
            </parameter>
            <parameter>
                <name>showPageBorder</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>Initialize2</name>
            <comment>Creates a new PDFPageable with the given page orientation.
document: the document to print
orientation: page orientation policy</comment>
            <returntype>void</returntype>
            <parameter>
                <name>document</name>
                <type>org.apache.pdfbox.pdmodel.PDDocument</type>
            </parameter>
            <parameter>
                <name>orientation</name>
                <type EnumType="true">org.apache.pdfbox.printing.Orientation</type>
            </parameter>
        </method>
        <method>
            <name>getPageFormat</name>
            <comment>{@inheritDoc}
 
 Returns the actual physical size of the pages in the PDF file. May not fit
 the local printer.</comment>
            <returntype>java.awt.print.PageFormat</returntype>
            <parameter>
                <name>pageIndex</name>
                <type>int</type>
            </parameter>
        </method>
        <property>
            <name>SubsamplingAllowed</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>subsamplingAllowed</name>
                <type>boolean</type>
            </parameter>
            <comment>Value indicating if the renderer is allowed to subsample images before
 drawing, according to image dimensions and requested scale.

 Subsampling may be faster and less memory-intensive in some cases, but it
 may also lead to loss of quality, especially in images with high spatial
 frequency.</comment>
        </property>
        <property>
            <name>NumberOfPages</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>RenderingHints</name>
            <returntype>java.awt.RenderingHints</returntype>
            <parameter>
                <name>renderingHints</name>
                <type>java.awt.RenderingHints</type>
            </parameter>
            <comment>Get the rendering hints.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.PDNameTreeNodewrapper</name>
        <shortname>PDNameTreeNode</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.common.PDNameTreeNode</objectwrapper>
        <owner>process</owner>
        <method>
            <name>setNames</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>attachment</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>fs</name>
                <type>org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>treenode</name>
                <type>org.apache.pdfbox.pdmodel.common.PDNameTreeNode</type>
            </parameter>
        </method>
        <method>
            <name>getInheritableAttribute</name>
            <comment>Returns the given attribute, inheriting from parent tree nodes if
 necessary.
node: page object
key: the key to look up
Return type: @return:COS value for the given key</comment>
            <returntype>org.apache.pdfbox.cos.COSBase</returntype>
            <parameter>
                <name>node</name>
                <type>org.apache.pdfbox.cos.COSDictionary</type>
            </parameter>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <property>
            <name>Names</name>
            <returntype>java.util.Map</returntype>
            <comment>This will return a map of names on this level. The key will be a string,
 and the value will depend on where this class is being used.</comment>
        </property>
        <property>
            <name>RootNode</name>
            <returntype>boolean</returntype>
            <comment>Determines if this is a root node or not.</comment>
        </property>
        <property>
            <name>Parent</name>
            <returntype>org.apache.pdfbox.pdmodel.common.PDNameTreeNode</returntype>
            <parameter>
                <name>parentNode</name>
                <type>org.apache.pdfbox.pdmodel.common.PDNameTreeNode</type>
            </parameter>
            <comment>Returns the parent node.</comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Kids</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>kids</name>
                <type>java.util.List</type>
            </parameter>
            <comment>Return the children of this node. This list will contain PDNameTreeNode
 objects.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.PDPageAdditionalActionswrapper</name>
        <shortname>PDPageAdditionalActions</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.action.PDPageAdditionalActions</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <property>
            <name>C</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.action.PDAction</returntype>
            <parameter>
                <name>c</name>
                <type>org.apache.pdfbox.pdmodel.interactive.action.PDAction</type>
            </parameter>
            <comment>This will get an action to be performed when the page is closed. This
 action applies to the page being closed, and is executed before any other
 page opened.</comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment>Convert this standard java object to a COS object.</comment>
        </property>
        <property>
            <name>O</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.action.PDAction</returntype>
            <parameter>
                <name>o</name>
                <type>org.apache.pdfbox.pdmodel.interactive.action.PDAction</type>
            </parameter>
            <comment>This will get an action to be performed when the page is opened. This
 action is independent of any that may be defined by the OpenAction entry in
 the document catalog, and is executed after such an action.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.PDPageContentStreamwrapper</name>
        <shortname>PDPageContentStream</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.PDPageContentStream</objectwrapper>
        <owner>process</owner>
        <method>
            <name>beginMarkedContent</name>
            <comment>Begin a marked content sequence.
tag: the tag</comment>
            <returntype>void</returntype>
            <parameter>
                <name>tag</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>setNonStrokingColor</name>
            <comment>Set the non-stroking color using an AWT color. Conversion uses the default
 sRGB color space.
color: The color to set.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>r</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>g</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>b</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>closePath</name>
            <comment>Closes the current subpath.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>showText</name>
            <comment>Shows the given text at the location specified by the current text matrix.
text: The Unicode text to show.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>text</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>endMarkedContent</name>
            <comment>End a marked content sequence.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Create a new PDPage content stream.
document: The document the page is part of.
sourcePage: The page to write the contents to.
appendContent: Indicates whether content will be overwritten, appended or
          prepended.
compress: Tell if the content stream should compress the page contents.
resetContext: Tell if the graphic context should be reset. This is only relevant
          when the appendContent parameter is set to
          {@link AppendMode#APPEND}. You should use this when appending to
          an existing stream, because the existing stream may have changed
          graphic properties (e.g. scaling, rotation).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>document</name>
                <type>org.apache.pdfbox.pdmodel.PDDocument</type>
            </parameter>
            <parameter>
                <name>sourcePage</name>
                <type>org.apache.pdfbox.pdmodel.PDPage</type>
            </parameter>
            <parameter>
                <name>appendContent</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>compress</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>resetContext</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>fillRect</name>
            <comment>Fill a rectangle on the page using the current non stroking color.
x: The lower left x coordinate.
y: The lower left y coordinate.
width: The width of the rectangle.
height: The height of the rectangle.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>fillPolygon</name>
            <comment>Draw and fill a polygon on the page using the current stroking / non
 stroking colors.
x: x coordinate of each points
y: y coordinate of each points</comment>
            <returntype>void</returntype>
            <parameter>
                <name>x</name>
                <type>float[]</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float[]</type>
            </parameter>
        </method>
        <method>
            <name>drawForm</name>
            <comment>Draws the given Form XObject at the current location.
form: Form XObject</comment>
            <returntype>void</returntype>
            <parameter>
                <name>form</name>
                <type>org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject</type>
            </parameter>
        </method>
        <method>
            <name>setTextRotation</name>
            <comment>The Tm operator. Sets the text matrix to the given rotation and translation
 values. A current text matrix will be replaced with the new one.
angle: The angle used for the counterclockwise rotation in radians.
tx: The translation value in x-direction.
ty: The translation value in y-direction.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>angle</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>tx</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>ty</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>endText</name>
            <comment>End some text operations.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>setFont</name>
            <comment>Set the font and font size to draw text with.
font: The font to use.
fontSize: The font size to draw the text.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>font</name>
                <type>org.apache.pdfbox.pdmodel.font.PDFont</type>
            </parameter>
            <parameter>
                <name>fontSize</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>addComment</name>
            <comment>Write a comment line.
comment: the comment to be added to the content stream.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>comment</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>newLineAtOffset</name>
            <comment>The Td operator. Move to the start of the next line, offset from the start
 of the current line by (tx, ty).
tx: The x translation.
ty: The y translation.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>tx</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>ty</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>closeSubPath</name>
            <comment>Closes the current subpath.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>addBezier31</name>
            <comment>Append a cubic Bézier curve to the current path. The curve extends from the
 current point to the point (x3 , y3 ), using (x1 , y1 ) and (x3 , y3 ) as
 the Bézier control points/
x1: x coordinate of the point 1
y1: y coordinate of the point 1
x3: x coordinate of the point 3
y3: y coordinate of the point 3</comment>
            <returntype>void</returntype>
            <parameter>
                <name>x1</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y1</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>x3</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y3</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>addBezier32</name>
            <comment>Append a cubic Bézier curve to the current path. The curve extends from the
 current point to the point (x3 , y3 ), using the current point and (x2 , y2
 ) as the Bézier control points/
x2: x coordinate of the point 2
y2: y coordinate of the point 2
x3: x coordinate of the point 3
y3: y coordinate of the point 3</comment>
            <returntype>void</returntype>
            <parameter>
                <name>x2</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y2</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>x3</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y3</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>curveTo1</name>
            <comment>Append a cubic Bézier curve to the current path. The curve extends from the
 current point to the point (x3, y3), using (x1, y1) and (x3, y3) as the
 Bézier control points.
x1: x coordinate of the point 1
y1: y coordinate of the point 1
x3: x coordinate of the point 3
y3: y coordinate of the point 3</comment>
            <returntype>void</returntype>
            <parameter>
                <name>x1</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y1</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>x3</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y3</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>fillAndStrokeEvenOdd</name>
            <comment>Fill and then stroke the path, using the even-odd rule to determine the
 region to fill. This shall produce the same result as constructing two
 identical path objects, painting the first with {@link #fillEvenOdd() } and
 the second with {@link #stroke() }.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>clipPath</name>
            <comment>Clip path.
windingRule: the winding rule to be used for clipping</comment>
            <returntype>void</returntype>
            <parameter>
                <name>windingRule</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>curveTo2</name>
            <comment>Append a cubic Bézier curve to the current path. The curve extends from the
 current point to the point (x3, y3), using the current point and (x2, y2)
 as the Bézier control points.
x2: x coordinate of the point 2
y2: y coordinate of the point 2
x3: x coordinate of the point 3
y3: y coordinate of the point 3</comment>
            <returntype>void</returntype>
            <parameter>
                <name>x2</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y2</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>x3</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y3</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>shadingFill</name>
            <comment>Fills the clipping area with the given shading.
shading: Shading resource</comment>
            <returntype>void</returntype>
            <parameter>
                <name>shading</name>
                <type>org.apache.pdfbox.pdmodel.graphics.shading.PDShading</type>
            </parameter>
        </method>
        <method>
            <name>addRect</name>
            <comment>Add a rectangle to the current path.
x: The lower left x coordinate.
y: The lower left y coordinate.
width: The width of the rectangle.
height: The height of the rectangle.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>fill</name>
            <comment>Fill the path.
windingRule: the winding rule to be used for filling</comment>
            <returntype>void</returntype>
            <parameter>
                <name>windingRule</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>setTextMatrix</name>
            <comment>The Tm operator. Sets the text matrix to the given values. A current text
 matrix will be replaced with the new one.
a: The a value of the matrix.
b: The b value of the matrix.
c: The c value of the matrix.
d: The d value of the matrix.
e: The e value of the matrix.
f: The f value of the matrix.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>a</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>b</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>c</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>d</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>e</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>f</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>beginMarkedContentSequence</name>
            <comment>Begin a marked content sequence.
tag: the tag</comment>
            <returntype>void</returntype>
            <parameter>
                <name>tag</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>appendCOSName</name>
            <comment>This will append a {@link COSName} to the content stream.
name: the name</comment>
            <returntype>void</returntype>
            <parameter>
                <name>name</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>addLine</name>
            <comment>add a line to the current path.
xStart: The start x coordinate.
yStart: The start y coordinate.
xEnd: The end x coordinate.
yEnd: The end y coordinate.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>xStart</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>yStart</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>xEnd</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>yEnd</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>concatenate2CTM</name>
            <comment>The cm operator. Concatenates the current transformation matrix with the
 given values.
a: The a value of the matrix.
b: The b value of the matrix.
c: The c value of the matrix.
d: The d value of the matrix.
e: The e value of the matrix.
f: The f value of the matrix.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>a</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>b</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>c</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>d</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>e</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>f</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>closeAndFillAndStrokeEvenOdd</name>
            <comment>Close, fill, and then stroke the path, using the even-odd rule to determine
 the region to fill. This shall have the same effect as the sequence
 {@link #closePath() } and then {@link #fillAndStrokeEvenOdd() }.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>endMarkedContentSequence</name>
            <comment>End a marked content sequence.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>setTextTranslation</name>
            <comment>The Tm operator. Sets the text matrix to the given translation values. A
 current text matrix will be replaced with the new one.
tx: The translation value in x-direction.
ty: The translation value in y-direction.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>tx</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>ty</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>fill2</name>
            <comment>Fills the path using the nonzero winding number rule.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>newLine</name>
            <comment>Move to the start of the next line of text. Requires the leading (see
 {@link #setLeading}) to have been set.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>closeAndStroke</name>
            <comment>Close and stroke the path.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>setLineDashPattern</name>
            <comment>Set the line dash pattern.
pattern: The pattern array
phase: The phase of the pattern</comment>
            <returntype>void</returntype>
            <parameter>
                <name>pattern</name>
                <type>float[]</type>
            </parameter>
            <parameter>
                <name>phase</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>setTextScaling</name>
            <comment>The Tm operator. Sets the text matrix to the given scaling and translation
 values. A current text matrix will be replaced with the new one.
sx: The scaling factor in x-direction.
sy: The scaling factor in y-direction.
tx: The translation value in x-direction.
ty: The translation value in y-direction.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>sx</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>sy</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>tx</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>ty</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>lineTo</name>
            <comment>Draw a line from the current position to the given coordinates.
x: The x coordinate.
y: The y coordinate.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>addBezier312</name>
            <comment>Append a cubic Bézier curve to the current path. The curve extends from the
 current point to the point (x3 , y3 ), using (x1 , y1 ) and (x2 , y2 ) as
 the Bézier control points
x1: x coordinate of the point 1
y1: y coordinate of the point 1
x2: x coordinate of the point 2
y2: y coordinate of the point 2
x3: x coordinate of the point 3
y3: y coordinate of the point 3</comment>
            <returntype>void</returntype>
            <parameter>
                <name>x1</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y1</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>x2</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y2</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>x3</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y3</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>drawString</name>
            <comment>This will draw a string at the current location on the screen.
text: The text to draw.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>text</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setNonStrokingColor7</name>
            <comment>Set the non-stroking color in the DeviceCMYK color space. Range is 0..1.
c: The cyan value.
m: The magenta value.
y: The yellow value.
k: The black value.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>c</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>m</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>k</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>transform</name>
            <comment>The cm operator. Concatenates the given matrix with the current
 transformation matrix (CTM), which maps user space coordinates used within
 a PDF content stream into output device coordinates. More details on
 coordinates can be found in the PDF 32000 specification, 8.3.2 Coordinate
 Spaces.
matrix: the transformation matrix</comment>
            <returntype>void</returntype>
            <parameter>
                <name>matrix</name>
                <type>org.apache.pdfbox.util.Matrix</type>
            </parameter>
        </method>
        <method>
            <name>addPolygon</name>
            <comment>Add a polygon to the current path.
x: x coordinate of each points
y: y coordinate of each points</comment>
            <returntype>void</returntype>
            <parameter>
                <name>x</name>
                <type>float[]</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float[]</type>
            </parameter>
        </method>
        <method>
            <name>setNonStrokingColor6</name>
            <comment>Set the non-stroking color in the DeviceCMYK color space. Range is 0..1.
c: The cyan value.
m: The magenta value.
y: The yellow value.
k: The black value.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>c</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>m</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>k</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>setStrokingColorCMYK</name>
            <comment>Set the stroking color in the DeviceCMYK color space. Range is 0..255.
c: The cyan value.
m: The magenta value.
y: The yellow value.
k: The black value.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>c</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>m</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>k</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>setNonStrokingColor5</name>
            <comment>Set the non-stroking color in the DeviceCMYK color space. Range is 0..255.
c: The cyan value.
m: The magenta value.
y: The yellow value.
k: The black value.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>c</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>m</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>k</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>appendRawCommands2</name>
            <comment>This will append raw commands to the content stream.
commands: The commands to append to the stream.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>commands</name>
                <type>byte[]</type>
            </parameter>
        </method>
        <method>
            <name>appendRawCommands3</name>
            <comment>This will append raw commands to the content stream.
data: Append a raw byte to the stream.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>data</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>appendRawCommands4</name>
            <comment>This will append raw commands to the content stream.
data: Append a formatted double value to the stream.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>data</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>drawImage2</name>
            <comment>Draw an image at the x,y coordinates, with the given size.
image: The image to draw.
x: The x-coordinate to draw the image.
y: The y-coordinate to draw the image.
width: The width to draw the image.
height: The height to draw the image.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>image</name>
                <type>org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>appendRawCommands5</name>
            <comment>This will append raw commands to the content stream.
data: Append a formatted float value to the stream.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>data</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>drawImage3</name>
            <comment>Draw an image at the origin with the given transformation matrix.
image: The image to draw.
matrix: The transformation matrix to apply to the image.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>image</name>
                <type>org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject</type>
            </parameter>
            <parameter>
                <name>matrix</name>
                <type>org.apache.pdfbox.util.Matrix</type>
            </parameter>
        </method>
        <method>
            <name>drawXObject</name>
            <comment>Draw an xobject(form or image) at the x,y coordinates and a certain width
 and height.
xobject: The xobject to draw.
x: The x-coordinate to draw the image.
y: The y-coordinate to draw the image.
width: The width of the image to draw.
height: The height of the image to draw.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>xobject</name>
                <type>org.apache.pdfbox.pdmodel.graphics.PDXObject</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>close</name>
            <comment>Close the content stream. This must be called when you are done with this
 object.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>drawImage5</name>
            <comment>Draw an inline image at the x,y coordinates and a certain width and height.
inlineImage: The inline image to draw.
x: The x-coordinate to draw the inline image.
y: The y-coordinate to draw the inline image.
width: The width of the inline image to draw.
height: The height of the inline image to draw.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>inlineImage</name>
                <type>org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>saveGraphicsState</name>
            <comment>q operator. Saves the current graphics state.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>drawInlineImage2</name>
            <comment>Draw an inline image at the x,y coordinates and a certain width and height.
inlineImage: The inline image to draw.
x: The x-coordinate to draw the inline image.
y: The y-coordinate to draw the inline image.
width: The width of the inline image to draw.
height: The height of the inline image to draw.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>inlineImage</name>
                <type>org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>appendRawCommands</name>
            <comment>This will append raw commands to the content stream.
commands: The commands to append to the stream.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>commands</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>drawInlineImage4</name>
            <comment>Draw an inline image at the x,y coordinates, with the default size of the
 image.
inlineImage: The inline image to draw.
x: The x-coordinate to draw the inline image.
y: The y-coordinate to draw the inline image.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>inlineImage</name>
                <type>org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>setStrokingColor</name>
            <comment>Set the stroking color in the DeviceRGB color space. Range is 0..255.
r: The red value
g: The green value.
b: The blue value.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>r</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>g</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>b</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>curveTo</name>
            <comment>Append a cubic Bézier curve to the current path. The curve extends from the
 current point to the point (x3, y3), using (x1, y1) and (x2, y2) as the
 Bézier control points.
x1: x coordinate of the point 1
y1: y coordinate of the point 1
x2: x coordinate of the point 2
y2: y coordinate of the point 2
x3: x coordinate of the point 3
y3: y coordinate of the point 3</comment>
            <returntype>void</returntype>
            <parameter>
                <name>x1</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y1</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>x2</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y2</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>x3</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y3</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>showTextWithPositioning</name>
            <comment>Shows the given text at the location specified by the current text matrix
 with the given interspersed positioning. This allows the user to
 efficiently position each glyph or sequence of glyphs.
textWithPositioningArray: An array consisting of String and Float types. Each String is
          output to the page using the current text matrix. Using the
          default coordinate system, each interspersed number adjusts the
          current text matrix by translating to the left or down for
          horizontal and vertical text respectively. The number is expressed
          in thousands of a text space unit, and may be negative.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>textWithPositioningArray</name>
                <type>java.lang.Object[]</type>
            </parameter>
        </method>
        <method>
            <name>restoreGraphicsState</name>
            <comment>Q operator. Restores the current graphics state.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>drawLine</name>
            <comment>Draw a line on the page using the current stroking color and the current
 line width.
xStart: The start x coordinate.
yStart: The start y coordinate.
xEnd: The end x coordinate.
yEnd: The end y coordinate.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>xStart</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>yStart</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>xEnd</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>yEnd</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>clipEvenOdd</name>
            <comment>Intersects the current clipping path with the current path, using the
 even-odd rule.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>closeAndFillAndStroke</name>
            <comment>Close, fill, and then stroke the path, using the nonzero winding number
 rule to determine the region to fill. This shall have the same effect as
 the sequence {@link #closePath() } and then {@link #fillAndStroke() }.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>stroke</name>
            <comment>Stroke the path.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>moveTextPositionByAmount</name>
            <comment>The Td operator. A current text matrix will be replaced with a new one (1 0
 0 1 x y).
tx: The x translation.
ty: The y translation.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>tx</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>ty</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>drawInlineImage</name>
            <comment>Draw an inline image at the x,y coordinates, with the default size of the
 image.
inlineImage: The inline image to draw.
x: The x-coordinate to draw the inline image.
y: The y-coordinate to draw the inline image.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>inlineImage</name>
                <type>org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>drawImage</name>
            <comment>Draw an image at the x,y coordinates, with the default size of the image.
image: The image to draw.
x: The x-coordinate to draw the image.
y: The y-coordinate to draw the image.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>image</name>
                <type>org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>setStrokingColorCMYKFloat</name>
            <comment>Set the stroking color in the DeviceCMYK color space. Range is 0..1
c: The cyan value.
m: The magenta value.
y: The yellow value.
k: The black value.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>c</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>m</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>k</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>fillEvenOdd</name>
            <comment>Fills the path using the even-odd winding rule.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>beginText</name>
            <comment>Begin some text operations.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>drawPolygon</name>
            <comment>Draw a polygon on the page using the current stroking color.
x: x coordinate of each points
y: y coordinate of each points</comment>
            <returntype>void</returntype>
            <parameter>
                <name>x</name>
                <type>float[]</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float[]</type>
            </parameter>
        </method>
        <method>
            <name>clip</name>
            <comment>Intersects the current clipping path with the current path, using the
 nonzero rule.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>moveTo</name>
            <comment>Move the current position to the given coordinates.
x: The x coordinate.
y: The y coordinate.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>fillAndStroke</name>
            <comment>Fill and then stroke the path, using the nonzero winding number rule to
 determine the region to fill. This shall produce the same result as
 constructing two identical path objects, painting the first with
 {@link #fill() } and the second with {@link #stroke() }.</comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>HorizontalScaling</name>
            <parameter>
                <name>scale</name>
                <type>float</type>
            </parameter>
            <comment>Set the horizontal scaling to scale / 100.</comment>
        </property>
        <property>
            <name>OVERWRITE</name>
            <returntype EnumType="true">org.apache.pdfbox.pdmodel.PDPageContentStream.AppendMode</returntype>
            <comment></comment>
        </property>
        <property>
            <name>LineJoinStyle</name>
            <parameter>
                <name>lineJoinStyle</name>
                <type>int</type>
            </parameter>
            <comment>Set the line join style.</comment>
        </property>
        <property>
            <name>Leading2</name>
            <parameter>
                <name>leading</name>
                <type>float</type>
            </parameter>
            <comment>Sets the text leading.</comment>
        </property>
        <property>
            <name>NonStrokingColorSpace</name>
            <parameter>
                <name>colorSpace</name>
                <type>org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace</type>
            </parameter>
            <comment>Set the stroking color space. This will add the colorspace to the
 PDResources if necessary.</comment>
        </property>
        <property>
            <name>APPEND</name>
            <returntype EnumType="true">org.apache.pdfbox.pdmodel.PDPageContentStream.AppendMode</returntype>
            <comment></comment>
        </property>
        <property>
            <name>WordSpacing</name>
            <parameter>
                <name>spacing</name>
                <type>float</type>
            </parameter>
            <comment>Set the word spacing. The value shall be added to the horizontal or
 vertical component of the ASCII SPACE character, depending on the writing
 mode.
 &lt;p&gt;
 This will have an effect only with Type1 and TrueType fonts, not with Type0
 fonts. The PDF specification tells why: "Word spacing shall be applied to
 every occurrence of the single-byte character code 32 in a string when
 using a simple font or a composite font that defines code 32 as a
 single-byte code. It shall not apply to occurrences of the byte value 32 in
 multiple-byte codes."</comment>
        </property>
        <property>
            <name>GraphicsStateParameters</name>
            <parameter>
                <name>state</name>
                <type>org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState</type>
            </parameter>
            <comment>Set an extended graphics state.</comment>
        </property>
        <property>
            <name>TextRise</name>
            <parameter>
                <name>rise</name>
                <type>float</type>
            </parameter>
            <comment>Set the text rise value, i.e. move the baseline up or down. This is useful
 for drawing superscripts or subscripts.</comment>
        </property>
        <property>
            <name>RenderingMode</name>
            <parameter>
                <name>rm</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Set the text rendering mode. This determines whether showing text shall
 cause glyph outlines to be stroked, filled, used as a clipping boundary, or
 some combination of the three.</comment>
        </property>
        <property>
            <name>CharacterSpacing</name>
            <parameter>
                <name>spacing</name>
                <type>float</type>
            </parameter>
            <comment>Set the character spacing. The value shall be added to the horizontal or
 vertical component of the glyph's displacement, depending on the writing
 mode.</comment>
        </property>
        <property>
            <name>StrokingColorSpace</name>
            <parameter>
                <name>colorSpace</name>
                <type>org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace</type>
            </parameter>
            <comment>Set the stroking color space. This will add the colorspace to the
 PDResources if necessary.</comment>
        </property>
        <property>
            <name>LineCapStyle</name>
            <parameter>
                <name>lineCapStyle</name>
                <type>int</type>
            </parameter>
            <comment>Set the line cap style.</comment>
        </property>
        <property>
            <name>MiterLimit</name>
            <parameter>
                <name>miterLimit</name>
                <type>float</type>
            </parameter>
            <comment>Set the miter limit.</comment>
        </property>
        <property>
            <name>LineWidth</name>
            <parameter>
                <name>lineWidth</name>
                <type>float</type>
            </parameter>
            <comment>Set line width to the given value.</comment>
        </property>
        <property>
            <name>PREPEND</name>
            <returntype EnumType="true">org.apache.pdfbox.pdmodel.PDPageContentStream.AppendMode</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Leading</name>
            <parameter>
                <name>leading</name>
                <type>double</type>
            </parameter>
            <comment>Sets the text leading.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.PDPageTreewrapper</name>
        <shortname>PDPageTree</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.PDPageTree</objectwrapper>
        <owner>process</owner>
        <method>
            <name>add</name>
            <comment>Adds the given page to this page tree.
page: The page to add.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>page</name>
                <type>org.apache.pdfbox.pdmodel.PDPage</type>
            </parameter>
        </method>
        <method>
            <name>getPage</name>
            <comment>Returns the page at the given index.
index: zero-based index
Return type: @return:the page at the given index.</comment>
            <returntype>org.apache.pdfbox.pdmodel.PDPage</returntype>
            <parameter>
                <name>index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getInheritableAttribute</name>
            <comment>Returns the given attribute, inheriting from parent tree nodes if
 necessary.
node: page object
key: the key to look up
Return type: @return:COS value for the given key</comment>
            <returntype>org.apache.pdfbox.cos.COSBase</returntype>
            <parameter>
                <name>node</name>
                <type>org.apache.pdfbox.cos.COSDictionary</type>
            </parameter>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>remove</name>
            <comment>Removes the page with the given index from the page tree.
index: zero-based page index</comment>
            <returntype>void</returntype>
            <parameter>
                <name>index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>insertAfter</name>
            <comment>Insert a page after another page within a page tree.
newPage: the page to be inserted.
prevPage: the page that is to be before the new page.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>newPage</name>
                <type>org.apache.pdfbox.pdmodel.PDPage</type>
            </parameter>
            <parameter>
                <name>prevPage</name>
                <type>org.apache.pdfbox.pdmodel.PDPage</type>
            </parameter>
        </method>
        <method>
            <name>insertBefore</name>
            <comment>Insert a page before another page within a page tree.
newPage: the page to be inserted.
nextPage: the page that is to be after the new page.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>newPage</name>
                <type>org.apache.pdfbox.pdmodel.PDPage</type>
            </parameter>
            <parameter>
                <name>nextPage</name>
                <type>org.apache.pdfbox.pdmodel.PDPage</type>
            </parameter>
        </method>
        <method>
            <name>iterator</name>
            <comment>Returns an iterator which walks all pages in the tree, in order.</comment>
            <returntype>java.util.Iterator</returntype>
        </method>
        <method>
            <name>remove2</name>
            <comment>Removes the given page from the page tree.
page: The page to remove.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>page</name>
                <type>org.apache.pdfbox.pdmodel.PDPage</type>
            </parameter>
        </method>
        <method>
            <name>indexOf</name>
            <comment>Returns the index of the given page, or -1 if it does not exist.
page: The page to search for.
Return type: @return:the zero-based index of the given page, or -1 if the page is not
         found.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>page</name>
                <type>org.apache.pdfbox.pdmodel.PDPage</type>
            </parameter>
        </method>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Count</name>
            <returntype>int</returntype>
            <comment>Returns the number of leaf nodes (page objects) that are descendants of
 this root within the page tree.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.PDPagewrapper</name>
        <shortname>PDPage</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.PDPage</objectwrapper>
        <owner>process</owner>
        <method>
            <name>clearAnnotations</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>size</name>
                <type>org.apache.pdfbox.pdmodel.common.PDRectangle</type>
            </parameter>
        </method>
        <method>
            <name>hasContents</name>
            <comment>Returns true if this page has one or more content streams.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>getAnnotations2</name>
            <comment>This will return a list of the annotations for this page.
annotationFilter: the annotation filter provided allowing to filter out specific
          annotations
Return type: @return:List of the PDAnnotation objects, never null. The returned list is
         backed by the annotations COSArray, so any adding or deleting in
         this list will change the document too.</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>annotationFilter</name>
                <type>org.apache.pdfbox.pdmodel.interactive.annotation.AnnotationFilter</type>
            </parameter>
        </method>
        <method>
            <name>addAnnotation</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>e</name>
                <type>org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation</type>
            </parameter>
        </method>
        <method>
            <name>setTransition2</name>
            <comment>Convenient method to set a transition and the display duration
transition: The new transition to set on this page.
duration: The maximum length of time, in seconds, that the page shall be
          displayed during presentations before the viewer application shall
          automatically advance to the next page.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>transition</name>
                <type>org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition</type>
            </parameter>
            <parameter>
                <name>duration</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>hashCode</name>
            <comment></comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>equals</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>other</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <property>
            <name>ThreadBeads</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>beads</name>
                <type>java.util.List</type>
            </parameter>
            <comment>This will get a list of PDThreadBead objects, which are article threads in
 the document. This will return an empty list if there are no thread beads.</comment>
        </property>
        <property>
            <name>CropBox</name>
            <returntype>org.apache.pdfbox.pdmodel.common.PDRectangle</returntype>
            <parameter>
                <name>cropBox</name>
                <type>org.apache.pdfbox.pdmodel.common.PDRectangle</type>
            </parameter>
            <comment>A rectangle, expressed in default user space units, defining the visible
 region of default user space. When the page is displayed or printed, its
 contents are to be clipped (cropped) to this rectangle.</comment>
        </property>
        <property>
            <name>StructParents</name>
            <returntype>int</returntype>
            <parameter>
                <name>structParents</name>
                <type>int</type>
            </parameter>
            <comment>This will get the key of this Page in the structural parent tree.</comment>
        </property>
        <property>
            <name>Actions</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.action.PDPageAdditionalActions</returntype>
            <parameter>
                <name>actions</name>
                <type>org.apache.pdfbox.pdmodel.interactive.action.PDPageAdditionalActions</type>
            </parameter>
            <comment>Get the page actions.</comment>
        </property>
        <property>
            <name>TrimBox</name>
            <returntype>org.apache.pdfbox.pdmodel.common.PDRectangle</returntype>
            <parameter>
                <name>trimBox</name>
                <type>org.apache.pdfbox.pdmodel.common.PDRectangle</type>
            </parameter>
            <comment>A rectangle, expressed in default user space units, defining the intended
 dimensions of the finished page after trimming. The default is the CropBox.</comment>
        </property>
        <property>
            <name>Metadata</name>
            <returntype>org.apache.pdfbox.pdmodel.common.PDMetadata</returntype>
            <parameter>
                <name>meta</name>
                <type>org.apache.pdfbox.pdmodel.common.PDMetadata</type>
            </parameter>
            <comment>Get the metadata that is part of the document catalog. This will return
 null if there is no meta data for this object.</comment>
        </property>
        <property>
            <name>Rotation</name>
            <returntype>int</returntype>
            <parameter>
                <name>rotation</name>
                <type>int</type>
            </parameter>
            <comment>Returns the rotation angle in degrees by which the page should be rotated
 clockwise when displayed or printed. Valid values in a PDF must be a
 multiple of 90.</comment>
        </property>
        <property>
            <name>MediaBox</name>
            <returntype>org.apache.pdfbox.pdmodel.common.PDRectangle</returntype>
            <parameter>
                <name>mediaBox</name>
                <type>org.apache.pdfbox.pdmodel.common.PDRectangle</type>
            </parameter>
            <comment>A rectangle, expressed in default user space units, defining the boundaries
 of the physical medium on which the page is intended to be displayed or
 printed.</comment>
        </property>
        <property>
            <name>ArtBox</name>
            <returntype>org.apache.pdfbox.pdmodel.common.PDRectangle</returntype>
            <parameter>
                <name>artBox</name>
                <type>org.apache.pdfbox.pdmodel.common.PDRectangle</type>
            </parameter>
            <comment>A rectangle, expressed in default user space units, defining the extent of
 the page's meaningful content (including potential white space) as intended
 by the page's creator The default is the CropBox.</comment>
        </property>
        <property>
            <name>Viewports</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>viewports</name>
                <type>java.util.List</type>
            </parameter>
            <comment>Get the viewports.</comment>
        </property>
        <property>
            <name>ContentStreams</name>
            <returntype>java.util.Iterator</returntype>
            <comment>Returns the content streams which make up this page.</comment>
        </property>
        <property>
            <name>Contents</name>
            <returntype>java.io.InputStream</returntype>
            <parameter>
                <name>contents</name>
                <type>org.apache.pdfbox.pdmodel.common.PDStream</type>
            </parameter>
            <comment>Returns the content stream(s) of this page as a single input stream.</comment>
        </property>
        <property>
            <name>Matrix</name>
            <returntype>org.apache.pdfbox.util.Matrix</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Annotations</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>annotations</name>
                <type>java.util.List</type>
            </parameter>
            <comment>This will return a list of the annotations for this page.</comment>
        </property>
        <property>
            <name>BleedBox</name>
            <returntype>org.apache.pdfbox.pdmodel.common.PDRectangle</returntype>
            <parameter>
                <name>bleedBox</name>
                <type>org.apache.pdfbox.pdmodel.common.PDRectangle</type>
            </parameter>
            <comment>A rectangle, expressed in default user space units, defining the region to
 which the contents of the page should be clipped when output in a
 production environment. The default is the CropBox.</comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment>Convert this standard java object to a COS object.</comment>
        </property>
        <property>
            <name>BBox</name>
            <returntype>org.apache.pdfbox.pdmodel.common.PDRectangle</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Contents2</name>
            <parameter>
                <name>contents</name>
                <type>java.util.List</type>
            </parameter>
            <comment>This will set the contents of this page.</comment>
        </property>
        <property>
            <name>Transition</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition</returntype>
            <parameter>
                <name>transition</name>
                <type>org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Resources</name>
            <returntype>org.apache.pdfbox.pdmodel.PDResources</returntype>
            <parameter>
                <name>resources</name>
                <type>org.apache.pdfbox.pdmodel.PDResources</type>
            </parameter>
            <comment>A dictionary containing any resources required by the page.</comment>
        </property>
        <property>
            <name>ResourceCache</name>
            <returntype>org.apache.pdfbox.pdmodel.ResourceCache</returntype>
            <comment>Returns the resource cache associated with this page, or null if there is
 none.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.PDRectanglewrapper</name>
        <shortname>PDRectangle</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.common.PDRectangle</objectwrapper>
        <owner>process</owner>
        <method>
            <name>contains</name>
            <comment>Method to determine if the x/y point is inside this rectangle.
x: The x-coordinate to test.
y: The y-coordinate to test.
Return type: @return:True if the point is inside this rectangle.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>createRetranslatedRectangle</name>
            <comment>This will create a translated rectangle based off of this rectangle, such
 that the new rectangle retains the same dimensions(height/width), but the
 lower left x,y values are zero. &lt;br&gt;
 100, 100, 400, 400 (llx, lly, urx, ury ) &lt;br&gt;
 will be translated to 0,0,300,300
Return type: @return:A new rectangle that has been translated back to the origin.</comment>
            <returntype>org.apache.pdfbox.pdmodel.common.PDRectangle</returntype>
        </method>
        <method>
            <name>toString</name>
            <comment>This will return a string representation of this rectangle.
Return type: @return:This object as a string.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>height</name>
                <type>float</type>
            </parameter>
        </method>
        <property>
            <name>LETTER</name>
            <returntype>org.apache.pdfbox.pdmodel.common.PDRectangle</returntype>
            <comment></comment>
        </property>
        <property>
            <name>A6Height</name>
            <returntype>float</returntype>
            <comment></comment>
        </property>
        <property>
            <name>A1Height</name>
            <returntype>float</returntype>
            <comment></comment>
        </property>
        <property>
            <name>A0</name>
            <returntype>org.apache.pdfbox.pdmodel.common.PDRectangle</returntype>
            <comment></comment>
        </property>
        <property>
            <name>A1</name>
            <returntype>org.apache.pdfbox.pdmodel.common.PDRectangle</returntype>
            <comment></comment>
        </property>
        <property>
            <name>A2</name>
            <returntype>org.apache.pdfbox.pdmodel.common.PDRectangle</returntype>
            <comment></comment>
        </property>
        <property>
            <name>LETTERHeight</name>
            <returntype>float</returntype>
            <comment></comment>
        </property>
        <property>
            <name>A3</name>
            <returntype>org.apache.pdfbox.pdmodel.common.PDRectangle</returntype>
            <comment></comment>
        </property>
        <property>
            <name>A4</name>
            <returntype>org.apache.pdfbox.pdmodel.common.PDRectangle</returntype>
            <comment></comment>
        </property>
        <property>
            <name>COSArray</name>
            <returntype>org.apache.pdfbox.cos.COSArray</returntype>
            <comment>This will get the underlying array for this rectangle.</comment>
        </property>
        <property>
            <name>A5</name>
            <returntype>org.apache.pdfbox.pdmodel.common.PDRectangle</returntype>
            <comment></comment>
        </property>
        <property>
            <name>A6</name>
            <returntype>org.apache.pdfbox.pdmodel.common.PDRectangle</returntype>
            <comment></comment>
        </property>
        <property>
            <name>LEGAL</name>
            <returntype>org.apache.pdfbox.pdmodel.common.PDRectangle</returntype>
            <comment></comment>
        </property>
        <property>
            <name>A4Height</name>
            <returntype>float</returntype>
            <comment></comment>
        </property>
        <property>
            <name>A2Height</name>
            <returntype>float</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Height</name>
            <returntype>float</returntype>
            <comment>This will get the height of this rectangle as calculated by upperRightY -
 lowerLeftY.</comment>
        </property>
        <property>
            <name>A1Width</name>
            <returntype>float</returntype>
            <comment></comment>
        </property>
        <property>
            <name>UpperRightY</name>
            <returntype>float</returntype>
            <parameter>
                <name>value</name>
                <type>float</type>
            </parameter>
            <comment>This will get the upper right y coordinate.</comment>
        </property>
        <property>
            <name>UpperRightX</name>
            <returntype>float</returntype>
            <parameter>
                <name>value</name>
                <type>float</type>
            </parameter>
            <comment>This will get the upper right x coordinate.</comment>
        </property>
        <property>
            <name>Width</name>
            <returntype>float</returntype>
            <comment>This will get the width of this rectangle as calculated by upperRightX -
 lowerLeftX.</comment>
        </property>
        <property>
            <name>A4Width</name>
            <returntype>float</returntype>
            <comment></comment>
        </property>
        <property>
            <name>A0Height</name>
            <returntype>float</returntype>
            <comment></comment>
        </property>
        <property>
            <name>A3Width</name>
            <returntype>float</returntype>
            <comment></comment>
        </property>
        <property>
            <name>A6Width</name>
            <returntype>float</returntype>
            <comment></comment>
        </property>
        <property>
            <name>LEGALHeight</name>
            <returntype>float</returntype>
            <comment></comment>
        </property>
        <property>
            <name>A0Width</name>
            <returntype>float</returntype>
            <comment></comment>
        </property>
        <property>
            <name>A5Height</name>
            <returntype>float</returntype>
            <comment></comment>
        </property>
        <property>
            <name>LowerLeftY</name>
            <returntype>float</returntype>
            <parameter>
                <name>value</name>
                <type>float</type>
            </parameter>
            <comment>This will get the lower left y coordinate.</comment>
        </property>
        <property>
            <name>LowerLeftX</name>
            <returntype>float</returntype>
            <parameter>
                <name>value</name>
                <type>float</type>
            </parameter>
            <comment>This will get the lower left x coordinate.</comment>
        </property>
        <property>
            <name>A5Width</name>
            <returntype>float</returntype>
            <comment></comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSBase</returntype>
            <comment>Convert this standard java object to a COS object.</comment>
        </property>
        <property>
            <name>A2Width</name>
            <returntype>float</returntype>
            <comment></comment>
        </property>
        <property>
            <name>A3Height</name>
            <returntype>float</returntype>
            <comment></comment>
        </property>
        <property>
            <name>LEGALWidth</name>
            <returntype>float</returntype>
            <comment></comment>
        </property>
        <property>
            <name>LETTERWidth</name>
            <returntype>float</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.PDResourceswrapper</name>
        <shortname>PDResources</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.PDResources</objectwrapper>
        <owner>process</owner>
        <method>
            <name>addColorSpace</name>
            <comment></comment>
            <returntype>org.apache.pdfbox.cos.COSName</returntype>
            <parameter>
                <name>colorSpace</name>
                <type>org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>addXImage</name>
            <comment></comment>
            <returntype>org.apache.pdfbox.cos.COSName</returntype>
            <parameter>
                <name>image</name>
                <type>org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject</type>
            </parameter>
        </method>
        <method>
            <name>addFormXObject</name>
            <comment></comment>
            <returntype>org.apache.pdfbox.cos.COSName</returntype>
            <parameter>
                <name>form</name>
                <type>org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject</type>
            </parameter>
        </method>
        <method>
            <name>putXObject</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>xobject</name>
                <type>org.apache.pdfbox.pdmodel.graphics.PDXObject</type>
            </parameter>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>addFont</name>
            <comment></comment>
            <returntype>org.apache.pdfbox.cos.COSName</returntype>
            <parameter>
                <name>pattern</name>
                <type>org.apache.pdfbox.pdmodel.font.PDFont</type>
            </parameter>
        </method>
        <method>
            <name>addXObject</name>
            <comment></comment>
            <returntype>org.apache.pdfbox.cos.COSName</returntype>
            <parameter>
                <name>xobject</name>
                <type>org.apache.pdfbox.pdmodel.graphics.PDXObject</type>
            </parameter>
            <parameter>
                <name>prefix</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>putColorSpace</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>cs</name>
                <type>org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace</type>
            </parameter>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>putFont</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>font</name>
                <type>org.apache.pdfbox.pdmodel.font.PDFont</type>
            </parameter>
            <parameter>
                <name>fontName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.PrinterJobwrapper</name>
        <shortname>PrinterJob</shortname>
        <owner>process</owner>
        <method>
            <name>printDialog2</name>
            <comment>A convenience method which displays a cross-platform print dialog
 for all services which are capable of printing 2D graphics using the
 Pageable interface. The selected printer when the
 dialog is initially displayed will reflect the print service currently
 attached to this print job.
 If the user changes the print service, the PrinterJob will be
 updated to reflect this, unless the user cancels the dialog.
 As well as allowing the user to select the destination printer,
 the user can also select values of various print request attributes.
 The attributes parameter on input will reflect the applications
 required initial selections in the user dialog. Attributes not
 specified display using the default for the service. On return it
 will reflect the user's choices. Selections may be updated by
 the implementation to be consistent with the supported values
 for the currently selected print service.
 As the user scrolls to a new print service selection, the values
 copied are based on the settings for the previous service, together
 with any user changes. The values are not based on the original
 settings supplied by the client.
 With the exception of selected printer, the PrinterJob state is
 not updated to reflect the user's changes.
 For the selections to affect a printer job, the attributes must
 be specified in the call to the
 print(PrintRequestAttributeSet) method. If using
 the Pageable interface, clients which intend to use media selected
 by the user must create a PageFormat derived from the user's
 selections.
 If the user cancels the dialog, the attributes will not reflect
 any changes made by the user.
attributes: on input is application supplied attributes,
 on output the contents are updated to reflect user choices.
 This parameter may not be null.
 return true if the user does not cancel the dialog;
 false otherwise.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>attributes</name>
                <type>javax.print.attribute.PrintRequestAttributeSet</type>
            </parameter>
        </method>
        <method>
            <name>cancel</name>
            <comment>Cancels a print job that is in progress.  If
 {@link #print() print} has been called but has not
 returned then this method signals
 that the job should be cancelled at the next
 chance. If there is no print job in progress then
 this call does nothing.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>defaultPage</name>
            <comment>Creates a new PageFormat instance and
 sets it to a default size and orientation.</comment>
            <returntype>java.awt.print.PageFormat</returntype>
        </method>
        <method>
            <name>defaultPage2</name>
            <comment>Clones the PageFormat argument and alters the
 clone to describe a default page size and orientation.
page: the PageFormat to be cloned and altered
Return type: @return:clone of page, altered to describe a default
 PageFormat</comment>
            <returntype>java.awt.print.PageFormat</returntype>
            <parameter>
                <name>page</name>
                <type>java.awt.print.PageFormat</type>
            </parameter>
        </method>
        <method>
            <name>pageDialog2</name>
            <comment>A convenience method which displays a cross-platform page setup dialog.
 The choices available will reflect the print service currently
 set on this PrinterJob.
 The attributes parameter on input will reflect the client's
 required initial selections in the user dialog. Attributes which are
 not specified display using the default for the service. On return it
 will reflect the user's choices. Selections may be updated by
 the implementation to be consistent with the supported values
 for the currently selected print service.
 The return value will be a PageFormat equivalent to the
 selections in the PrintRequestAttributeSet.
 If the user cancels the dialog, the attributes will not reflect
 any changes made by the user, and the return value will be null.
attributes: on input is application supplied attributes,
 on output the contents are updated to reflect user choices.
 This parameter may not be null.
Return type: @return:a page format if the user does not cancel the dialog;
 null otherwise.</comment>
            <returntype>java.awt.print.PageFormat</returntype>
            <parameter>
                <name>attributes</name>
                <type>javax.print.attribute.PrintRequestAttributeSet</type>
            </parameter>
        </method>
        <method>
            <name>pageDialog</name>
            <comment>Displays a dialog that allows modification of a PageFormat instance.
 The page argument is used to initialize controls in the page setup 
 dialog. If the user cancels the dialog then this method returns the
 original page object unmodified.
 If the user okays the dialog then this method returns a new
 PageFormat object with the indicated changes.
 In either case, the original page object is
 not modified.</comment>
            <returntype>java.awt.print.PageFormat</returntype>
            <parameter>
                <name>page</name>
                <type>java.awt.print.PageFormat</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>setPrintable2</name>
            <comment>Calls painter to render the pages in the specified
 format.  The pages in the document to be printed by
 this PrinterJob are rendered by the
 Printable object, painter. The
 PageFormat of each page is format.
 painter the Printable called to 
 render each page of the document
 param format the size and 
 orientation of each page to be printed</comment>
            <returntype>void</returntype>
            <parameter>
                <name>painter</name>
                <type>java.awt.print.Printable</type>
            </parameter>
            <parameter>
                <name>format</name>
                <type>java.awt.print.PageFormat</type>
            </parameter>
        </method>
        <method>
            <name>printDialog</name>
            <comment>Presents a dialog to the user for changing the properties of
 the print job.
 This method will display a native dialog if a native print
 service is selected, and user choice of printers will be restricted
 to these native print services.
 To present the cross platform print dialog for all services,
 including native ones instead use
 printDialog(PrintRequestAttributeSet).
 PrinterJob implementations which can use PrintService's will update
 the PrintService for this PrinterJob to reflect the new service
 selected by the user.
Return type: @return:true if the user does not cancel the dialog;
 false otherwise.
 exception HeadlessException if GraphicsEnvironment.isHeadless()
 returns true.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>print</name>
            <comment>Prints a set of pages.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>print2</name>
            <comment>Prints a set of pages using the settings in the attribute
 set. The default implementation ignores the attribute set.
 Note that some attributes may be set directly on the PrinterJob
 by equivalent method calls, (for example), copies:
 setcopies(int), job name: setJobName(String)
 and specifying media size and orientation though the
 PageFormat object.
 If a supported attribute-value is specified in this attribute set,
 it will take precedence over the API settings for this print()
 operation only.
 The following behaviour is specified for PageFormat:
 If a client uses the Printable interface, then the
 attributes parameter to this method is examined
 for attributes which specify media (by size), orientation, and
 imageable area, and those are used to construct a new PageFormat
 which is passed to the Printable object's print() method.
 See {@link Printable} for an explanation of the required
 behaviour of a Printable to ensure optimal printing via PrinterJob.
 For clients of the Pageable interface, the PageFormat will always
 be as supplied by that interface, on a per page basis.
 These behaviours allow an application to directly pass the
 user settings returned from
 printDialog(PrintRequestAttributeSet attributes to
 this print() method.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>attributes</name>
                <type>javax.print.attribute.PrintRequestAttributeSet</type>
            </parameter>
        </method>
        <method>
            <name>validatePage</name>
            <comment></comment>
            <returntype>java.awt.print.PageFormat</returntype>
            <parameter>
                <name>page</name>
                <type>java.awt.print.PageFormat</type>
            </parameter>
        </method>
        <method>
            <name>getPageFormat</name>
            <comment>Calculates a PageFormat with values consistent with those
 supported by the current PrintService for this job
 (ie the value returned by getPrintService()) and media,
 printable area and orientation contained in attributes.
 Calling this method does not update the job.</comment>
            <returntype>java.awt.print.PageFormat</returntype>
            <parameter>
                <name>attributes</name>
                <type>javax.print.attribute.PrintRequestAttributeSet</type>
            </parameter>
        </method>
        <property>
            <name>Pageable</name>
            <parameter>
                <name>document</name>
                <type>java.awt.print.Pageable</type>
            </parameter>
            <comment>Queries document for the number of pages and the PageFormat
 and Printable for each page held in the Pageable instance
 param document the pages to be printed. It can not be
 &lt;code&gt;null&lt;/code&gt;.
 exception NullPointerException the Pageable passed in was null.</comment>
        </property>
        <property>
            <name>UserName</name>
            <returntype>java.lang.String</returntype>
            <comment>Gets the name of the printing user.</comment>
        </property>
        <property>
            <name>Copies</name>
            <returntype>int</returntype>
            <parameter>
                <name>copies</name>
                <type>int</type>
            </parameter>
            <comment>Gets the number of copies to be printed.</comment>
        </property>
        <property>
            <name>JobName</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>jobName</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Gets the name of the document to be printed.</comment>
        </property>
        <property>
            <name>Printable</name>
            <parameter>
                <name>painter</name>
                <type>java.awt.print.Printable</type>
            </parameter>
            <comment>Calls &lt;code&gt;painter&lt;/code&gt; to render the pages.  The pages in the
 document to be printed by this
 &lt;code&gt;PrinterJob&lt;/code&gt; are rendered by the {@link Printable}
 object, &lt;code&gt;painter&lt;/code&gt;.  The {@link PageFormat} for each page
 is the default page format.</comment>
        </property>
        <property>
            <name>Cancelled</name>
            <returntype>boolean</returntype>
            <comment>Returns &lt;code&gt;true&lt;/code&gt; if a print job is
 in progress, but is going to be cancelled
 at the next opportunity; otherwise returns
 &lt;code&gt;false&lt;/code&gt;.</comment>
        </property>
        <property>
            <name>PrintService</name>
            <returntype>javax.print.PrintService</returntype>
            <comment>Returns the service (printer) for this printer job.
 Implementations of this class which do not support print services
 may return null.  null will also be returned if no printers are
 available.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.fdf.FDFCatalogwrapper</name>
        <shortname>FDFCatalog</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.fdf.FDFCatalog</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Creates an empty PDF document. You need to add at least one page for the
 document to be valid.
doc: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <property>
            <name>Version</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>version</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the version that was specified in the catalog dictionary.</comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment></comment>
        </property>
        <property>
            <name>FDF</name>
            <returntype>org.apache.pdfbox.pdmodel.fdf.FDFDictionary</returntype>
            <parameter>
                <name>fdf</name>
                <type>org.apache.pdfbox.pdmodel.fdf.FDFDictionary</type>
            </parameter>
            <comment>This will get the FDF dictionary.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.fdf.FDFdictionarywrapper</name>
        <shortname>FDFDictionary</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.fdf.FDFDictionary</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Creates an empty PDF document. You need to add at least one page for the
 document to be valid.
doc: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <property>
            <name>Status</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>status</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the status string to be displayed as the result of an action.</comment>
        </property>
        <property>
            <name>Encoding</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>encoding</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>The encoding to be used for a FDF field. The default is PDFDocEncoding and
 this method will never return null.</comment>
        </property>
        <property>
            <name>EmbeddedFDFs</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>embedded</name>
                <type>java.util.List</type>
            </parameter>
            <comment>This will get the list of embedded FDF entries, or null if the entry is
 null. This will return a list of PDFileSpecification objects.</comment>
        </property>
        <property>
            <name>Differences</name>
            <returntype>org.apache.pdfbox.cos.COSStream</returntype>
            <parameter>
                <name>diff</name>
                <type>org.apache.pdfbox.cos.COSStream</type>
            </parameter>
            <comment>This will get the incremental updates since the PDF was last opened.</comment>
        </property>
        <property>
            <name>Pages</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>pages</name>
                <type>java.util.List</type>
            </parameter>
            <comment>This will get the list of FDF Pages. This will return a list of FDFPage
 objects.</comment>
        </property>
        <property>
            <name>Target</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>target</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the target frame in the browser to open this document.</comment>
        </property>
        <property>
            <name>Fields</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>fields</name>
                <type>java.util.List</type>
            </parameter>
            <comment>This will get the list of FDF Fields. This will return a list of FDFField
 objects.</comment>
        </property>
        <property>
            <name>Annotations</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>annots</name>
                <type>java.util.List</type>
            </parameter>
            <comment>This will get the list of FDF Annotations. This will return a list of
 FDFAnnotation objects or null if the entry is not set.</comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment></comment>
        </property>
        <property>
            <name>JavaScript</name>
            <returntype>org.apache.pdfbox.pdmodel.fdf.FDFJavaScript</returntype>
            <parameter>
                <name>js</name>
                <type>org.apache.pdfbox.pdmodel.fdf.FDFJavaScript</type>
            </parameter>
            <comment>This will get the java script entry.</comment>
        </property>
        <property>
            <name>ID</name>
            <returntype>org.apache.pdfbox.cos.COSArray</returntype>
            <parameter>
                <name>id</name>
                <type>org.apache.pdfbox.cos.COSArray</type>
            </parameter>
            <comment>This is the FDF id.</comment>
        </property>
        <property>
            <name>File</name>
            <returntype>org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification</returntype>
            <parameter>
                <name>fs</name>
                <type>org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification</type>
            </parameter>
            <comment>The source file or target file: the PDF document file that this FDF file
 was exported from or is intended to be imported into.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.fdf.FDFDocumentwrapper</name>
        <shortname>FDFDocument</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.fdf.FDFDocument</objectwrapper>
        <owner>process</owner>
        <method>
            <name>writeXML</name>
            <comment>This will write this element as an XML document.
output: The stream to write the xml to.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>output</name>
                <type>java.io.Writer</type>
            </parameter>
        </method>
        <method>
            <name>save</name>
            <comment>This will save this document to the filesystem.
fileName: The file to save as.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>fileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Creates an empty PDF document. You need to add at least one page for the
 document to be valid.
document: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>filename</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>loadXFDF</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>fileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>save2</name>
            <comment>This will save the document to an output stream.
output: The stream to write to.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>output</name>
                <type>java.io.OutputStream</type>
            </parameter>
        </method>
        <method>
            <name>saveXFDF</name>
            <comment>This will save this document to the filesystem.
fileName: The file to save as.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>fileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>close</name>
            <comment>This will close the underlying COSDocument object.</comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>Document</name>
            <returntype>org.apache.pdfbox.cos.COSDocument</returntype>
            <comment>This will get the low level document.</comment>
        </property>
        <property>
            <name>Catalog</name>
            <returntype>org.apache.pdfbox.pdmodel.fdf.FDFCatalog</returntype>
            <parameter>
                <name>cat</name>
                <type>org.apache.pdfbox.pdmodel.fdf.FDFCatalog</type>
            </parameter>
            <comment>This will get the FDF Catalog. This is guaranteed to not return null.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.files.PDComplexFileSpecificationwrapper</name>
        <shortname>PDComplexFileSpecification</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>EmbeddedFileUnix</name>
            <returntype>org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile</returntype>
            <parameter>
                <name>file</name>
                <type>org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile</type>
            </parameter>
            <comment>Get the embedded Unix file.</comment>
        </property>
        <property>
            <name>FileUnix</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>file</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the name representing a Unix file.</comment>
        </property>
        <property>
            <name>EmbeddedFileMac</name>
            <returntype>org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile</returntype>
            <parameter>
                <name>file</name>
                <type>org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile</type>
            </parameter>
            <comment>Get the embedded Mac file.</comment>
        </property>
        <property>
            <name>Filename</name>
            <returntype>java.lang.String</returntype>
            <comment>&lt;p&gt;
 Preferred method for getting the filename. It will determinate the
 recommended file name.
 &lt;/p&gt;
 &lt;p&gt;
 First of all we try to get the unicode filename if it exist. If it doesn't
 exist we take a look at the DOS, MAC UNIX filenames. If no one exist the
 required F entry will be returned.
 &lt;/p&gt;</comment>
        </property>
        <property>
            <name>EmbeddedFileDos</name>
            <returntype>org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile</returntype>
            <parameter>
                <name>file</name>
                <type>org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile</type>
            </parameter>
            <comment>Get the embedded dos file.</comment>
        </property>
        <property>
            <name>FileDos</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>file</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the name representing a Dos file.</comment>
        </property>
        <property>
            <name>Volatile</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>fileIsVolatile</name>
                <type>boolean</type>
            </parameter>
            <comment>Get if the file is volatile. Default: false</comment>
        </property>
        <property>
            <name>FileMac</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>file</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the name representing a Mac file.</comment>
        </property>
        <property>
            <name>EmbeddedFileUnicode</name>
            <returntype>org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile</returntype>
            <parameter>
                <name>file</name>
                <type>org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile</type>
            </parameter>
            <comment>Get the embedded unicode file.</comment>
        </property>
        <property>
            <name>FileDescription</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>description</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the description.</comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment>Interface method for COSObjectable.</comment>
        </property>
        <property>
            <name>EmbeddedFile</name>
            <returntype>org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile</returntype>
            <parameter>
                <name>file</name>
                <type>org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile</type>
            </parameter>
            <comment>Get the embedded file.</comment>
        </property>
        <property>
            <name>FileUnicode</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>file</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the unicode file name.</comment>
        </property>
        <property>
            <name>File</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>file</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the file name.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.files.PDEmbeddedFilesNameTreeNodewrapper</name>
        <shortname>PDEmbeddedFilesNameTreeNode</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.PDEmbeddedFilesNameTreeNode</objectwrapper>
        <owner>process</owner>
        <method>
            <name>setNames</name>
            <comment>Uses ONLY one file....
attachmentName: 
fs: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>attachmentName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>fs</name>
                <type>org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>replaceFile</name>
            <comment></comment>
            <returntype>java.util.Map</returntype>
            <parameter>
                <name>attachmentName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>fs</name>
                <type>org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification</type>
            </parameter>
        </method>
        <method>
            <name>getInheritableAttribute</name>
            <comment>Returns the given attribute, inheriting from parent tree nodes if
 necessary.
node: page object
key: the key to look up
Return type: @return:COS value for the given key</comment>
            <returntype>org.apache.pdfbox.cos.COSBase</returntype>
            <parameter>
                <name>node</name>
                <type>org.apache.pdfbox.cos.COSDictionary</type>
            </parameter>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>getKidMap</name>
            <comment></comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>node</name>
                <type>org.apache.pdfbox.pdmodel.PDEmbeddedFilesNameTreeNode</type>
            </parameter>
        </method>
        <method>
            <name>createNamesMap</name>
            <comment></comment>
            <returntype>java.util.Map</returntype>
            <parameter>
                <name>attachmentName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>fs</name>
                <type>org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification</type>
            </parameter>
        </method>
        <method>
            <name>getValue</name>
            <comment>The name to retrieve.
name: The name in the tree.
Return type: @return:The value of the name in the tree.</comment>
            <returntype>org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ClearKids</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>addFile</name>
            <comment></comment>
            <returntype>java.util.Map</returntype>
            <parameter>
                <name>attachmentName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>fs</name>
                <type>org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification</type>
            </parameter>
        </method>
        <method>
            <name>removeFileFromMap</name>
            <comment></comment>
            <returntype>java.util.Map</returntype>
            <parameter>
                <name>fs</name>
                <type>org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification</type>
            </parameter>
        </method>
        <method>
            <name>AddKid</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>treeNode</name>
                <type>org.apache.pdfbox.pdmodel.PDEmbeddedFilesNameTreeNode</type>
            </parameter>
        </method>
        <property>
            <name>RootNode</name>
            <returntype>boolean</returntype>
            <comment>Determines if this is a root node or not.</comment>
        </property>
        <property>
            <name>Parent</name>
            <returntype>org.apache.pdfbox.pdmodel.common.PDNameTreeNode</returntype>
            <parameter>
                <name>parentNode</name>
                <type>org.apache.pdfbox.pdmodel.common.PDNameTreeNode</type>
            </parameter>
            <comment>Returns the parent node.</comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SingleKids</name>
            <parameter>
                <name>treeNode</name>
                <type>org.apache.pdfbox.pdmodel.PDEmbeddedFilesNameTreeNode</type>
            </parameter>
            <comment>Set the children of this named tree.</comment>
        </property>
        <property>
            <name>NamesMap</name>
            <parameter>
                <name>names</name>
                <type>java.util.Map</type>
            </parameter>
            <comment>This will return a map of names on this level. The key will be a string,
 and the value will depend on where this class is being used.</comment>
        </property>
        <property>
            <name>Kids</name>
            <returntype>java.util.List</returntype>
            <comment>Return the children of this node. This list will contain PDNameTreeNode
 objects.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.files.PDEmbeddedFilewrapper</name>
        <shortname>PDEmbeddedFile</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>doc</name>
                <type>org.apache.pdfbox.pdmodel.PDDocument</type>
            </parameter>
            <parameter>
                <name>str</name>
                <type>java.io.InputStream</type>
            </parameter>
        </method>
        <property>
            <name>CreationDate</name>
            <returntype>long</returntype>
            <parameter>
                <name>time</name>
                <type>long</type>
            </parameter>
            <comment>Get the creation date of the embedded file.</comment>
        </property>
        <property>
            <name>MacResFork</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>macResFork</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Get the mac ResFork.</comment>
        </property>
        <property>
            <name>Size</name>
            <returntype>int</returntype>
            <parameter>
                <name>size</name>
                <type>int</type>
            </parameter>
            <comment>Get the size of the embedded file.</comment>
        </property>
        <property>
            <name>CheckSum</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>checksum</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Get the check sum of the embedded file.</comment>
        </property>
        <property>
            <name>Metadata</name>
            <returntype>org.apache.pdfbox.pdmodel.common.PDMetadata</returntype>
            <parameter>
                <name>meta</name>
                <type>org.apache.pdfbox.pdmodel.common.PDMetadata</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>MacSubtype</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>macSubtype</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Get the mac subtype.</comment>
        </property>
        <property>
            <name>ModDate</name>
            <returntype>long</returntype>
            <parameter>
                <name>mod</name>
                <type>long</type>
            </parameter>
            <comment>Get the mod date of the embedded file.</comment>
        </property>
        <property>
            <name>Subtype</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>mimeType</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Get the subtype(mimetype) for the embedded file.</comment>
        </property>
        <property>
            <name>MacCreator</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>macCreator</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Get the mac Creator.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.files.PDImageXObjectwrapper</name>
        <shortname>PDImageXObject</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject</objectwrapper>
        <owner>process</owner>
        <method>
            <name>isEmpty</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>doc</name>
                <type>org.apache.pdfbox.pdmodel.PDDocument</type>
            </parameter>
            <parameter>
                <name>imagePath</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>createInputStream2</name>
            <comment></comment>
            <returntype>java.io.InputStream</returntype>
            <parameter>
                <name>options</name>
                <type>org.apache.pdfbox.filter.DecodeOptions</type>
            </parameter>
        </method>
        <method>
            <name>createInputStream</name>
            <comment></comment>
            <returntype>java.io.InputStream</returntype>
        </method>
        <property>
            <name>ColorSpace</name>
            <returntype>org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace</returntype>
            <parameter>
                <name>cs</name>
                <type>org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Stencil</name>
            <parameter>
                <name>isStencil</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Metadata</name>
            <returntype>org.apache.pdfbox.pdmodel.common.PDMetadata</returntype>
            <parameter>
                <name>meta</name>
                <type>org.apache.pdfbox.pdmodel.common.PDMetadata</type>
            </parameter>
            <comment>Returns the metadata associated with this XObject, or null if there is
 none.</comment>
        </property>
        <property>
            <name>Mask</name>
            <returntype>org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject</returntype>
            <comment>Returns the Mask Image XObject associated with this image, or null if there
 is none.</comment>
        </property>
        <property>
            <name>Decode</name>
            <returntype>org.apache.pdfbox.cos.COSArray</returntype>
            <parameter>
                <name>decode</name>
                <type>org.apache.pdfbox.cos.COSArray</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>BitsPerComponent</name>
            <returntype>int</returntype>
            <parameter>
                <name>bpc</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Interpolate</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>value</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Suffix</name>
            <returntype>java.lang.String</returntype>
            <comment>This will get the suffix for this image type, e.g. jpg/png.</comment>
        </property>
        <property>
            <name>StructParent</name>
            <returntype>int</returntype>
            <parameter>
                <name>key</name>
                <type>int</type>
            </parameter>
            <comment>Returns the key of this XObject in the structural parent tree.</comment>
        </property>
        <property>
            <name>ColorKeyMask</name>
            <returntype>org.apache.pdfbox.cos.COSArray</returntype>
            <comment>Returns the color key mask array associated with this image, or null if
 there is none.</comment>
        </property>
        <property>
            <name>Height</name>
            <returntype>int</returntype>
            <parameter>
                <name>h</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>SoftMask</name>
            <returntype>org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject</returntype>
            <comment>Returns the Soft Mask Image XObject associated with this image, or null if
 there is none.</comment>
        </property>
        <property>
            <name>Width</name>
            <returntype>int</returntype>
            <parameter>
                <name>w</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.files.PDInlineImagewrapper</name>
        <shortname>PDInlineImage</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage</objectwrapper>
        <owner>process</owner>
        <method>
            <name>isEmpty</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>parameters</name>
                <type>org.apache.pdfbox.cos.COSDictionary</type>
            </parameter>
            <parameter>
                <name>data</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>resources</name>
                <type>org.apache.pdfbox.pdmodel.PDResources</type>
            </parameter>
        </method>
        <method>
            <name>createInputStream</name>
            <comment></comment>
            <returntype>java.io.InputStream</returntype>
        </method>
        <method>
            <name>createInputStream2</name>
            <comment></comment>
            <returntype>java.io.InputStream</returntype>
            <parameter>
                <name>options</name>
                <type>org.apache.pdfbox.filter.DecodeOptions</type>
            </parameter>
        </method>
        <method>
            <name>createInputStream3</name>
            <comment></comment>
            <returntype>java.io.InputStream</returntype>
            <parameter>
                <name>options</name>
                <type>org.apache.pdfbox.filter.DecodeOptions</type>
            </parameter>
        </method>
        <property>
            <name>ColorSpace</name>
            <returntype>org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace</returntype>
            <parameter>
                <name>colorSpace</name>
                <type>org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Stencil</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>isStencil</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Decode</name>
            <returntype>org.apache.pdfbox.cos.COSArray</returntype>
            <parameter>
                <name>decode</name>
                <type>org.apache.pdfbox.cos.COSArray</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Data</name>
            <returntype>byte[]</returntype>
            <comment>Returns the inline image data.</comment>
        </property>
        <property>
            <name>BitsPerComponent</name>
            <returntype>int</returntype>
            <parameter>
                <name>bitsPerComponent</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Filters</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>filters</name>
                <type>java.util.List</type>
            </parameter>
            <comment>Returns a list of filters applied to this stream, or null if there are
 none.</comment>
        </property>
        <property>
            <name>Interpolate</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>value</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Suffix</name>
            <returntype>java.lang.String</returntype>
            <comment>Returns the suffix for this image type, e.g. jpg/png.</comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSBase</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ColorKeyMask</name>
            <returntype>org.apache.pdfbox.cos.COSArray</returntype>
            <comment>Returns the color key mask array associated with this image, or null if
 there is none.</comment>
        </property>
        <property>
            <name>Height</name>
            <returntype>int</returntype>
            <parameter>
                <name>height</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Width</name>
            <returntype>int</returntype>
            <parameter>
                <name>width</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.acroform.COSDictionarywrapper</name>
        <shortname>COSDictionary</shortname>
        <objectwrapper>org.apache.pdfbox.cos.COSDictionary</objectwrapper>
        <owner>process</owner>
        <method>
            <name>getObjectFromPath</name>
            <comment>Nice method, gives you every object you want Arrays works properly too. Try
 "P/Annots/[k]/Rect" where k means the index of the Annotsarray.
objPath: the relative path to the object.
Return type: @return:the object</comment>
            <returntype>org.apache.pdfbox.cos.COSBase</returntype>
            <parameter>
                <name>objPath</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getNameAsString</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a name and convert it to a string. Null is returned if the
 entry does not exist in the dictionary.
key: The key to the item in the dictionary.
Return type: @return:The name converted to a string.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getFloat4</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be an float. If the dictionary value is null then the default
 value will be returned.
key: The key to the item in the dictionary.
defaultValue: The value to return if the dictionary item is null.
Return type: @return:The float value.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>getFloat3</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a float. If the dictionary value is null then the default
 value will be returned.
key: The key to the item in the dictionary.
defaultValue: The value to return if the dictionary item is null.
Return type: @return:The float value.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>getFloat2</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be an float. -1 is returned if there is no value.
key: The key to the item in the dictionary.
Return type: @return:The float value.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>getEmbeddedString3</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a name and convert it to a string.
embedded: The embedded dictionary.
key: The key to the item in the dictionary.
defaultValue: The default value to return.
Return type: @return:The name converted to a string.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>embedded</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getEmbeddedString4</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a name and convert it to a string.
embedded: The embedded dictionary.
key: The key to the item in the dictionary.
defaultValue: The default value to return.
Return type: @return:The name converted to a string.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>embedded</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getItem</name>
            <comment>This will do a lookup into the dictionary.
key: The key to the object.
Return type: @return:The item that matches the key.</comment>
            <returntype>org.apache.pdfbox.cos.COSBase</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getEmbeddedString2</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a name and convert it to a string. Null is returned if the
 entry does not exist in the dictionary.
embedded: The embedded dictionary.
key: The key to the item in the dictionary.
Return type: @return:The name converted to a string.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>embedded</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>containsValue</name>
            <comment>
value: The value to find in the map.
Return type: @return:true if the map contains this value.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>value</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>setItem2</name>
            <comment>This will set an item in the dictionary. If value is null then the result
 will be the same as removeItem( key ).
key: The key to the dictionary object.
value: The value to the dictionary object.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>org.apache.pdfbox.pdmodel.common.COSObjectable</type>
            </parameter>
        </method>
        <method>
            <name>setEmbeddedString2</name>
            <comment>This is a convenience method that will convert the value to a COSString
 object. If it is null then the object will be removed.
embedded: The embedded dictionary to set the item in.
key: The key to the object,
value: The string value for the name.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>embedded</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setItem3</name>
            <comment>This will set an item in the dictionary. If value is null then the result
 will be the same as removeItem( key ).
key: The key to the dictionary object.
value: The value to the dictionary object.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>org.apache.pdfbox.pdmodel.common.COSObjectable</type>
            </parameter>
        </method>
        <method>
            <name>getInt2</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be an int. -1 is returned if there is no value.
key: The key to the item in the dictionary.
Return type: @return:The integer value..</comment>
            <returntype>int</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>getInt3</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be an integer. If the dictionary value is null then the default
 value will be returned.
keyList: The key to the item in the dictionary.
defaultValue: The value to return if the dictionary item is null.
Return type: @return:The integer value.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>keyList</name>
                <type>java.lang.String[]</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getCOSObject</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a COSObject. Null is returned if the entry does not exist in
 the dictionary.
key: The key to the item in the dictionary.
Return type: @return:The COSObject.</comment>
            <returntype>org.apache.pdfbox.cos.COSObject</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>getInt4</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be an integer. If the dictionary value is null then the default
 value will be returned.
key: The key to the item in the dictionary.
defaultValue: The value to return if the dictionary item is null.
Return type: @return:The integer value.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getInt5</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be an integer. If the dictionary value is null then the default
 value will be returned.
key: The key to the item in the dictionary.
defaultValue: The value to return if the dictionary item is null.
Return type: @return:The integer value.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getDictionaryObject</name>
            <comment>This will get an object from this dictionary. If the object is a reference
 then it will dereference it and get it from the document. If the object is
 COSNull then null will be returned.
key: The key to the object that we are getting.
Return type: @return:The object that matches the key.</comment>
            <returntype>org.apache.pdfbox.cos.COSBase</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getInt6</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be an integer. If the dictionary value is null then the default
 value -1 will be returned.
firstKey: The first key to the item in the dictionary.
secondKey: The second key to the item in the dictionary.
Return type: @return:The integer value.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>firstKey</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>secondKey</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>setName2</name>
            <comment>This is a convenience method that will convert the value to a COSName
 object. If it is null then the object will be removed.
key: The key to the object,
value: The string value for the name.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setFlag</name>
            <comment>Sets the given boolean value at bitPos in the flags.
field: The COSName of the field to set the value into.
bitFlag: the bit position to set the value in.
value: the value the bit position should have.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>field</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>bitFlag</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>setLong2</name>
            <comment>This is a convenience method that will convert the value to a COSInteger
 object.
key: The key to the object,
value: The int value for the name.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>entrySet</name>
            <comment>Returns the name-value entries in this dictionary. The returned set is in
 the order the entries were added to the dictionary.
Return type: @return:name-value entries in this dictionary</comment>
            <returntype>java.util.Set</returntype>
        </method>
        <method>
            <name>containsKey</name>
            <comment>
name: The key to find in the map.
Return type: @return:true if the map contains this key.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getCOSName</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a name. Null is returned if the entry does not exist in the
 dictionary.
key: The key to the item in the dictionary.
Return type: @return:The COS name.</comment>
            <returntype>org.apache.pdfbox.cos.COSName</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>setBoolean2</name>
            <comment>This will set an item in the dictionary.
key: The key to the dictionary object.
value: The value to the dictionary object.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>getString2</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a string. Null is returned if the entry does not exist in
 the dictionary.
key: The key to the item in the dictionary.
Return type: @return:The name converted to a string.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>containsKey2</name>
            <comment>
name: The key to find in the map.
Return type: @return:true if the map contains this key.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>name</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>getEmbeddedDate</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a name and convert it to a string. Null is returned if the
 entry does not exist in the dictionary.
embedded: The embedded dictionary to get.
key: The key to the item in the dictionary.
Return type: @return:The name converted to a string.</comment>
            <returntype>java.util.Calendar</returntype>
            <parameter>
                <name>embedded</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getEmbeddedInt2</name>
            <comment>Get an integer from an embedded dictionary. Useful for 1-1 mappings.
 default:-1
embeddedDictionary: The name of the embedded dictionary.
key: The key in the embedded dictionary.
Return type: @return:The value of the embedded integer.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>embeddedDictionary</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>getEmbeddedInt3</name>
            <comment>Get an integer from an embedded dictionary. Useful for 1-1 mappings.
embeddedDictionary: The name of the embedded dictionary.
key: The key in the embedded dictionary.
defaultValue: The value if there is no embedded dictionary or it does not
          contain the key.
Return type: @return:The value of the embedded integer.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>embeddedDictionary</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getEmbeddedInt4</name>
            <comment>Get an integer from an embedded dictionary. Useful for 1-1 mappings.
embeddedDictionary: The name of the embedded dictionary.
key: The key in the embedded dictionary.
defaultValue: The value if there is no embedded dictionary or it does not
          contain the key.
Return type: @return:The value of the embedded integer.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>embeddedDictionary</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getString4</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a string.
key: The key to the item in the dictionary.
defaultValue: The default value to return.
Return type: @return:The name converted to a string.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setInt</name>
            <comment>This is a convenience method that will convert the value to a COSInteger
 object.
key: The key to the object,
value: The int value for the name.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getString3</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a string.
key: The key to the item in the dictionary.
defaultValue: The default value to return.
Return type: @return:The name converted to a string.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>accept</name>
            <comment>visitor pattern double dispatch method.
visitor: The object to notify when visiting this object.
Return type: @return:The object that the visitor returns.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>visitor</name>
                <type>org.apache.pdfbox.cos.ICOSVisitor</type>
            </parameter>
        </method>
        <method>
            <name>getInt</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be an int. -1 is returned if there is no value.
key: The key to the item in the dictionary.
Return type: @return:The integer value.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setString</name>
            <comment>This is a convenience method that will convert the value to a COSString
 object. If it is null then the object will be removed.
key: The key to the object,
value: The string value for the name.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setLong</name>
            <comment>This is a convenience method that will convert the value to a COSInteger
 object.
key: The key to the object,
value: The int value for the name.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>getEmbeddedString</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a name and convert it to a string. Null is returned if the
 entry does not exist in the dictionary.
embedded: The embedded dictionary.
key: The key to the item in the dictionary.
Return type: @return:The name converted to a string.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>embedded</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setEmbeddedString</name>
            <comment>This is a convenience method that will convert the value to a COSString
 object. If it is null then the object will be removed.
embedded: The embedded dictionary to set the item in.
key: The key to the object,
value: The string value for the name.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>embedded</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getCOSDictionary</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a COSDictionary. Null is returned if the entry does not
 exist in the dictionary.
key: The key to the item in the dictionary.
Return type: @return:The COSDictionary.</comment>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>setName</name>
            <comment>This is a convenience method that will convert the value to a COSName
 object. If it is null then the object will be removed.
key: The key to the object,
value: The string value for the name.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getLong5</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be an integer. If the dictionary value is null then the default
 value will be returned.
key: The key to the item in the dictionary.
defaultValue: The value to return if the dictionary item is null.
Return type: @return:The integer value.</comment>
            <returntype>long</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>getLong4</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be an integer. If the dictionary value is null then the default
 value will be returned.
key: The key to the item in the dictionary.
defaultValue: The value to return if the dictionary item is null.
Return type: @return:The integer value.</comment>
            <returntype>long</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>removeItem</name>
            <comment>This will remove an item for the dictionary. This will do nothing of the
 object does not exist.
key: The key to the item to remove from the dictionary.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>getNameAsString2</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a name and convert it to a string. Null is returned if the
 entry does not exist in the dictionary.
key: The key to the item in the dictionary.
Return type: @return:The name converted to a string.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>getDate2</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a name and convert it to a string. Null is returned if the
 entry does not exist in the dictionary or if the date was invalid.
key: The key to the item in the dictionary.
Return type: @return:The name converted to a date.</comment>
            <returntype>java.util.Calendar</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>getLong3</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be an long. If the dictionary value is null then the default
 value will be returned.
keyList: The key to the item in the dictionary.
defaultValue: The value to return if the dictionary item is null.
Return type: @return:The long value.</comment>
            <returntype>long</returntype>
            <parameter>
                <name>keyList</name>
                <type>java.lang.String[]</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>getNameAsString3</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a name and convert it to a string.
key: The key to the item in the dictionary.
defaultValue: The value to return if the dictionary item is null.
Return type: @return:The name converted to a string.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getDate3</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a date.
key: The key to the item in the dictionary.
defaultValue: The default value to return if the entry does not exist in the
          dictionary or if the date was invalid.
Return type: @return:The name converted to a date.</comment>
            <returntype>java.util.Calendar</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>java.util.Calendar</type>
            </parameter>
        </method>
        <method>
            <name>getLong2</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be an long. -1 is returned if there is no value.
key: The key to the item in the dictionary.
Return type: @return:The long value.</comment>
            <returntype>long</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>asUnmodifiableDictionary</name>
            <comment>Returns an unmodifiable view of this dictionary.
Return type: @return:an unmodifiable view of this dictionary</comment>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
        </method>
        <method>
            <name>getFloat</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be an float. -1 is returned if there is no value.
key: The key to the item in the dictionary.
Return type: @return:The float value.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>mergeInto</name>
            <comment>This will add all of the dictionaries keys/values to this dictionary, but
 only if they don't already exist. If a key already exists in this
 dictionary then nothing is changed.
dic: The dictionaries to get the keys from.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>dic</name>
                <type>org.apache.pdfbox.cos.COSDictionary</type>
            </parameter>
        </method>
        <method>
            <name>getItem3</name>
            <comment>This is a special case of getItem that takes multiple keys, it will handle
 the situation where multiple keys could get the same value, ie if either CS
 or ColorSpace is used to get the colorspace. This will get an object from
 this dictionary.
firstKey: The first key to try.
secondKey: The second key to try.
Return type: @return:The object that matches the key.</comment>
            <returntype>org.apache.pdfbox.cos.COSBase</returntype>
            <parameter>
                <name>firstKey</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>secondKey</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>getItem2</name>
            <comment>This will do a lookup into the dictionary.
key: The key to the object.
Return type: @return:The item that matches the key.</comment>
            <returntype>org.apache.pdfbox.cos.COSBase</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>setEmbeddedInt</name>
            <comment>This is a convenience method that will convert the value to a COSInteger
 object.
embeddedDictionary: The embedded dictionary.
key: The key to the object,
value: The int value for the name.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>embeddedDictionary</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>setFloat2</name>
            <comment>This is a convenience method that will convert the value to a COSFloat
 object.
key: The key to the object,
value: The int value for the name.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>getDate</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a name and convert it to a string. Null is returned if the
 entry does not exist in the dictionary or if the date was invalid.
key: The key to the item in the dictionary.
Return type: @return:The name converted to a date.</comment>
            <returntype>java.util.Calendar</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getBoolean</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a cos boolean and convert it to a primitive boolean.
key: The key to the item in the dictionary.
defaultValue: The value returned if the entry is null.
Return type: @return:The value converted to a boolean.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>getNameAsString4</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a name and convert it to a string.
key: The key to the item in the dictionary.
defaultValue: The value to return if the dictionary item is null.
Return type: @return:The name converted to a string.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getDate4</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a date.
key: The key to the item in the dictionary.
defaultValue: The default value to return if the entry does not exist in the
          dictionary or if the date was invalid.
Return type: @return:The name converted to a date.</comment>
            <returntype>java.util.Calendar</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>java.util.Calendar</type>
            </parameter>
        </method>
        <method>
            <name>keySet</name>
            <comment>Returns the names of the entries in this dictionary. The returned set is in
 the order the entries were added to the dictionary.
Return type: @return:names of the entries in this dictionary</comment>
            <returntype>java.util.Set</returntype>
        </method>
        <method>
            <name>setItem</name>
            <comment>This will set an item in the dictionary. If value is null then the result
 will be the same as removeItem( key ).
key: The key to the dictionary object.
value: The value to the dictionary object.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>org.apache.pdfbox.cos.COSBase</type>
            </parameter>
        </method>
        <method>
            <name>setFloat</name>
            <comment>This is a convenience method that will convert the value to a COSFloat
 object.
key: The key to the object,
value: The int value for the name.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>getDictionaryObject3</name>
            <comment>This will get an object from this dictionary. If the object is a reference
 then it will dereference it and get it from the document. If the object is
 COSNull then null will be returned.
key: The key to the object that we are getting.
Return type: @return:The object that matches the key.</comment>
            <returntype>org.apache.pdfbox.cos.COSBase</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>getKeyForValue</name>
            <comment>Search in the map for the value that matches the parameter and return the
 first key that maps to that value.
value: The value to search for in the map.
Return type: @return:The key for the value in the map or null if it does not exist.</comment>
            <returntype>org.apache.pdfbox.cos.COSName</returntype>
            <parameter>
                <name>value</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>clear</name>
            <comment>This will clear all items in the map.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>getDictionaryObject2</name>
            <comment>This is a special case of getDictionaryObject that takes multiple keys, it
 will handle the situation where multiple keys could get the same value, ie
 if either CS or ColorSpace is used to get the colorspace. This will get an
 object from this dictionary. If the object is a reference then it will
 dereference it and get it from the document. If the object is COSNull then
 null will be returned.
firstKey: The first key to try.
secondKey: The second key to try.
Return type: @return:The object that matches the key.</comment>
            <returntype>org.apache.pdfbox.cos.COSBase</returntype>
            <parameter>
                <name>firstKey</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>secondKey</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>setString2</name>
            <comment>This is a convenience method that will convert the value to a COSString
 object. If it is null then the object will be removed.
key: The key to the object,
value: The string value for the name.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getString</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a string. Null is returned if the entry does not exist in
 the dictionary.
key: The key to the item in the dictionary.
Return type: @return:The name converted to a string.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getBoolean2</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a COSBoolean and convert it to a primitive boolean.
key: The key to the item in the dictionary.
defaultValue: The value returned if the entry is null.
Return type: @return:The entry converted to a boolean.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>setInt2</name>
            <comment>This is a convenience method that will convert the value to a COSInteger
 object.
key: The key to the object,
value: The int value for the name.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getCOSArray</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a COSArray. Null is returned if the entry does not exist in
 the dictionary.
key: The key to the item in the dictionary.
Return type: @return:The COSArray.</comment>
            <returntype>org.apache.pdfbox.cos.COSArray</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>getLong</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be an long. -1 is returned if there is no value.
key: The key to the item in the dictionary.
Return type: @return:The long value.</comment>
            <returntype>long</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getCOSStream</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a COSStream. Null is returned if the entry does not exist in
 the dictionary.
key: The key to the item in the dictionary.
Return type: @return:The COSStream.</comment>
            <returntype>org.apache.pdfbox.cos.COSStream</returntype>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>getEmbeddedDate3</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a date.
embedded: The embedded dictionary to get.
key: The key to the item in the dictionary.
defaultValue: The default value to return if the entry does not exist in the
          dictionary or if the date was invalid.
Return type: @return:The name converted to a string.</comment>
            <returntype>java.util.Calendar</returntype>
            <parameter>
                <name>embedded</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>java.util.Calendar</type>
            </parameter>
        </method>
        <method>
            <name>getEmbeddedDate2</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a name and convert it to a string. Null is returned if the
 entry does not exist in the dictionary.
embedded: The embedded dictionary to get.
key: The key to the item in the dictionary.
Return type: @return:The name converted to a string.</comment>
            <returntype>java.util.Calendar</returntype>
            <parameter>
                <name>embedded</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>addAll</name>
            <comment>This will add all of the dictionaries keys/values to this dictionary. Only
 called when adding keys to a trailer that already exists.
dic: The dictionaries to get the keys from.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>dic</name>
                <type>org.apache.pdfbox.cos.COSDictionary</type>
            </parameter>
        </method>
        <method>
            <name>getEmbeddedDate4</name>
            <comment>This is a convenience method that will get the dictionary object that is
 expected to be a date.
embedded: The embedded dictionary to get.
key: The key to the item in the dictionary.
defaultValue: The default value to return if the entry does not exist in the
          dictionary or if the date was invalid.
Return type: @return:The name converted to a string.</comment>
            <returntype>java.util.Calendar</returntype>
            <parameter>
                <name>embedded</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>defaultValue</name>
                <type>java.util.Calendar</type>
            </parameter>
        </method>
        <method>
            <name>toString</name>
            <comment>{@inheritDoc}</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>getFlag3</name>
            <comment>Gets the boolean value from the flags at the given bit position.
field: The COSName of the field to get the flag from.
bitFlag: the bitPosition to get the value from.
Return type: @return:true if the number at bitPos is '1'</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>field</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>bitFlag</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>setEmbeddedInt2</name>
            <comment>This is a convenience method that will convert the value to a COSInteger
 object.
embeddedDictionary: The embedded dictionary.
key: The key to the object,
value: The int value for the name.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>embeddedDictionary</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>key</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>setBoolean</name>
            <comment>This will set an item in the dictionary.
key: The key to the dictionary object.
value: The value to the dictionary object.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>getEmbeddedInt</name>
            <comment>Get an integer from an embedded dictionary. Useful for 1-1 mappings.
 default:-1
embeddedDictionary: The name of the embedded dictionary.
key: The key in the embedded dictionary.
Return type: @return:The value of the embedded integer.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>embeddedDictionary</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>size</name>
            <returntype>int</returntype>
            <comment>This will return the number of elements in this dictionary.</comment>
        </property>
        <property>
            <name>Values</name>
            <returntype>java.util.Collection</returntype>
            <comment>This will get all of the values for the dictionary.</comment>
        </property>
        <property>
            <name>NeedToBeUpdated</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>flag</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.acroform.FontHelperwrapper</name>
        <shortname>FontandColorHelper</shortname>
        <owner>process</owner>
        <method>
            <name>LoadTTFFont</name>
            <comment></comment>
            <returntype>org.apache.pdfbox.pdmodel.font.PDFont</returntype>
            <parameter>
                <name>doc</name>
                <type>org.apache.pdfbox.pdmodel.PDDocument</type>
            </parameter>
            <parameter>
                <name>path</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>filename</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>createColor</name>
            <comment></comment>
            <returntype>org.apache.pdfbox.pdmodel.graphics.color.PDColor</returntype>
            <parameter>
                <name>rgbcolors</name>
                <type>float[]</type>
            </parameter>
        </method>
        <method>
            <name>LoadTTFFont3</name>
            <comment></comment>
            <returntype>org.apache.pdfbox.pdmodel.font.PDType0Font</returntype>
            <parameter>
                <name>doc</name>
                <type>org.apache.pdfbox.pdmodel.PDDocument</type>
            </parameter>
            <parameter>
                <name>input</name>
                <type>java.io.InputStream</type>
            </parameter>
            <parameter>
                <name>embedSubset</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>LoadTTFFont2</name>
            <comment></comment>
            <returntype>org.apache.pdfbox.pdmodel.font.PDType0Font</returntype>
            <parameter>
                <name>doc</name>
                <type>org.apache.pdfbox.pdmodel.PDDocument</type>
            </parameter>
            <parameter>
                <name>filename</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>TIMES_ITALIC</name>
            <returntype>org.apache.pdfbox.pdmodel.font.PDType1Font</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TIMES_ROMAN</name>
            <returntype>org.apache.pdfbox.pdmodel.font.PDType1Font</returntype>
            <comment></comment>
        </property>
        <property>
            <name>COURIER</name>
            <returntype>org.apache.pdfbox.pdmodel.font.PDType1Font</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ZAPF_DINGBATS</name>
            <returntype>org.apache.pdfbox.pdmodel.font.PDType1Font</returntype>
            <comment></comment>
        </property>
        <property>
            <name>HELVETICA_BOLD</name>
            <returntype>org.apache.pdfbox.pdmodel.font.PDType1Font</returntype>
            <comment></comment>
        </property>
        <property>
            <name>HELVETICA</name>
            <returntype>org.apache.pdfbox.pdmodel.font.PDType1Font</returntype>
            <comment></comment>
        </property>
        <property>
            <name>HELVETICA_BOLD_OBLIQUE</name>
            <returntype>org.apache.pdfbox.pdmodel.font.PDType1Font</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TIMES_BOLD_ITALIC</name>
            <returntype>org.apache.pdfbox.pdmodel.font.PDType1Font</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SYMBOL</name>
            <returntype>org.apache.pdfbox.pdmodel.font.PDType1Font</returntype>
            <comment></comment>
        </property>
        <property>
            <name>HELVETICA_OBLIQUE</name>
            <returntype>org.apache.pdfbox.pdmodel.font.PDType1Font</returntype>
            <comment></comment>
        </property>
        <property>
            <name>COURIER_BOLD</name>
            <returntype>org.apache.pdfbox.pdmodel.font.PDType1Font</returntype>
            <comment></comment>
        </property>
        <property>
            <name>COURIER_OBLIQUE</name>
            <returntype>org.apache.pdfbox.pdmodel.font.PDType1Font</returntype>
            <comment></comment>
        </property>
        <property>
            <name>COURIER_BOLD_OBLIQUE</name>
            <returntype>org.apache.pdfbox.pdmodel.font.PDType1Font</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TIMES_BOLD</name>
            <returntype>org.apache.pdfbox.pdmodel.font.PDType1Font</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.acroform.PDAcroFormwrapper</name>
        <shortname>PDAcroForm</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm</objectwrapper>
        <owner>process</owner>
        <method>
            <name>xfaIsDynamic</name>
            <comment>This will tell if the AcroForm is a dynamic XFA form.
Return type: @return:true if the AcroForm is a dynamic XFA form</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>createAppearanceStream</name>
            <comment></comment>
            <returntype>org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream</returntype>
            <parameter>
                <name>document</name>
                <type>org.apache.pdfbox.pdmodel.PDDocument</type>
            </parameter>
            <parameter>
                <name>widget</name>
                <type>org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget</type>
            </parameter>
            <parameter>
                <name>on</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>addField</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>field</name>
                <type>org.apache.pdfbox.pdmodel.interactive.form.PDField</type>
            </parameter>
        </method>
        <method>
            <name>getField</name>
            <comment>This will get a field by name, possibly using the cache if setCache is
 true.
fullyQualifiedName: The name of the field to get.
Return type: @return:The field with that name of null if one was not found.</comment>
            <returntype>org.apache.pdfbox.pdmodel.interactive.form.PDField</returntype>
            <parameter>
                <name>fullyQualifiedName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>clearFields</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>doc</name>
                <type>org.apache.pdfbox.pdmodel.PDDocument</type>
            </parameter>
        </method>
        <method>
            <name>flatten</name>
            <comment>This will flatten all form fields.
 
 &lt;p&gt;
 Flattening a form field will take the current appearance and make that part
 of the pages content stream. All form fields and annotations associated are
 removed.
 &lt;/p&gt;
 
 &lt;p&gt;
 Invisible and hidden fields will be skipped and will not become part of the
 page content stream
 &lt;/p&gt;
 
 &lt;p&gt;
 The appearances for the form fields widgets will &lt;strong&gt;not&lt;/strong&gt; be
 generated
 &lt;p&gt;</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>importFDF</name>
            <comment>This method will import an entire FDF document into the PDF document that
 this acroform is part of.
fdf: The FDF document to import.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>fdf</name>
                <type>org.apache.pdfbox.pdmodel.fdf.FDFDocument</type>
            </parameter>
        </method>
        <method>
            <name>refreshAppearances</name>
            <comment>Refreshes the appearance streams and appearance dictionaries for the widget
 annotations of all fields.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>exportFDF</name>
            <comment>This will export all FDF form data.
Return type: @return:An FDF document used to export the document.</comment>
            <returntype>org.apache.pdfbox.pdmodel.fdf.FDFDocument</returntype>
        </method>
        <method>
            <name>flatten2</name>
            <comment>This will flatten the specified form fields.
 
 &lt;p&gt;
 Flattening a form field will take the current appearance and make that part
 of the pages content stream. All form fields and annotations associated are
 removed.
 &lt;/p&gt;
 
 &lt;p&gt;
 Invisible and hidden fields will be skipped and will not become part of the
 page content stream
 &lt;/p&gt;
fields: 
refreshAppearances: if set to true the appearances for the form field widgets will be
          updated</comment>
            <returntype>void</returntype>
            <parameter>
                <name>fields</name>
                <type>java.util.List</type>
            </parameter>
            <parameter>
                <name>refreshAppearances</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>saveXFDF</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>fileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>refreshAppearances2</name>
            <comment>Refreshes the appearance streams and appearance dictionaries for the widget
 annotations of the specified fields.
fields: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>fields</name>
                <type>java.util.List</type>
            </parameter>
        </method>
        <method>
            <name>hasXFA</name>
            <comment>This will tell if the AcroForm has XFA content.
Return type: @return:true if the AcroForm is an XFA form</comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>DefaultResources</name>
            <returntype>org.apache.pdfbox.pdmodel.PDResources</returntype>
            <parameter>
                <name>dr</name>
                <type>org.apache.pdfbox.pdmodel.PDResources</type>
            </parameter>
            <comment>This will get the default resources for the AcroForm.</comment>
        </property>
        <property>
            <name>FieldTree</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.form.PDFieldTree</returntype>
            <comment>Return the field tree representing all form fields</comment>
        </property>
        <property>
            <name>NeedAppearances</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>value</name>
                <type>java.lang.Boolean</type>
            </parameter>
            <comment>True if the viewing application should construct the appearances of all
 field widgets. The default value is false.</comment>
        </property>
        <property>
            <name>SignaturesExist</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>signaturesExist</name>
                <type>boolean</type>
            </parameter>
            <comment>Determines if SignaturesExist is set.</comment>
        </property>
        <property>
            <name>AppendOnly</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>appendOnly</name>
                <type>boolean</type>
            </parameter>
            <comment>Determines if AppendOnly is set.</comment>
        </property>
        <property>
            <name>FieldIterator</name>
            <returntype>java.util.Iterator</returntype>
            <comment>Returns an iterator which walks all fields in the field tree, in order.</comment>
        </property>
        <property>
            <name>Q</name>
            <returntype>int</returntype>
            <parameter>
                <name>q</name>
                <type>int</type>
            </parameter>
            <comment>This will get the document-wide default value for the
 quadding/justification of variable text fields. 0 - Left(default) 1 -
 Centered 2 - Right See the QUADDING constants of {@link PDVariableText}.</comment>
        </property>
        <property>
            <name>XFA</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.form.PDXFAResource</returntype>
            <parameter>
                <name>xfa</name>
                <type>org.apache.pdfbox.pdmodel.interactive.form.PDXFAResource</type>
            </parameter>
            <comment>Get the XFA resource, the XFA resource is only used for PDF 1.5+ forms.</comment>
        </property>
        <property>
            <name>Fields</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>fields</name>
                <type>java.util.List</type>
            </parameter>
            <comment>This will return all of the documents root fields.
 
 A field might have children that are fields (non-terminal field) or does
 not have children which are fields (terminal fields).
 
 The fields within an AcroForm are organized in a tree structure. The
 documents root fields might either be terminal fields, non-terminal fields
 or a mixture of both. Non-terminal fields mark branches which contents can
 be retrieved using {@link PDNonTerminalField#getChildren()}.</comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment></comment>
        </property>
        <property>
            <name>CachingFields</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>cache</name>
                <type>boolean</type>
            </parameter>
            <comment>This will tell if this acro form is caching the fields.</comment>
        </property>
        <property>
            <name>DefaultAppearance</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>daValue</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Get the default appearance.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.acroform.PDActionJavaScriptwrapper</name>
        <shortname>PDActionJavaScript</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.action.PDActionJavaScript</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>js</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>Action</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>sAction</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Type</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>type</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>SubType</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>s</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Next</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>next</name>
                <type>java.util.List</type>
            </parameter>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.acroform.PDAppearanceCharacteristicsDictionarywrapper</name>
        <shortname>PDAppearanceCharacteristicsDictionary</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>Background</name>
            <returntype>org.apache.pdfbox.pdmodel.graphics.color.PDColor</returntype>
            <parameter>
                <name>c</name>
                <type>org.apache.pdfbox.pdmodel.graphics.color.PDColor</type>
            </parameter>
            <comment>This will retrieve the background color.</comment>
        </property>
        <property>
            <name>NormalIcon</name>
            <returntype>org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject</returntype>
            <comment>This will retrieve the normal icon.</comment>
        </property>
        <property>
            <name>RolloverIcon</name>
            <returntype>org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject</returntype>
            <comment>This will retrieve the rollover icon.</comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment>returns the dictionary.</comment>
        </property>
        <property>
            <name>RolloverCaption</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>caption</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will retrieve the rollover caption.</comment>
        </property>
        <property>
            <name>NormalCaption</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>caption</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will retrieve the normal caption.</comment>
        </property>
        <property>
            <name>AlternateCaption</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>caption</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will retrieve the alternate caption.</comment>
        </property>
        <property>
            <name>Rotation</name>
            <returntype>int</returntype>
            <parameter>
                <name>rotation</name>
                <type>int</type>
            </parameter>
            <comment>This will retrieve the rotation of the annotation widget. It must be a
 multiple of 90. Default is 0</comment>
        </property>
        <property>
            <name>BorderColour</name>
            <returntype>org.apache.pdfbox.pdmodel.graphics.color.PDColor</returntype>
            <parameter>
                <name>c</name>
                <type>org.apache.pdfbox.pdmodel.graphics.color.PDColor</type>
            </parameter>
            <comment>This will retrieve the border color.</comment>
        </property>
        <property>
            <name>AlternateIcon</name>
            <returntype>org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject</returntype>
            <comment>This will retrieve the alternate icon.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.acroform.PDAppearanceContentStreammwrapper</name>
        <shortname>PDAppearanceContentStream</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.PDAppearanceContentStream</objectwrapper>
        <owner>process</owner>
        <method>
            <name>beginMarkedContent</name>
            <comment>Begin a marked content sequence.
tag: the tag</comment>
            <returntype>void</returntype>
            <parameter>
                <name>tag</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
        </method>
        <method>
            <name>setNonStrokingColor</name>
            <comment>Set the non-stroking color using an AWT color. Conversion uses the default
 sRGB color space.
color: The color to set.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>r</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>g</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>b</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>closePath</name>
            <comment>Closes the current subpath.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>showText</name>
            <comment>Shows the given text at the location specified by the current text matrix.
text: The Unicode text to show.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>text</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>endMarkedContent</name>
            <comment>End a marked content sequence.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>document</name>
                <type>org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream</type>
            </parameter>
        </method>
        <method>
            <name>drawForm</name>
            <comment>Draws the given Form XObject at the current location.
form: Form XObject</comment>
            <returntype>void</returntype>
            <parameter>
                <name>form</name>
                <type>org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject</type>
            </parameter>
        </method>
        <method>
            <name>endText</name>
            <comment>End some text operations.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>setFont</name>
            <comment>Set the font and font size to draw text with.
font: The font to use.
fontSize: The font size to draw the text.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>font</name>
                <type>org.apache.pdfbox.pdmodel.font.PDFont</type>
            </parameter>
            <parameter>
                <name>fontSize</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>addComment</name>
            <comment>Write a comment line.
comment: the comment to be added to the content stream.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>comment</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>newLineAtOffset</name>
            <comment>The Td operator. Move to the start of the next line, offset from the start
 of the current line by (tx, ty).
tx: The x translation.
ty: The y translation.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>tx</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>ty</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>curveTo1</name>
            <comment>Append a cubic Bézier curve to the current path. The curve extends from the
 current point to the point (x3, y3), using (x1, y1) and (x3, y3) as the
 Bézier control points.
x1: x coordinate of the point 1
y1: y coordinate of the point 1
x3: x coordinate of the point 3
y3: y coordinate of the point 3</comment>
            <returntype>void</returntype>
            <parameter>
                <name>x1</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y1</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>x3</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y3</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>fillAndStrokeEvenOdd</name>
            <comment>Fill and then stroke the path, using the even-odd rule to determine the
 region to fill. This shall produce the same result as constructing two
 identical path objects, painting the first with {@link #fillEvenOdd() } and
 the second with {@link #stroke() }.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>curveTo2</name>
            <comment>Append a cubic Bézier curve to the current path. The curve extends from the
 current point to the point (x3, y3), using the current point and (x2, y2)
 as the Bézier control points.
x2: x coordinate of the point 2
y2: y coordinate of the point 2
x3: x coordinate of the point 3
y3: y coordinate of the point 3</comment>
            <returntype>void</returntype>
            <parameter>
                <name>x2</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y2</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>x3</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y3</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>shadingFill</name>
            <comment>Fills the clipping area with the given shading.
shading: Shading resource</comment>
            <returntype>void</returntype>
            <parameter>
                <name>shading</name>
                <type>org.apache.pdfbox.pdmodel.graphics.shading.PDShading</type>
            </parameter>
        </method>
        <method>
            <name>addRect</name>
            <comment>Add a rectangle to the current path.
x: The lower left x coordinate.
y: The lower left y coordinate.
width: The width of the rectangle.
height: The height of the rectangle.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>drawShape</name>
            <comment>Draw a shape.

 &lt;p&gt;
 Dependent on the lineWidth and whether or not there is a background to be
 generated there are different commands to be used for draw a shape.
lineWidth: the line width of the path.
hasStroke: shall there be a stroking color.
hasFill: shall there be a fill color.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>lineWidth</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>hasStroke</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>hasFill</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>closeAndFillAndStrokeEvenOdd</name>
            <comment>Close, fill, and then stroke the path, using the even-odd rule to determine
 the region to fill. This shall have the same effect as the sequence
 {@link #closePath() } and then {@link #fillAndStrokeEvenOdd() }.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>setStrokingColorOnDemand</name>
            <comment>Set the stroking color.
 
 &lt;p&gt;
 The command is only emitted if the color is not null and the number of
 components is &amp;gt; 0.
color: The colorspace to write.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>color</name>
                <type>org.apache.pdfbox.pdmodel.graphics.color.PDColor</type>
            </parameter>
        </method>
        <method>
            <name>fill2</name>
            <comment>Fills the path using the nonzero winding number rule.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>newLine</name>
            <comment>Move to the start of the next line of text. Requires the leading (see
 {@link #setLeading}) to have been set.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>closeAndStroke</name>
            <comment>Close and stroke the path.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>setLineDashPattern</name>
            <comment>Set the line dash pattern.
pattern: The pattern array
phase: The phase of the pattern</comment>
            <returntype>void</returntype>
            <parameter>
                <name>pattern</name>
                <type>float[]</type>
            </parameter>
            <parameter>
                <name>phase</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>lineTo</name>
            <comment>Draw a line from the current position to the given coordinates.
x: The x coordinate.
y: The y coordinate.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>setNonStrokingColor7</name>
            <comment>Set the non-stroking color in the DeviceCMYK color space. Range is 0..1.
c: The cyan value.
m: The magenta value.
y: The yellow value.
k: The black value.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>c</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>m</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>k</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>transform</name>
            <comment>The cm operator. Concatenates the given matrix with the current
 transformation matrix (CTM), which maps user space coordinates used within
 a PDF content stream into output device coordinates. More details on
 coordinates can be found in the PDF 32000 specification, 8.3.2 Coordinate
 Spaces.
matrix: the transformation matrix</comment>
            <returntype>void</returntype>
            <parameter>
                <name>matrix</name>
                <type>org.apache.pdfbox.util.Matrix</type>
            </parameter>
        </method>
        <method>
            <name>setStrokingColorCMYK</name>
            <comment>Set the stroking color in the DeviceCMYK color space. Range is 0..255.
c: The cyan value.
m: The magenta value.
y: The yellow value.
k: The black value.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>c</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>m</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>k</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>setNonStrokingColor5</name>
            <comment>Set the non-stroking color in the DeviceCMYK color space. Range is 0..255.
c: The cyan value.
m: The magenta value.
y: The yellow value.
k: The black value.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>c</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>m</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>k</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>drawImage2</name>
            <comment>Draw an image at the x,y coordinates, with the given size.
image: The image to draw.
x: The x-coordinate to draw the image.
y: The y-coordinate to draw the image.
width: The width to draw the image.
height: The height to draw the image.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>image</name>
                <type>org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>drawImage3</name>
            <comment>Draw an image at the origin with the given transformation matrix.
image: The image to draw.
matrix: The transformation matrix to apply to the image.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>image</name>
                <type>org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject</type>
            </parameter>
            <parameter>
                <name>matrix</name>
                <type>org.apache.pdfbox.util.Matrix</type>
            </parameter>
        </method>
        <method>
            <name>close</name>
            <comment>Close the content stream. This must be called when you are done with this
 object.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>drawImage5</name>
            <comment>Draw an inline image at the x,y coordinates and a certain width and height.
inlineImage: The inline image to draw.
x: The x-coordinate to draw the inline image.
y: The y-coordinate to draw the inline image.
width: The width of the inline image to draw.
height: The height of the inline image to draw.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>inlineImage</name>
                <type>org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>saveGraphicsState</name>
            <comment>q operator. Saves the current graphics state.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>drawInlineImage2</name>
            <comment>Draw an inline image at the x,y coordinates and a certain width and height.
inlineImage: The inline image to draw.
x: The x-coordinate to draw the inline image.
y: The y-coordinate to draw the inline image.
width: The width of the inline image to draw.
height: The height of the inline image to draw.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>inlineImage</name>
                <type>org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>setBorderLine</name>
            <comment>Convenience method for annotations: sets the line with and dash style.
lineWidth: The line width.
bs: The border style, may be null.
border: The border array, must have at least three entries. This is only
          used if the border style is null.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>lineWidth</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>bs</name>
                <type>org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary</type>
            </parameter>
            <parameter>
                <name>border</name>
                <type>org.apache.pdfbox.cos.COSArray</type>
            </parameter>
        </method>
        <method>
            <name>drawInlineImage4</name>
            <comment>Draw an inline image at the x,y coordinates, with the default size of the
 image.
inlineImage: The inline image to draw.
x: The x-coordinate to draw the inline image.
y: The y-coordinate to draw the inline image.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>inlineImage</name>
                <type>org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>setStrokingColor</name>
            <comment>Set the stroking color in the DeviceRGB color space. Range is 0..255.
r: The red value
g: The green value.
b: The blue value.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>r</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>g</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>b</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>curveTo</name>
            <comment>Append a cubic Bézier curve to the current path. The curve extends from the
 current point to the point (x3, y3), using (x1, y1) and (x2, y2) as the
 Bézier control points.
x1: x coordinate of the point 1
y1: y coordinate of the point 1
x2: x coordinate of the point 2
y2: y coordinate of the point 2
x3: x coordinate of the point 3
y3: y coordinate of the point 3</comment>
            <returntype>void</returntype>
            <parameter>
                <name>x1</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y1</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>x2</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y2</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>x3</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y3</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>showTextWithPositioning</name>
            <comment>Shows the given text at the location specified by the current text matrix
 with the given interspersed positioning. This allows the user to
 efficiently position each glyph or sequence of glyphs.
textWithPositioningArray: An array consisting of String and Float types. Each String is
          output to the page using the current text matrix. Using the
          default coordinate system, each interspersed number adjusts the
          current text matrix by translating to the left or down for
          horizontal and vertical text respectively. The number is expressed
          in thousands of a text space unit, and may be negative.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>textWithPositioningArray</name>
                <type>java.lang.Object[]</type>
            </parameter>
        </method>
        <method>
            <name>restoreGraphicsState</name>
            <comment>Q operator. Restores the current graphics state.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>clipEvenOdd</name>
            <comment>Intersects the current clipping path with the current path, using the
 even-odd rule.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>closeAndFillAndStroke</name>
            <comment>Close, fill, and then stroke the path, using the nonzero winding number
 rule to determine the region to fill. This shall have the same effect as
 the sequence {@link #closePath() } and then {@link #fillAndStroke() }.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>stroke</name>
            <comment>Stroke the path.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>drawImage</name>
            <comment>Draw an image at the x,y coordinates, with the default size of the image.
image: The image to draw.
x: The x-coordinate to draw the image.
y: The y-coordinate to draw the image.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>image</name>
                <type>org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>setStrokingColorCMYKFloat</name>
            <comment>Set the stroking color in the DeviceCMYK color space. Range is 0..1
c: The cyan value.
m: The magenta value.
y: The yellow value.
k: The black value.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>c</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>m</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>k</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>setNonStrokingColorOnDemand</name>
            <comment>Set the non stroking color.
 
 &lt;p&gt;
 The command is only emitted if the color is not null and the number of
 components is &amp;gt; 0.
color: The colorspace to write.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>color</name>
                <type>org.apache.pdfbox.pdmodel.graphics.color.PDColor</type>
            </parameter>
        </method>
        <method>
            <name>fillEvenOdd</name>
            <comment>Fills the path using the even-odd winding rule.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>beginText</name>
            <comment>Begin some text operations.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>clip</name>
            <comment>Intersects the current clipping path with the current path, using the
 nonzero rule.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>moveTo</name>
            <comment>Move the current position to the given coordinates.
x: The x coordinate.
y: The y coordinate.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>fillAndStroke</name>
            <comment>Fill and then stroke the path, using the nonzero winding number rule to
 determine the region to fill. This shall produce the same result as
 constructing two identical path objects, painting the first with
 {@link #fill() } and the second with {@link #stroke() }.</comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>HorizontalScaling</name>
            <parameter>
                <name>scale</name>
                <type>float</type>
            </parameter>
            <comment>Set the horizontal scaling to scale / 100.</comment>
        </property>
        <property>
            <name>LineJoinStyle</name>
            <parameter>
                <name>lineJoinStyle</name>
                <type>int</type>
            </parameter>
            <comment>Set the line join style.</comment>
        </property>
        <property>
            <name>WordSpacing</name>
            <parameter>
                <name>spacing</name>
                <type>float</type>
            </parameter>
            <comment>Set the word spacing. The value shall be added to the horizontal or
 vertical component of the ASCII SPACE character, depending on the writing
 mode.
 &lt;p&gt;
 This will have an effect only with Type1 and TrueType fonts, not with Type0
 fonts. The PDF specification tells why: "Word spacing shall be applied to
 every occurrence of the single-byte character code 32 in a string when
 using a simple font or a composite font that defines code 32 as a
 single-byte code. It shall not apply to occurrences of the byte value 32 in
 multiple-byte codes."</comment>
        </property>
        <property>
            <name>GraphicsStateParameters</name>
            <parameter>
                <name>state</name>
                <type>org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState</type>
            </parameter>
            <comment>Set an extended graphics state.</comment>
        </property>
        <property>
            <name>TextRise</name>
            <parameter>
                <name>rise</name>
                <type>float</type>
            </parameter>
            <comment>Set the text rise value, i.e. move the baseline up or down. This is useful
 for drawing superscripts or subscripts.</comment>
        </property>
        <property>
            <name>LineWidthOnDemand</name>
            <parameter>
                <name>lineWidth</name>
                <type>float</type>
            </parameter>
            <comment>Sets the line width. The command is only emitted if the lineWidth is
 different to 1.</comment>
        </property>
        <property>
            <name>RenderingMode</name>
            <parameter>
                <name>rm</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Set the text rendering mode. This determines whether showing text shall
 cause glyph outlines to be stroked, filled, used as a clipping boundary, or
 some combination of the three.</comment>
        </property>
        <property>
            <name>CharacterSpacing</name>
            <parameter>
                <name>spacing</name>
                <type>float</type>
            </parameter>
            <comment>Set the character spacing. The value shall be added to the horizontal or
 vertical component of the glyph's displacement, depending on the writing
 mode.</comment>
        </property>
        <property>
            <name>NonStrokingColor</name>
            <parameter>
                <name>components</name>
                <type>float[]</type>
            </parameter>
            <comment>Set the non stroking color.</comment>
        </property>
        <property>
            <name>LineCapStyle</name>
            <parameter>
                <name>lineCapStyle</name>
                <type>int</type>
            </parameter>
            <comment>Set the line cap style.</comment>
        </property>
        <property>
            <name>MiterLimit</name>
            <parameter>
                <name>miterLimit</name>
                <type>float</type>
            </parameter>
            <comment>Set the miter limit.</comment>
        </property>
        <property>
            <name>StrokingColor</name>
            <parameter>
                <name>components</name>
                <type>float[]</type>
            </parameter>
            <comment>Set the stroking color.</comment>
        </property>
        <property>
            <name>LineWidth</name>
            <parameter>
                <name>lineWidth</name>
                <type>float</type>
            </parameter>
            <comment>Set line width to the given value.</comment>
        </property>
        <property>
            <name>Leading</name>
            <parameter>
                <name>leading</name>
                <type>float</type>
            </parameter>
            <comment>Sets the text leading.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.acroform.PDAppearanceDictionarywrapper</name>
        <shortname>PDAppearanceDictionary</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>RolloverAppearance2</name>
            <parameter>
                <name>ap</name>
                <type>org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream</type>
            </parameter>
            <comment>This will set the rollover appearance when there is rollover appearance to
 be shown.</comment>
        </property>
        <property>
            <name>NormalAppearance2</name>
            <parameter>
                <name>ap</name>
                <type>org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream</type>
            </parameter>
            <comment>This will set the normal appearance when there is only one appearance to be
 shown.</comment>
        </property>
        <property>
            <name>DownAppearance2</name>
            <parameter>
                <name>ap</name>
                <type>org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream</type>
            </parameter>
            <comment>This will set the down appearance when there is down appearance to be
 shown.</comment>
        </property>
        <property>
            <name>RolloverAppearance</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceEntry</returntype>
            <parameter>
                <name>entry</name>
                <type>org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceEntry</type>
            </parameter>
            <comment>This will return a list of appearances. In the case where there is only one
 appearance the map will contain one entry whose key is the string
 "default". If there is no rollover appearance then the normal appearance
 will be returned. Which means that this method will never return null.</comment>
        </property>
        <property>
            <name>NormalAppearance</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceEntry</returntype>
            <parameter>
                <name>entry</name>
                <type>org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceEntry</type>
            </parameter>
            <comment>This will return a list of appearances. In the case where there is only one
 appearance the map will contain one entry whose key is the string
 "default".</comment>
        </property>
        <property>
            <name>DownAppearance</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceEntry</returntype>
            <parameter>
                <name>entry</name>
                <type>org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceEntry</type>
            </parameter>
            <comment>This will return a list of appearances. In the case where there is only one
 appearance the map will contain one entry whose key is the string
 "default". If there is no rollover appearance then the normal appearance
 will be returned. Which means that this method will never return null.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.acroform.PDAppearanceEntrywrapper</name>
        <shortname>PDAppearanceEntry</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceEntry</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>dict</name>
                <type>org.apache.pdfbox.cos.COSDictionary</type>
            </parameter>
        </method>
        <property>
            <name>isSubDictionary</name>
            <returntype>boolean</returntype>
            <comment>Returns true if this entry is an appearance subdictionary.</comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSBase</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SubDictionary</name>
            <returntype>java.util.Map</returntype>
            <comment>Returns the entry as an appearance subdictionary.</comment>
        </property>
        <property>
            <name>Stream</name>
            <returntype>boolean</returntype>
            <comment>Returns true if this entry is an appearance stream.</comment>
        </property>
        <property>
            <name>AppearanceStream</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream</returntype>
            <comment>Returns the entry as an appearance stream.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.acroform.PDAppearanceStreamwrapper</name>
        <shortname>PDAppearanceStream</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream</objectwrapper>
        <owner>process</owner>
        <method>
            <name>createXObject</name>
            <comment></comment>
            <returntype>org.apache.pdfbox.pdmodel.graphics.PDXObject</returntype>
            <parameter>
                <name>base</name>
                <type>org.apache.pdfbox.cos.COSBase</type>
            </parameter>
            <parameter>
                <name>resources</name>
                <type>org.apache.pdfbox.pdmodel.PDResources</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>doc</name>
                <type>org.apache.pdfbox.pdmodel.PDDocument</type>
            </parameter>
        </method>
        <property>
            <name>Group</name>
            <returntype>org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroupAttributes</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ContentStream</name>
            <returntype>org.apache.pdfbox.pdmodel.common.PDStream</returntype>
            <comment></comment>
        </property>
        <property>
            <name>COSStream</name>
            <returntype>org.apache.pdfbox.cos.COSStream</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Contents</name>
            <returntype>java.io.InputStream</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Matrix</name>
            <returntype>org.apache.pdfbox.util.Matrix</returntype>
            <comment></comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSBase</returntype>
            <comment></comment>
        </property>
        <property>
            <name>BBox</name>
            <returntype>org.apache.pdfbox.pdmodel.common.PDRectangle</returntype>
            <parameter>
                <name>bbox</name>
                <type>org.apache.pdfbox.pdmodel.common.PDRectangle</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>FormType</name>
            <returntype>int</returntype>
            <parameter>
                <name>formType</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>PDStream</name>
            <returntype>org.apache.pdfbox.pdmodel.common.PDStream</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Resources</name>
            <returntype>org.apache.pdfbox.pdmodel.PDResources</returntype>
            <parameter>
                <name>resources</name>
                <type>org.apache.pdfbox.pdmodel.PDResources</type>
            </parameter>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.acroform.PDCheckBoxwrapper</name>
        <shortname>PDCheckBox</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.form.PDCheckBox</objectwrapper>
        <owner>process</owner>
        <method>
            <name>importFDF</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>fdfField</name>
                <type>org.apache.pdfbox.pdmodel.fdf.FDFField</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>doc</name>
                <type>org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm</type>
            </parameter>
        </method>
        <property>
            <name>ReadOnly</name>
            <parameter>
                <name>readonly</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>FieldFlags</name>
            <returntype>int</returntype>
            <parameter>
                <name>flags</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Actions</name>
            <parameter>
                <name>actions</name>
                <type>org.apache.pdfbox.pdmodel.interactive.action.PDFormFieldAdditionalActions</type>
            </parameter>
            <comment>Set the actions of the field.</comment>
        </property>
        <property>
            <name>ValueAsString</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Widget</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget</returntype>
            <comment>This will get the single associated widget that is part of this field. This
 occurs when the Widget is embedded in the fields dictionary. Sometimes
 there are multiple sub widgets associated with this field, in which case
 you want to use getWidgets(). If the kids entry is specified, then the
 first entry in that list will be returned.</comment>
        </property>
        <property>
            <name>NoExport</name>
            <parameter>
                <name>noExport</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>RadioButton</name>
            <parameter>
                <name>radiobutton</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>FieldType</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Checked</name>
            <parameter>
                <name>checked</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>DefaultValue</name>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Widgets</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>children</name>
                <type>java.util.List</type>
            </parameter>
            <comment>Returns the widget annotations associated with this field.</comment>
        </property>
        <property>
            <name>Required</name>
            <parameter>
                <name>required</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>PartialName</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Returns the partial name of the field.</comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Value</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>AlternateFieldName</name>
            <parameter>
                <name>alternateFieldName</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>MappingName</name>
            <parameter>
                <name>mappingName</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>PushButton</name>
            <parameter>
                <name>pushbutton</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.acroform.PDComboBoxwrapper</name>
        <shortname>PDComboBox</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.form.PDComboBox</objectwrapper>
        <owner>process</owner>
        <method>
            <name>setOptions2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>displayValues</name>
                <type>java.util.List</type>
            </parameter>
            <parameter>
                <name>exportValues</name>
                <type>java.util.List</type>
            </parameter>
        </method>
        <method>
            <name>addWidget</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>widget</name>
                <type>org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>doc</name>
                <type>org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm</type>
            </parameter>
        </method>
        <property>
            <name>ReadOnly</name>
            <parameter>
                <name>readonly</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Options</name>
            <parameter>
                <name>displayValues</name>
                <type>java.util.List</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>FieldFlags</name>
            <parameter>
                <name>flags</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Actions</name>
            <parameter>
                <name>actions</name>
                <type>org.apache.pdfbox.pdmodel.interactive.action.PDFormFieldAdditionalActions</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>CommitOnSelChange</name>
            <parameter>
                <name>commitOnSelChange</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>NoExport</name>
            <parameter>
                <name>noExport</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Widget</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Combo</name>
            <parameter>
                <name>combo</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Edit</name>
            <parameter>
                <name>edit</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Value2</name>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>DefaultValue</name>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Widgets</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>children</name>
                <type>java.util.List</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>PartialName</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Returns the partial name of the field.</comment>
        </property>
        <property>
            <name>Required</name>
            <returntype>void</returntype>
            <parameter>
                <name>required</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Value</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>values</name>
                <type>java.util.List</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>AlternateFieldName</name>
            <parameter>
                <name>alternateFieldName</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>DefaultAppearance</name>
            <parameter>
                <name>daValue</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Multiselect</name>
            <parameter>
                <name>multiSelect</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>MappingName</name>
            <parameter>
                <name>mappingName</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>DefaultStyleString</name>
            <parameter>
                <name>defaultStyleString</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.acroform.PDFieldwrapper</name>
        <shortname>PDField</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.form.PDField</objectwrapper>
        <owner>process</owner>
        <method>
            <name>toString</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>addWidget</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>widget</name>
                <type>org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>ReadOnly</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>treadonly</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>FieldFlags</name>
            <returntype>int</returntype>
            <parameter>
                <name>flags</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Actions</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.action.PDFormFieldAdditionalActions</returntype>
            <comment></comment>
        </property>
        <property>
            <name>NoExport</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>noexport</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>FullyQualifiedName</name>
            <returntype>java.lang.String</returntype>
            <comment>Returns the fully qualified name of the field, which is a concatenation of
 the names of all the parents fields.</comment>
        </property>
        <property>
            <name>Widget</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget</returntype>
            <comment></comment>
        </property>
        <property>
            <name>FieldType</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Widgets</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Required</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>required</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>PartialName</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Returns the partial name of the field.</comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment>This will get the dictionary associated with this field.</comment>
        </property>
        <property>
            <name>Value</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Returns the value of this field, or an empty string.</comment>
        </property>
        <property>
            <name>AcroForm</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm</returntype>
            <comment>This will get the acroform that this field is part of.</comment>
        </property>
        <property>
            <name>AlternateFieldName</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>alternateFieldName</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Gets the alternate name of the field ("shall be used in place of the actual
 field name wherever the field shall be identified in the user interface
 (such as in error or status messages referring to the field)").</comment>
        </property>
        <property>
            <name>MappingName</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>mappingName</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Gets the mapping name of the field.
 
 The mapping name shall be used when exporting interactive form field data
 from the document.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.acroform.PDFormFieldAdditionalActionswrapper</name>
        <shortname>PDFormFieldAdditionalActions</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.action.PDFormFieldAdditionalActions</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>doc</name>
                <type>org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm</type>
            </parameter>
        </method>
        <property>
            <name>C</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.action.PDAction</returntype>
            <parameter>
                <name>c</name>
                <type>org.apache.pdfbox.pdmodel.interactive.action.PDAction</type>
            </parameter>
            <comment>This will get a JavaScript action to be performed in order to recalculate
 the value of this field when that of another field changes. The order in
 which the document's fields are recalculated is defined by the CO entry in
 the interactive form dictionary. The name C stands for "calculate".</comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment></comment>
        </property>
        <property>
            <name>F</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.action.PDAction</returntype>
            <parameter>
                <name>f</name>
                <type>org.apache.pdfbox.pdmodel.interactive.action.PDAction</type>
            </parameter>
            <comment>This will get a JavaScript action to be performed before the field is
 formatted to display its current value. This allows the field's value to be
 modified before formatting.</comment>
        </property>
        <property>
            <name>V</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.action.PDAction</returntype>
            <parameter>
                <name>v</name>
                <type>org.apache.pdfbox.pdmodel.interactive.action.PDAction</type>
            </parameter>
            <comment>This will get a JavaScript action to be performed when the field's value is
 changed. This allows the new value to be checked for validity. The name V
 stands for "validate".</comment>
        </property>
        <property>
            <name>K</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.action.PDAction</returntype>
            <parameter>
                <name>k</name>
                <type>org.apache.pdfbox.pdmodel.interactive.action.PDAction</type>
            </parameter>
            <comment>This will get a JavaScript action to be performed when the user types a
 keystroke into a text field or combo box or modifies the selection in a
 scrollable list box. This allows the keystroke to be checked for validity
 and rejected or modified.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.acroform.PDListBoxwrapper</name>
        <shortname>PDListBox</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.form.PDListBox</objectwrapper>
        <owner>process</owner>
        <method>
            <name>setOptions2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>exportValues</name>
                <type>java.util.List</type>
            </parameter>
            <parameter>
                <name>displayValues</name>
                <type>java.util.List</type>
            </parameter>
        </method>
        <method>
            <name>addWidget</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>widget</name>
                <type>org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>doc</name>
                <type>org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm</type>
            </parameter>
        </method>
        <property>
            <name>MultiSelect</name>
            <parameter>
                <name>multiSelect</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Options</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>displayValues</name>
                <type>java.util.List</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>FieldFlags</name>
            <parameter>
                <name>flags</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Actions</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.action.PDFormFieldAdditionalActions</returntype>
            <parameter>
                <name>actions</name>
                <type>org.apache.pdfbox.pdmodel.interactive.action.PDFormFieldAdditionalActions</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>CommitOnSelChange</name>
            <parameter>
                <name>commitOnSelChange</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>ValueAsString</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>NoExport</name>
            <parameter>
                <name>noExport</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Widget</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Combo</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>combo</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>TopIndex</name>
            <returntype>int</returntype>
            <parameter>
                <name>topIndex</name>
                <type>java.lang.Integer</type>
            </parameter>
            <comment>This will get the top index "TI" value.</comment>
        </property>
        <property>
            <name>DefaultValue</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Q</name>
            <returntype>int</returntype>
            <parameter>
                <name>q</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Widgets</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>children</name>
                <type>java.util.List</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>PartialName</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment></comment>
        </property>
        <property>
            <name>AlternateFieldName</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>alternateFieldName</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>DefaultAppearance</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>daValue</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>DefaultStyleString</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>defaultStyleString</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>MappingName</name>
            <parameter>
                <name>mappingName</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>doNotSpellCheck</name>
            <parameter>
                <name>doNotSpellCheck</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.acroform.PDPropertyListwrapper</name>
        <shortname>PDPropertyList</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.acroform.PDPushButtonwrapper</name>
        <shortname>PDPushButton</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.form.PDPushButton</objectwrapper>
        <owner>process</owner>
        <method>
            <name>addWidget</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>widget</name>
                <type>org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>doc</name>
                <type>org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm</type>
            </parameter>
        </method>
        <property>
            <name>ReadOnly</name>
            <parameter>
                <name>readonly</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>FieldFlags</name>
            <parameter>
                <name>flags</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Actions</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.action.PDFormFieldAdditionalActions</returntype>
            <parameter>
                <name>actions</name>
                <type>org.apache.pdfbox.pdmodel.interactive.action.PDFormFieldAdditionalActions</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>ValueAsString</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>NoExport</name>
            <parameter>
                <name>noExport</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Widget</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget</returntype>
            <comment></comment>
        </property>
        <property>
            <name>RadioButton</name>
            <parameter>
                <name>radiobutton</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>ExportValues</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>values</name>
                <type>java.util.List</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>DefaultValue</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Widgets</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>children</name>
                <type>java.util.List</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>PartialName</name>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Required</name>
            <parameter>
                <name>required</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Value</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>AlternateFieldName</name>
            <parameter>
                <name>alternateFieldName</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>MappingName</name>
            <parameter>
                <name>mappingName</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>PushButton</name>
            <parameter>
                <name>pushbutton</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.acroform.PDRadioButtonwrapper</name>
        <shortname>PDRadioButton</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.form.PDRadioButton</objectwrapper>
        <owner>process</owner>
        <method>
            <name>addWidget</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>widget</name>
                <type>org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>doc</name>
                <type>org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm</type>
            </parameter>
        </method>
        <property>
            <name>ReadOnly</name>
            <parameter>
                <name>readonly</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>FieldFlags</name>
            <parameter>
                <name>flags</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Actions</name>
            <parameter>
                <name>actions</name>
                <type>org.apache.pdfbox.pdmodel.interactive.action.PDFormFieldAdditionalActions</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>ValueAsString</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>NoExport</name>
            <parameter>
                <name>noExport</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Widget</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget</returntype>
            <comment></comment>
        </property>
        <property>
            <name>RadioButton</name>
            <parameter>
                <name>radiobutton</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>ExportValues</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>values</name>
                <type>java.util.List</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>DefaultValue</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Widgets</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>children</name>
                <type>java.util.List</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Required</name>
            <parameter>
                <name>required</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>PartialName</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Returns the partial name of the field.</comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Value</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>RadiosInUnison</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>radiosInUnison</name>
                <type>boolean</type>
            </parameter>
            <comment>From the PDF Spec &lt;br&gt;
 If set, a group of radio buttons within a radio button field that use the
 same value for the on state will turn on and off in unison; that is if one
 is checked, they are all checked. If clear, the buttons are mutually
 exclusive (the same behavior as HTML radio buttons).</comment>
        </property>
        <property>
            <name>SelectedExportValues</name>
            <returntype>java.util.List</returntype>
            <comment>This will get the selected export values.
 &lt;p&gt;
 A RadioButton might have an export value to allow field values which can
 not be encoded as PDFDocEncoding or for the same export value being
 assigned to multiple RadioButtons in a group.&lt;br&gt;
 To define an export value the RadioButton must define options
 {@link #setExportValues(List)} which correspond to the individual items
 within the RadioButton.
 &lt;/p&gt;
 &lt;p&gt;
 The method will either return the corresponding values from the options
 entry or in case there is no such entry the fields value
 &lt;/p&gt;</comment>
        </property>
        <property>
            <name>AlternateFieldName</name>
            <parameter>
                <name>alternateFieldName</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>MappingName</name>
            <parameter>
                <name>mappingName</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>PushButton</name>
            <parameter>
                <name>pushbutton</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.acroform.PDSignatureFieldwrapper</name>
        <shortname>PDSignatureField</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField</objectwrapper>
        <owner>process</owner>
        <method>
            <name>addWidget</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>widget</name>
                <type>org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>doc</name>
                <type>org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm</type>
            </parameter>
        </method>
        <property>
            <name>DefaultValue</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature</returntype>
            <parameter>
                <name>value</name>
                <type>org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature</type>
            </parameter>
            <comment>Returns the default value, if any.</comment>
        </property>
        <property>
            <name>Widgets</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>PartialName</name>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Signature</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature</returntype>
            <parameter>
                <name>value</name>
                <type>org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature</type>
            </parameter>
            <comment>Get the signature dictionary.</comment>
        </property>
        <property>
            <name>ValueAsString</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Value</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature</returntype>
            <comment>Returns the signature contained in this field.</comment>
        </property>
        <property>
            <name>Widget</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SeedValue</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue</returntype>
            <parameter>
                <name>sv</name>
                <type>org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSeedValue</type>
            </parameter>
            <comment>&lt;p&gt;
 (Optional; PDF 1.5) A seed value dictionary containing information that
 constrains the properties of a signature that is applied to the field.
 &lt;/p&gt;</comment>
        </property>
        <property>
            <name>AlternateFieldName</name>
            <parameter>
                <name>alternateFieldName</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.acroform.PDSignaturewrapper</name>
        <shortname>PDSignature</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature</objectwrapper>
        <owner>process</owner>
        <method>
            <name>getContents2</name>
            <comment>Will return the embedded signature between the byterange gap.
pdfFile: The signed pdf file as byte array
Return type: @return:a byte array containing the signature</comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>pdfFile</name>
                <type>byte[]</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>getSignedContent</name>
            <comment>Return the signed content of the document. This is not a PDF file, nor is
 it the PDF file before signing, it is the byte sequence made of the input
 minus the area where the signature bytes will be. See "The ByteRange and
 signature value" in the document &lt;a href=
 "https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/DigitalSignaturesInPDF.pdf#page=5"&gt;Digital
 Signatures in a PDF&lt;/a&gt;.
pdfFile: The signed pdf file as InputStream. It will be closed in this
          method.
Return type: @return:a byte array containing only the signed part of the content</comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>pdfFile</name>
                <type>java.io.InputStream</type>
            </parameter>
        </method>
        <method>
            <name>getContents</name>
            <comment>Will return the embedded signature between the byterange gap.
pdfFile: The signed pdf file as InputStream. It will be closed in this
          method.
Return type: @return:a byte array containing the signature</comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>pdfFile</name>
                <type>java.io.InputStream</type>
            </parameter>
        </method>
        <method>
            <name>getSignedContent2</name>
            <comment>Return the signed content of the document. This is not a PDF file, nor is
 it the PDF file before signing, it is the byte sequence made of the input
 minus the area where the signature bytes will be. See "The ByteRange and
 signature value" in the document &lt;a href=
 "https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/DigitalSignaturesInPDF.pdf#page=5"&gt;Digital
 Signatures in a PDF&lt;/a&gt;.
pdfFile: The signed pdf file as byte array
Return type: @return:a byte array containing only the signed part of the content</comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>pdfFile</name>
                <type>byte[]</type>
            </parameter>
        </method>
        <property>
            <name>SUBFILTER_ADBE_PKCS7_DETACHED</name>
            <returntype>org.apache.pdfbox.cos.COSName</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ByteRange</name>
            <returntype>int[]</returntype>
            <parameter>
                <name>range</name>
                <type>int[]</type>
            </parameter>
            <comment>Read out the byterange from the file.</comment>
        </property>
        <property>
            <name>SUBFILTER_ADBE_PKCS7_SHA1</name>
            <returntype>org.apache.pdfbox.cos.COSName</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SignDate</name>
            <returntype>long</returntype>
            <parameter>
                <name>millis</name>
                <type>java.lang.Long</type>
            </parameter>
            <comment>Returns the sign date.</comment>
        </property>
        <property>
            <name>Reason</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>reason</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Returns the reason for the signing, such as (I agree...).</comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Returns the name of the person or authority signing the document. According
 to the PDF specification, this value should be used only when it is not
 possible to extract the name from the signature.</comment>
        </property>
        <property>
            <name>FILTER_ENTRUST_PPKEF</name>
            <returntype>org.apache.pdfbox.cos.COSName</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SUBFILTER_ETSI_CADES_DETACHED</name>
            <returntype>org.apache.pdfbox.cos.COSName</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SubFilter</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>subfilter</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <comment>Returns the subfilter.</comment>
        </property>
        <property>
            <name>Type</name>
            <parameter>
                <name>type</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <comment>Set the dictionary type.</comment>
        </property>
        <property>
            <name>FILTER_VERISIGN_PPKVS</name>
            <returntype>org.apache.pdfbox.cos.COSName</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Contents</name>
            <parameter>
                <name>bytes</name>
                <type>byte[]</type>
            </parameter>
            <comment>Sets the contents.</comment>
        </property>
        <property>
            <name>Filter</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>filter</name>
                <type>org.apache.pdfbox.cos.COSName</type>
            </parameter>
            <comment>Returns the filter.</comment>
        </property>
        <property>
            <name>SUBFILTER_ADBE_X509_RSA_SHA1</name>
            <returntype>org.apache.pdfbox.cos.COSName</returntype>
            <comment></comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment></comment>
        </property>
        <property>
            <name>PropBuild</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuild</returntype>
            <parameter>
                <name>propBuild</name>
                <type>org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDPropBuild</type>
            </parameter>
            <comment>PDF signature build dictionary. Provides informations about the signature
 handler.</comment>
        </property>
        <property>
            <name>ContactInfo</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>contactInfo</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Returns the contact info provided by the signer to enable a recipient to
 contact the signer to verify the signature, e.g. a phone number.</comment>
        </property>
        <property>
            <name>FILTER_CICI_SIGNIT</name>
            <returntype>org.apache.pdfbox.cos.COSName</returntype>
            <comment></comment>
        </property>
        <property>
            <name>FILTER_ADOBE_PPKLITE</name>
            <returntype>org.apache.pdfbox.cos.COSName</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Location</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>location</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Returns the CPU host name or physical location of the signing.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.acroform.PDTextFieldwrapper</name>
        <shortname>PDTextField</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.form.PDTextField</objectwrapper>
        <owner>process</owner>
        <method>
            <name>addWidget</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>widget</name>
                <type>org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>doc</name>
                <type>org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm</type>
            </parameter>
        </method>
        <property>
            <name>Multiline</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>multiline</name>
                <type>boolean</type>
            </parameter>
            <comment>Set the multiline bit.</comment>
        </property>
        <property>
            <name>Comb</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>comb</name>
                <type>boolean</type>
            </parameter>
            <comment>Set the comb bit.</comment>
        </property>
        <property>
            <name>DoNotSpellCheck</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>doNotSpellCheck</name>
                <type>boolean</type>
            </parameter>
            <comment>Set the doNotSpellCheck bit.</comment>
        </property>
        <property>
            <name>MaxLen</name>
            <returntype>int</returntype>
            <parameter>
                <name>maxLen</name>
                <type>int</type>
            </parameter>
            <comment>Returns the maximum number of characters of the text field.</comment>
        </property>
        <property>
            <name>DoNotScroll</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>doNotScroll</name>
                <type>boolean</type>
            </parameter>
            <comment>Set the doNotScroll bit.</comment>
        </property>
        <property>
            <name>FileSelect</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>fileSelect</name>
                <type>boolean</type>
            </parameter>
            <comment>Set the file select bit.</comment>
        </property>
        <property>
            <name>ValueAsString</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Widget</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget</returntype>
            <comment></comment>
        </property>
        <property>
            <name>DefaultValue</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Returns the default value of this field, or an empty string.</comment>
        </property>
        <property>
            <name>Widgets</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>PartialName</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Returns the partial name of the field.</comment>
        </property>
        <property>
            <name>Required</name>
            <returntype>void</returntype>
            <parameter>
                <name>required</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment></comment>
        </property>
        <property>
            <name>RichText</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>richText</name>
                <type>boolean</type>
            </parameter>
            <comment>Set the richText bit.</comment>
        </property>
        <property>
            <name>Value</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Returns the value of this field, or an empty string.</comment>
        </property>
        <property>
            <name>DefaultAppearance</name>
            <parameter>
                <name>daValue</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>AlternateFieldName</name>
            <parameter>
                <name>alternateFieldName</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>DefaultStyleString</name>
            <parameter>
                <name>defaultStyleString</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Password</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>password</name>
                <type>boolean</type>
            </parameter>
            <comment>Set the password bit.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.acroform.PlainTextwrapper</name>
        <shortname>PlainText</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.annotation.layout.PlainText</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>text</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.annotations.PDActionEmbeddedGoTowrapper</name>
        <shortname>PDActionEmbeddedGoTo</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.action.PDActionEmbeddedGoTo</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>OpenInNewWindow</name>
            <returntype EnumType="true">org.apache.pdfbox.pdmodel.interactive.action.OpenMode</returntype>
            <parameter>
                <name>value</name>
                <type EnumType="true">org.apache.pdfbox.pdmodel.interactive.action.OpenMode</type>
            </parameter>
            <comment>This will specify whether to open the destination document in a new window,
 in the same window, or behave in accordance with the current user
 preference.</comment>
        </property>
        <property>
            <name>Destination</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDDestination</returntype>
            <parameter>
                <name>d</name>
                <type>org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDDestination</type>
            </parameter>
            <comment>This will get the destination to jump to.</comment>
        </property>
        <property>
            <name>Type</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>type</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the type of PDF object that the actions dictionary describes.
 If present must be Action for an action dictionary.</comment>
        </property>
        <property>
            <name>TargetDirectory</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory</returntype>
            <parameter>
                <name>targetDirectory</name>
                <type>org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory</type>
            </parameter>
            <comment>Get the target directory.</comment>
        </property>
        <property>
            <name>SubType</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>s</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the type of action that the actions dictionary describes.</comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment>Convert this standard java object to a COS object.</comment>
        </property>
        <property>
            <name>Next</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>next</name>
                <type>java.util.List</type>
            </parameter>
            <comment>This will get the next action, or sequence of actions, to be performed
 after this one. The value is either a single action dictionary or an array
 of action dictionaries to be performed in order.</comment>
        </property>
        <property>
            <name>File</name>
            <returntype>org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification</returntype>
            <parameter>
                <name>fs</name>
                <type>org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification</type>
            </parameter>
            <comment>This will get the file in which the destination is located.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.annotations.PDActionGoTowrapper</name>
        <shortname>PDActionGoTo</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.action.PDActionGoTo</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>Destination</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDDestination</returntype>
            <parameter>
                <name>d</name>
                <type>org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDDestination</type>
            </parameter>
            <comment>This will get the destination to jump to.</comment>
        </property>
        <property>
            <name>Type</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>type</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the type of PDF object that the actions dictionary describes.
 If present must be Action for an action dictionary.</comment>
        </property>
        <property>
            <name>SubType</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>s</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the type of action that the actions dictionary describes.</comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment>Convert this standard java object to a COS object.</comment>
        </property>
        <property>
            <name>Next</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>next</name>
                <type>java.util.List</type>
            </parameter>
            <comment>This will get the next action, or sequence of actions, to be performed
 after this one. The value is either a single action dictionary or an array
 of action dictionaries to be performed in order.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.annotations.PDActionHidewrapper</name>
        <shortname>PDActionHide</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.action.PDActionHide</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>Hide</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>hide</name>
                <type>boolean</type>
            </parameter>
            <comment>A flag indicating whether to hide the annotation or show it</comment>
        </property>
        <property>
            <name>Type</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>type</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the type of PDF object that the actions dictionary describes.
 If present must be Action for an action dictionary.</comment>
        </property>
        <property>
            <name>SubType</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>s</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the type of action that the actions dictionary describes.</comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment>Convert this standard java object to a COS object.</comment>
        </property>
        <property>
            <name>Next</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>next</name>
                <type>java.util.List</type>
            </parameter>
            <comment>This will get the next action, or sequence of actions, to be performed
 after this one. The value is either a single action dictionary or an array
 of action dictionaries to be performed in order.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.annotations.PDActionImportDatawrapper</name>
        <shortname>PDActionImportData</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.action.PDActionImportData</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>Type</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>type</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the type of PDF object that the actions dictionary describes.
 If present must be Action for an action dictionary.</comment>
        </property>
        <property>
            <name>SubType</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>s</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the type of action that the actions dictionary describes.</comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment>Convert this standard java object to a COS object.</comment>
        </property>
        <property>
            <name>Next</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>next</name>
                <type>java.util.List</type>
            </parameter>
            <comment>This will get the next action, or sequence of actions, to be performed
 after this one. The value is either a single action dictionary or an array
 of action dictionaries to be performed in order.</comment>
        </property>
        <property>
            <name>File</name>
            <returntype>org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification</returntype>
            <parameter>
                <name>fs</name>
                <type>org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification</type>
            </parameter>
            <comment>This will get the file in which the destination is located.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.annotations.PDActionJavaScriptwrapper</name>
        <shortname>PDActionJavaScript</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.action.PDActionJavaScript</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>js</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>Type</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>type</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the type of PDF object that the actions dictionary describes.
 If present must be Action for an action dictionary.</comment>
        </property>
        <property>
            <name>Action</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>sAction</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>SubType</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>s</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the type of action that the actions dictionary describes.</comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment>Convert this standard java object to a COS object.</comment>
        </property>
        <property>
            <name>Next</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>next</name>
                <type>java.util.List</type>
            </parameter>
            <comment>This will get the next action, or sequence of actions, to be performed
 after this one. The value is either a single action dictionary or an array
 of action dictionaries to be performed in order.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.annotations.PDActionMoviewrapper</name>
        <shortname>PDActionMovie</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.action.PDActionMovie</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>Type</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>type</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the type of PDF object that the actions dictionary describes.
 If present must be Action for an action dictionary.</comment>
        </property>
        <property>
            <name>SubType</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>s</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the type of action that the actions dictionary describes.</comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment>Convert this standard java object to a COS object.</comment>
        </property>
        <property>
            <name>Next</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>next</name>
                <type>java.util.List</type>
            </parameter>
            <comment>This will get the next action, or sequence of actions, to be performed
 after this one. The value is either a single action dictionary or an array
 of action dictionaries to be performed in order.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.annotations.PDActionNamedwrapper</name>
        <shortname>PDActionNamed</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.action.PDActionNamed</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>Type</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>type</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the type of PDF object that the actions dictionary describes.
 If present must be Action for an action dictionary.</comment>
        </property>
        <property>
            <name>SubType</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>s</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the type of action that the actions dictionary describes.</comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment>Convert this standard java object to a COS object.</comment>
        </property>
        <property>
            <name>Next</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>next</name>
                <type>java.util.List</type>
            </parameter>
            <comment>This will get the next action, or sequence of actions, to be performed
 after this one. The value is either a single action dictionary or an array
 of action dictionaries to be performed in order.</comment>
        </property>
        <property>
            <name>N</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the name of the action to be performed.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.annotations.PDActionRemoteGoTowrapper</name>
        <shortname>PDActionRemoteGoTo</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.action.PDActionRemoteGoTo</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>OpenInNewWindow</name>
            <returntype EnumType="true">org.apache.pdfbox.pdmodel.interactive.action.OpenMode</returntype>
            <parameter>
                <name>value</name>
                <type EnumType="true">org.apache.pdfbox.pdmodel.interactive.action.OpenMode</type>
            </parameter>
            <comment>This will specify whether to open the destination document in a new window, in the same
 window, or behave in accordance with the current user preference.</comment>
        </property>
        <property>
            <name>Type</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>type</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the type of PDF object that the actions dictionary describes.
 If present must be Action for an action dictionary.</comment>
        </property>
        <property>
            <name>SubType</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>s</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the type of action that the actions dictionary describes.</comment>
        </property>
        <property>
            <name>D</name>
            <returntype>org.apache.pdfbox.cos.COSBase</returntype>
            <parameter>
                <name>d</name>
                <type>org.apache.pdfbox.cos.COSBase</type>
            </parameter>
            <comment>This will get the destination to jump to. If the value is an array defining
 an explicit destination, its first element must be a page number within the
 remote document rather than an indirect reference to a page object in the
 current document. The first page is numbered 0.</comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment>Convert this standard java object to a COS object.</comment>
        </property>
        <property>
            <name>Next</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>next</name>
                <type>java.util.List</type>
            </parameter>
            <comment>This will get the next action, or sequence of actions, to be performed
 after this one. The value is either a single action dictionary or an array
 of action dictionaries to be performed in order.</comment>
        </property>
        <property>
            <name>File</name>
            <returntype>org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification</returntype>
            <parameter>
                <name>fs</name>
                <type>org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification</type>
            </parameter>
            <comment>This will get the file in which the destination is located.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.annotations.PDActionResetFormwrapper</name>
        <shortname>PDActionResetForm</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.action.PDActionResetForm</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>Type</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>type</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the type of PDF object that the actions dictionary describes.
 If present must be Action for an action dictionary.</comment>
        </property>
        <property>
            <name>SubType</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>s</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the type of action that the actions dictionary describes.</comment>
        </property>
        <property>
            <name>Fields</name>
            <returntype>org.apache.pdfbox.cos.COSArray</returntype>
            <parameter>
                <name>array</name>
                <type>org.apache.pdfbox.cos.COSArray</type>
            </parameter>
            <comment>An array identifying which fields to include in the submission or which to
 exclude, depending on the setting of the Include/Exclude flag in the Flags
 entry</comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment>Convert this standard java object to a COS object.</comment>
        </property>
        <property>
            <name>Next</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>next</name>
                <type>java.util.List</type>
            </parameter>
            <comment>This will get the next action, or sequence of actions, to be performed
 after this one. The value is either a single action dictionary or an array
 of action dictionaries to be performed in order.</comment>
        </property>
        <property>
            <name>Flags</name>
            <returntype>int</returntype>
            <parameter>
                <name>flags</name>
                <type>int</type>
            </parameter>
            <comment>A set of flags specifying various characteristics of the action</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.annotations.PDActionSoundwrapper</name>
        <shortname>PDActionSound</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.action.PDActionSound</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>Synchronous</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>synchronous</name>
                <type>boolean</type>
            </parameter>
            <comment>Gets the synchronous flag. It specifyes whether to play the sound
 synchronously or asynchronously. When true, the reader allows no further
 user interaction other than canceling the sound until the sound has been
 completely played.</comment>
        </property>
        <property>
            <name>Type</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>type</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the type of PDF object that the actions dictionary describes.
 If present must be Action for an action dictionary.</comment>
        </property>
        <property>
            <name>SubType</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>s</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the type of action that the actions dictionary describes.</comment>
        </property>
        <property>
            <name>Volume</name>
            <returntype>float</returntype>
            <parameter>
                <name>volume</name>
                <type>float</type>
            </parameter>
            <comment>Sets the volume.</comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment>Convert this standard java object to a COS object.</comment>
        </property>
        <property>
            <name>Next</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>next</name>
                <type>java.util.List</type>
            </parameter>
            <comment>This will get the next action, or sequence of actions, to be performed
 after this one. The value is either a single action dictionary or an array
 of action dictionaries to be performed in order.</comment>
        </property>
        <property>
            <name>Sound</name>
            <returntype>org.apache.pdfbox.cos.COSStream</returntype>
            <parameter>
                <name>sound</name>
                <type>org.apache.pdfbox.cos.COSStream</type>
            </parameter>
            <comment>Gets the sound object.</comment>
        </property>
        <property>
            <name>Repeat</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>repeat</name>
                <type>boolean</type>
            </parameter>
            <comment>Gets whether to repeat the sound indefinitely.</comment>
        </property>
        <property>
            <name>Mix</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>mix</name>
                <type>boolean</type>
            </parameter>
            <comment>Gets the flag specifying whether to mix this sound with any other sound
 already playing. If this flag is false, any previously playing sound shall
 be stopped before starting this sound; this can be used to stop a repeating
 sound (see Repeat).</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.annotations.PDActionSubmitFormwrapper</name>
        <shortname>PDActionSubmitForm</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.action.PDActionSubmitForm</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>Type</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>type</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the type of PDF object that the actions dictionary describes.
 If present must be Action for an action dictionary.</comment>
        </property>
        <property>
            <name>SubType</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>s</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the type of action that the actions dictionary describes.</comment>
        </property>
        <property>
            <name>Fields</name>
            <returntype>org.apache.pdfbox.cos.COSArray</returntype>
            <parameter>
                <name>array</name>
                <type>org.apache.pdfbox.cos.COSArray</type>
            </parameter>
            <comment>An array identifying which fields to include in the submission or which to
 exclude, depending on the setting of the Include/Exclude flag in the Flags
 entry</comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment>Convert this standard java object to a COS object.</comment>
        </property>
        <property>
            <name>Next</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>next</name>
                <type>java.util.List</type>
            </parameter>
            <comment>This will get the next action, or sequence of actions, to be performed
 after this one. The value is either a single action dictionary or an array
 of action dictionaries to be performed in order.</comment>
        </property>
        <property>
            <name>Flags</name>
            <returntype>int</returntype>
            <parameter>
                <name>flags</name>
                <type>int</type>
            </parameter>
            <comment>A set of flags specifying various characteristics of the action</comment>
        </property>
        <property>
            <name>File</name>
            <returntype>org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification</returntype>
            <parameter>
                <name>fs</name>
                <type>org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification</type>
            </parameter>
            <comment>This will get the file in which the destination is located.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.annotations.PDActionURIwrapper</name>
        <shortname>PDActionURI</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.action.PDActionURI</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>Type</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>type</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the type of PDF object that the actions dictionary describes.
 If present must be Action for an action dictionary.</comment>
        </property>
        <property>
            <name>SubType</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>s</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the type of action that the actions dictionary describes.</comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment>Convert this standard java object to a COS object.</comment>
        </property>
        <property>
            <name>TrackMousePosition</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>value</name>
                <type>boolean</type>
            </parameter>
            <comment>This will specify whether to track the mouse position when the URI is
 resolved. Default value: false. This entry applies only to actions
 triggered by the user's clicking an annotation; it is ignored for actions
 associated with outline items or with a document's OpenAction entry.</comment>
        </property>
        <property>
            <name>Next</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>next</name>
                <type>java.util.List</type>
            </parameter>
            <comment>This will get the next action, or sequence of actions, to be performed
 after this one. The value is either a single action dictionary or an array
 of action dictionaries to be performed in order.</comment>
        </property>
        <property>
            <name>URI</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>uri</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the uniform resource identifier to resolve. It should be
 encoded in 7-bit ASCII, but UTF-8 and UTF-16 are supported too.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.annotations.PDActionwrapper</name>
        <shortname>PDAction</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.action.PDAction</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Type</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>type</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the type of PDF object that the actions dictionary describes.
 If present must be Action for an action dictionary.</comment>
        </property>
        <property>
            <name>SubType</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>s</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the type of action that the actions dictionary describes.</comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment>Convert this standard java object to a COS object.</comment>
        </property>
        <property>
            <name>Next</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>next</name>
                <type>java.util.List</type>
            </parameter>
            <comment>This will get the next action, or sequence of actions, to be performed
 after this one. The value is either a single action dictionary or an array
 of action dictionaries to be performed in order.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.annotations.PDAnnotationFileAttachmentwrapper</name>
        <shortname>PDAnnotationFileAttachment</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFileAttachment</objectwrapper>
        <owner>process</owner>
        <method>
            <name>constructAppearances</name>
            <comment>Create the appearance entry for this annotation. Not having it may prevent
 display in some viewers. This method is for overriding in subclasses, the
 default implementation does nothing.
document: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>document</name>
                <type>org.apache.pdfbox.pdmodel.PDDocument</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>EndPointEndingStyle</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>style</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will retrieve the line ending style for the end point, possible values
 shown in the LE_ constants section.</comment>
        </property>
        <property>
            <name>AnnotationFlags</name>
            <returntype>int</returntype>
            <parameter>
                <name>flags</name>
                <type>int</type>
            </parameter>
            <comment>This will get the flags for this field.</comment>
        </property>
        <property>
            <name>Rectangle</name>
            <returntype>org.apache.pdfbox.pdmodel.common.PDRectangle</returntype>
            <parameter>
                <name>rectangle</name>
                <type>org.apache.pdfbox.pdmodel.common.PDRectangle</type>
            </parameter>
            <comment>The annotation rectangle, defining the location of the annotation on the
 page in default user space units. This is usually required and should not
 return null on valid PDF documents. But where this is a parent form field
 with children, such as radio button collections then the rectangle will be
 null.</comment>
        </property>
        <property>
            <name>Page</name>
            <returntype>org.apache.pdfbox.pdmodel.PDPage</returntype>
            <parameter>
                <name>page</name>
                <type>org.apache.pdfbox.pdmodel.PDPage</type>
            </parameter>
            <comment>This will retrieve the corresponding page of this annotation.</comment>
        </property>
        <property>
            <name>NormalAppearanceStream</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream</returntype>
            <comment>Returns the appearance stream for this annotation, if any. The annotation
 state is taken into account, if present.</comment>
        </property>
        <property>
            <name>ModifiedDate</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>m</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will retrieve the date and time the annotation was modified.</comment>
        </property>
        <property>
            <name>Locked</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>locked</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the locked flag.</comment>
        </property>
        <property>
            <name>InteriorColor</name>
            <returntype>org.apache.pdfbox.pdmodel.graphics.color.PDColor</returntype>
            <parameter>
                <name>ic</name>
                <type>org.apache.pdfbox.pdmodel.graphics.color.PDColor</type>
            </parameter>
            <comment>This will retrieve the interior color of the line endings defined in the LE
 entry. color is in DeviceRGB color space.</comment>
        </property>
        <property>
            <name>StructParent</name>
            <returntype>int</returntype>
            <parameter>
                <name>structParent</name>
                <type>int</type>
            </parameter>
            <comment>This will get the key of this annotation in the structural parent tree.</comment>
        </property>
        <property>
            <name>StartPointEndingStyle</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>style</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will retrieve the line ending style for the start point, possible
 values shown in the LE_ constants section.</comment>
        </property>
        <property>
            <name>AttachmentName</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This is the name used to draw the type of attachment. See the
 ATTACHMENT_NAME_XXX constants.</comment>
        </property>
        <property>
            <name>OptionalContent</name>
            <returntype>org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList</returntype>
            <parameter>
                <name>oc</name>
                <type>org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList</type>
            </parameter>
            <comment>This will get the optional content group or optional content membership
 dictionary for the annotation.</comment>
        </property>
        <property>
            <name>Hidden</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>hidden</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the hidden flag.</comment>
        </property>
        <property>
            <name>Printed</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>printed</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the printed flag.</comment>
        </property>
        <property>
            <name>Invisible</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>invisible</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the invisible flag.</comment>
        </property>
        <property>
            <name>AnnotationName</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>nm</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the name, a string intended to uniquely identify each
 annotation within a page. Not to be confused with some annotations Name
 entry which impact the default image drawn for them.</comment>
        </property>
        <property>
            <name>ReadOnly</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>readOnly</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the readOnly flag.</comment>
        </property>
        <property>
            <name>ToggleNoView</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>toggleNoView</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the toggleNoView flag.</comment>
        </property>
        <property>
            <name>BorderStyle</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary</returntype>
            <parameter>
                <name>bs</name>
                <type>org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary</type>
            </parameter>
            <comment>This will retrieve the border style dictionary, specifying the width and
 dash pattern used in drawing the line.</comment>
        </property>
        <property>
            <name>Color</name>
            <returntype>org.apache.pdfbox.pdmodel.graphics.color.PDColor</returntype>
            <parameter>
                <name>c</name>
                <type>org.apache.pdfbox.pdmodel.graphics.color.PDColor</type>
            </parameter>
            <comment>This will retrieve the color used in drawing various elements. As of PDF
 1.6 these are :
 &lt;ul&gt;
 &lt;li&gt;Background of icon when closed&lt;/li&gt;
 &lt;li&gt;Title bar of popup window&lt;/li&gt;
 &lt;li&gt;Border of a link annotation&lt;/li&gt;
 &lt;/ul&gt;</comment>
        </property>
        <property>
            <name>CustomAppearanceHandler</name>
            <parameter>
                <name>appearanceHandler</name>
                <type>org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAppearanceHandler</type>
            </parameter>
            <comment>Set a custom appearance handler for generating the annotations appearance
 streams.</comment>
        </property>
        <property>
            <name>Appearance</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary</returntype>
            <parameter>
                <name>appearance</name>
                <type>org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary</type>
            </parameter>
            <comment>This will get the appearance dictionary associated with this annotation.
 This may return null.</comment>
        </property>
        <property>
            <name>AppearanceState</name>
            <returntype>org.apache.pdfbox.cos.COSName</returntype>
            <parameter>
                <name>as</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Returns the annotations appearance state, which selects the applicable
 appearance stream from an appearance subdictionary.</comment>
        </property>
        <property>
            <name>NoRotate</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>noRotate</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the noRotate flag.</comment>
        </property>
        <property>
            <name>Contents</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Get the "contents" of the field.</comment>
        </property>
        <property>
            <name>NoZoom</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>noZoom</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the noZoom flag.</comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment>Interface method for COSObjectable.</comment>
        </property>
        <property>
            <name>NoView</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>noView</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the noView flag.</comment>
        </property>
        <property>
            <name>Border</name>
            <returntype>org.apache.pdfbox.cos.COSArray</returntype>
            <parameter>
                <name>borderArray</name>
                <type>org.apache.pdfbox.cos.COSArray</type>
            </parameter>
            <comment>This will retrieve the border array. If none is available then it will
 return the default, which is [0 0 1]. The array consists of at least three
 numbers defining the horizontal corner radius, vertical corner radius, and
 border width. The array may have a fourth element, an optional dash array
 defining a pattern of dashes and gaps that shall be used in drawing the
 border. If the array has less than three elements, it will be filled with
 0.</comment>
        </property>
        <property>
            <name>Subtype</name>
            <returntype>java.lang.String</returntype>
            <comment>This will retrieve the subtype of the annotation.</comment>
        </property>
        <property>
            <name>File</name>
            <returntype>org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification</returntype>
            <parameter>
                <name>file</name>
                <type>org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification</type>
            </parameter>
            <comment>Return the attached file.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.annotations.PDAnnotationLinewrapper</name>
        <shortname>PDAnnotationLine</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine</objectwrapper>
        <owner>process</owner>
        <method>
            <name>constructAppearances</name>
            <comment>Create the appearance entry for this annotation. Not having it may prevent
 display in some viewers. This method is for overriding in subclasses, the
 default implementation does nothing.
document: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>document</name>
                <type>org.apache.pdfbox.pdmodel.PDDocument</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>EndPointEndingStyle</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>style</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will retrieve the line ending style for the end point, possible values
 shown in the LE_ constants section.</comment>
        </property>
        <property>
            <name>AnnotationFlags</name>
            <returntype>int</returntype>
            <parameter>
                <name>flags</name>
                <type>int</type>
            </parameter>
            <comment>This will get the flags for this field.</comment>
        </property>
        <property>
            <name>CaptionVerticalOffset</name>
            <returntype>float</returntype>
            <parameter>
                <name>offset</name>
                <type>float</type>
            </parameter>
            <comment>This will retrieve the vertical offset of the caption.</comment>
        </property>
        <property>
            <name>Rectangle</name>
            <returntype>org.apache.pdfbox.pdmodel.common.PDRectangle</returntype>
            <parameter>
                <name>rectangle</name>
                <type>org.apache.pdfbox.pdmodel.common.PDRectangle</type>
            </parameter>
            <comment>The annotation rectangle, defining the location of the annotation on the
 page in default user space units. This is usually required and should not
 return null on valid PDF documents. But where this is a parent form field
 with children, such as radio button collections then the rectangle will be
 null.</comment>
        </property>
        <property>
            <name>LeaderLineExtensionLength</name>
            <returntype>float</returntype>
            <parameter>
                <name>leaderLineExtensionLength</name>
                <type>float</type>
            </parameter>
            <comment>This will retrieve the length of the leader line extensions.</comment>
        </property>
        <property>
            <name>Page</name>
            <returntype>org.apache.pdfbox.pdmodel.PDPage</returntype>
            <parameter>
                <name>page</name>
                <type>org.apache.pdfbox.pdmodel.PDPage</type>
            </parameter>
            <comment>This will retrieve the corresponding page of this annotation.</comment>
        </property>
        <property>
            <name>NormalAppearanceStream</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream</returntype>
            <comment>Returns the appearance stream for this annotation, if any. The annotation
 state is taken into account, if present.</comment>
        </property>
        <property>
            <name>ModifiedDate</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>m</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will retrieve the date and time the annotation was modified.</comment>
        </property>
        <property>
            <name>LeaderLineOffsetLength</name>
            <returntype>float</returntype>
            <parameter>
                <name>leaderLineOffsetLength</name>
                <type>float</type>
            </parameter>
            <comment>This will retrieve the length of the leader line offset.</comment>
        </property>
        <property>
            <name>Locked</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>locked</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the locked flag.</comment>
        </property>
        <property>
            <name>InteriorColor</name>
            <returntype>org.apache.pdfbox.pdmodel.graphics.color.PDColor</returntype>
            <parameter>
                <name>ic</name>
                <type>org.apache.pdfbox.pdmodel.graphics.color.PDColor</type>
            </parameter>
            <comment>This will retrieve the interior color of the line endings defined in the LE
 entry. color is in DeviceRGB color space.</comment>
        </property>
        <property>
            <name>StructParent</name>
            <returntype>int</returntype>
            <parameter>
                <name>structParent</name>
                <type>int</type>
            </parameter>
            <comment>This will get the key of this annotation in the structural parent tree.</comment>
        </property>
        <property>
            <name>StartPointEndingStyle</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>style</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will retrieve the line ending style for the start point, possible
 values shown in the LE_ constants section.</comment>
        </property>
        <property>
            <name>OptionalContent</name>
            <returntype>org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList</returntype>
            <parameter>
                <name>oc</name>
                <type>org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList</type>
            </parameter>
            <comment>This will get the optional content group or optional content membership
 dictionary for the annotation.</comment>
        </property>
        <property>
            <name>CaptionHorizontalOffset</name>
            <returntype>float</returntype>
            <parameter>
                <name>offset</name>
                <type>float</type>
            </parameter>
            <comment>This will retrieve the horizontal offset of the caption.</comment>
        </property>
        <property>
            <name>Hidden</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>hidden</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the hidden flag.</comment>
        </property>
        <property>
            <name>Printed</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>printed</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the printed flag.</comment>
        </property>
        <property>
            <name>Invisible</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>invisible</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the invisible flag.</comment>
        </property>
        <property>
            <name>AnnotationName</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>nm</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the name, a string intended to uniquely identify each
 annotation within a page. Not to be confused with some annotations Name
 entry which impact the default image drawn for them.</comment>
        </property>
        <property>
            <name>ReadOnly</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>readOnly</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the readOnly flag.</comment>
        </property>
        <property>
            <name>ToggleNoView</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>toggleNoView</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the toggleNoView flag.</comment>
        </property>
        <property>
            <name>BorderStyle</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary</returntype>
            <parameter>
                <name>bs</name>
                <type>org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary</type>
            </parameter>
            <comment>This will retrieve the border style dictionary, specifying the width and
 dash pattern used in drawing the line.</comment>
        </property>
        <property>
            <name>Color</name>
            <returntype>org.apache.pdfbox.pdmodel.graphics.color.PDColor</returntype>
            <parameter>
                <name>c</name>
                <type>org.apache.pdfbox.pdmodel.graphics.color.PDColor</type>
            </parameter>
            <comment>This will retrieve the color used in drawing various elements. As of PDF
 1.6 these are :
 &lt;ul&gt;
 &lt;li&gt;Background of icon when closed&lt;/li&gt;
 &lt;li&gt;Title bar of popup window&lt;/li&gt;
 &lt;li&gt;Border of a link annotation&lt;/li&gt;
 &lt;/ul&gt;</comment>
        </property>
        <property>
            <name>CustomAppearanceHandler</name>
            <parameter>
                <name>appearanceHandler</name>
                <type>org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAppearanceHandler</type>
            </parameter>
            <comment>Set a custom appearance handler for generating the annotations appearance
 streams.</comment>
        </property>
        <property>
            <name>Appearance</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary</returntype>
            <parameter>
                <name>appearance</name>
                <type>org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary</type>
            </parameter>
            <comment>This will get the appearance dictionary associated with this annotation.
 This may return null.</comment>
        </property>
        <property>
            <name>Caption</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>cap</name>
                <type>boolean</type>
            </parameter>
            <comment>This will retrieve if the contents are shown as a caption or not.</comment>
        </property>
        <property>
            <name>LeaderLineLength</name>
            <returntype>float</returntype>
            <parameter>
                <name>leaderLineLength</name>
                <type>float</type>
            </parameter>
            <comment>This will retrieve the length of the leader line.</comment>
        </property>
        <property>
            <name>CaptionPositioning</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>captionPositioning</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will retrieve the caption positioning.</comment>
        </property>
        <property>
            <name>Line</name>
            <returntype>float[]</returntype>
            <parameter>
                <name>l</name>
                <type>float[]</type>
            </parameter>
            <comment>This will retrieve the start and end coordinates of the line (or leader
 line if LL entry is set).</comment>
        </property>
        <property>
            <name>AppearanceState</name>
            <returntype>org.apache.pdfbox.cos.COSName</returntype>
            <parameter>
                <name>as</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Returns the annotations appearance state, which selects the applicable
 appearance stream from an appearance subdictionary.</comment>
        </property>
        <property>
            <name>NoRotate</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>noRotate</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the noRotate flag.</comment>
        </property>
        <property>
            <name>Contents</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Get the "contents" of the field.</comment>
        </property>
        <property>
            <name>NoZoom</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>noZoom</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the noZoom flag.</comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment>Interface method for COSObjectable.</comment>
        </property>
        <property>
            <name>NoView</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>noView</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the noView flag.</comment>
        </property>
        <property>
            <name>Border</name>
            <returntype>org.apache.pdfbox.cos.COSArray</returntype>
            <parameter>
                <name>borderArray</name>
                <type>org.apache.pdfbox.cos.COSArray</type>
            </parameter>
            <comment>This will retrieve the border array. If none is available then it will
 return the default, which is [0 0 1]. The array consists of at least three
 numbers defining the horizontal corner radius, vertical corner radius, and
 border width. The array may have a fourth element, an optional dash array
 defining a pattern of dashes and gaps that shall be used in drawing the
 border. If the array has less than three elements, it will be filled with
 0.</comment>
        </property>
        <property>
            <name>Subtype</name>
            <returntype>java.lang.String</returntype>
            <comment>This will retrieve the subtype of the annotation.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.annotations.PDAnnotationLinkwrapper</name>
        <shortname>PDAnnotationLink</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink</objectwrapper>
        <owner>process</owner>
        <method>
            <name>constructAppearances</name>
            <comment>Create the appearance entry for this annotation. Not having it may prevent
 display in some viewers. This method is for overriding in subclasses, the
 default implementation does nothing.
document: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>document</name>
                <type>org.apache.pdfbox.pdmodel.PDDocument</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>Destination</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDDestination</returntype>
            <parameter>
                <name>dest</name>
                <type>org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDDestination</type>
            </parameter>
            <comment>Get the destination to be displayed when the annotation is activated.
 Either this or the action entry should be set, but not both.</comment>
        </property>
        <property>
            <name>Action</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.action.PDAction</returntype>
            <parameter>
                <name>action</name>
                <type>org.apache.pdfbox.pdmodel.interactive.action.PDAction</type>
            </parameter>
            <comment>Get the action to be performed when this annotation is to be activated.
 Either this or the destination entry should be set, but not both.</comment>
        </property>
        <property>
            <name>AnnotationFlags</name>
            <returntype>int</returntype>
            <parameter>
                <name>flags</name>
                <type>int</type>
            </parameter>
            <comment>This will get the flags for this field.</comment>
        </property>
        <property>
            <name>Rectangle</name>
            <returntype>org.apache.pdfbox.pdmodel.common.PDRectangle</returntype>
            <parameter>
                <name>rectangle</name>
                <type>org.apache.pdfbox.pdmodel.common.PDRectangle</type>
            </parameter>
            <comment>The annotation rectangle, defining the location of the annotation on the
 page in default user space units. This is usually required and should not
 return null on valid PDF documents. But where this is a parent form field
 with children, such as radio button collections then the rectangle will be
 null.</comment>
        </property>
        <property>
            <name>Page</name>
            <returntype>org.apache.pdfbox.pdmodel.PDPage</returntype>
            <parameter>
                <name>page</name>
                <type>org.apache.pdfbox.pdmodel.PDPage</type>
            </parameter>
            <comment>This will retrieve the corresponding page of this annotation.</comment>
        </property>
        <property>
            <name>NormalAppearanceStream</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream</returntype>
            <comment>Returns the appearance stream for this annotation, if any. The annotation
 state is taken into account, if present.</comment>
        </property>
        <property>
            <name>ModifiedDate</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>m</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will retrieve the date and time the annotation was modified.</comment>
        </property>
        <property>
            <name>Locked</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>locked</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the locked flag.</comment>
        </property>
        <property>
            <name>StructParent</name>
            <returntype>int</returntype>
            <parameter>
                <name>structParent</name>
                <type>int</type>
            </parameter>
            <comment>This will get the key of this annotation in the structural parent tree.</comment>
        </property>
        <property>
            <name>OptionalContent</name>
            <returntype>org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList</returntype>
            <parameter>
                <name>oc</name>
                <type>org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList</type>
            </parameter>
            <comment>This will get the optional content group or optional content membership
 dictionary for the annotation.</comment>
        </property>
        <property>
            <name>Hidden</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>hidden</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the hidden flag.</comment>
        </property>
        <property>
            <name>Printed</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>printed</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the printed flag.</comment>
        </property>
        <property>
            <name>Invisible</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>invisible</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the invisible flag.</comment>
        </property>
        <property>
            <name>AnnotationName</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>nm</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the name, a string intended to uniquely identify each
 annotation within a page. Not to be confused with some annotations Name
 entry which impact the default image drawn for them.</comment>
        </property>
        <property>
            <name>ReadOnly</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>readOnly</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the readOnly flag.</comment>
        </property>
        <property>
            <name>PreviousURI</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.action.PDActionURI</returntype>
            <parameter>
                <name>pa</name>
                <type>org.apache.pdfbox.pdmodel.interactive.action.PDActionURI</type>
            </parameter>
            <comment>This will set the previous URI action, in case it's needed.</comment>
        </property>
        <property>
            <name>ToggleNoView</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>toggleNoView</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the toggleNoView flag.</comment>
        </property>
        <property>
            <name>BorderStyle</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary</returntype>
            <parameter>
                <name>bs</name>
                <type>org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary</type>
            </parameter>
            <comment>This will retrieve the border style dictionary, specifying the width and
 dash pattern used in drawing the line.</comment>
        </property>
        <property>
            <name>Color</name>
            <returntype>org.apache.pdfbox.pdmodel.graphics.color.PDColor</returntype>
            <parameter>
                <name>c</name>
                <type>org.apache.pdfbox.pdmodel.graphics.color.PDColor</type>
            </parameter>
            <comment>This will retrieve the color used in drawing various elements. As of PDF
 1.6 these are :
 &lt;ul&gt;
 &lt;li&gt;Background of icon when closed&lt;/li&gt;
 &lt;li&gt;Title bar of popup window&lt;/li&gt;
 &lt;li&gt;Border of a link annotation&lt;/li&gt;
 &lt;/ul&gt;</comment>
        </property>
        <property>
            <name>CustomAppearanceHandler</name>
            <parameter>
                <name>appearanceHandler</name>
                <type>org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAppearanceHandler</type>
            </parameter>
            <comment>Set a custom appearance handler for generating the annotations appearance
 streams.</comment>
        </property>
        <property>
            <name>Appearance</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary</returntype>
            <parameter>
                <name>appearance</name>
                <type>org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary</type>
            </parameter>
            <comment>This will get the appearance dictionary associated with this annotation.
 This may return null.</comment>
        </property>
        <property>
            <name>AppearanceState</name>
            <returntype>org.apache.pdfbox.cos.COSName</returntype>
            <parameter>
                <name>as</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Returns the annotations appearance state, which selects the applicable
 appearance stream from an appearance subdictionary.</comment>
        </property>
        <property>
            <name>NoRotate</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>noRotate</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the noRotate flag.</comment>
        </property>
        <property>
            <name>Contents</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Get the "contents" of the field.</comment>
        </property>
        <property>
            <name>NoZoom</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>noZoom</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the noZoom flag.</comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment>Interface method for COSObjectable.</comment>
        </property>
        <property>
            <name>NoView</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>noView</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the noView flag.</comment>
        </property>
        <property>
            <name>HighlightMode</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>mode</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Set the highlight mode for when the mouse is depressed. See the
 HIGHLIGHT_MODE_XXX constants.</comment>
        </property>
        <property>
            <name>Border</name>
            <returntype>org.apache.pdfbox.cos.COSArray</returntype>
            <parameter>
                <name>borderArray</name>
                <type>org.apache.pdfbox.cos.COSArray</type>
            </parameter>
            <comment>This will retrieve the border array. If none is available then it will
 return the default, which is [0 0 1]. The array consists of at least three
 numbers defining the horizontal corner radius, vertical corner radius, and
 border width. The array may have a fourth element, an optional dash array
 defining a pattern of dashes and gaps that shall be used in drawing the
 border. If the array has less than three elements, it will be filled with
 0.</comment>
        </property>
        <property>
            <name>Subtype</name>
            <returntype>java.lang.String</returntype>
            <comment>This will retrieve the subtype of the annotation.</comment>
        </property>
        <property>
            <name>QuadPoints</name>
            <returntype>float[]</returntype>
            <parameter>
                <name>quadPoints</name>
                <type>float[]</type>
            </parameter>
            <comment>This will retrieve the set of quadpoints which encompass the areas of this
 annotation which will activate.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.annotations.PDAnnotationPopupwrapper</name>
        <shortname>PDAnnotationPopup</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPopup</objectwrapper>
        <owner>process</owner>
        <method>
            <name>constructAppearances</name>
            <comment>Create the appearance entry for this annotation. Not having it may prevent
 display in some viewers. This method is for overriding in subclasses, the
 default implementation does nothing.
document: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>document</name>
                <type>org.apache.pdfbox.pdmodel.PDDocument</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Parent</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup</returntype>
            <parameter>
                <name>annot</name>
                <type>org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup</type>
            </parameter>
            <comment>This will retrieve the markup annotation which this popup relates to.</comment>
        </property>
        <property>
            <name>AnnotationFlags</name>
            <returntype>int</returntype>
            <parameter>
                <name>flags</name>
                <type>int</type>
            </parameter>
            <comment>This will get the flags for this field.</comment>
        </property>
        <property>
            <name>Rectangle</name>
            <returntype>org.apache.pdfbox.pdmodel.common.PDRectangle</returntype>
            <parameter>
                <name>rectangle</name>
                <type>org.apache.pdfbox.pdmodel.common.PDRectangle</type>
            </parameter>
            <comment>The annotation rectangle, defining the location of the annotation on the
 page in default user space units. This is usually required and should not
 return null on valid PDF documents. But where this is a parent form field
 with children, such as radio button collections then the rectangle will be
 null.</comment>
        </property>
        <property>
            <name>Page</name>
            <returntype>org.apache.pdfbox.pdmodel.PDPage</returntype>
            <parameter>
                <name>page</name>
                <type>org.apache.pdfbox.pdmodel.PDPage</type>
            </parameter>
            <comment>This will retrieve the corresponding page of this annotation.</comment>
        </property>
        <property>
            <name>NormalAppearanceStream</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream</returntype>
            <comment>Returns the appearance stream for this annotation, if any. The annotation
 state is taken into account, if present.</comment>
        </property>
        <property>
            <name>ModifiedDate</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>m</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will retrieve the date and time the annotation was modified.</comment>
        </property>
        <property>
            <name>Open</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>open</name>
                <type>boolean</type>
            </parameter>
            <comment>This will retrieve the initial state of the annotation, open Or closed
 (default closed).</comment>
        </property>
        <property>
            <name>Locked</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>locked</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the locked flag.</comment>
        </property>
        <property>
            <name>StructParent</name>
            <returntype>int</returntype>
            <parameter>
                <name>structParent</name>
                <type>int</type>
            </parameter>
            <comment>This will get the key of this annotation in the structural parent tree.</comment>
        </property>
        <property>
            <name>OptionalContent</name>
            <returntype>org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList</returntype>
            <parameter>
                <name>oc</name>
                <type>org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList</type>
            </parameter>
            <comment>This will get the optional content group or optional content membership
 dictionary for the annotation.</comment>
        </property>
        <property>
            <name>Hidden</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>hidden</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the hidden flag.</comment>
        </property>
        <property>
            <name>Printed</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>printed</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the printed flag.</comment>
        </property>
        <property>
            <name>Invisible</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>invisible</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the invisible flag.</comment>
        </property>
        <property>
            <name>AnnotationName</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>nm</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the name, a string intended to uniquely identify each
 annotation within a page. Not to be confused with some annotations Name
 entry which impact the default image drawn for them.</comment>
        </property>
        <property>
            <name>ReadOnly</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>readOnly</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the readOnly flag.</comment>
        </property>
        <property>
            <name>ToggleNoView</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>toggleNoView</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the toggleNoView flag.</comment>
        </property>
        <property>
            <name>Color</name>
            <returntype>org.apache.pdfbox.pdmodel.graphics.color.PDColor</returntype>
            <parameter>
                <name>c</name>
                <type>org.apache.pdfbox.pdmodel.graphics.color.PDColor</type>
            </parameter>
            <comment>This will retrieve the color used in drawing various elements. As of PDF
 1.6 these are :
 &lt;ul&gt;
 &lt;li&gt;Background of icon when closed&lt;/li&gt;
 &lt;li&gt;Title bar of popup window&lt;/li&gt;
 &lt;li&gt;Border of a link annotation&lt;/li&gt;
 &lt;/ul&gt;</comment>
        </property>
        <property>
            <name>Appearance</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary</returntype>
            <parameter>
                <name>appearance</name>
                <type>org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary</type>
            </parameter>
            <comment>This will get the appearance dictionary associated with this annotation.
 This may return null.</comment>
        </property>
        <property>
            <name>AppearanceState</name>
            <returntype>org.apache.pdfbox.cos.COSName</returntype>
            <parameter>
                <name>as</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Returns the annotations appearance state, which selects the applicable
 appearance stream from an appearance subdictionary.</comment>
        </property>
        <property>
            <name>NoRotate</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>noRotate</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the noRotate flag.</comment>
        </property>
        <property>
            <name>Contents</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Get the "contents" of the field.</comment>
        </property>
        <property>
            <name>NoZoom</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>noZoom</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the noZoom flag.</comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment>Interface method for COSObjectable.</comment>
        </property>
        <property>
            <name>NoView</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>noView</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the noView flag.</comment>
        </property>
        <property>
            <name>Border</name>
            <returntype>org.apache.pdfbox.cos.COSArray</returntype>
            <parameter>
                <name>borderArray</name>
                <type>org.apache.pdfbox.cos.COSArray</type>
            </parameter>
            <comment>This will retrieve the border array. If none is available then it will
 return the default, which is [0 0 1]. The array consists of at least three
 numbers defining the horizontal corner radius, vertical corner radius, and
 border width. The array may have a fourth element, an optional dash array
 defining a pattern of dashes and gaps that shall be used in drawing the
 border. If the array has less than three elements, it will be filled with
 0.</comment>
        </property>
        <property>
            <name>Subtype</name>
            <returntype>java.lang.String</returntype>
            <comment>This will retrieve the subtype of the annotation.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.annotations.PDAnnotationTextwrapper</name>
        <shortname>PDAnnotationText</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText</objectwrapper>
        <owner>process</owner>
        <method>
            <name>constructAppearances</name>
            <comment>Create the appearance entry for this annotation. Not having it may prevent
 display in some viewers. This method is for overriding in subclasses, the
 default implementation does nothing.
document: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>document</name>
                <type>org.apache.pdfbox.pdmodel.PDDocument</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>AnnotationFlags</name>
            <returntype>int</returntype>
            <parameter>
                <name>flags</name>
                <type>int</type>
            </parameter>
            <comment>This will get the flags for this field.</comment>
        </property>
        <property>
            <name>Rectangle</name>
            <returntype>org.apache.pdfbox.pdmodel.common.PDRectangle</returntype>
            <parameter>
                <name>rectangle</name>
                <type>org.apache.pdfbox.pdmodel.common.PDRectangle</type>
            </parameter>
            <comment>The annotation rectangle, defining the location of the annotation on the
 page in default user space units. This is usually required and should not
 return null on valid PDF documents. But where this is a parent form field
 with children, such as radio button collections then the rectangle will be
 null.</comment>
        </property>
        <property>
            <name>Page</name>
            <returntype>org.apache.pdfbox.pdmodel.PDPage</returntype>
            <parameter>
                <name>page</name>
                <type>org.apache.pdfbox.pdmodel.PDPage</type>
            </parameter>
            <comment>This will retrieve the corresponding page of this annotation.</comment>
        </property>
        <property>
            <name>NormalAppearanceStream</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream</returntype>
            <comment>Returns the appearance stream for this annotation, if any. The annotation
 state is taken into account, if present.</comment>
        </property>
        <property>
            <name>ModifiedDate</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>m</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will retrieve the date and time the annotation was modified.</comment>
        </property>
        <property>
            <name>Open</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>open</name>
                <type>boolean</type>
            </parameter>
            <comment>This will retrieve the initial state of the annotation, open Or closed
 (default closed).</comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will retrieve the name (and hence appearance, AP taking precedence)
 For this annotation. The default is NOTE.</comment>
        </property>
        <property>
            <name>Locked</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>locked</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the locked flag.</comment>
        </property>
        <property>
            <name>StructParent</name>
            <returntype>int</returntype>
            <parameter>
                <name>structParent</name>
                <type>int</type>
            </parameter>
            <comment>This will get the key of this annotation in the structural parent tree.</comment>
        </property>
        <property>
            <name>OptionalContent</name>
            <returntype>org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList</returntype>
            <parameter>
                <name>oc</name>
                <type>org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList</type>
            </parameter>
            <comment>This will get the optional content group or optional content membership
 dictionary for the annotation.</comment>
        </property>
        <property>
            <name>Popup</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPopup</returntype>
            <parameter>
                <name>popup</name>
                <type>org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPopup</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Hidden</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>hidden</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the hidden flag.</comment>
        </property>
        <property>
            <name>Printed</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>printed</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the printed flag.</comment>
        </property>
        <property>
            <name>Invisible</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>invisible</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the invisible flag.</comment>
        </property>
        <property>
            <name>AnnotationName</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>nm</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the name, a string intended to uniquely identify each
 annotation within a page. Not to be confused with some annotations Name
 entry which impact the default image drawn for them.</comment>
        </property>
        <property>
            <name>ReadOnly</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>readOnly</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the readOnly flag.</comment>
        </property>
        <property>
            <name>ToggleNoView</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>toggleNoView</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the toggleNoView flag.</comment>
        </property>
        <property>
            <name>Color</name>
            <returntype>org.apache.pdfbox.pdmodel.graphics.color.PDColor</returntype>
            <parameter>
                <name>c</name>
                <type>org.apache.pdfbox.pdmodel.graphics.color.PDColor</type>
            </parameter>
            <comment>This will retrieve the color used in drawing various elements. As of PDF
 1.6 these are :
 &lt;ul&gt;
 &lt;li&gt;Background of icon when closed&lt;/li&gt;
 &lt;li&gt;Title bar of popup window&lt;/li&gt;
 &lt;li&gt;Border of a link annotation&lt;/li&gt;
 &lt;/ul&gt;</comment>
        </property>
        <property>
            <name>Appearance</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary</returntype>
            <parameter>
                <name>appearance</name>
                <type>org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary</type>
            </parameter>
            <comment>This will get the appearance dictionary associated with this annotation.
 This may return null.</comment>
        </property>
        <property>
            <name>AppearanceState</name>
            <returntype>org.apache.pdfbox.cos.COSName</returntype>
            <parameter>
                <name>as</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Returns the annotations appearance state, which selects the applicable
 appearance stream from an appearance subdictionary.</comment>
        </property>
        <property>
            <name>NoRotate</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>noRotate</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the noRotate flag.</comment>
        </property>
        <property>
            <name>Contents</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Get the "contents" of the field.</comment>
        </property>
        <property>
            <name>NoZoom</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>noZoom</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the noZoom flag.</comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment>Interface method for COSObjectable.</comment>
        </property>
        <property>
            <name>State</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>state</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will retrieve the annotation state.</comment>
        </property>
        <property>
            <name>NoView</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>noView</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the noView flag.</comment>
        </property>
        <property>
            <name>StateModel</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>stateModel</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will retrieve the annotation state model.</comment>
        </property>
        <property>
            <name>Border</name>
            <returntype>org.apache.pdfbox.cos.COSArray</returntype>
            <parameter>
                <name>borderArray</name>
                <type>org.apache.pdfbox.cos.COSArray</type>
            </parameter>
            <comment>This will retrieve the border array. If none is available then it will
 return the default, which is [0 0 1]. The array consists of at least three
 numbers defining the horizontal corner radius, vertical corner radius, and
 border width. The array may have a fourth element, an optional dash array
 defining a pattern of dashes and gaps that shall be used in drawing the
 border. If the array has less than three elements, it will be filled with
 0.</comment>
        </property>
        <property>
            <name>Subtype</name>
            <returntype>java.lang.String</returntype>
            <comment>This will retrieve the subtype of the annotation.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.annotations.PDAnnotationWidgetwrapper</name>
        <shortname>PDAnnotationWidget</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget</objectwrapper>
        <owner>process</owner>
        <method>
            <name>constructAppearances</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>HighlightingMode</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>highlightingMode</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Returns the highlighting mode. Default value: &lt;code&gt;I&lt;/code&gt;
 &lt;dl&gt;
 &lt;dt&gt;&lt;code&gt;N&lt;/code&gt;&lt;/dt&gt;
 &lt;dd&gt;(None) No highlighting.&lt;/dd&gt;
 &lt;dt&gt;&lt;code&gt;I&lt;/code&gt;&lt;/dt&gt;
 &lt;dd&gt;(Invert) Invert the contents of the annotation rectangle.&lt;/dd&gt;
 &lt;dt&gt;&lt;code&gt;O&lt;/code&gt;&lt;/dt&gt;
 &lt;dd&gt;(Outline) Invert the annotation's border.&lt;/dd&gt;
 &lt;dt&gt;&lt;code&gt;P&lt;/code&gt;&lt;/dt&gt;
 &lt;dd&gt;(Push) Display the annotation's down appearance, if any. If no down
 appearance is defined, the contents of the annotation rectangle shall be
 offset to appear as if it were pushed below the surface of the page&lt;/dd&gt;
 &lt;dt&gt;&lt;code&gt;T&lt;/code&gt;&lt;/dt&gt;
 &lt;dd&gt;(Toggle) Same as &lt;code&gt;P&lt;/code&gt; (which is preferred).&lt;/dd&gt;
 &lt;/dl&gt;</comment>
        </property>
        <property>
            <name>Action</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.action.PDAction</returntype>
            <parameter>
                <name>action</name>
                <type>org.apache.pdfbox.pdmodel.interactive.action.PDAction</type>
            </parameter>
            <comment>Get the action to be performed when this annotation is to be activated.</comment>
        </property>
        <property>
            <name>AppearanceCharacteristics</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary</returntype>
            <parameter>
                <name>appearanceCharacteristics</name>
                <type>org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary</type>
            </parameter>
            <comment>Returns the appearance characteristics dictionary.</comment>
        </property>
        <property>
            <name>Actions</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions</returntype>
            <parameter>
                <name>actions</name>
                <type>org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions</type>
            </parameter>
            <comment>Get the additional actions for this field. This will return null if there
 are no additional actions for this field. As of PDF 1.6 this is only used
 for Widget Annotations.</comment>
        </property>
        <property>
            <name>Parent</name>
            <parameter>
                <name>field</name>
                <type>org.apache.pdfbox.pdmodel.interactive.form.PDTerminalField</type>
            </parameter>
            <comment>Set the parent field of a widget annotation. This is only required if this
 widget annotation is one of multiple children in a field, and not to be set
 otherwise. You will usually not need this, because in most cases, fields
 have only one widget and share a common dictionary. A usage can be found in
 the CreateMultiWidgetsForm example.</comment>
        </property>
        <property>
            <name>BorderStyle</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary</returntype>
            <parameter>
                <name>bs</name>
                <type>org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary</type>
            </parameter>
            <comment>This will retrieve the border style dictionary, specifying the width and
 dash pattern used in drawing the line.</comment>
        </property>
        <property>
            <name>Color</name>
            <returntype>org.apache.pdfbox.pdmodel.graphics.color.PDColor</returntype>
            <parameter>
                <name>c</name>
                <type>org.apache.pdfbox.pdmodel.graphics.color.PDColor</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Rectangle</name>
            <parameter>
                <name>rectangle</name>
                <type>org.apache.pdfbox.pdmodel.common.PDRectangle</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Page</name>
            <parameter>
                <name>page</name>
                <type>org.apache.pdfbox.pdmodel.PDPage</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>OptionalContent</name>
            <returntype>org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Printed</name>
            <parameter>
                <name>printed</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.pdfbox.annotations.PDAnnotationwrapper</name>
        <shortname>PDAnnotation</shortname>
        <objectwrapper>org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation</objectwrapper>
        <owner>process</owner>
        <method>
            <name>constructAppearances</name>
            <comment>Create the appearance entry for this annotation. Not having it may prevent
 display in some viewers. This method is for overriding in subclasses, the
 default implementation does nothing.
document: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>document</name>
                <type>org.apache.pdfbox.pdmodel.PDDocument</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>AnnotationFlags</name>
            <returntype>int</returntype>
            <parameter>
                <name>flags</name>
                <type>int</type>
            </parameter>
            <comment>This will get the flags for this field.</comment>
        </property>
        <property>
            <name>Rectangle</name>
            <returntype>org.apache.pdfbox.pdmodel.common.PDRectangle</returntype>
            <parameter>
                <name>rectangle</name>
                <type>org.apache.pdfbox.pdmodel.common.PDRectangle</type>
            </parameter>
            <comment>The annotation rectangle, defining the location of the annotation on the
 page in default user space units. This is usually required and should not
 return null on valid PDF documents. But where this is a parent form field
 with children, such as radio button collections then the rectangle will be
 null.</comment>
        </property>
        <property>
            <name>Page</name>
            <returntype>org.apache.pdfbox.pdmodel.PDPage</returntype>
            <parameter>
                <name>page</name>
                <type>org.apache.pdfbox.pdmodel.PDPage</type>
            </parameter>
            <comment>This will retrieve the corresponding page of this annotation.</comment>
        </property>
        <property>
            <name>NormalAppearanceStream</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream</returntype>
            <comment>Returns the appearance stream for this annotation, if any. The annotation
 state is taken into account, if present.</comment>
        </property>
        <property>
            <name>ModifiedDate</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>m</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will retrieve the date and time the annotation was modified.</comment>
        </property>
        <property>
            <name>Locked</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>locked</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the locked flag.</comment>
        </property>
        <property>
            <name>StructParent</name>
            <returntype>int</returntype>
            <parameter>
                <name>structParent</name>
                <type>int</type>
            </parameter>
            <comment>This will get the key of this annotation in the structural parent tree.</comment>
        </property>
        <property>
            <name>OptionalContent</name>
            <returntype>org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList</returntype>
            <parameter>
                <name>oc</name>
                <type>org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList</type>
            </parameter>
            <comment>This will get the optional content group or optional content membership
 dictionary for the annotation.</comment>
        </property>
        <property>
            <name>Hidden</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>hidden</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the hidden flag.</comment>
        </property>
        <property>
            <name>Printed</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>printed</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the printed flag.</comment>
        </property>
        <property>
            <name>Invisible</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>invisible</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the invisible flag.</comment>
        </property>
        <property>
            <name>AnnotationName</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>nm</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>This will get the name, a string intended to uniquely identify each
 annotation within a page. Not to be confused with some annotations Name
 entry which impact the default image drawn for them.</comment>
        </property>
        <property>
            <name>ReadOnly</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>readOnly</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the readOnly flag.</comment>
        </property>
        <property>
            <name>ToggleNoView</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>toggleNoView</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the toggleNoView flag.</comment>
        </property>
        <property>
            <name>Color</name>
            <returntype>org.apache.pdfbox.pdmodel.graphics.color.PDColor</returntype>
            <parameter>
                <name>c</name>
                <type>org.apache.pdfbox.pdmodel.graphics.color.PDColor</type>
            </parameter>
            <comment>This will retrieve the color used in drawing various elements. As of PDF
 1.6 these are :
 &lt;ul&gt;
 &lt;li&gt;Background of icon when closed&lt;/li&gt;
 &lt;li&gt;Title bar of popup window&lt;/li&gt;
 &lt;li&gt;Border of a link annotation&lt;/li&gt;
 &lt;/ul&gt;</comment>
        </property>
        <property>
            <name>Appearance</name>
            <returntype>org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary</returntype>
            <parameter>
                <name>appearance</name>
                <type>org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary</type>
            </parameter>
            <comment>This will get the appearance dictionary associated with this annotation.
 This may return null.</comment>
        </property>
        <property>
            <name>AppearanceState</name>
            <returntype>org.apache.pdfbox.cos.COSName</returntype>
            <parameter>
                <name>as</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Returns the annotations appearance state, which selects the applicable
 appearance stream from an appearance subdictionary.</comment>
        </property>
        <property>
            <name>NoRotate</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>noRotate</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the noRotate flag.</comment>
        </property>
        <property>
            <name>Contents</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Get the "contents" of the field.</comment>
        </property>
        <property>
            <name>NoZoom</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>noZoom</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the noZoom flag.</comment>
        </property>
        <property>
            <name>COSObject</name>
            <returntype>org.apache.pdfbox.cos.COSDictionary</returntype>
            <comment>Interface method for COSObjectable.</comment>
        </property>
        <property>
            <name>NoView</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>noView</name>
                <type>boolean</type>
            </parameter>
            <comment>Get the noView flag.</comment>
        </property>
        <property>
            <name>Border</name>
            <returntype>org.apache.pdfbox.cos.COSArray</returntype>
            <parameter>
                <name>borderArray</name>
                <type>org.apache.pdfbox.cos.COSArray</type>
            </parameter>
            <comment>This will retrieve the border array. If none is available then it will
 return the default, which is [0 0 1]. The array consists of at least three
 numbers defining the horizontal corner radius, vertical corner radius, and
 border width. The array may have a fourth element, an optional dash array
 defining a pattern of dashes and gaps that shall be used in drawing the
 border. If the array has less than three elements, it will be filled with
 0.</comment>
        </property>
        <property>
            <name>Subtype</name>
            <returntype>java.lang.String</returntype>
            <comment>This will retrieve the subtype of the annotation.</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.tools.KeyStoreHelperwrapper</name>
        <shortname>KeyStoreHelper</shortname>
        <objectwrapper>java.security.KeyStore</objectwrapper>
        <owner>process</owner>
        <method>
            <name>getKey</name>
            <comment></comment>
            <returntype>java.security.Key</returntype>
            <parameter>
                <name>alias</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>password</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getCertificateAlias</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>cert</name>
                <type>java.security.cert.Certificate</type>
            </parameter>
        </method>
        <method>
            <name>getCertificateChain</name>
            <comment></comment>
            <returntype>java.security.cert.Certificate[]</returntype>
            <parameter>
                <name>alias</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>containsAlias</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>alias</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>store</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>stream</name>
                <type>java.io.OutputStream</type>
            </parameter>
            <parameter>
                <name>password</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>getCreationDate</name>
            <comment></comment>
            <returntype>java.util.Date</returntype>
            <parameter>
                <name>alias</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getCertificate</name>
            <comment></comment>
            <returntype>java.security.cert.Certificate</returntype>
            <parameter>
                <name>alias</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>load</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>stream</name>
                <type>java.io.InputStream</type>
            </parameter>
            <parameter>
                <name>password</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>deleteEntry</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>alias</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>isKeyEntry</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>alias</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setEntry</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>alias</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>entry</name>
                <type>java.security.KeyStore.Entry</type>
            </parameter>
            <parameter>
                <name>protParam</name>
                <type>java.security.KeyStore.ProtectionParameter</type>
            </parameter>
        </method>
        <property>
            <name>Size</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.tools.Overlayerwrapper</name>
        <shortname>Overlay</shortname>
        <objectwrapper>org.apache.pdfbox.multipdf.Overlay</objectwrapper>
        <owner>process</owner>
        <method>
            <name>AddSpecificPage</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>page</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>filename</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>finish</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>outputFilename</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>FirstPageOverlayFile</name>
            <parameter>
                <name>firstPageOverlayFile</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>DefaultOverlayFile</name>
            <parameter>
                <name>defaultOverlayFile</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>LastPageOverlayFile</name>
            <parameter>
                <name>lastPageOverlayFile</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>AllPagesOverlayFile</name>
            <parameter>
                <name>allPagesOverlayFile</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>OddPageOverlayFile</name>
            <parameter>
                <name>oddPageOverlayFile</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>EvenPageOverlayFile</name>
            <parameter>
                <name>evenPageOverlayFile</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>OverlayPosition</name>
            <parameter>
                <name>position</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Position can be BACKGROUND or FOREGROUND</comment>
        </property>
        <property>
            <name>InputFile</name>
            <parameter>
                <name>inputFile</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.tools.PDFMergerUtilitywrapper</name>
        <shortname>PDFMergerUtility</shortname>
        <objectwrapper>org.apache.pdfbox.multipdf.PDFMergerUtility</objectwrapper>
        <owner>process</owner>
        <method>
            <name>addSource</name>
            <comment>Add a source file to the list of files to merge.
source: Full path and file name of source document.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>source</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getsetupMainMemoryOnly2</name>
            <comment></comment>
            <returntype>org.apache.pdfbox.io.MemoryUsageSetting</returntype>
            <parameter>
                <name>maxMainMemoryBytes</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>mergeDocuments</name>
            <comment>Merge the list of source documents, saving the result in the destination
 file.
settings: 
memUsageSetting: defines how memory is used for buffering PDF streams; in case of
          &lt;code&gt;null&lt;/code&gt; unrestricted main memory is used</comment>
            <returntype>void</returntype>
            <parameter>
                <name>settings</name>
                <type>org.apache.pdfbox.io.MemoryUsageSetting</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>DestinationFileName</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>destination</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Get the name of the destination file.</comment>
        </property>
        <property>
            <name>AcroFormMergeMode</name>
            <returntype EnumType="true">org.apache.pdfbox.multipdf.PDFMergerUtility.AcroFormMergeMode</returntype>
            <parameter>
                <name>theAcroFormMergeMode</name>
                <type EnumType="true">org.apache.pdfbox.multipdf.PDFMergerUtility.AcroFormMergeMode</type>
            </parameter>
            <comment>Get the merge mode to be used for merging AcroForms between documents
 
 {@link AcroFormMergeMode}</comment>
        </property>
        <property>
            <name>JOIN_FORM_FIELDS_MODE</name>
            <returntype EnumType="true">org.apache.pdfbox.multipdf.PDFMergerUtility.AcroFormMergeMode</returntype>
            <comment></comment>
        </property>
        <property>
            <name>DestinationDocumentInformation</name>
            <returntype>org.apache.pdfbox.pdmodel.PDDocumentInformation</returntype>
            <parameter>
                <name>info</name>
                <type>org.apache.pdfbox.pdmodel.PDDocumentInformation</type>
            </parameter>
            <comment>Get the destination document information that is to be set in
 {@link #mergeDocuments(org.apache.pdfbox.io.MemoryUsageSetting) }. The
 default is null, which means that it is ignored.</comment>
        </property>
        <property>
            <name>DestinationStream</name>
            <returntype>java.io.OutputStream</returntype>
            <parameter>
                <name>destStream</name>
                <type>java.io.OutputStream</type>
            </parameter>
            <comment>Get the destination OutputStream.</comment>
        </property>
        <property>
            <name>DestinationMetadata</name>
            <returntype>org.apache.pdfbox.pdmodel.common.PDMetadata</returntype>
            <parameter>
                <name>meta</name>
                <type>org.apache.pdfbox.pdmodel.common.PDMetadata</type>
            </parameter>
            <comment>Set the destination metadata that is to be set in
 {@link #mergeDocuments(org.apache.pdfbox.io.MemoryUsageSetting) }. The
 default is null, which means that it is ignored.</comment>
        </property>
        <property>
            <name>DocumentMergeMode</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>mode</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Get the merge mode to be used for merging documents
 
 {@link DocumentMergeMode}</comment>
        </property>
        <property>
            <name>setupMainMemoryOnly</name>
            <returntype>org.apache.pdfbox.io.MemoryUsageSetting</returntype>
            <comment></comment>
        </property>
        <property>
            <name>setupTempFileOnly</name>
            <returntype>org.apache.pdfbox.io.MemoryUsageSetting</returntype>
            <comment></comment>
        </property>
        <property>
            <name>PDFBOX_LEGACY_MODE</name>
            <returntype EnumType="true">org.apache.pdfbox.multipdf.PDFMergerUtility.AcroFormMergeMode</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.pdfbox.tools.TextToPDFwrapper</name>
        <shortname>TextToPDF</shortname>
        <objectwrapper>org.apache.pdfbox.tools.TextToPDF</objectwrapper>
        <owner>process</owner>
        <method>
            <name>createPDFFromText</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>textfilename</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>destinationPDF</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>Landscape</name>
            <parameter>
                <name>landscape</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>FontSize</name>
            <parameter>
                <name>aFontSize</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Font</name>
            <parameter>
                <name>aFont</name>
                <type>org.apache.pdfbox.pdmodel.font.PDFont</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>MediaBox</name>
            <returntype>org.apache.pdfbox.pdmodel.common.PDRectangle</returntype>
            <parameter>
                <name>mediaBox</name>
                <type>org.apache.pdfbox.pdmodel.common.PDRectangle</type>
            </parameter>
            <comment></comment>
        </property>
    </class>
    <version>0.29</version>
    <comment>&lt;link&gt;...|http://www.b4x.com&lt;/link&gt;</comment>
    <author>DonManfred</author>
    <dependsOn>pdfbox-2.0.17.jar</dependsOn>
    <dependsOn>fontbox-2.0.17.jar</dependsOn>
    <dependsOn>commons-logging-1.2-api.jar</dependsOn>
</root>
