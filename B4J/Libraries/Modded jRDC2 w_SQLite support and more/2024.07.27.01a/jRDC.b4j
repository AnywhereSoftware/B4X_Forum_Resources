AppType=StandardJava
Build1=Default,b4j.example
File1=config.properties
FileGroup1=Default Group
Group=Default Group
Library1=jcore
Library2=jserver
Library3=jsql
Library4=jrandomaccessfile
Library5=javaobject
Module1=AppNotes
Module2=RDCConnector
Module3=RDCHandler
Module4=TestHandler
NumberOfFiles=1
NumberOfLibraries=5
NumberOfModules=4
Version=10
@EndOfDesignText@
'Non-UI application (console / server application)
#Region  Project Attributes 
	#CommandLineArgs:
	#MergeLibraries: True 
#End Region

'change as required
'#AdditionalJar: mysql-connector-java-5.1.40-bin
#AdditionalJar: sqlite-jdbc-3.39.3.0
'#AdditionalJar: postgresql-9.4.1207

Sub Process_Globals
	Public srvr As Server
	Public rdcConnector1 As RDCConnector
	Public const VERSION As Float = 2.23
	Public IPAddress As String
	Type DBCommand (Name As String, Parameters() As Object)
	Type DBResult (Tag As Object, Columns As Map, Rows As List)
End Sub

Sub AppStart (Args() As String)
	srvr.Initialize("")
	rdcConnector1.Initialize
	srvr.Port = rdcConnector1.serverPort
	srvr.AddHandler("/test", "TestHandler", False)
	srvr.AddHandler("/rdc", "RDCHandler", False)
	' https://www.b4x.com/android/forum/threads/could-jetty-listen-on-an-explicit-ip.67270/#post-426004
	Dim jo As JavaObject = srvr
	If rdcConnector1.HasIPAddress Then
		'This try catch will not keep server from "crashing" with an IP address that cannot be
		' bound. As of yet... 
		Try
			jo.SetField("host", rdcConnector1.GetIPAddress)
		Catch
			Log($"jRDC ERROR: Failed setting IP address: ${rdcConnector1.GetIPAddress}"$)
		End Try
	End If
	'Get server's IP address
	IPAddress = jo.GetField("host")
	If IPAddress.EqualsIgnoreCase("null") Then
		'We have multiple network interfaces, fetch an IP address
		Log("Fetching IP address via getLocalHostLANAddress")
		Dim jMe As JavaObject = Me
		IPAddress = jMe.RunMethod("getLocalHostLANAddress", Null)
	End If
	srvr.Start
	Log($"Modified jRDC is running (version = $1.2{VERSION})"$)
	Log("Note: jRDC is running without V1 support")
	Log($"Bound to: ${IPAddress}:${srvr.Port}"$)
	StartMessageLoop
End Sub

#if java
/**
 * Adapted from: https://issues.apache.org/jira/browse/JCS-40
 */
import java.io.IOException;
//import java.net.Inet6Address;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.UnknownHostException;
import java.util.Enumeration;
/**
 * Returns an <code>InetAddress</code> object encapsulating what is most likely the machine's LAN IP address.
 * <p/>
 * This method is intended for use as a replacement of JDK method <code>InetAddress.getLocalHost</code>, because
 * that method is ambiguous on Linux systems. Linux systems enumerate the loopback network interface the same
 * way as regular LAN network interfaces, but the JDK <code>InetAddress.getLocalHost</code> method does not
 * specify the algorithm used to select the address returned under such circumstances, and will often return the
 * loopback address, which is not valid for network communication. Details
 * <a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4665037">here</a>.
 * <p/>
 * This method will scan all IP addresses on all network interfaces on the host machine to determine the IP address
 * most likely to be the machine's LAN address. If the machine has multiple IP addresses, this method will prefer
 * a site-local IP address (e.g. 192.168.x.x or 10.10.x.x, usually IPv4) if the machine has one (and will return the
 * first site-local address if the machine has more than one), but if the machine does not hold a site-local
 * address, this method will return simply the first non-loopback address found (IPv4 or IPv6).
 * <p/>
 * If this method cannot find a non-loopback address using this selection algorithm, it will fall back to
 * calling and returning the result of JDK method <code>InetAddress.getLocalHost</code>.
 * <p/>
 *
 * @throws UnknownHostException If the LAN address of the machine cannot be found.
 */
public static String getLocalHostLANAddress() throws UnknownHostException {
    try {
        InetAddress candidateAddress = null;
        // Iterate all NICs (network interface cards)...
        for (Enumeration ifaces = NetworkInterface.getNetworkInterfaces(); ifaces.hasMoreElements();) {
            NetworkInterface iface = (NetworkInterface) ifaces.nextElement();
            // Iterate all IP addresses assigned to each card...
            for (Enumeration inetAddrs = iface.getInetAddresses(); inetAddrs.hasMoreElements();) {
                InetAddress inetAddr = (InetAddress) inetAddrs.nextElement();
                if (!inetAddr.isLoopbackAddress()) {

                    if (inetAddr.isSiteLocalAddress()) {
                        // Found non-loopback site-local address. Return it immediately...
                        return inetAddr.getHostAddress();
                    }
                    else if (candidateAddress == null) {
                        // Found non-loopback address, but not necessarily site-local.
                        // Store it as a candidate to be returned if site-local address is not subsequently found...
                        candidateAddress = inetAddr;
                        // Note that we don't repeatedly assign non-loopback non-site-local addresses as candidates,
                        // only the first. For subsequent iterations, candidate will be non-null.
                    }
                }
            }
        }
        if (candidateAddress != null) {
            // We did not find a site-local address, but we found some other non-loopback address.
            // Server might have a non-site-local address assigned to its NIC (or it might be running
            // IPv6 which deprecates the "site-local" concept).
            // Return this non-loopback candidate address...
            return candidateAddress.getHostAddress();
        }
        // At this point, we did not find a non-loopback address.
        // Fall back to returning whatever InetAddress.getLocalHost() returns...
        InetAddress jdkSuppliedAddress = InetAddress.getLocalHost();
        if (jdkSuppliedAddress == null) {
            throw new UnknownHostException("The JDK InetAddress.getLocalHost() method unexpectedly returned null.");
        }
        return jdkSuppliedAddress.getHostAddress();
    }
    catch (Exception e) {
        UnknownHostException unknownHostException = new UnknownHostException("Failed to determine LAN address: " + e);
        unknownHostException.initCause(e);
        throw unknownHostException;
    }
}
#End If