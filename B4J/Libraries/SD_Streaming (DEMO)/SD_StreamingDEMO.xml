<?xml version="1.0" encoding="UTF-8"?>
<root>
    <doclet-version-NOT-library-version>1.07</doclet-version-NOT-library-version>
    <class>
        <name>it.tecnomedia.videostream.videostreaming</name>
        <shortname>SD_Streaming</shortname>
        <owner>process</owner>
        <event>Prepared</event>
        <event>Error</event>
        <event>Finished</event>
        <event>ChangeState (state As Int)</event>
        <method>
            <name>PlayExtra</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>Options</name>
                <type>java.lang.String[]</type>
            </parameter>
            <parameter>
                <name>source</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Pause</name>
            <comment>Pauses media</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>GetVolume</name>
            <comment>Get the current volume.
 Returns volume, a percentage of full volume in the range 0 to 200</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>SkipPosition</name>
            <comment>Skip forward or backward by a change in position.
 To skip backwards specify a negative delta.
 Param: delta - amount to skip</comment>
            <returntype>void</returntype>
            <parameter>
                <name>delta</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>Stop</name>
            <comment>Stops playing media</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetPosition</name>
            <comment>Jump to a specific position. If the requested position
 is less than zero, it is normalised to zero.
 Param: position - position value, a percentage (e.g. 0.15 is 15%)</comment>
            <returntype>void</returntype>
            <parameter>
                <name>position</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>release</name>
            <comment>Use this on the b4j closing event. Final step to do is to release vlc.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetAspectRatio</name>
            <comment>Get the video aspect ratio.
 Returns aspect ratio ONLY if you have set the AspectRatio yourself.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>IsSeekable</name>
            <comment>Is the current media seekable?
 returns true if the current media is seekable, otherwise false</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetPlaySpeedRate</name>
            <comment>Get the current video play speed rate.
 speedRate, where 1.0 is normal speed, 0.5 is half speed, 2.0 is double speed and so on</comment>
            <returntype>float</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes B4JVlcj. You must set an event-name if you want to monitor events.
 Important: Always check if VLC is installed before initializing using
 the IsVLCInstalled-method.
 Important: When exiting your app, always make sure to use the release-method!</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetScale</name>
            <comment>Get the current video scale (zoom factor).</comment>
            <returntype>float</returntype>
        </method>
        <method>
            <name>CanPause</name>
            <comment>Can the current media be paused?
 returns true if the current media can be paused, otherwise false</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>SetVolume</name>
            <comment>Set the volume.
 The volume is actually a percentage of full volume, setting a volume
 over 100 may cause audible distortion.
 Param: volumeLevel - a percentage of full volume in the range 0 to 200</comment>
            <returntype>void</returntype>
            <parameter>
                <name>volumeLevel</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SaveDesktop</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>filename</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Mute</name>
            <comment>Mutes volume</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>GetTime</name>
            <comment>Get the current play-back time.
 Returns current time, expressed as a number of milliseconds</comment>
            <returntype>long</returntype>
        </method>
        <method>
            <name>Unmute</name>
            <comment>Unmutes volume</comment>
            <returntype>void</returntype>
            <parameter>
                <name>VolumeLevel</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SetScale</name>
            <comment>Set the video scaling factor
 Param: factor - scaling factor, or zero to scale the video the size of the container</comment>
            <returntype>void</returntype>
            <parameter>
                <name>factor</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>IsVLCInstalled</name>
            <comment>This method should be the first code you run before initializing B4JVlcj.
 Returns if VLC has been installed on the computer or not. If VLC has been
 installed in a non-standard directory, VLC might not be found.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>SetTime</name>
            <comment>Jump to a specific moment.
 If the requested time is less than zero, it is normalised to zero
 Param: time - time since the beginning, in milliseconds</comment>
            <returntype>void</returntype>
            <parameter>
                <name>time</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>GetPosition</name>
            <comment>Get the current play-back position.
 Returns current position, expressed as a percentage (e.g. 0.15 is returned for 15% complete)</comment>
            <returntype>float</returntype>
        </method>
        <method>
            <name>SetAspectRatio</name>
            <comment>Set the video aspect ratio
 Param: aspectRatio - aspect ratio, e.g. "16:9", "4:3", "185:100" for 1:85.1 and so on</comment>
            <returntype>void</returntype>
            <parameter>
                <name>AspectRatio</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SaveCam</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>filename</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>DegreeRotate</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetLength</name>
            <comment>Get the length of the current media item.
 Returns: length, in milliseconds</comment>
            <returntype>long</returntype>
        </method>
        <method>
            <name>StreamCam</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>localip</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>filename</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>port</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>DegreeRotate</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Play</name>
            <comment>Plays media (can be a local file or a streaming source)</comment>
            <returntype>void</returntype>
            <parameter>
                <name>source</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsPlayable</name>
            <comment>Is the current media playable?
 returns true if the current media is playable, otherwise false</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>SetPlaySpeedRate</name>
            <comment>Set the video play speed rate.
 Some media protocols are not able to change the speed rate.
 speed rate - rate, where 1.0 is normal speed, 0.5 is half speed, 2.0 is double speed and so on
 Returns: -1 on error, 0 on success</comment>
            <returntype>int</returntype>
            <parameter>
                <name>speedRate</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>Skip</name>
            <comment>Skip forward or backward by a period of time.
 To skip backwards specify a negative delta.
 Param: delta - time period, in milliseconds</comment>
            <returntype>void</returntype>
            <parameter>
                <name>delta</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>IsPlaying</name>
            <comment>Is the media player playing?
 returns true if the media player is playing, otherwise false</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>StreamDesktop</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>localip</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>filename</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>port</name>
                <type>int</type>
            </parameter>
        </method>
        <property>
            <name>VideoHeight</name>
            <returntype>double</returntype>
            <comment>Returns Video Height</comment>
        </property>
        <property>
            <name>Version</name>
            <returntype>double</returntype>
            <comment></comment>
        </property>
        <property>
            <name>VideoWidth</name>
            <returntype>double</returntype>
            <comment>Returns Video Width</comment>
        </property>
        <field>
            <name>player</name>
            <comment></comment>
            <returntype>player.VideoPlayer</returntype>
        </field>
    </class>
    <version>1.01</version>
    <comment></comment>
    <author>Star-Dust</author>
    <dependsOn>jna-4.1.0</dependsOn>
    <dependsOn>slf4j-api-1.7.10</dependsOn>
    <dependsOn>jna-platform-4.1.0</dependsOn>
    <dependsOn>vlcj-3.10.1</dependsOn>
</root>
