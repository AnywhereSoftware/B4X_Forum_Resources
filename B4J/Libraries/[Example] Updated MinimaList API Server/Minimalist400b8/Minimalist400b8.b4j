AppType=StandardJava
Build1=Default,inti.server,hu2_acceptall
File1=category.html
File2=config.example
File3=help.html
File4=index.html
File5=main.html
FileGroup1=Default Group
FileGroup2=Default Group
FileGroup3=Default Group
FileGroup4=Default Group
FileGroup5=Default Group
Group=App
Library1=jcore
Library2=jserver
Library3=minimalistutils
Library4=webapiutils
Library5=keyvaluestore
Module1=CategoriesApiHandler
Module2=CategoriesWebHandler
Module3=FindApiHandler
Module4=HelpHandler
Module5=HttpsFilter
Module6=IndexWebHandler
Module7=ProductsApiHandler
Module8=Utility
NumberOfFiles=5
NumberOfLibraries=5
NumberOfModules=8
Version=10.2
@EndOfDesignText@
#Region Project Attributes
' Product: 				Inti - Core of Pakai framework
' Version: 				1.00
' License:				MIT License
' Developer:			Poon Yip Hoon (Aeric) (https://www.b4x.com/android/forum/members/aeric.74499/)
' Donation:				PayPal (https://paypal.me/aeric80/)
' GitHub:				https://github.com/pyhoon/inti-b4j
' AppStart: 			ide://goto?Module=Main&Sub=AppStart
' Configurable: 		ide://goto?Module=Main&Sub=Configurable
' Objects folder: 		ide://run?file=%WINDIR%\SysWOW64\explorer.exe&Args=%PROJECT%\Objects
' LibDownloader: 		ide://run?file=%JAVABIN%\java.exe&Args=-jar&Args=%ADDITIONAL%\..\B4X\libget-non-ui.jar&Args=%PROJECT%&Args=true
#CommandLineArgs:
#MergeLibraries: True
#End Region

Sub Process_Globals
	Public ctx					As Map
	Public srvr 				As Server
	Public conf 				As ServerConfigurations
	Public CategoriesList 		As MinimaList
	Public ProductsList 		As MinimaList
	Public KVS 					As KeyValueStore
	Private Const COLOR_RED 	As Int = -65536
	Private Const COLOR_BLUE 	As Int = -16776961
	Private Const VERSION_NAME	As String = "1.00"
	Type ServerConfigurations (EnableCORS As Boolean, EnableHelp As Boolean, EnableSSL As Boolean, Port As Int, SSLPort As Int, RootUrl As String, RootPath As String, ServerUrl As String, ApiName As String, ApiVersioning As Boolean, VerboseMode As Boolean, ContentType As String, SslKeystoreDir As String, SslKeystoreFile As String, SslKeystorePassword As String, StaticFilesBrowsable As Boolean, StaticFilesFolder As String, Version As String, SmtpUserName As String, SmtpPassword As String, SmtpServer As String, SmtpUseSsl As String, SmtpPort As Int)
End Sub

' <link>Open in browser|http://127.0.0.1:8080</link>
Sub AppStart (Args() As String)
	InitServer
	srvr.AddHandler("", "IndexWebHandler", False) ' Add your server handler here
	If conf.EnableHelp Then
		srvr.AddHandler("/help", "HelpHandler", False) 									' Help handler
	End If
	srvr.AddHandler("/categories/*", "CategoriesWebHandler", False) 					' Web handler
	srvr.AddHandler($"/${conf.ApiName}/categories/*"$, "CategoriesApiHandler", False) 	' API handler
	srvr.AddHandler($"/${conf.ApiName}/products/*"$, "ProductsApiHandler", False) 		' API handler
	srvr.AddHandler($"/${conf.ApiName}/find/*"$, "FindApiHandler", False) 				' API handler
	srvr.Start
	Log($"Inti server (version = ${conf.Version}) is running on port ${srvr.Port}${IIf(srvr.SslPort > 0, $" (redirected to port ${srvr.SslPort})"$, "")}"$)
	InitMinimaList
	StartMessageLoop
End Sub

' Additional Configuration
Private Sub Configurable
	conf.EnableHelp = True
	conf.ContentType = WebApiUtils.CONTENT_TYPE_XML
	conf.StaticFilesBrowsable = False
End Sub

' Configure Keystore and SSL Port
Private Sub ConfigurePort
	If conf.Port = 0 Then
		conf.Port = srvr.Port
		LogColor($"Server Port is not set (default to ${conf.Port})"$, COLOR_RED)
	Else
		srvr.Port = conf.Port
	End If
	If conf.EnableSSL Then
		If conf.SSLPort = 0 Then
			LogColor("SSL Port is not set (SSL is disabled)", COLOR_RED)
			If conf.Port <> 80 Then
				conf.ServerUrl = conf.RootUrl & ":" & conf.Port
			End If
			If conf.RootPath <> "" Then
				If conf.RootPath.StartsWith("/") = False Then conf.RootPath = "/" & conf.RootPath
				If conf.RootPath.EndsWith("/") = True Then conf.RootPath = conf.RootPath.SubString2(0, conf.RootPath.Length)
				conf.ServerUrl = conf.ServerUrl & conf.RootPath
				ctx.Put("ROOT_PATH", conf.RootPath)
			End If
			ctx.Put("SERVER_URL", conf.ServerUrl)
			Return
		End If
		If conf.SslKeystoreDir = "" Then
			conf.SslKeystoreDir = File.DirApp
		End If
		If conf.SslKeystoreFile = "" Then
			LogColor("SslKeystoreFile is not set (SSL is disabled)", COLOR_RED)
			Return
		End If
		If File.Exists(conf.SslKeystoreDir, conf.SslKeystoreFile) = False Then
			LogColor("SslKeystoreFile is found (SSL is disabled)", COLOR_RED)
			Return
		End If
		
		Dim ssl As SslConfiguration
		ssl.Initialize
		ssl.SetKeyStorePath(conf.SslKeystoreDir, conf.SslKeystoreFile)
		ssl.KeyStorePassword = conf.SslKeystorePassword
		srvr.SetSslConfiguration(ssl, conf.SSLPort)
		'add filter to redirect all traffic from http to https (optional)
		srvr.AddFilter("/*", "HttpsFilter", False)
		conf.RootUrl = conf.RootUrl.Replace("http:", "https:")
		ctx.Put("ROOT_URL", conf.RootUrl)
		If conf.SSLPort <> 443 Then
			conf.ServerUrl = conf.RootUrl & ":" & conf.SSLPort
		End If
		LogColor("SSL is enabled", COLOR_BLUE)
	Else
		If conf.Port <> 80 Then
			conf.ServerUrl = conf.RootUrl & ":" & conf.Port
		End If
		LogColor("SSL is disabled", COLOR_BLUE)
	End If
	If conf.RootPath <> "" Then
		If conf.RootPath.StartsWith("/") = False Then conf.RootPath = "/" & conf.RootPath
		If conf.RootPath.EndsWith("/") = True Then conf.RootPath = conf.RootPath.SubString2(0, conf.RootPath.Length)
		ctx.Put("ROOT_PATH", conf.RootPath)
		conf.ServerUrl = conf.ServerUrl & conf.RootPath
	End If
	ctx.Put("SERVER_URL", conf.ServerUrl)
End Sub

' Configure permission for browsing static files folder
Private Sub ConfigureStaticFiles
	srvr.StaticFilesFolder = conf.StaticFilesFolder
	srvr.SetStaticFilesOptions(CreateMap("dirAllowed": conf.StaticFilesBrowsable))
End Sub

' Setting default values for Server Configurations
Private Sub InitServer
	srvr.Initialize("")
	If File.Exists(File.DirApp, "config.ini") = False Then
		File.Copy(File.DirAssets, "config.example", File.DirApp, "config.ini")
	End If
	ctx = File.ReadMap(File.DirApp, "config.ini")
	ctx.Put("VERSION", VERSION_NAME)
	conf.Initialize
	conf.Version = VERSION_NAME
	conf.StaticFilesFolder = File.Combine(File.DirApp, "www")
	conf.Port = ctx.GetDefault("ServerPort", 8080)
	conf.SSLPort = ctx.GetDefault("SSLPort", 0)
	conf.RootUrl = ctx.GetDefault("ROOT_URL", "http://127.0.0.1")
	conf.RootPath = ctx.GetDefault("ROOT_PATH", "")
	conf.ServerUrl = conf.RootUrl
	conf.ApiName = ctx.GetDefault("API_NAME", "api")
	conf.ApiVersioning = ctx.GetDefault("API_VERSIONING", "False").As(String).EqualsIgnoreCase("True")
	conf.SslKeystoreDir = ctx.GetDefault("SSL_KEYSTORE_DIR", "")
	conf.SslKeystoreFile = ctx.GetDefault("SSL_KEYSTORE_FILE", "")
	conf.SslKeystorePassword = ctx.GetDefault("SSL_KEYSTORE_PASSWORD", "")
	Configurable
	ConfigurePort
	ConfigureStaticFiles
	CreateJSFiles
End Sub

' Generate JS files from code to save some file size
Private Sub CreateJSFiles
	Dim skip As Boolean
	Dim Parent As String = File.Combine(conf.StaticFilesFolder, "assets")
	Dim DirName As String = File.Combine(Parent, "scripts")
	If File.Exists(DirName, "") = False Then
		File.MakeDir(Parent, "scripts")
	Else
	#If Release
		skip = True ' skip overwriting files in release if scripts folder exists
	#End If
	End If
	If skip = False Then
		Utility.GenerateJSFileForCategory(DirName, "category.js", conf.ContentType, conf.VerboseMode)
		Utility.GenerateJSFileForSearch(DirName, "search.js", conf.ContentType, conf.VerboseMode)
		Utility.GenerateJSFileForHelp(DirName, "help.js", conf.ContentType, conf.VerboseMode)
	End If
End Sub

Private Sub InitMinimaList
	CategoriesList.Initialize
	ProductsList.Initialize
	' Add KVS
	KVS.Initialize(File.DirApp, "kvs.dat")
	' Load values if existed
	CategoriesList.List = KVS.GetDefault("CategoriesList", CategoriesList.List)
	ProductsList.List = KVS.GetDefault("ProductsList", ProductsList.List)
	Log("KeyValueStore is enabled")
End Sub

' Write MinimaList to KeyValueStore
Public Sub WriteKVS (List As String, M As MinimaList)
	KVS.Put(List, M.List)
End Sub