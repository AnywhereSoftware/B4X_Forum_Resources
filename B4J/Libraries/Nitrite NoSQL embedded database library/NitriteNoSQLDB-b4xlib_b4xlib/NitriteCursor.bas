B4J=true
Group=Default Group
ModulesStructureVersion=1
Type=Class
Version=8.8
@EndOfDesignText@
#IgnoreWarnings:12
'Class Module
Sub Class_Globals
	'Private fx As JFX ' Uncomment if required. For B4j only
	Private Tjo As JavaObject
End Sub
'Initializes the object. You can add parameters to this method if needed.
Public Sub Initialize
	'This is an autogenerated constructor, there may not be a matching constructor in the class, you will then have to remove the next line of code and use SetObject to wrap the object
	Tjo.InitializeStatic("org.dizitart.no2.Cursor")
End Sub

'Returns the wrapped object as JavaObject
Public Sub AsJavaObject As JavaObject
	Return Tjo
End Sub
'Gets the first element of the result or uninitialized document if it is empty.
Public Sub FirstOrDefault As NitriteDocument
	Dim Wrapper As NitriteDocument
	Dim O As Object = Tjo.RunMethod("firstOrDefault",Null)
	If O <> Null Then
		Wrapper.Initialize
		Wrapper.SetObject(O)
	End If
	Return Wrapper
End Sub

Public Sub FirstOrDefaultRaw As Object
	Return Tjo.RunMethod("firstOrDefault",Null)
End Sub

'Returns the wrapped object as Object
Public Sub GetObject As Object
	Return Tjo
End Sub
'Specifies if there are more elements in the database that has not been retrieved yet.
Public Sub HasMore As Boolean
	Return Tjo.RunMethod("hasMore",Null)
End Sub
'Gets the set of all NitriteIds from the find() results.
Public Sub IdSet As JavaObject
	Return Tjo.RunMethod("idSet",Null)
End Sub

Public Sub ToIDList As List
	Dim L As List
	L.Initialize
	Dim Iterator As JavaObject = Tjo.RunMethodJO("idSet",Null).RunMethod("iterator",Null)
	Do While Iterator.RunMethod("hasNext",Null)
		Dim ID As NitriteId
		ID.Initialize
		ID.SetObject(Iterator.RunMethod("next",Null))
		L.Add(ID)
	Loop
	Return L
End Sub

Public Sub GetIterator As NitriteIterator
	Dim Wrapper As NitriteIterator
	Wrapper.Initialize
	Wrapper.SetObject(Tjo.RunMethod("iterator",Null))
	Return Wrapper
End Sub
'Performs a left outer join with a foreign cursor with the specified lookup parameters.
Public Sub Join(ForeignCursor As NitriteCursor, TLookup As Lookup) As RecordIterable
	Dim Wrapper As RecordIterable
	Wrapper.Initialize
	Wrapper.SetObject(Tjo.RunMethod("join",Array As Object(ForeignCursor.GetObject, TLookup.GetObject)))
	Return Wrapper
End Sub
'Gets a lazy iterable containing all the selected keys of the result documents.
Public Sub Project(Projection As NitriteDocument) As RecordIterable
	Dim Wrapper As RecordIterable
	Wrapper.Initialize
	Wrapper.SetObject(Tjo.RunMethod("project",Array As Object(Projection.GetObject)))
	Return Wrapper
End Sub
'Gets the size of the current record set.
Public Sub Size As Int
	Return Tjo.RunMethod("size",Null)
End Sub
'Returns a list of all elements.
Public Sub ToList As List
	Dim L As List = Tjo.RunMethod("toList",Null)
	Dim L1 As List
	L1.Initialize
	For Each O As Object In L
		If GetType(O) = "org.dizitart.no2.Document" Then
			Dim Wrapper As NitriteDocument
			Wrapper.Initialize
			Wrapper.SetObject(O)
			L1.Add(Wrapper)
		Else If GetType(O) = "org.dizitart.no2.NitriteId" Then
			Dim IWrapper As NitriteId
			IWrapper.Initialize
			IWrapper.SetObject(O)
			L1.Add(IWrapper)
		Else
			L1.Add(O)
		End If
	Next
	Return L1
End Sub
'Gets the total count of the records in the database matching a filter criteria.
Public Sub TotalCount As Int
	Return Tjo.RunMethod("totalCount",Null)
End Sub

'Comment if not needed
'Set the underlying Object, must be of correct type
Public Sub SetObject(Obj As Object)
	Tjo = Obj
End Sub
