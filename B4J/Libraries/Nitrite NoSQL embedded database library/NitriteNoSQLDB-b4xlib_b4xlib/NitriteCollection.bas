B4J=true
Group=Default Group
ModulesStructureVersion=1
Type=Class
Version=8.8
@EndOfDesignText@
#IgnoreWarnings:12

'Class Module
Sub Class_Globals
	'Private fx As JFX ' Uncomment if required. For B4j only
	Private TJO As JavaObject
End Sub
'Initializes the object. You can add parameters to this method if needed.
Public Sub Initialize
	'This is an autogenerated constructor, there may not be a matching constructor in the class, you will then have to remove the next line of code and use SetObject to wrap the object
	TJO.InitializeStatic("org.dizitart.no2.NitriteCollection")
End Sub

'Returns the wrapped object as JavaObject
Public Sub AsJavaObject As JavaObject
	Return TJO
End Sub

'Returns a Curser of all documents in the collection.
Public Sub Find As NitriteCursor
	Dim Wrapper As NitriteCursor
	Wrapper.Initialize
	Wrapper.SetObject(TJO.RunMethodJO("find",Null))
	Return Wrapper
End Sub
'Applies a filter on the collection and returns a Cursor of the selected documents.
Public Sub Find2(TFilter As Filter) As NitriteCursor
	Dim Filt As Object
	If TFilter.Tag = "ALL" Then
		Filt = Null
	Else
		Filt = TFilter.GetObject
	End If
	Dim Wrapper As NitriteCursor
	Wrapper.Initialize
	Wrapper.SetObject(TJO.RunMethodJO("find",Array As Object(Filt)))
	Return Wrapper
End Sub
'Applies a filter on the collection and returns a Cursor of the selected documents.
Public Sub Find3(TFilter As Filter, TFindOptions As FindOptions) As NitriteCursor
	Dim Filt As Object
	If TFilter.Tag = "ALL" Then
		Filt = Null
	Else
		Filt = TFilter.GetObject
	End If
	Dim Wrapper As NitriteCursor
	Wrapper.Initialize
	Wrapper.SetObject(TJO.RunMethodJO("find",Array As Object(Filt, TFindOptions.GetObject)))
	Return Wrapper
End Sub
'Returns a Cursor of all documents in the collection.
Public Sub Find4(TFindOptions As FindOptions) As NitriteCursor
	Dim Wrapper As NitriteCursor
	Wrapper.Initialize
	Wrapper.SetObject(TJO.RunMethodJO("find",Array As Object(TFindOptions.GetObject)))
	Return Wrapper
End Sub
'Returns the wrapped object as Object
Public Sub GetObject As Object
	Return TJO
End Sub

'Inserts documents into a collection.
'Returns a list of NitriteId's of affected documents
Public Sub Insert(Document As NitriteDocument) As WriteResult
	Dim arr As JavaObject
	arr.InitializeArray("org.dizitart.no2.Document",Array(Document.GetObject))
	
	Dim Wrapper As WriteResult
	Wrapper.Initialize
	Wrapper.SetObject(TJO.RunMethod("insert",Array As Object(arr)))
	Return Wrapper
	
End Sub

'Inserts documents into a collection.
'Returns a list of NitriteId's of affected documents
Public Sub Insert2(Documents As List) As WriteResult
	Dim arr As JavaObject
	arr.InitializeArray("org.dizitart.no2.Document",UnWrapTypedList(Documents,"org.dizitart.no2.Document"))
	
	Dim Wrapper As WriteResult
	Wrapper.Initialize
	Wrapper.SetObject(TJO.RunMethod("insert",Array As Object(arr)))
	Return Wrapper
End Sub
'Deletes the element from the collection.
Public Sub Remove(Document As NitriteDocument) As WriteResult
	Dim Wrapper As WriteResult
	Wrapper.Initialize
	Wrapper.SetObject(TJO.RunMethod("remove",Array As Object(Document.GetObject)))
	Return Wrapper
End Sub

'Removes matching elements from the collection.
'Returns a list of NitriteId's of affected documents
Public Sub Remove2(TFilter As Filter) As WriteResult
	Dim Filt As Object
	If TFilter.Tag = "ALL" Then
		Filt = Null
	Else
		Filt = TFilter.GetObject
	End If
	Dim Wrapper As WriteResult
	Wrapper.Initialize
	Wrapper.SetObject(TJO.RunMethod("remove",Array As Object(Filt)))
	Return Wrapper
End Sub
'Removes document from a collection.
'Returns a list of NitriteId's of affected documents
Public Sub Remove3(TFilter As Filter, TRemoveOptions As RemoveOptions) As WriteResult
	Dim Filt As Object
	If TFilter.Tag = "ALL" Then
		Filt = Null
	Else
		Filt = TFilter.GetObject
	End If
	Dim Wrapper As WriteResult
	Wrapper.Initialize
	Wrapper.SetObject(TJO.RunMethod("remove",Array As Object(Filt, TRemoveOptions.GetObject)))
	Return Wrapper
End Sub

'Updates element in the collection.
Public Sub Update(Document As NitriteDocument) As WriteResult
	Dim Wrapper As WriteResult
	Wrapper.Initialize
	Wrapper.SetObject(TJO.RunMethod("update",Array As Object(Document.GetObject)))
	Return Wrapper
End Sub
'Updates element in the collection.
Public Sub Update2(Document As NitriteDocument, Upsert As Boolean) As WriteResult
	Dim Wrapper As WriteResult
	Wrapper.Initialize
	Wrapper.SetObject(TJO.RunMethod("update",Array As Object(Document.GetObject, Upsert)))
	Return Wrapper
End Sub
'Updates documents in the collection.
'Returns a list of NitriteId's of affected documents
Public Sub Update3(TFilter As Filter, UpdateDoc As NitriteDocument) As WriteResult
	Dim Filt As Object
	If TFilter.Tag = "ALL" Then
		Filt = Null
	Else
		Filt = TFilter.GetObject
	End If
	Dim Wrapper As WriteResult
	Wrapper.Initialize
	Wrapper.SetObject(TJO.RunMethod("update",Array As Object(Filt, UpdateDoc.GetObject)))
	Return Wrapper
End Sub
'Updates documents in the collection.
'Returns a list of NitriteId's of affected documents
Public Sub Update4(TFilter As Filter, UpdateDoc As NitriteDocument, TUpdateOptions As UpdateOptions) As WriteResult
	Dim Filt As Object
	If TFilter.Tag = "ALL" Then
		Filt = Null
	Else
		Filt = TFilter.GetObject
	End If
	Dim Wrapper As WriteResult
	Wrapper.Initialize
	Wrapper.SetObject(TJO.RunMethod("update",Array As Object(Filt, UpdateDoc.GetObject, TUpdateOptions.GetObject)))
	Return Wrapper
End Sub

'Updates documents in the collection.
'Returns a list of NitriteId's of affected documents
Public Sub UpdateMap3(TFilter As Filter, UpdateMap As Map) As WriteResult
	Dim Doc As NitriteDocument = NitriteDocument_Static.CreateDocument2(UpdateMap)
	Dim Filt As Object 
	If TFilter.Tag = "ALL" Then 
		Filt = Null
	Else
		Filt = TFilter.GetObject
	End If
	Dim Wrapper As WriteResult
	Wrapper.Initialize
	Wrapper.SetObject(TJO.RunMethod("update",Array As Object(Filt, Doc.GetObject)))
	Return Wrapper
End Sub
'Updates documents in the collection.
'Returns a list of NitriteId's of affected documents
Public Sub UpdateMap4(TFilter As Filter, UpdateMap As Map, TUpdateOptions As UpdateOptions) As WriteResult
	Dim Filt As Object
	If TFilter.Tag = "ALL" Then
		Filt = Null
	Else
		Filt = TFilter.GetObject
	End If
	Dim Doc As NitriteDocument = NitriteDocument_Static.CreateDocument2(UpdateMap)
	Dim Wrapper As WriteResult
	Wrapper.Initialize
	Wrapper.SetObject(TJO.RunMethod("update",Array As Object(Filt, Doc.GetObject, TUpdateOptions.GetObject)))
	Return Wrapper
End Sub

'Comment if not needed
'Set the underlying Object, must be of correct type
Public Sub SetObject(Obj As Object)
	TJO = Obj
End Sub

'UnWrap a Wrapped List. 
'Arr is an array of wrapped objects
Private Sub UnWrapTypedList(L As JavaObject,UnWrapType As String) As Object
	Dim P1 As JavaObject
	Dim ObjArr() As Object = L.RunMethod("toArray",Null)
	Dim ResultArr(ObjArr.Length) As Object
	For i = 0 To ObjArr.Length - 1
		ResultArr(i) = GetWrappedObject(ObjArr(i))
	Next
	If UnWrapType = "" Then UnWrapType = GetType(ResultArr(0))
	P1.InitializeArray(UnWrapType,ResultArr)
	Return P1
End Sub

'UnWrap a Wrapped array . 
'Arr is an array of wrapped objects
Private Sub UnWrapTypedArray(Arr As Object,UnWrapType As String) As Object
	Dim P1 As JavaObject
	Dim ObjArr() As Object = Arr
	Dim ResultArr(ObjArr.Length) As Object
	For i = 0 To ObjArr.Length - 1
		ResultArr(i) = GetWrappedObject(ObjArr(i))
	Next
	If UnWrapType = "" Then UnWrapType = GetType(ResultArr(0))
	P1.InitializeArray(UnWrapType,ResultArr)
	Return P1
End Sub
'Gets a wrapped object from any wrapper class that has a AsObject Sub 
'without knowing it's type
Private Sub GetWrappedObject(jObj As JavaObject) As JavaObject
	Try
		'Unwrap JOLibs
    #if Debug
    Return jObj.RunMethod("_getobject",Array(jObj))
    #end if
    #if Release
		Return jObj.RunMethod("_getobject",Null)
    #End if
	Catch
		Try
			'Unwrap B4x objects
			Return jObj.RunMethod("getObject",Null)
		Catch
			Log(LastException)
			Log("Invalid type passed to Sub " & GetType(jObj))
		End Try
    
		Return Null
	End Try
End Sub

'Closes the collection for further access.
Public Sub Close
	TJO.RunMethod("close",Null)
End Sub
'Creates an index on value, if not already exists.
'IndexOptions 
Public Sub CreateIndex(Field As String, IndexOption As IndexOptions)
	TJO.RunMethod("createIndex",Array As Object(Field, IndexOption.GetObject))
End Sub
'Drops the collection and all of its indices.
Public Sub Drop
	TJO.RunMethod("drop",Null)
End Sub
'Drops all indices from the collection.
Public Sub DropAllIndices
	TJO.RunMethod("dropAllIndices",Null)
End Sub
'Drops the index on a field.
Public Sub DropIndex(Field As String)
	TJO.RunMethod("dropIndex",Array As Object(Field))
End Sub
'Gets a single document from the collection by its id.
Public Sub GetById(TNitriteId As NitriteId) As NitriteDocument
	Dim Wrapper As NitriteDocument
	Wrapper.Initialize
	Wrapper.SetObject(TJO.RunMethod("getById",Array As Object(TNitriteId.GetObject)))
	Return Wrapper
End Sub
'Returns the name of the PersistentCollection.
Public Sub GetName As String
	Return TJO.RunMethod("getName",Null)
End Sub
'Checks if a value is already indexed or not.
Public Sub HasIndex(Field As String) As Boolean
	Return TJO.RunMethod("hasIndex",Array As Object(Field))
End Sub

'Returns true if the collection is closed; otherwise, false.
Public Sub IsClosed As Boolean
	Return TJO.RunMethod("isClosed",Null)
End Sub
'Returns true if the collection is dropped; otherwise, false.
Public Sub IsDropped As Boolean
	Return TJO.RunMethod("isDropped",Null)
End Sub
'Checks if indexing operation is currently ongoing for a field.
Public Sub IsIndexing(Field As String) As Boolean
	Return TJO.RunMethod("isIndexing",Array As Object(Field))
End Sub
'Gets a List of all indices in the collection.
Public Sub ListIndices As List
	Dim JO As JavaObject = TJO.RunMethod("listIndices",Null)
	Dim L As List
	L.Initialize
	Dim It As JavaObject = JO.RunMethod("iterator",Null)
	Do While It.RunMethod("hasNext",Null)
		Dim NI As NitriteIndex
		NI.Initialize
		NI.SetObject(It.RunMethod("next",Null))
		L.Add(NI)
	Loop
	Return L
End Sub
'Rebuilds index on field if it exists.
Public Sub RebuildIndex(Field As String, Async As Boolean)
	TJO.RunMethod("rebuildIndex",Array As Object(Field, Async))
End Sub

'Returns the size of the PersistentCollection.
Public Sub Size As Long
	Return TJO.RunMethod("size",Null)
End Sub