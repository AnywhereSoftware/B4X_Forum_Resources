<?xml version="1.0" encoding="UTF-8"?>
<root>
    <doclet-version-NOT-library-version>1.07</doclet-version-NOT-library-version>
    <class>
        <name>butt.droid.FileWatcher</name>
        <shortname>FileWatcher</shortname>
        <owner>process</owner>
        <event>CreationDetected(FileName as String)</event>
        <event>DeletionDetected(FileName as String)</event>
        <event>ModificationDetected(FileName as String)</event>
        <event>WatchingTerminated</event>
        <event>Overflow</event>
        <method>
            <name>SetReadOnly</name>
            <comment>Sets the Read-Only attribute of a file.
 Throws IOException if the operation fails.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>filePath</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>readOnly</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>IsReadable</name>
            <comment>Returns True if the file is readable and the JVM has permission to read it.
 False otherwise.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>filePath</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SetExecutable</name>
            <comment>Sets the executable permission to value for the file at filePath.
 use who=0 for application user, who=1 for owner, who=2 for all.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>filePath</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>who</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetRoots</name>
            <comment>Returns a List with the file system roots. For example C:\, D:\, etc...</comment>
            <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
        </method>
        <method>
            <name>SetSystem</name>
            <comment>Sets the "system" attribute of a file at filePath. This will only work
 on operating systems that support system files.
 Throws an IOException if the operation fails.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>filePath</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>hidden</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initialize with EventName.
 Returns the Me FileWatcher Object.
 You can add or subtract directories to the watched List as
 necessary.
 Next, you should use SetWatchList to set directories to be watched.</comment>
            <returntype>butt.droid.FileWatcher</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetWatchList</name>
            <comment>Returns a List of Strings representing the full paths of directories
 currently set to be watched.</comment>
            <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
        </method>
        <method>
            <name>IsReadOnly</name>
            <comment>Returns whether or not a file is Read-Only.
 Throws IOException if the operation fails.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>filePath</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetLastAccessTime</name>
            <comment>Gets the last accessed time of a file.
 Throws an IOException if the operation fails.</comment>
            <returntype>long</returntype>
            <parameter>
                <name>filePath</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SetLastAccessTime</name>
            <comment>Sets the last accessed time of a file.
 Throws an IOException if the operation fails.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>filePath</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>timestamp</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>GetPermissions</name>
            <comment>Gets a List of permissions for the file</comment>
            <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
            <parameter>
                <name>filePath</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SetReadable</name>
            <comment>Sets the readable permission to value for the file at filePath.
 use who=0 for application user, who=1 for owner, who=2 for all.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>filePath</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>who</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>RenameOrMove</name>
            <comment>Renames/moves the old file to the new file.
 Returns True if the operation is successful, False otherwise.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>oldDir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>oldName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>newDir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>newName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SetHidden</name>
            <comment>Sets the "hidden" attribute of a file at filePath. This will only work
 on operating systems that support hidden files.
 Throws an IOException if the operation fails.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>filePath</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>hidden</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>IsHidden</name>
            <comment>Returns true if the file at filePath is hidden.
 False, otherwise. Throws an IOException if the 
 operation can't be performed.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>filePath</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>StartWatching</name>
            <comment>Start the FileWatcher watching.
 This method returns immediately.
 Watching is performed in another thread.
 Events will be fired in the main thread.
 _CreationDetected will be raised when a new file or folder is created in a watched directory.
 _DeletionDetected will be raised when a file or folder is deleted from a watched directory.
 _ModificationDetected will be raised when a file or folder is modified in a watched directory.
 _Overflow will be raised if some events were missed.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetWatchList</name>
            <comment>Sets the List of watched directories. newWatchList should be a List
 of Strings representing the FULL file paths of the indicated directories.
 If the FileWatcher is currently watching, watching will be stopped, the list will be updated
 and watching restarted. This method blocks while all that is being performed.
 If the FileWatcher is not currently watching, call StartWatching to start watching.</comment>
            <returntype>butt.droid.FileWatcher</returntype>
            <parameter>
                <name>newWatchList</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>SetWritable</name>
            <comment>Sets the writable permission to value for the file at filePath.
 use who=0 for application user, who=1 for owner, who=2 for all.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>filePath</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>who</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsExecutable</name>
            <comment>Returns True if the file is executable and the JVM has permission to execute it.
 False otherwise.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>filePath</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>StopWatching</name>
            <comment>Stop the FileWatcher watching.
 Will raise the _WatchingTerminated event.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>GetCreationTime</name>
            <comment>Gets the file's creation time. 
 Throws an IOException if the file doesn't or can't be accessed.</comment>
            <returntype>long</returntype>
            <parameter>
                <name>filePath</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsWritable</name>
            <comment>Returns True if the file is writable and the JVM has permission to write to it.
 False otherwise.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>filePath</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsSameFile</name>
            <comment>Returns True if the two files are the same.
 False otherwise.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>filePath1</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>filePath2</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SetLastModifiedTime</name>
            <comment>Sets the file at filepath to have a LastModifiedTime of the time 
 at timestamp (for example, DateTime.Now).
 Throws an IOException if the operation failed.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>filePath</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>timestamp</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>SetArbitraryAttribute</name>
            <comment>Sets an arbitrary attribute based on its String representation.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>filePath</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>attribute</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>SetPermissions</name>
            <comment>permissions should be a List of Strings of the form USER_PERMISSION
 For example: OWNER_READ, GROUP_EXECUTE, etc...</comment>
            <returntype>void</returntype>
            <parameter>
                <name>filePath</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>permissions</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>SetCreationTime</name>
            <comment>Sets the creation time attribute of filePath to the time at timestamp.
 Throws an IOException if the file doesn't or can't be accessed.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>filePath</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>timestamp</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>DeleteFolderRecursive</name>
            <comment>Does this:
 &lt;code&gt;
Sub DeleteFolderRecursive(Folder As String)
    For Each f As String In File.ListFiles(Folder)
        If File.IsDirectory(Folder, f) Then
            DeleteFolderRecursive (File.Combine(Folder, f))
        End If
        File.Delete(Folder, f)
    Next
    File.Delete(Folder,"")
End Sub
 &lt;/code&gt;
 but in pure Java.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>folder</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsSystem</name>
            <comment>Returns true if the file at filePath is "system".
 False, otherwise. Throws an IOException if the 
 operation can't be performed.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>filePath</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>CheckArbitraryAttribute</name>
            <comment>Checks any arbitrary file attributes based on its String representation.
 Returns a Map with the results.
 &lt;code&gt;
 Dim m As Map = f.CheckArbitraryAttribute(File.Combine(File.DirApp,"test.txt"),"dos:system")
 Log(m)
 &lt;/code&gt;</comment>
            <returntype>anywheresoftware.b4a.objects.collections.Map</returntype>
            <parameter>
                <name>filePath</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>attributes</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsSymbolicLink</name>
            <comment>Returns True if the file is a symbolic link.
 False otherwise.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>filePath</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetLastModifiedTime</name>
            <comment>Gets the last modified attribute of the file.
 Throws an IOException if the operation fails.</comment>
            <returntype>long</returntype>
            <parameter>
                <name>filePath</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
    </class>
    <version>1.4</version>
</root>
