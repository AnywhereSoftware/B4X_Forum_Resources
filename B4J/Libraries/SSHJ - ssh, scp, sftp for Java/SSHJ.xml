<?xml version="1.0" encoding="UTF-8"?>
<root>
    <doclet-version-NOT-library-version>1.05</doclet-version-NOT-library-version>
    <class>
        <name>ro.mindful.wrapper.SSHJ.SFTPClientWrapper</name>
        <shortname>SSHJSFTPClient</shortname>
        <owner CheckForReinitialize="true">process</owner>
        <event>SFTPCommandFinished (Success As Boolean, Command As String, Arg1 As String, Arg2 As String, Result As String)</event>
        <event>SFTPUploadFinished (Success As Boolean, LocalFilePath As String, RemoteFilePath As String)</event>
        <event>SFTPUploadProgress (TrasferedBytes As Long, FileSize As Long, LocalFilePath As String, RemoteFilePath As String)</event>
        <event>SFTPDownloadFinished (Success As Boolean, RemoteFilePath As String, LocalFilePath As String)</event>
        <event>SFTPDownloadProgress (TrasferedBytes As Long, FileSize As Long, RemoteFilePath As String, LocalFilePath As String)</event>
        <event>SFTPListFinished (Success As Boolean, Path As String, ListOfResourceInfo As List)</event>
        <method>
            <name>ChGrp</name>
            <comment>Runs the given command on the server.
 It returns as an event:
 SFTPCommandFinished(Success As Boolean, Command As String, Arg1 As String, Arg2 As String, Result As String)
 see details of ATime Method as it's the same thing.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Path</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>GID</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>MkDir</name>
            <comment>Runs the given command on the server.
 It returns as an event:
 SFTPCommandFinished(Success As Boolean, Command As String, Arg1 As String, Arg2 As String, Result As String)
 see details of ATime Method as it's the same thing.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>DirName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SymLink</name>
            <comment>Runs the given command on the server.
 It returns as an event:
 SFTPCommandFinished(Success As Boolean, Command As String, Arg1 As String, Arg2 As String, Result As String)
 see details of ATime Method as it's the same thing.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>LinkPath</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>TargetPath</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>RmDir</name>
            <comment>Runs the given command on the server.
 It returns as an event:
 SFTPCommandFinished(Success As Boolean, Command As String, Arg1 As String, Arg2 As String, Result As String)
 see details of ATime Method as it's the same thing.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>DirName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Size</name>
            <comment>Runs the given command on the server.
 It returns as an event:
 SFTPCommandFinished(Success As Boolean, Command As String, Arg1 As String, Arg2 As String, Result As String)
 see details of ATime Method as it's the same thing.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Path</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Upload</name>
            <comment>Uploads a given file to the server.
 It returns as an event: 
 SFTPUploadFinished(Success As Boolean, LocalFilePath As String, RemoteFilePath As String)
 Also works with the Wait For as this method returns a senderFilter.
 Dim ssh As SSHJ
 ssh.Initialize("") 'no event name
 'do hostkeyverification
 'do connect
 Dim sftp As SSHJSFTPClient = ssh.GetSFTPClient
 Dim senderFilter As Object = sftp.Upload("C:\WORK\DEV\B4J\Test\Objects\test.jar", "/tmp/jetty_b4j.jar")
 Wait For (senderFilter) SFTPUploadFinished(Success As Boolean, LocalFilePath As String, RemoteFilePath As String)
 ...
 This method also posts to an event its progress:
 SFTPUploadProgress(TrasferedBytes As Long, FileSize As Long, LocalFilePath As String, RemoteFilePath As String)</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>LocalFilePath</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>RemoteFilePath</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>PreserveAttributes</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>Canonicalize</name>
            <comment>Runs the given command on the server.
 It returns as an event:
 SFTPCommandFinished(Success As Boolean, Command As String, Arg1 As String, Arg2 As String, Result As String)
 see details of ATime Method as it's the same thing.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Path</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Truncate</name>
            <comment>Runs the given command on the server.
 It returns as an event:
 SFTPCommandFinished(Success As Boolean, Command As String, Arg1 As String, Arg2 As String, Result As String)
 see details of ATime Method as it's the same thing.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Path</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Size</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>MkDirs</name>
            <comment>Runs the given command on the server.
 It returns as an event:
 SFTPCommandFinished(Success As Boolean, Command As String, Arg1 As String, Arg2 As String, Result As String)
 see details of ATime Method as it's the same thing.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Path</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ATime</name>
            <comment>Runs the given command on the server.
 It returns as an event:
 SFTPCommandFinished(Success As Boolean, Command As String, Arg1 As String, Arg2 As String, Result As String)
 Also works with the Wait For as this method returns a senderFilter.
 Dim ssh As SSHJ
 ssh.Initialize("") 'no event name
 'do hostkeyverification
 'do connect
 Dim sftp As SSHJSFTPClient = ssh.GetSFTPClient
 Dim senderFilter As Object = sftp.ATime("/root")
 Wait For (senderFilter) SFTPCommandFinished(Success As Boolean, Command As String, Arg1 As String, Arg2 As String, Result As String)
 Log(Command &amp; " : " &amp; Success &amp; " = " &amp; Result)</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Path</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>List</name>
            <comment>Run ls command on the server.
 It returns as an event: 
 SFTPListFinished(Success As Boolean, Path As String, ListOfResourceInfo As List)
 Also works with the Wait For as this method returns a senderFilter.
 Dim ssh As SSHJ
 ssh.Initialize("") 'no event name
 'do hostkeyverification
 'do connect
 Dim sftp As SSHJSFTPClient = ssh.GetSFTPClient
 Dim senderFilter As Object = sftp.List("/")
 Wait For (senderFilter) SFTPListFinished(Success As Boolean, Path As String, ListOfResourceInfo As List)
 For Each i As SSHJSFTPResourceInfo In ListOfResourceInfo
 		Log(i)
 Next</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Path</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Rm</name>
            <comment>Runs the given command on the server.
 It returns as an event:
 SFTPCommandFinished(Success As Boolean, Command As String, Arg1 As String, Arg2 As String, Result As String)
 see details of ATime Method as it's the same thing.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Download</name>
            <comment>Downloads a given file from the server.
 It returns as an event: 
 SFTPDownloadFinished(Success As Boolean, RemoteFilePath As String, LocalFilePath As String)
 Also works with the Wait For as this method returns a senderFilter.
 Dim ssh As SSHJ
 ssh.Initialize("") 'no event name
 'do hostkeyverification
 'do connect
 Dim sftp As SSHJSFTPClient = ssh.GetSFTPClient
 Dim senderFilter As Object = sftp.Download("/tmp/jetty_b4j.jar", "C:\WORK\DEV\B4J\Test\Objects\test.jar")
 Wait For (senderFilter) SFTPDownloadFinished(Success As Boolean, RemoteFilePath As String, LocalFilePath As String)
 ...
 This method also posts to an event its progress:
 SFTPDownloadProgress(TrasferedBytes As Long, FileSize As Long, RemoteFilePath As String, LocalFilePath As String)</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>RemoteFilePath</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>LocalFilePath</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>PreserveAttributes</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>ChMod</name>
            <comment>Runs the given command on the server.
 It returns as an event:
 SFTPCommandFinished(Success As Boolean, Command As String, Arg1 As String, Arg2 As String, Result As String)
 see details of ATime Method as it's the same thing.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Path</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Perms</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>MTime</name>
            <comment>Runs the given command on the server.
 It returns as an event:
 SFTPCommandFinished(Success As Boolean, Command As String, Arg1 As String, Arg2 As String, Result As String)
 see details of ATime Method as it's the same thing.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Path</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ChOwn</name>
            <comment>Runs the given command on the server.
 It returns as an event:
 SFTPCommandFinished(Success As Boolean, Command As String, Arg1 As String, Arg2 As String, Result As String)
 see details of ATime Method as it's the same thing.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Path</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>UID</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>TypeMask</name>
            <comment>Runs the given command on the server.
 It returns as an event:
 SFTPCommandFinished(Success As Boolean, Command As String, Arg1 As String, Arg2 As String, Result As String)
 see details of ATime Method as it's the same thing.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Path</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>CloseNow</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>GID</name>
            <comment>Runs the given command on the server.
 It returns as an event:
 SFTPCommandFinished(Success As Boolean, Command As String, Arg1 As String, Arg2 As String, Result As String)
 see details of ATime Method as it's the same thing.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Path</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Rename</name>
            <comment>Runs the given command on the server.
 It returns as an event:
 SFTPCommandFinished(Success As Boolean, Command As String, Arg1 As String, Arg2 As String, Result As String)
 see details of ATime Method as it's the same thing.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>OldPath</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>NewPath</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ReadLink</name>
            <comment>Runs the given command on the server.
 It returns as an event:
 SFTPCommandFinished(Success As Boolean, Command As String, Arg1 As String, Arg2 As String, Result As String)
 see details of ATime Method as it's the same thing.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Path</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>UID</name>
            <comment>Runs the given command on the server.
 It returns as an event:
 SFTPCommandFinished(Success As Boolean, Command As String, Arg1 As String, Arg2 As String, Result As String)
 see details of ATime Method as it's the same thing.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Path</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Type</name>
            <comment>Runs the given command on the server.
 It returns as an event:
 SFTPCommandFinished(Success As Boolean, Command As String, Arg1 As String, Arg2 As String, Result As String)
 see details of ATime Method as it's the same thing.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Path</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Perms</name>
            <comment>Runs the given command on the server.
 It returns as an event:
 SFTPCommandFinished(Success As Boolean, Command As String, Arg1 As String, Arg2 As String, Result As String)
 see details of ATime Method as it's the same thing.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Path</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Close</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
    </class>
    <class>
        <name>ro.mindful.wrapper.SSHJ.SFTPClientWrapper.ResourceInfo</name>
        <shortname>SSHJSFTPResourceInfo</shortname>
        <objectwrapper>net.schmizz.sshj.sftp.RemoteResourceInfo</objectwrapper>
        <owner>process</owner>
        <method>
            <name>GetGID</name>
            <comment></comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>IsDirectory</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetPath</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>IsRegularFile</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetSize</name>
            <comment></comment>
            <returntype>long</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetTypeMask</name>
            <comment></comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>GetATime</name>
            <comment></comment>
            <returntype>long</returntype>
        </method>
        <method>
            <name>GetType</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>GetParent</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>GetExtended</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Type</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetUID</name>
            <comment></comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>GetName</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>GetMTime</name>
            <comment></comment>
            <returntype>long</returntype>
        </method>
        <method>
            <name>GetPermissions</name>
            <comment></comment>
            <returntype>int</returntype>
        </method>
    </class>
    <class>
        <name>ro.mindful.wrapper.SSHJ.SSHJWrapper</name>
        <shortname>SSHJ</shortname>
        <owner CheckForReinitialize="true">process</owner>
        <event>ExecFinished (Success As Boolean, CommandExecuted As String, ExitCode As Int, Output As String, Error As String)</event>
        <event>ShellFinished (Success As Boolean, ShellCommandsExecuted As String, Output As String, Error As String)</event>
        <event>SCPUploadFinished (Success As Boolean, LocalFilePath As String, RemoteFilePath As String)</event>
        <event>SCPUploadProgress (TrasferedBytes As Long, FileSize As Long, LocalFilePath As String, RemoteFilePath As String)</event>
        <event>SCPDownloadFinished (Success As Boolean, RemoteFilePath As String, LocalFilePath As String)</event>
        <event>SCPDownloadProgress (TrasferedBytes As Long, FileSize As Long, RemoteFilePath As String, LocalFilePath As String)</event>
        <event>LocalPortForwardCreated (Success As Boolean, LocalHost As String, LocalPort As Int, RemoteHost As String, RemotePort As Int)</event>
        <event>LocalPortForwardClosed (Success As Boolean, LocalHost As String, LocalPort As Int)</event>
        <event>RemotePortForwardCreated (Success As Boolean, RemoteHost As String, RemotePort As Int, LocalHost As String, LocalPort As Int)</event>
        <event>RemotePortForwardClosed (Success As Boolean, RemoteHost As String, RemotePort As Int)</event>
        <event>ConnectionReady (Success As Boolean)</event>
        <method>
            <name>SetTimeout</name>
            <comment>Sets the execution timeout. This should be called before the Connect method.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Timeout</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsAuthenticated</name>
            <comment>Returns True if the ssh is authenticated.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>RemotePortForwardClose</name>
            <comment></comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>RemoteHost</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>RemotePort</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>AddAuthPublicKey</name>
            <comment>Adds authentication with key from file. You can add more than one.
 Also if the key file is not encrypted you can pass empty or null Passphrase.
 Currently the following private key files are supported: 
 PKCS8 (OpenSSH uses this format)
 PKCS5
 Putty keyfile
 openssh-key-v1 (New OpenSSH keyfile format)</comment>
            <returntype>void</returntype>
            <parameter>
                <name>KeyLocation</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Passphrase</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Exec</name>
            <comment>Executes a given command on the server.
 It returns as an event: 
 ExecFinished(Success As Boolean, CommandExecuted As String, ExitCode As Int, Output As String, Error As String)
 Also works with the Wait For as this method returns a senderFilter.
 Dim ssh As SSHJ
 ssh.Initialize("") 'no event name
 'do hostkeyverification
 'do connect
 Dim senderFilter As Object = ssh.Exec("ls -a", 0)
 Wait For (senderFilter) ExecFinished(Success As Boolean, CommandExecuted As String, ExitCode As Int, Output As String, Error As String)
 ....
 TimeoutInSeconds refers to the timeout when nothing is written in output and the clients waits for an EOF.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>CommandToExecute</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>TimeoutInSeconds</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetSFTPClient</name>
            <comment>Returns an initialized SSHJSFTPClient
 Dim sftp As SSHJSFTPClient = ssh.GetSFTPClient
 You control the SFTP operations from the returned object (eg. sftp.Close)</comment>
            <returntype>ro.mindful.wrapper.SSHJ.SFTPClientWrapper</returntype>
        </method>
        <method>
            <name>AddHostKeyPromiscuousVerifier</name>
            <comment>Adds a fake HostKeyVerifier that treats every host as a known one.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Shell</name>
            <comment>Executes one or more commands on the server using interactive shell (terminal)
 ...
 TimeoutInSeconds refers to how much time should you wait for the Output and/or Error to be written, if you are not intersted in the output then a value of 1 should be enough.
 In most cases you need to provide a value greater than 0, if you provide 0 then the shell will wait for an EOF to be written in the Output which depending on what are your commands may never arrive. So it's best to specify a timeout.
 ... 
 It returns as an event: 
 ShellFinished(Success As Boolean, ShellCommandsExecuted As String, Output As String, Error As String)
 Also works with the Wait For as this method returns a senderFilter.
 Example:&lt;code&gt;
 Dim ssh As SSHJ
 ssh.Initialize("") 'no event name
 ssh.AddHostKeyPromiscuousVerifier
 ssh.AddAuthPassword("YourPassword")
 ssh.Connect("8.8.8.8", 22, "YourUser")
 Dim sf As Object = ssh.Shell("ls -a" &amp; CRLF &amp; "ls -a" &amp; CRLF, 1)
 Wait For (sf) ShellFinished(Success As Boolean, ShellCommandsExecuted As String, Output As String, Error As String)&lt;/code&gt;</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>ShellCommandsToExecute</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>TimeoutInSeconds</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>LocalPortForwardCreate</name>
            <comment>Creates a local port forward
 ssh.LocalPortForwardCreate("0.0.0.0", 8765, "google.com", 80)
 If we now connect to localhost:8765 (your pc) the request will be forwarded to the server which in turn will forward to google.com:80</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>LocalHost</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>LocalPort</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>RemoteHost</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>RemotePort</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>AddAuthPublicKey2</name>
            <comment>Adds authentication with key from String. You can add more than one.
 If your PrivateKey contains the PublicKey then you can pass an empty PublicKey.
 Also if the key file is not encrypted you can pass empty or null Passphrase.
 Currently only PKCS8 format private key files are supported (OpenSSH uses this format).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>PrivateKey</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>PublicKey</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Passphrase</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SetConnectTimeout</name>
            <comment>Sets the connect timeout. This should be called before the Connect method.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ConnectTimeout</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SCPUpload</name>
            <comment>Uploads a given file on the server.
 It returns as an event: 
 SCPUploadFinished(Success As Boolean, LocalFilePath As String, RemoteFilePath As String)
 Also works with the Wait For as this method returns a senderFilter.
 Dim ssh As SSHJ
 ssh.Initialize("") 'no event name
 'do hostkeyverification
 'do connect
 Dim senderFilter As Object = ssh.SCPUpload("jetty_b4j.jar", "/tmp/jetty_b4j1.jar")
 Wait For (senderFilter) SCPUploadFinished(Success As Boolean, LocalFilePath As String, RemoteFilePath As String)
 ...
 This method also posts to an event its progress:
 SCPUploadProgress(TrasferedBytes As Long, FileSize As Long, LocalFilePath As String, RemoteFilePath As String)</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>LocalFilePath</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>RemoteFilePath</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>LocalPortForwardClose</name>
            <comment></comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>LocalHost</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>LocalPort</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>RemotePortForwardCreate</name>
            <comment>Creates a remote port forward
 ssh.RemotePortForwardCreate("0.0.0.0", 8765, "localhost", "51080")
 If we now connect to server:8765 the request will be forwarded to client which in turn will forward to localhost:51080</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>RemoteHost</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>RemotePort</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>LocalHost</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>LocalPort</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SCPDownload</name>
            <comment>Downloads a given file from the server.
 It returns as an event: 
 SCPDownloadFinished(Success As Boolean, RemoteFilePath As String, LocalFilePath As String)
 Also works with the Wait For as this method returns a senderFilter.
 Dim ssh As SSHJ
 ssh.Initialize("") 'no event name
 'do hostkeyverification
 'do connect
 Dim senderFilter As Object = ssh.SCPDownload("/tmp/jetty_b4j.jar", "C:\WORK\DEV\B4J\Test\Objects\")
 Wait For (senderFilter) SCPDownloadFinished(Success As Boolean, RemoteFilePath As String, LocalFilePath As String)
 ...
 This method also posts to an event its progress:
 SCPDownloadProgress(TrasferedBytes As Long, FileSize As Long, RemoteFilePath As String, LocalFilePath As String)</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>RemoteFilePath</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>LocalFilePath</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>LoadKnownHosts2</name>
            <comment>Attempts loading the user's known_hosts file from the provided file.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>FileFullPath</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>CloseNow</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>AddAuthPassword</name>
            <comment>Adds an authentication with password. You can add more than one.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Password</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>UseCompression</name>
            <comment>Activates compression. This should be called before the Connect method.
 Also it requires an additional jar:
 jzlib - https://mvnrepository.com/artifact/com.jcraft/jzlib</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Connect</name>
            <comment>Connects and performs authentication with the added authentication methods.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Hostname</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Port</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Username</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>AddHostKeyVerifier</name>
            <comment>Add a HostKeyVerifier that will verify any host that's able to claim a host key with the given fingerprint. The fingerprint can be specified in either an MD5 colon-delimited format (16 hexadecimal octets, delimited by a colon), or in a Base64 encoded format for SHA-1 or SHA-256 fingerprints. Valid examples are: 
 "SHA1:2Fo8c/96zv32xc8GZWbOGYOlRak="
 "SHA256:oQGbQTujGeNIgh0ONthcEpA/BHxtt3rcYY+NxXTxQjs="
 "MD5:d3:5e:40:72:db:08:f1:6d:0c:d7:6d:35:0d:ba:7c:32"
 "d3:5e:40:72:db:08:f1:6d:0c:d7:6d:35:0d:ba:7c:32"</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Fingerprint</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ConnectAsync</name>
            <comment>Connects and performs authentication with the added authentication methods.
 Async - non blocking method - when completed raises the event:
 ConnectionReady(Success As Boolean)</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Hostname</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Port</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Username</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>LoadKnownHosts</name>
            <comment>Attempts loading the user's known_hosts file from the default locations, i.e. ~/.ssh/known_hosts and ~/.ssh/known_hosts2 on most platforms.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Initialize2</name>
            <comment>Initializes the ssh with a keepalive interval - in seconds (usefull for portforward and sftp).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>KeepAliveInterval</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Close</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>IsConnected</name>
            <comment>Returns True if the ssh is connected.</comment>
            <returntype>boolean</returntype>
        </method>
    </class>
    <version>1.4</version>
    <author>mindful</author>
</root>
