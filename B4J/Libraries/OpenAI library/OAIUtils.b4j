AppType=JavaFX
Build1=Default,b4j.example
File1=Layout1.bjl
File2=tableView.css
FileGroup1=Default Group
FileGroup2=Default Group
Group=Default Group
Library1=javaobject
Library10=xlutils
Library11=xui views
Library2=jcore
Library3=jfx
Library4=jokhttputils2
Library5=jpoi
Library6=jrandomaccessfile
Library7=json
Library8=jtokkit
Library9=jxui
Module1=FileChooserUtils
Module2=OpenAI
NumberOfFiles=2
NumberOfLibraries=11
NumberOfModules=2
Version=10
@EndOfDesignText@
#Region Project Attributes 
	#MainFormWidth: 600
	#MainFormHeight: 600 
	#End Region

'See Sub Notes at the bottom of the code.
Sub Process_Globals
	'USED IN MULTIPLE PARTS
	Type TableHelper (SortColumn As Object, TableRow() As Object)
	Private fx As JFX
	Private MainForm As Form
	Private xui As XUI
	Private GoogleJSONResults As String
	Private DefaultFolder As String
	Private OpenAIapiKey As String
	Private LogFileName As String = "UILog.txt"
	
	'CHECK FOR UPDATES
	Private VersionServer As String = "http://OpenAiToolbox.com" 'Set your server URL here
	Private CodeVersion As Byte = 1 'Set the current code version here.  This will be changed each time the code is updated.

	'PANESETUP
	Private PaneSetup As Pane
	Private btnSetupBack As Button
	Private btnGetGoogleSearchKeyHere As Button
	Private btnGetGoogleSearchEngineID As Button
	Private btnSelectDefaultFolder As Button
	Private btnSelectLogFile As Button
	Private txtGoogleApiKey As TextField
	Private txtSearchEngineId As TextField
	Private txtOpenAIapiKey As TextField
	Private btnGetOpenAPIKeyHere As Button
	Private btnContactInfo As Button
	Private lblStartupInstructions As Label
	Private btnImageGeneration As Button
	Private btnModels As Button
	Private btnAPIReference As Button
	Private btnCookbook As Button
	Private btnChangeLog As Button
	Private btnSaveKeys As Button

	'OPENAI
	Private OpAI As OpenAI
	Private txtAIInput As TextArea
	Private txtOpenAIResponse As TextArea
	Private lblChatStatus As Label
	Private btnContinueWhereYouLeftOff As Button
	Private btnOpenAIRespondText As Button
	Private btnOpenAIRespondJPG As Button
	Private btnOpenAIRespondTTS As Button
	Private btnCopyToClipboard As Button
	Private btnOpenAIRespondTextThread As Button
	Private btnSelectChatModel As Button
	Private lblCurrentChatModel As Label
	Private LimitsWebPage As String = "https://platform.openai.com/settings/organization/limits"
	Private UsageWebPage As String = "https://platform.openai.com/usage"
	Private CurrentThreadName As String
	Private CurrentThreadID As String
	Private CurrentAssistantName As String
	Private CurrentAssistantID As String
	Private lblTTSSpeed As Label
	Private sliderTTSSpeed As Slider
	Private cmbTTSVoice As ComboBox
	
	Private btnSelectImageModel As Button
	Private lblCurrentImageModel As Label
	
	Private lblSelectImageSize As Label
	Private cmbImageSize As ComboBox
	
	Private lblSelectNumberOfImages As Label
	Private cmbNumberOfImages As ComboBox
	
	Private lblSelectImageQuality As Label
	Private cmbImageQuality As ComboBox
	
	Private lblSelectImageStyle As Label
	Private cmbImageStyle As ComboBox

	Private lblImageCost As Label

	Private btnViewLog As Button
	Private btnGoogle As Button
	Private btnOpenAIFiles As Button
	Private btnSetup As Button
	Private btnOpenAIStatus As Button
	Private lblSpeechCost As Label
	Private TTSspeed As Double = 1.0
	Private txtVectorStoreName As TextField
	Private btnResetChat As Button
	
	'GOOGLE SEARCH TOOL
	Private PaneGoogle As Pane
	Type SearchResult(URL As String, Title As String, Snippet As String)
	Private lblGoogleAPIKey As Label
	Private lblGoogleSearchEngineID As Label
	Private lblOpenAIAPIKey As Label
	Private GoogleApiKey As String = ""
	Private searchEngineId As String = ""
	Private btnGenerateRequest As Button
	Private btnAddToAI1 As Button
	Private btnAddToAI2 As Button
	Private btnAddToAI3 As Button
	Private btnAddToAI4 As Button
	Private btnAddToAI5 As Button
	Private btnAddToAI6 As Button
	Private btnAddToAI7 As Button
	Private btnAddToAI8 As Button
	Private btnAddToAI9 As Button
	Private btnAddToAI10 As Button
	Private btnPreviousPage As Button
	Private btnNextPage As Button
	Private cmbc2coff As ComboBox
	Private cmbcr As ComboBox
	Private cmbdateRestrict As ComboBox
	Private cmbfileType As ComboBox
	Private cmbfilter As ComboBox
	Private cmbgl As ComboBox
	Private cmbgooglehost As ComboBox
	Private cmbhl As ComboBox
	Private cmbimgColorType As ComboBox
	Private cmbimgDominantColor As ComboBox
	Private cmbimgSize As ComboBox
	Private cmbimgType As ComboBox
	Private cmblr As ComboBox
	Private cmbrights As ComboBox
	Private cmbsafe As ComboBox
	Private cmbsearchType As ComboBox
	Private cmbsiteSearchFilter As ComboBox
	Private cmbsort As ComboBox
	Private lblc2coff As Label
	Private lblcr As Label
	Private lbldateRestrict As Label
	Private lblexactTerms As Label
	Private lblexcludeTerms As Label
	Private lblfileType As Label
	Private lblfilter As Label
	Private lblgl As Label
	Private lblgooglehost As Label
	Private lblhighRange As Label
	Private lblhl As Label
	Private lblhq As Label
	Private lblimgColorType As Label
	Private lblimgDominantColor As Label
	Private lblimgSize As Label
	Private lblimgType As Label
	Private lblInstructions As Label
	Private lbllinkSite As Label
	Private lbllowRange As Label
	Private lbllr As Label
	Private lblnum As Label
	Private lblorTerms As Label
	Private lblQuery As Label
	Private lblrights As Label
	Private lblsafe As Label
	Private lblsearchType As Label
	Private lblsiteSearch As Label
	Private lblsort As Label
	Private lblstart As Label
	Private lblUrlResult1 As Label
	Private lblUrlResult2 As Label
	Private lblUrlResult3 As Label
	Private lblUrlResult4 As Label
	Private lblUrlResult5 As Label
	Private lblUrlResult6 As Label
	Private lblUrlResult7 As Label
	Private lblUrlResult8 As Label
	Private lblUrlResult9 As Label
	Private lblUrlResult10 As Label
	Private lblTitleResult1 As Label
	Private lblTitleResult2 As Label
	Private lblTitleResult3 As Label
	Private lblTitleResult4 As Label
	Private lblTitleResult5 As Label
	Private lblTitleResult6 As Label
	Private lblTitleResult7 As Label
	Private lblTitleResult8 As Label
	Private lblTitleResult9 As Label
	Private lblTitleResult10 As Label
	Private lblSnippetResult1 As Label
	Private lblSnippetResult2 As Label
	Private lblSnippetResult3 As Label
	Private lblSnippetResult4 As Label
	Private lblSnippetResult5 As Label
	Private lblSnippetResult6 As Label
	Private lblSnippetResult7 As Label
	Private lblSnippetResult8 As Label
	Private lblSnippetResult9 As Label
	Private lblSnippetResult10 As Label
	Private txtdateRestrict As TextField
	Private txtexactTerms As TextField
	Private txtexcludeTerms As TextField
	Private txthighRange As TextField
	Private txthq As TextField
	Private txtlowRange As TextField
	Private txtnum As TextField
	Private txtorTerms As TextField
	Private txtQuery As TextField
	Private txtsiteSearch As TextField
	Private txtstart As TextField
	Private lblurlforhelp As Label
	
	'UPLOAD FILE/URL TO OPENAI
	Private txtlinkSite As TextField
	Private lblClickURLInstructions As Label
	Private btnBackGoogle As Button
	Private cmbPurpose As ComboBox
	Private btnProceedToFileUpload As Button
	Private lblSelectPurpose As Label
	Private lblUploadSuccess As Label
	Private btnProceedToURLUpload As Button
	Private txtURLtoUpload As TextField
	Private btnListVectorStores As Button

	Private cmbcrAbbreviations As List
	Private cmblrAbbreviations As List
	Private clbglAbbreviations As List
	Private cmbsiteSearchFilterAbbreviations As List
	Private cmbsearchTypeAbbreviations As List
	Private cmbdateRestrictAbbreviations As List
	Private cmbfilterAbbreviations As List
	Private cmbhlAbbreviations As List
	Private cmbc2coffAbbreviations As List
	Private cmbfileTypeAbbreviations As List
	Private cmbimgColorTypeAbbreviations As List
	Private SearchResults As List
	Private cmbPurposeAbbreviations As List
	Private Purpose2 As String
	
	'OPENAI ASSISTANT
	Private btnCreateAssistant As Button
	Private lblAssistantId As Label
	Private lblAssistantName As Label
	Private txtAssistantName As TextField
	Private txtAssistantInstructions As TextArea
	Private lblAssistantModel As Label
	Private btnSelectAssistantModel As Button
	Private chkCodeInterpreter As CheckBox
	Private chkFileSearch As CheckBox
	Private chkFunctionCalling As CheckBox
	
	'FILE/URL UPLOAD
	Private btnCancelUpload As Button
	Private lblUploadID As Label
	Private btnCreateThread As Button
	Private btnUsage As Button
	Private btnLimits As Button
	
	'ASSISTANTS LIST
	Private btnListAssistants As Button
	Private activeButtons As List ' List to keep track of the currently active buttons, enabling only one button at a time for actions like activation or editing.
	Private lblViewThreads As Label
	Private btnCreateVectorStore As Button
	Private btnSystemMessage As Button
		
	'THREADS LIST
	Private btnListThreads As Button
	Private txtThreadName As TextField
	Private btnOptIn As Button
	Private btnListMessagesInThread As Button
	Private btnCreateRun As Button
	Private lblThreadID As Label

	'RUN LIST
	Private btnListRuns As Button
	
	'PANE VECTOR STORE
	Private btnOpenAIHelp As Button
	Private btnOpenAIDocs As Button
	Private btnJSONConverter As Button
	
	'TIKTOKEN
	Private tokkit As EncodingRegistry 'See: https://www.b4x.com/android/forum/threads/counting-tokens-for-openai.163361/#post-1002523
	Private btnCountTokens As Button
	Private Encoding As String
	
	'FINE TUNING JOBS
	'Private tableView As TableView
	Private btnListFineTuningJobs As Button
	'Private tblFineTuningJobDetails As TableView
	
	'MODELS
	Type Model(ModelID As String, OwnedBy As String, Created As String, Encoding As String, MaxInputTokens As String, MaxOutputTokens As String, TrainingDate As String, PriceInput  As String, PriceOutput As String, FTPriceInput As String, FTPriceOutput As String, FTPriceTraining As String, PriceAudioInput As String, PriceAudioOutput As String, TokenLimitPerMinute As String, TokenLimitRequestsPerMinute As String, TokenLimitRequestsPerDay As String, BatchQueueLimitTPD As String, OtherLimits As String, Description As String,Assistant As Byte, RetrievalTool As Byte, transcriptions As Byte, translations As Byte, speech As Byte, chat As Byte, embeddings As Byte, FineTuning As Byte, images As Byte, realtime As Byte)
	'Private tableView As TableView
	'Private tblModel As TableView
	Private btnListModels As Button
	Private btnSelectTTSModel As Button
	Private lblTTSModel As Label

	'PANE TABLE
	Private PaneTable As Pane
	Private btnPaneTableBack As Button
	Private lblTableStatus As Label
	Private lblSecondTableLabel As Label
	Private PaneOpenAI As Pane
	Private lblVectorStoreID As Label
	Private lblVectorStoreIDTitle As Label
	Private lblVectorStoreName As Label
	Private TableDefinitions As List
	Private tableView As TableView
	
	'CONTEXT MENU (Help Menus)
	Dim ctxMenu As ContextMenu
	Dim NodeList As List
	Dim NodeNames As List
	Dim HelpTexts As Map
	
	'These nodes are not used in the code except for the help menu right click.
	Private lblFileUploadedStatus As Label
	Private lblFineTuningJobStatus2 As Label
	Private lblRunStatus As Label
	Private lblRunTokenCount As Label
	Private lblSelectOpenAIOutput As Label
	Private lblSelectVoice As Label
	Private Label6 As Label
	Private lblTFJTokenCount As Label
	Private lblThreadName As Label
	Private btnCreateFineTuningJob As Button
	Private Label7 As Label
	Private Label4 As Label
	Private Label1 As Label
	Private Label5 As Label
	Private Label8 As Label
	Private lblVectorStoreNameTitle As Label
	Private lbl1 As Label
	Private lbl2 As Label
	Private lbl3 As Label
	Private lbl4 As Label
	Private lbl6 As Label
	Private lbl7 As Label
	Private Label9 As Label
	Private Label2 As Label
	Private Label3 As Label
	Private lblAssistantIDTitle As Label
End Sub

Sub AppStart (Form1 As Form, Args() As String)
	LogColor("Sub AppStart started", 0xFF009901)
	InitializeLogFile ' Writes a line in the log file basically saying that the program was started.

	MainForm = Form1
	MainForm.RootPane.LoadLayout("Layout1") 'Load the layout file
	MainForm.Show
	MainForm.Title = "OpenAI Toolbox"

	DefaultFolder = File.DirApp 'The Objects Folder where the App is located.

	InitializeTables
	
	Form1.WindowLeft = 0
	Form1.WindowTop = 0

	btnContactInfo.Text = "Click here to visit " & VersionServer & " for more information."
	
	activeButtons.Initialize
	
	lblTableStatus.Initialize("lblTableStatus")
	lblTableStatus.Alignment = "CENTER"
	
	lblSecondTableLabel.Initialize("lblSecondTableLabel")
	lblSecondTableLabel.Alignment = "CENTER"
	
	btnPaneTableBack.Initialize("btnPaneTableBack")
	btnPaneTableBack.Alignment = "CENTER"
	
	'These combo boxes below are made visible based on which model is selected - dall-e-2 or dall-3-3.
	cmbImageQuality.Visible = False
	lblSelectImageQuality.Visible = False

	cmbNumberOfImages.Visible = False
	lblSelectNumberOfImages.Visible = False
				
	cmbImageSize.Visible = False
	lblSelectImageSize.Visible = False
	
	cmbImageStyle.Visible = False
	lblSelectImageStyle.Visible = False
		
	'load the css file for the many tables this software shows.
	MainForm.Stylesheets.Add(File.GetUri(File.DirAssets, "tableView.css"))

	'sliderTTSSpeed.Initialize("ttsspeed")
	sliderTTSSpeed.MinValue = 0.25
	sliderTTSSpeed.MaxValue = 4.0
	sliderTTSSpeed.Value = 1.0
	
	lblTTSSpeed.Text = "TTS Speed:1.0x"
	
	'Initialize ComboBox for TTS voice
	cmbTTSVoice.Items.Clear
	cmbTTSVoice.Items.AddAll(Array As String("alloy", "echo", "fable", "onyx", "nova", "shimmer"))
	cmbTTSVoice.SelectedIndex = 0 'Set default voice to "alloy"
	
	'btnCreateAssistant.Initialize("btnCreateAssistant")
	
	cmbPurpose.Items.Clear
	cmbPurpose.Items.AddAll(Array("assistants for Assistants and Message files","fine-tune for Fine-Tuning","batch Creates and executes a batch from an uploaded file of requests","vision for Assistants image file inputs"))
	cmbPurposeAbbreviations.Initialize
	cmbPurposeAbbreviations.AddAll(Array("assistants", "fine-tune","batch","vision"))
	lblUploadID.Text = ""

	LoadContextMenu '(Help Menu)
	LoadHelpTexts
 
	'Check if the defaults.txt file exists in the DefaultFolder
	If File.Exists(DefaultFolder, "defaults.txt") Then
		lblStartupInstructions.Text = ""
		lblStartupInstructions.Style = "-fx-background-color: white;" 'Optional styling
		LoadDefaults 'Presently the defaults file only contains the keys.
	Else
		lblStartupInstructions.Text = "First, Get and enter your OpenAI API key.  Then the google keys if you want to use the goole search functions."
		lblStartupInstructions.Style = "-fx-background-color: yellow;" 'Optional styling
		Log("defaults.txt does not exist.")
		RunSetup
	End If
	LogColor("Sub AppStart finished", 0xFFFF6600)
End Sub

'CONTEXT MENU (Help Menus)
Private Sub LoadContextMenu
	LogColor("Sub LoadContextMenu started", 0xFF009901)
	HelpTexts.Initialize
	NodeList.Initialize
	NodeNames.Initialize
	NodeNames = File.ReadList(DefaultFolder, "NodeList.txt")

	InitializeNodeList
	
	For X = 0 To NodeList.Size - 1
		Dim NodeText As String = NodeNames.Get(X)
		Dim Node As JavaObject = NodeList.Get(X)

		ctxMenu.Initialize("ctxm")
		Dim MT() As String = Array As String("Help")
		For i = 0 To MT.Length - 1
			Dim Mi As MenuItem
			Mi.Initialize(MT(i),"ctxm")
			
			'Setting UserData for each MenuItem here, before it's added to the context menu\
			'NOTE:  This actually sets the Tag for the MenuItem.  An unexpected benefit!!!!
			Mi.As(JavaObject).RunMethod("setUserData", Array(NodeText))
			'Log("Node as String = " & Node.As(String))
			'Log("NodeText = " & NodeText)
			ctxMenu.MenuItems.Add(Mi)
		Next
		Node.As(JavaObject).RunMethod("setContextMenu",Array(ctxMenu))
	Next
	LogColor("Sub LoadContextMenu finished", 0xFFFF6600)
End Sub

Private Sub InitializeNodeList
	LogColor("Sub InitializeNodeList started", 0xFF009901)
	NodeList.Add(lblUrlResult10)
	NodeList.Add(lblTitleResult10)
	NodeList.Add(lblSnippetResult10)
	NodeList.Add(btnAddToAI1)
	NodeList.Add(btnAddToAI2)
	NodeList.Add(btnAddToAI3)
	NodeList.Add(btnAddToAI4)
	NodeList.Add(btnAddToAI5)
	NodeList.Add(btnAddToAI6)
	NodeList.Add(btnAddToAI7)
	NodeList.Add(cmbfilter)
	NodeList.Add(btnAddToAI8)
	NodeList.Add(btnResetChat)
	NodeList.Add(cmbgl)
	NodeList.Add(btnAddToAI9)
	NodeList.Add(cmbgooglehost)
	NodeList.Add(cmblr)
	NodeList.Add(cmbsafe)
	NodeList.Add(cmbsearchType)
	NodeList.Add(cmbimgColorType)
	NodeList.Add(cmbimgDominantColor)
	NodeList.Add(cmbimgSize)
	NodeList.Add(cmbimgType)
	NodeList.Add(btnGenerateRequest)
	NodeList.Add(txtQuery)
	NodeList.Add(txtexactTerms)
	NodeList.Add(txtexcludeTerms)
	NodeList.Add(txtnum)
	NodeList.Add(txtsiteSearch)
	NodeList.Add(txtdateRestrict)
	NodeList.Add(cmbc2coff)
	NodeList.Add(cmbcr)
	NodeList.Add(cmbfileType)
	NodeList.Add(cmbrights)
	NodeList.Add(cmbsort)
	NodeList.Add(cmbdateRestrict)
	NodeList.Add(lblQuery)
	NodeList.Add(lblexactTerms)
	NodeList.Add(lblexcludeTerms)
	NodeList.Add(lblsiteSearch)
	NodeList.Add(lblnum)
	NodeList.Add(lblsort)
	NodeList.Add(lbldateRestrict)
	NodeList.Add(lblcr)
	NodeList.Add(lblfilter)
	NodeList.Add(lblgl)
	NodeList.Add(lbllr)
	NodeList.Add(lblsafe)
	NodeList.Add(lblfileType)
	NodeList.Add(lblgooglehost)
	NodeList.Add(lblc2coff)
	NodeList.Add(lblsearchType)
	NodeList.Add(lblimgColorType)
	NodeList.Add(lblimgDominantColor)
	NodeList.Add(lblimgSize)
	NodeList.Add(lblimgType)
	NodeList.Add(lblrights)
	NodeList.Add(cmbsiteSearchFilter)
	NodeList.Add(lblhq)
	NodeList.Add(txthq)
	NodeList.Add(lblhl)
	NodeList.Add(cmbhl)
	NodeList.Add(lblorTerms)
	NodeList.Add(txtorTerms)
	NodeList.Add(lblInstructions)
	NodeList.Add(lbllowRange)
	NodeList.Add(lblhighRange)
	NodeList.Add(lbllinkSite)
	NodeList.Add(lblurlforhelp)
	NodeList.Add(txtlowRange)
	NodeList.Add(txthighRange)
	NodeList.Add(lblstart)
	NodeList.Add(txtstart)
	NodeList.Add(txtlinkSite)
	NodeList.Add(lblUrlResult1)
	NodeList.Add(lblTitleResult1)
	NodeList.Add(lblSnippetResult1)
	NodeList.Add(lblSnippetResult2)
	NodeList.Add(lblTitleResult2)
	NodeList.Add(lblUrlResult2)
	NodeList.Add(lblSnippetResult3)
	NodeList.Add(lblTitleResult3)
	NodeList.Add(lblUrlResult3)
	NodeList.Add(lblUrlResult4)
	NodeList.Add(lblTitleResult4)
	NodeList.Add(lblSnippetResult4)
	NodeList.Add(lblSnippetResult5)
	NodeList.Add(lblTitleResult5)
	NodeList.Add(lblUrlResult5)
	NodeList.Add(lblSnippetResult6)
	NodeList.Add(lblTitleResult6)
	NodeList.Add(lblUrlResult6)
	NodeList.Add(lblUrlResult7)
	NodeList.Add(btnAddToAI10)
	NodeList.Add(lblClickURLInstructions)
	NodeList.Add(btnPreviousPage)
	NodeList.Add(btnNextPage)
	NodeList.Add(btnBackGoogle)
	NodeList.Add(lblFileUploadedStatus)
	NodeList.Add(lblTitleResult7)
	NodeList.Add(lblSnippetResult7)
	NodeList.Add(lblSnippetResult8)
	NodeList.Add(lblTitleResult8)
	NodeList.Add(lblUrlResult8)
	NodeList.Add(lblSnippetResult9)
	NodeList.Add(lblTitleResult9)
	NodeList.Add(lblUrlResult9)
	NodeList.Add(btnModels)
	NodeList.Add(btnCookbook)
	NodeList.Add(btnAPIReference)
	NodeList.Add(btnChangeLog)
	NodeList.Add(btnSaveKeys)
	NodeList.Add(btnOptIn)
	NodeList.Add(btnContactInfo)
	NodeList.Add(txtSearchEngineId)
	NodeList.Add(txtGoogleApiKey)
	NodeList.Add(txtOpenAIapiKey)
	NodeList.Add(btnOpenAIStatus)
	NodeList.Add(btnUsage)
	NodeList.Add(btnLimits)
	NodeList.Add(btnOpenAIHelp)
	NodeList.Add(btnOpenAIDocs)
	NodeList.Add(btnGetOpenAPIKeyHere)
	NodeList.Add(btnGetGoogleSearchKeyHere)
	NodeList.Add(btnGetGoogleSearchEngineID)
	NodeList.Add(lblStartupInstructions)
	NodeList.Add(btnSelectLogFile)
	NodeList.Add(btnSelectDefaultFolder)
	NodeList.Add(lblOpenAIAPIKey)
	NodeList.Add(lblGoogleSearchEngineID)
	NodeList.Add(lblGoogleAPIKey)
	NodeList.Add(btnSetupBack)
	NodeList.Add(btnJSONConverter)
	NodeList.Add(btnImageGeneration)
	NodeList.Add(lblAssistantName)
	NodeList.Add(lblSelectNumberOfImages)
	NodeList.Add(lblChatStatus)
	NodeList.Add(lblSelectImageQuality)
	NodeList.Add(lblFineTuningJobStatus2)
	NodeList.Add(lblRunStatus)
	NodeList.Add(lblRunTokenCount)
	NodeList.Add(lblUploadSuccess)
	NodeList.Add(btnSelectImageModel)
	NodeList.Add(lblImageCost)
	NodeList.Add(lblSpeechCost)
	NodeList.Add(btnSelectTTSModel)
	NodeList.Add(lblUploadID)
	NodeList.Add(lblTTSModel)
	NodeList.Add(lblSelectPurpose)
	NodeList.Add(lblSelectOpenAIOutput)
	NodeList.Add(lblSelectVoice)
	NodeList.Add(Label6)
	NodeList.Add(lblTFJTokenCount)
	NodeList.Add(btnCancelUpload)
	NodeList.Add(lblThreadID)
	NodeList.Add(btnContinueWhereYouLeftOff)
	NodeList.Add(lblThreadName)
	NodeList.Add(btnCopyToClipboard)
	NodeList.Add(lblTTSSpeed)
	NodeList.Add(btnCreateAssistant)
	NodeList.Add(lblVectorStoreID)
	NodeList.Add(btnCreateFineTuningJob)
	NodeList.Add(lblVectorStoreIDTitle)
	NodeList.Add(btnCreateThread)
	NodeList.Add(btnCreateVectorStore)
	NodeList.Add(btnListAssistants)
	NodeList.Add(btnListFineTuningJobs)
	NodeList.Add(lblCurrentImageModel)
	NodeList.Add(cmbNumberOfImages)
	NodeList.Add(cmbImageQuality)
	NodeList.Add(lblSelectImageStyle)
	NodeList.Add(cmbImageStyle)
	NodeList.Add(Label7)
	NodeList.Add(Label4)
	NodeList.Add(Label1)
	NodeList.Add(Label5)
	NodeList.Add(Label8)
	NodeList.Add(lblVectorStoreName)
	NodeList.Add(lblVectorStoreNameTitle)
	NodeList.Add(lblViewThreads)
	NodeList.Add(sliderTTSSpeed)
	NodeList.Add(btnListMessagesInThread)
	NodeList.Add(txtAIInput)
	NodeList.Add(btnListModels)
	NodeList.Add(txtAssistantInstructions)
	NodeList.Add(btnListRuns)
	NodeList.Add(txtAssistantName)
	NodeList.Add(btnListThreads)
	NodeList.Add(txtOpenAIResponse)
	NodeList.Add(btnListVectorStores)
	NodeList.Add(txtThreadName)
	NodeList.Add(btnOpenAIRespondJPG)
	NodeList.Add(txtURLtoUpload)
	NodeList.Add(btnOpenAIRespondText)
	NodeList.Add(btnOpenAIRespondTTS)
	NodeList.Add(btnOpenAIRespondTextThread)
	NodeList.Add(btnProceedToFileUpload)
	NodeList.Add(txtVectorStoreName)
	NodeList.Add(btnCreateRun)
	NodeList.Add(chkFileSearch)
	NodeList.Add(chkCodeInterpreter)
	NodeList.Add(btnProceedToURLUpload)
	NodeList.Add(chkFunctionCalling)
	NodeList.Add(lbl1)
	NodeList.Add(btnCountTokens)
	NodeList.Add(lbl2)
	NodeList.Add(btnGoogle)
	NodeList.Add(lbl3)
	NodeList.Add(btnOpenAIFiles)
	NodeList.Add(lbl4)
	NodeList.Add(btnSetup)
	NodeList.Add(Label9)
	NodeList.Add(btnSystemMessage)
	NodeList.Add(btnViewLog)
	NodeList.Add(cmbPurpose)
	NodeList.Add(cmbTTSVoice)
	NodeList.Add(lbl6)
	NodeList.Add(lbl7)
	NodeList.Add(lblAssistantModel)
	NodeList.Add(lblCurrentChatModel)
	NodeList.Add(Label2)
	NodeList.Add(btnSelectAssistantModel)
	NodeList.Add(Label3)
	NodeList.Add(btnSelectChatModel)
	NodeList.Add(lblAssistantId)
	NodeList.Add(cmbImageSize)
	NodeList.Add(lblAssistantIDTitle)
	NodeList.Add(lblSelectImageSize)
	LogColor("Sub InitializeNodeList finished", 0xFFFF6600)
End Sub

Private Sub LoadHelpTexts
	LogColor("Sub LoadHelpTexts started", 0xFF009901)
	Dim HelpList As List
	HelpList.Initialize
	HelpTexts.Put("lblUrlResult10", "Displays the URL result.")
	HelpTexts.Put("lblTitleResult10", "Displays the title of the result.")
	HelpTexts.Put("lblSnippetResult10", "Shows a snippet or summary of the result.")
	HelpTexts.Put("btnAddToAI1", "Adds the result to the AI's context.")
	HelpTexts.Put("btnAddToAI2", "Adds the result to the AI's context.")
	HelpTexts.Put("btnAddToAI3", "Adds the result to the AI's context.")
	HelpTexts.Put("btnAddToAI4", "Adds the result to the AI's context.")
	HelpTexts.Put("btnAddToAI5", "Adds the result to the AI's context.")
	HelpTexts.Put("btnAddToAI6", "Adds the result to the AI's context.")
	HelpTexts.Put("btnAddToAI7", "Adds the result to the AI's context.")
	HelpTexts.Put("cmbfilter", "Selects filters for the displayed results.")
	HelpTexts.Put("btnAddToAI8", "Adds the result to the AI's context.")
	HelpTexts.Put("cmbgl", "Selects the language you want to search.")
	HelpTexts.Put("btnAddToAI9", "Adds the result to the AI's context.")
	HelpTexts.Put("cmbgooglehost", "Selects the Google host to use for searches.")
	HelpTexts.Put("cmblr", "Labeled for languages in the results.")
	HelpTexts.Put("cmbsafe", "Selects the safe search mode.")
	HelpTexts.Put("cmbsearchType", "Selects the type of search being performed.")
	HelpTexts.Put("cmbimgColorType", "Selects the color type for image search.")
	HelpTexts.Put("cmbimgDominantColor", "Selects the dominant color for image search.")
	HelpTexts.Put("cmbimgSize", "Selects the size of the images to retrieve.")
	HelpTexts.Put("cmbimgType", "Selects the type of image to search for.")
	HelpTexts.Put("btnGenerateRequest", "Generates a request based on current selections.")
	HelpTexts.Put("txtQuery", "Enter your search query here.")
	HelpTexts.Put("txtexactTerms", "Enter exact terms to be included in search.")
	HelpTexts.Put("txtexcludeTerms", "Enter terms to be excluded from search.")
	HelpTexts.Put("txtnum", "Specify the number of results to return.")
	HelpTexts.Put("txtsiteSearch", "Specify a site to narrow your search to.")
	HelpTexts.Put("txtdateRestrict", "Specify a date range for your search results.")
	HelpTexts.Put("cmbc2coff", "Switch for C2C functionalities.")
	HelpTexts.Put("cmbcr", "Select the content rating for the results.")
	HelpTexts.Put("cmbfileType", "Select the type of file to search for.")
	HelpTexts.Put("cmbrights", "Selects the rights associated with the content.")
	HelpTexts.Put("cmbsort", "Select the sort order for results.")
	HelpTexts.Put("cmbdateRestrict", "Selects the date restrictions for the search.")
	HelpTexts.Put("lblQuery", "Label displaying the current search query.")
	HelpTexts.Put("lblexactTerms", "Label showing exact terms being searched.")
	HelpTexts.Put("lblexcludeTerms", "Label for terms being excluded from the search.")
	HelpTexts.Put("lblsiteSearch", "Label for the specific site being searched.")
	HelpTexts.Put("lblnum", "Label for the number of results to return.")
	HelpTexts.Put("lblsort", "Label for the current sorting method for results.")
	HelpTexts.Put("lbldateRestrict", "Label indicating any date restrictions applied.")
	HelpTexts.Put("lblcr", "Label for content rating information.")
	HelpTexts.Put("lblfilter", "Label for the currently applied filter options.")
	HelpTexts.Put("lblgl", "Label for the language option.")
	HelpTexts.Put("lbllr", "Label for search language results.")
	HelpTexts.Put("lblsafe", "Label for the safe search setting.")
	HelpTexts.Put("lblfileType", "Label displaying the type of files being searched.")
	HelpTexts.Put("lblgooglehost", "Label showing the selected Google host.")
	HelpTexts.Put("lblc2coff", "Label showing C2C functionalities.")
	HelpTexts.Put("lblsearchType", "Label for the type of search performed.")
	HelpTexts.Put("lblimgColorType", "Label for the selected color type for images.")
	HelpTexts.Put("lblimgDominantColor", "Label showing the dominant color being searched for.")
	HelpTexts.Put("lblimgSize", "Label indicating the image size criteria.")
	HelpTexts.Put("lblimgType", "Label indicating the type of images being searched.")
	HelpTexts.Put("lblrights", "Displays the rights associated with content.")
	HelpTexts.Put("cmbsiteSearchFilter", "Selects a filter for site-specific searches.")
	HelpTexts.Put("lblhq", "Label indicating search quality.")
	HelpTexts.Put("txthq", "Sets the desired search quality.")
	HelpTexts.Put("lblhl", "Label for highlighting search keywords.")
	HelpTexts.Put("cmbhl", "Selects options for keyword highlighting.")
	HelpTexts.Put("lblorTerms", "Label indicating alternative search terms.")
	HelpTexts.Put("txtorTerms", "Enter alternative terms for search.")
	HelpTexts.Put("lblInstructions", "Instructions on how to use the search features.")
	HelpTexts.Put("lbllowRange", "Label indicating the lower range for filters.")
	HelpTexts.Put("lblhighRange", "Label indicating the higher range for filters.")
	HelpTexts.Put("lbllinkSite", "Label for site links.")
	HelpTexts.Put("lblurlforhelp", "Label indicating URL for additional help.")
	HelpTexts.Put("txtlowRange", "Enter the lower range for filtering results.")
	HelpTexts.Put("txthighRange", "Enter the higher range for filtering results.")
	HelpTexts.Put("lblstart", "Label indicating the starting point of results.")
	HelpTexts.Put("txtstart", "Enter the starting index for results.")
	HelpTexts.Put("txtlinkSite", "Enter the link for additional site information.")
	HelpTexts.Put("lblUrlResult1", "Displays the URL result 1.")
	HelpTexts.Put("lblTitleResult1", "Displays the title of result 1.")
	HelpTexts.Put("lblSnippetResult1", "Shows a snippet or summary of result 1.")
	HelpTexts.Put("lblSnippetResult2", "Shows a snippet or summary of result 2.")
	HelpTexts.Put("lblTitleResult2", "Displays the title of result 2.")
	HelpTexts.Put("lblUrlResult2", "Displays the URL result 2.")
	HelpTexts.Put("lblSnippetResult3", "Shows a snippet or summary of result 3.")
	HelpTexts.Put("lblTitleResult3", "Displays the title of result 3.")
	HelpTexts.Put("lblUrlResult3", "Displays the URL result 3.")
	HelpTexts.Put("lblUrlResult4", "Displays the URL result 4.")
	HelpTexts.Put("lblTitleResult4", "Displays the title of result 4.")
	HelpTexts.Put("lblSnippetResult4", "Shows a snippet or summary of result 4.")
	HelpTexts.Put("lblSnippetResult5", "Shows a snippet or summary of result 5.")
	HelpTexts.Put("lblTitleResult5", "Displays the title of result 5.")
	HelpTexts.Put("lblUrlResult5", "Displays the URL result 5.")
	HelpTexts.Put("lblSnippetResult6", "Shows a snippet or summary of result 6.")
	HelpTexts.Put("lblTitleResult6", "Displays the title of result 6.")
	HelpTexts.Put("lblUrlResult6", "Displays the URL result 6.")
	HelpTexts.Put("lblUrlResult7", "Displays the URL result 7.")
	HelpTexts.Put("btnAddToAI10", "Adds the result to the AI's context.")
	HelpTexts.Put("lblClickURLInstructions", "Instructions for clicking URL results.")
	HelpTexts.Put("btnPreviousPage", "Navigates to the previous page of results.")
	HelpTexts.Put("btnNextPage", "Navigates to the next page of results.")
	HelpTexts.Put("btnBackGoogle", "Redirects to Google search results.")
	HelpTexts.Put("lblFileUploadedStatus", "Displays the status of uploaded files.")
	HelpTexts.Put("lblTitleResult7", "Displays the title of result 7.")
	HelpTexts.Put("lblSnippetResult7", "Shows a snippet or summary of result 7.")
	HelpTexts.Put("lblSnippetResult8", "Shows a snippet or summary of result 8.")
	HelpTexts.Put("lblTitleResult8", "Displays the title of result 8.")
	HelpTexts.Put("lblUrlResult8", "Displays the URL result 8.")
	HelpTexts.Put("lblSnippetResult9", "Shows a snippet or summary of result 9.")
	HelpTexts.Put("lblTitleResult9", "Displays the title of result 9.")
	HelpTexts.Put("lblUrlResult9", "Displays the URL result 9.")
	HelpTexts.Put("PaneGoogle", "Pane for Google-related search functions.")
	HelpTexts.Put("btnModels", "Opens the models interface.")
	HelpTexts.Put("btnCookbook", "Opens the cookbook for AI recipes.")
	HelpTexts.Put("btnAPIReference", "Opens the API reference documentation.")
	HelpTexts.Put("btnChangeLog", "Displays the changelog for updates.")
	HelpTexts.Put("btnSaveKeys", "Saves the API keys to a secure location.")
	HelpTexts.Put("btnOptIn", "Allows you to opt into certain features.")
	HelpTexts.Put("btnContactInfo", "Displays contact information for support.")
	HelpTexts.Put("txtSearchEngineId", "Enter the search engine ID.")
	HelpTexts.Put("txtGoogleApiKey", "Enter your Google API key.")
	HelpTexts.Put("txtOpenAIapiKey", "Enter your OpenAI API key.")
	HelpTexts.Put("btnOpenAIStatus", "Displays the status of OpenAI API.")
	HelpTexts.Put("btnUsage", "Displays usage statistics.")
	HelpTexts.Put("btnLimits", "Displays the limits of resources.")
	HelpTexts.Put("btnOpenAIHelp", "Provides help regarding OpenAI usage.")
	HelpTexts.Put("btnOpenAIDocs", "Opens the OpenAI documentation.")
	HelpTexts.Put("btnGetOpenAPIKeyHere", "Link to retrieve your OpenAI API key.")
	HelpTexts.Put("btnGetGoogleSearchKeyHere", "Link to retrieve your Google Search API key.")
	HelpTexts.Put("btnGetGoogleSearchEngineID", "Link to obtain your Google Search Engine ID.")
	HelpTexts.Put("lblStartupInstructions", "Instructions for starting the application.")
	HelpTexts.Put("btnSelectLogFile", "Selects the log file for viewing.")
	HelpTexts.Put("btnSelectDefaultFolder", "Selects a default folder for saving files.")
	HelpTexts.Put("lblOpenAIAPIKey", "Label for OpenAI API key.")
	HelpTexts.Put("lblGoogleSearchEngineID", "Label for Google Search Engine ID.")
	HelpTexts.Put("lblGoogleAPIKey", "Label for Google API key.")
	HelpTexts.Put("btnSetupBack", "Navigates back to the setup screen.")
	HelpTexts.Put("btnJSONConverter", "Opens the JSON converter tool.")
	HelpTexts.Put("btnImageGeneration", "Initiates the image generation process.")
	HelpTexts.Put("PaneSetup", "Setup pane for configuration options.")
	HelpTexts.Put("PaneTable", "Displays table of data or results.")
	HelpTexts.Put("lblAssistantName", "Label for the assistant's name.")
	HelpTexts.Put("lblSelectNumberOfImages", "Select the number of images to generate.")
	HelpTexts.Put("lblChatStatus", "Displays the status of the current chat session.")
	HelpTexts.Put("lblSelectImageQuality", "Selects the quality of generated images.")
	HelpTexts.Put("lblFineTuningJobStatus2", "Displays status of the fine-tuning job.")
	HelpTexts.Put("lblRunStatus", "Displays the current run status.")
	HelpTexts.Put("lblRunTokenCount", "Displays the token count for the current run.")
	HelpTexts.Put("lblUploadSuccess", "Indicates whether the upload was successful.")
	HelpTexts.Put("btnSelectImageModel", "Select the model for image generation.")
	HelpTexts.Put("lblImageCost", "Displays costs associated with generating images.")
	HelpTexts.Put("lblSpeechCost", "Displays the cost associated with text-to-speech.")
	HelpTexts.Put("btnSelectTTSModel", "Select a model for text-to-speech.")
	HelpTexts.Put("lblUploadID", "Displays the upload ID for the current process.")
	HelpTexts.Put("lblTTSModel", "Shows the selected text-to-speech model.")
	HelpTexts.Put("lblSelectPurpose", "Displays the purpose of the AI assistant.")
	HelpTexts.Put("lblSelectOpenAIOutput", "Shows the format of OpenAI's output.")
	HelpTexts.Put("lblSelectVoice", "Selects the voice used for text-to-speech.")
	HelpTexts.Put("Label6", "N/A")
	HelpTexts.Put("lblTFJTokenCount", "Displays the token count for the current task.")
	HelpTexts.Put("btnCancelUpload", "Cancels the ongoing upload process.")
	HelpTexts.Put("lblThreadID", "Displays the identifier for the current thread.")
	HelpTexts.Put("btnContinueWhereYouLeftOff", "Continues the task where it was previously left off.")
	HelpTexts.Put("lblThreadName", "Shows the name of the current thread.")
	HelpTexts.Put("btnCopyToClipboard", "Copies the current output to clipboard.")
	HelpTexts.Put("lblTTSSpeed", "Displays the current speed of text-to-speech.")
	HelpTexts.Put("btnCreateAssistant", "Creates a new assistant instance.")
	HelpTexts.Put("lblVectorStoreID", "Displays the identifier for the vector store.")
	HelpTexts.Put("btnCreateFineTuningJob", "Creates a job for fine-tuning a model.")
	HelpTexts.Put("lblVectorStoreIDTitle", "Title for the vector store identifier label.")
	HelpTexts.Put("btnCreateThread", "Creates a new thread for AI interactions.")
	HelpTexts.Put("btnCreateVectorStore", "Prepares to create a new Vector Store.  It will actually be created when a file is added to it.")
	HelpTexts.Put("btnListAssistants", "Lists all existing assistant instances.")
	HelpTexts.Put("btnListFineTuningJobs", "Lists all fine-tuning jobs.")
	HelpTexts.Put("lblCurrentImageModel", "Displays the currently selected image model.")
	HelpTexts.Put("cmbNumberOfImages", "Selects the number of images to generate.")
	HelpTexts.Put("cmbImageQuality", "Selects the quality of images to generate.")
	HelpTexts.Put("lblSelectImageStyle", "Selects the style for generated images.")
	HelpTexts.Put("cmbImageStyle", "Selects the style of images to generate.")
	HelpTexts.Put("Label7", "N/A")
	HelpTexts.Put("Label4", "N/A")
	HelpTexts.Put("Label1", "N/A")
	HelpTexts.Put("Label5", "N/A")
	HelpTexts.Put("Label8", "N/A")
	HelpTexts.Put("lblVectorStoreName", "Displays the name of the vector store.")
	HelpTexts.Put("lblVectorStoreNameTitle", "Title for the vector store name label.")
	HelpTexts.Put("lblViewThreads", "Displays the current active threads.")
	HelpTexts.Put("sliderTTSSpeed", "Adjusts the speed of text-to-speech output.")
	HelpTexts.Put("btnListMessagesInThread", "Lists all messages in the current thread.")
	HelpTexts.Put("txtAIInput", "Input field for text commands to the AI.")
	HelpTexts.Put("btnListModels", "Lists all available AI models.")
	HelpTexts.Put("txtAssistantInstructions", "Instructions for the AI assistant.")
	HelpTexts.Put("btnListRuns", "Lists all runs associated with the current session.")
	HelpTexts.Put("txtAssistantName", "Enter a name for the AI assistant.")
	HelpTexts.Put("btnListThreads", "Lists all active threads in the application.")
	HelpTexts.Put("txtOpenAIResponse", "Displays the response from OpenAI.")
	HelpTexts.Put("btnListVectorStores", "Lists all vector stores available.")
	HelpTexts.Put("txtThreadName", "Enter the name of the thread.")
	HelpTexts.Put("btnOpenAIRespondJPG", "Sends a JPG response to OpenAI.")
	HelpTexts.Put("txtURLtoUpload", "Enter the URL of the file to upload.")
	HelpTexts.Put("btnOpenAIRespondText", "Sends a text response to OpenAI.")
	HelpTexts.Put("btnOpenAIRespondTTS", "Sends a text-to-speech response to OpenAI.")
	HelpTexts.Put("btnOpenAIRespondTextThread", "Sends a text response in the context of a thread.")
	HelpTexts.Put("btnProceedToFileUpload", "Proceed to upload the selected file.")
	HelpTexts.Put("txtVectorStoreName", "Enter a name for the vector store.")
	HelpTexts.Put("btnCreateRun", "Creates a new run for processing.")
	HelpTexts.Put("chkFileSearch", "Specify if file search is enabled.")
	HelpTexts.Put("chkCodeInterpreter", "Specify if code interpreter is enabled.")
	HelpTexts.Put("btnProceedToURLUpload", "Proceed to upload from the URL.")
	HelpTexts.Put("chkFunctionCalling", "Specify if function calling is enabled.")
	HelpTexts.Put("lbl1", "N/A")
	HelpTexts.Put("btnCountTokens", "Counts the tokens used in the current input.")
	HelpTexts.Put("lbl2", "N/A")
	HelpTexts.Put("btnGoogle", "Initiates a search on Google.")
	HelpTexts.Put("lbl3", "N/A")
	HelpTexts.Put("btnOpenAIFiles", "Lists the files the user has uploaded to OpenAI.")
	HelpTexts.Put("lbl4", "N/A")
	HelpTexts.Put("btnSetup", "Opens the setup window for configuration.")
	HelpTexts.Put("Label9", "N/A")
	HelpTexts.Put("btnSystemMessage", "Sends a system message to the AI.")
	HelpTexts.Put("btnViewLog", "View logged actions and responses.")
	HelpTexts.Put("cmbPurpose", "Selects the purpose of the AI assistant.")
	HelpTexts.Put("cmbTTSVoice", "Selects the voice for text-to-speech.")
	HelpTexts.Put("lbl6", "N/A")
	HelpTexts.Put("lbl7", "N/A")
	HelpTexts.Put("lblAssistantModel", "Displays the currently selected assistant model.")
	HelpTexts.Put("lblCurrentChatModel", "Displays the assistant model being used for chat.")
	HelpTexts.Put("Label2", "N/A")
	HelpTexts.Put("btnSelectAssistantModel", "Selects the assistant model to be used.")
	HelpTexts.Put("Label3", "N/A")
	HelpTexts.Put("btnSelectChatModel", "Selects which chat model to use.")
	HelpTexts.Put("lblAssistantId", "Displays the ID of the assistant.")
	HelpTexts.Put("cmbImageSize", "Selects the size for image generation.")
	HelpTexts.Put("lblAssistantIDTitle", "Title for the assistant ID.")
	HelpTexts.Put("lblSelectImageSize", "Select the size for generated images.")
	HelpTexts.Put("btnListRunSteps", "List the steps of the selected run.")
	LogColor("Sub LoadHelpTexts finished", 0xFFFF7100)
End Sub

Sub ctxm_Action 'This sub is called when someone right clicks on a node and clicks Help.
	LogColor("Sub CheckForUpdate started", 0xFF009901)
	Dim Mi As MenuItem = Sender
	'Log(Mi.Text)
	Log("Sender.Tag = " & Mi.Tag)
	Dim HelpText As String = HelpTexts.Get(Mi.Tag)
	xui.MsgboxAsync(HelpText, Mi.Tag)
	LogColor("Sub LoadHelpTexts finished", 0xFFFF7100)
End Sub

'STARTUP
Sub CheckForUpdate
	LogColor("Sub CheckForUpdate started", 0xFF009901)
	Dim hc As HttpJob
	hc.Initialize("CheckVersionJob", Me)
	hc.Download(VersionServer & "/version.txt") 'Download version.txt from the server
	Wait For (hc) JobDone(Job As HttpJob)
    
	If hc.Success Then
		Dim CurrentVersion As Int = hc.GetString.Trim
		If CurrentVersion > CodeVersion Then
			'A new version is available
			Dim updateJob As HttpJob
			Job.Initialize("DownloadUpdateJob", Me)
			Job.GetRequest.Timeout = 120000 'That is 120 seconds or two minutes.  Default is 30 seconds.
			Job.Download(VersionServer & "/CurrentVersion.zip") 'Download the new version zip
			
			Wait For (updateJob) JobDone(updateJob As HttpJob)
            
			If Job.Success Then
				Dim out As OutputStream = File.OpenOutput(DefaultFolder, "CurrentVersion.zip", False)
				File.Copy2(Job.GetInputStream, out)
				out.Close
				xui.MsgboxAsync("A new version is available. It has been downloaded as 'CurrentVersion.zip'to " & DefaultFolder, "Update Available")
			Else
				xui.MsgboxAsync("Failed to download the update.", "Error")
			End If
		Else
			xui.MsgboxAsync("You are using the latest version.", "No Update")
		End If
	Else
		xui.MsgboxAsync("Failed to check for updates.", "Error")
	End If
	hc.Release
	LogColor("Sub CheckForUpdate finished", 0xFFFF7100)
End Sub

Sub InitializeLogFile
	LogColor("Sub InitializeLogFile started", 0xFF009901)
	'Check if the directory exists, if not, create it

	'Initialize the log file with a start message
	Dim writer As TextWriter
	writer.Initialize(File.OpenOutput(DefaultFolder, LogFileName, True))
	writer.WriteLine("Log Initialized: " & DateTime.Date(DateTime.Now) & " " & DateTime.Time(DateTime.Now))
	writer.Close
	LogUserAction("Log File Initialized")
	LogColor("Sub InitializeLogFile finished", 0xFFFF7100)
End Sub

'PANE SETUP
Private Sub btnContactInfo_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnContactInfo_MouseClicked started", 0xFF009901)
	LogUserAction("Contact info link clicked.")
	fx.ShowExternalDocument(VersionServer)
	LogColor("Sub btnContactInfo_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnOpenAIStatus_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnOpenAIStatus_MouseClicked started", 0xFF009901)
	fx.ShowExternalDocument("https://status.openai.com/")
	LogUserAction("OpenAI status button clicked")
	LogColor("Sub btnOpenAIStatus_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnViewLog_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnViewLog_MouseClicked started", 0xFF009901)
	fx.ShowExternalDocument(File.Combine(DefaultFolder, LogFileName))
	LogUserAction("View Log button clicked")
	LogColor("Sub btnViewLog_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnSaveKeys_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnSaveKeys_MouseClicked started", 0xFF009901)
	SaveDefaults
	LogUserAction("Save Keys button clicked")
	LogColor("Sub btnSaveKeys_MouseClicked finished", 0xFFFF7100)
End Sub

Sub SaveDefaults
	LogColor("Sub SaveDefaults started", 0xFF009901)
	'Create a list to hold each configuration setting as a string
	Dim defaultsList As List
	defaultsList.Initialize

	'Add each configuration setting to the list
'	defaultsList.Add("DefaultFolder=" & DefaultFolder)
'	defaultsList.Add("DefaultFolder=" & DefaultFolder)
'	defaultsList.Add("LogFileName=" & LogFileName)
	
	If txtOpenAIapiKey.Text <>"" Then
		defaultsList.Add("OpenAIapiKey=" & txtOpenAIapiKey.Text)
	Else
		xui.MsgboxAsync("OpenAI key is missing","PEBKAC Error")
	End If
	
	If txtGoogleApiKey.Text <>"" Then
		defaultsList.Add("GoogleApiKey=" & txtGoogleApiKey.Text)
	End If
	
	If txtSearchEngineId.Text <> "" Then
		defaultsList.Add("searchEngineId=" & txtSearchEngineId.Text)
	End If

	'Write the list to the defaults.txt file in the DefaultFolder
	File.WriteList(DefaultFolder, "defaults.txt", defaultsList)

	LoadDefaults

	LogUserAction("Defaults saved to defaults.txt")
	LogColor("Sub SaveDefaults finished", 0xFFFF7100)
End Sub

Sub LoadDefaults
	LogColor("Sub LoadDefaults started", 0xFF009901)
		'Read all lines from the file into a list
		Dim defaultsList As List
	defaultsList = File.ReadList(DefaultFolder, "defaults.txt")

		'Iterate over each line in the list
		For Each line As String In defaultsList
			Dim parts() As String = Regex.Split("=", line)
			Select parts(0)
'				Case "DefaultFolder"
'					DefaultFolder = parts(1)
'				Case "DefaultFolder"
'					DefaultFolder = parts(1)
'				Case "LogFileName"
'					LogFileName = parts(1)
				Case "OpenAIapiKey"
					OpenAIapiKey = parts(1)
				Case "GoogleApiKey"
					GoogleApiKey = parts(1)
				Case "searchEngineId"
					searchEngineId = parts(1)
			End Select
		Next

		txtOpenAIapiKey.Text = OpenAIapiKey
		txtGoogleApiKey.Text = GoogleApiKey
	txtSearchEngineId.Text = searchEngineId

	LogUserAction("Defaults loaded from defaults.txt")
	lblStartupInstructions.Text = "Click the Back button at the top left and start using the OpenAI API"
	lblStartupInstructions.Style = "-fx-background-color: yellow;" 'Optional styling
	
	OpenAIMainPage 'Show the page with all the buttons and boxes on it!
	OpAI.Initialize(Me, "OpenAI", OpenAIapiKey) 'Initialize the OpenAI library.  Pass it the OpenAI API key.
	
	LogColor("Sub LoadDefaults finished", 0xFFFF7100)
End Sub

Private Sub btnSetup_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnSetup_MouseClicked started", 0xFF009901)
	LogUserAction("Setup Button clicked")
	RunSetup
	LogColor("Sub btnSetup_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub RunSetup
	LogColor("Sub RunSetup started", 0xFF009901)
	LogUserAction("Setup Pane opened.")
	
	PaneSetup.Visible = True
	PaneGoogle.Visible = False
	PaneTable.Visible = False
	PaneOpenAI.Visible = False
	
	'Dim ps As Screen = fx.PrimaryScreen
	'MainForm.SetWindowSizeLimits(ps.MaxX, ps.MaxY, ps.MaxX, ps.MaxY)
	MainForm.SetWindowSizeLimits(1017,750,1017,750)
	LogColor("Sub RunSetup finished", 0xFFFF7100)
End Sub

Private Sub btnSelectLogFile_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnSelectLogFile_MouseClicked started", 0xFF009901)
'	Dim FC As FileChooser
'	FC.Initialize
'	FC.InitialDirectory = DefaultFolder
'	FC.Title = "Specify Log File"
'	
'	FileChooserUtils.AddExtensionFilters4(FC,Array As String("Text Files"),Array As String("*.txt"),True,"Output Files",True)
'	FileChooserUtils.SetSelectedExtensionFilter(FC,"Text Files")
'
'	Dim saveFileName As String = FC.ShowSave(MainForm)
'	Dim Y As Byte
'	
'	For X = saveFileName.Length - 1 To 0 Step -1
'		If saveFileName.SubString2(X,X+1) = "\" Then
'			Y = X
'			Exit
'		End If
'	Next
'
'	DefaultFolder = saveFileName.SubString2(0,Y)
'	LogFileName = saveFileName.SubString2(Y+1,saveFileName.Length)
'	
'	If DefaultFolder = "" Then
'		lblStartupInstructions.Text = "Next, Select Default Folder where program files will be stored."
'	Else
'		lblStartupInstructions.Text = ""
'	End If
'	LogUserAction("Log File Selected: " & saveFileName)
'	
'	SaveDefaults
'	InitializeLogFile
	LogColor("Sub btnSelectLogFile_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnSelectDefaultFolder_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnSelectDefaultFolder_MouseClicked started", 0xFF009901)
'	Dim DC As DirectoryChooser
'	DC.Initialize
'	DC.InitialDirectory = DefaultFolder 'Directory you want to start the chooser (Optional)
'	DefaultFolder = DC.Show(MainForm)
'
'	If txtOpenAIapiKey.Text = "" Then
'		lblStartupInstructions.Text = "Enter your OpenAI API Key"
'	Else
'		lblStartupInstructions.Text = ""
'	End If
'	LogUserAction("Default Directory chosen: " & DefaultFolder)
'	
'	SaveDefaults
	LogColor("Sub btnSelectDefaultFolder_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnGetOpenAPIKeyHere_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnGetOpenAPIKeyHere_MouseClicked started", 0xFF009901)
	LogUserAction("Get Open AI link clicked.")
	fx.ShowExternalDocument("https://platform.openai.com/api-keys")
	LogColor("Sub btnGetOpenAPIKeyHere_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnGetGoogleSearchKeyHere_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnGetGoogleSearchKeyHere_MouseClicked started", 0xFF009901)
	LogUserAction("Get Google Search Key link clicked.")
	fx.ShowExternalDocument("https://support.google.com/googleapi/answer/6158862")
	LogColor("Sub btnGetGoogleSearchKeyHere_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnGetGoogleSearchEngineID_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnGetGoogleSearchEngineID_MouseClicked started", 0xFF009901)
	LogUserAction("Get Google Search Engine ID link clicked")
	fx.ShowExternalDocument("https://support.google.com/programmable-search/answer/12499034")
	LogColor("Sub btnGetGoogleSearchEngineID_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnOptIn_MouseClicked(EventData As MouseEvent)
	LogColor("Sub btnOptIn_MouseClicked started", 0xFF009901)
	LogUserAction("Opt In link clicked.")
	fx.ShowExternalDocument("https://docs.google.com/forms/d/e/1FAIpQLSevgtKyiSWIOj6CV6XWBHl1daPZSOcIWzcUYUXQ1xttjBgDpA/viewform")
	LogColor("Sub btnOptIn_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnOpenAIHelp_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnOpenAIHelp_MouseClicked started", 0xFF009901)
	fx.ShowExternalDocument("https://help.openai.com/en/")
	LogColor("Sub btnOpenAIHelp_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnOpenAIDocs_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnOpenAIDocs_MouseClicked started", 0xFF009901)
	fx.ShowExternalDocument("https://platform.openai.com/docs/overview")
	LogColor("Sub btnOpenAIDocs_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnJSONConverter_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnJSONConverter_MouseClicked started", 0xFF009901)
	fx.ShowExternalDocument("http://basic4ppc.com:51042/json/index.html")
	LogColor("Sub btnJSONConverter_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnImageGeneration_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnImageGeneration_MouseClicked started", 0xFF009901)
	fx.ShowExternalDocument("https://platform.openai.com/docs/guides/images/introduction")
	LogColor("Sub btnImageGeneration_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnModels_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnModels_MouseClicked started", 0xFF009901)
	fx.ShowExternalDocument("https://platform.openai.com/docs/models")
	LogColor("Sub btnModels_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnAPIReference_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnAPIReference_MouseClicked started", 0xFF009901)
	fx.ShowExternalDocument("https://platform.openai.com/docs/api-reference/introduction")
	LogColor("Sub btnAPIReference_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnCookbook_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnCookbook_MouseClicked started", 0xFF009901)
	fx.ShowExternalDocument("https://cookbook.openai.com/")
	LogColor("Sub btnCookbook_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnChangeLog_MouseClicked(EventData As MouseEvent)
	LogColor("Sub btnChangeLog_MouseClicked started", 0xFF009901)
	fx.ShowExternalDocument("https://platform.openai.com/docs/changelog")
	LogColor("Sub btnChangeLog_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnSetupBack_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnSetupBack_MouseClicked started", 0xFF009901)
	LogUserAction("Navigated back from Setup Pane to Main pane.")
	OpenAIMainPage
	LogColor("Sub btnSetupBack_MouseClicked finished", 0xFFFF7100)
End Sub

'OPENAI
Private Sub OpenAIMainPage
	LogColor("Sub OpenAIMainPage started", 0xFF009901)
	LogUserAction("OpenAI button clicked.")
	
	PaneSetup.Visible = False
	PaneGoogle.Visible = False
	PaneTable.Visible = False
	PaneOpenAI.Visible = True
	
	'txtAIInput.Text = "Enter Text to send to OpenAI"
	lblChatStatus.Text = "Awaiting user input."
	lblChatStatus.Style = "-fx-background-color: yellow;" 'Optional styling
	'Dim ps As Screen = fx.PrimaryScreen
	'MainForm.SetWindowSizeLimits(ps.MaxX, ps.MaxY, ps.MaxX, ps.MaxY)
	MainForm.SetWindowSizeLimits(1920,1050, 1920,1050)
	
	btnCountTokens.Text = "Count Tokens"

	LogColor("Sub OpenAIMainPage finished", 0xFFFF7100)
End Sub

'Chat
Private Sub btnOpenAIRespondText_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnOpenAIRespondText_MouseClicked started", 0xFF009901)
	btnCountTokens.Text = "Count Tokens"
	LogUserAction("OpenAI Respond Text Button clicked.")
	lblChatStatus.Text = "Generating chat response... please wait up to 2 minutes."
	lblChatStatus.Style = "-fx-background-color: yellow;" 'Optional styling
	LogUserAction("User entered chat text: " & txtAIInput.Text)
	OpAI.ChatMessage(lblCurrentChatModel.Text, txtAIInput.Text)
	LogColor("Sub btnOpenAIRespondText_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnContinueWhereYouLeftOff_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnContinueWhereYouLeftOff_MouseClicked started", 0xFF009901)
	LogUserAction("'Continue where you left off'Button clicked.")
	txtAIInput.Text = "Continue where you left off."
	LogColor("Sub btnContinueWhereYouLeftOff_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnCopyToClipboard_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnCopyToClipboard_MouseClicked started", 0xFF009901)
	LogUserAction("Copy to Clipboard Button clicked.")
	fx.Clipboard.SetString(txtOpenAIResponse.Text)
	LogColor("Sub btnCopyToClipboard_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub lblSelectModel_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub lblSelectModel_MouseClicked started", 0xFF009901)
	LogUserAction("Get Model Details link clicked.")
	fx.ShowExternalDocument("https://platform.openai.com/docs/models")
	LogColor("Sub lblSelectModel_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnSystemMessage_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnSystemMessage_MouseClicked started", 0xFF009901)
	LogUserAction("OpenAI Respond Text Button clicked.")
	lblChatStatus.Text = "Generating chat response... please wait up to 2 minutes."
	LogUserAction("User entered system message: " & txtAIInput.Text)
	OpAI.SystemMessage(lblCurrentChatModel.Text, txtAIInput.Text) 'optional, tell the bot once how to interpret the chat /act
	LogColor("Sub btnSystemMessage_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnResetChat_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnResetChat_MouseClicked started", 0xFF009901)
	LogUserAction("btnResetChat_MouseClicked clicked.")
	LogUserAction("Reset chat clicked.")
	OpAI.ResetChat
	lblChatStatus.Text = "Chat reset complete."
	LogColor("Sub btnResetChat_MouseClicked finished", 0xFFFF7100)
End Sub

'TIKTOKEN
Private Sub btnCountTokens_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnCountTokens_MouseClicked started", 0xFF009901)
	tokkit.Initialize("") 'Event name is not used

	Log("Encoding = " & Encoding)
	tokkit.SetEncoding(Encoding) 'Set the encoding to that selected when the model was selected.

	Dim tokens As List = tokkit.encode(txtAIInput.text)
	Log(tokens)
    
	Dim decoded As String = tokkit.decode(tokens)
	Log($"Decoded ${decoded}"$)
	
	'Count the tokens in the decoded string
	Dim decodedTokens As List = tokkit.encode(decoded)
	Dim tokenCount As Int = decodedTokens.Size
	Log($"Token Count: ${tokenCount}"$)
	
	btnCountTokens.Text = "Tokens: " & tokenCount
	'https://github.com/openai/tiktoken/blob/main/tiktoken/model.py
	'https://www.b4x.com/android/forum/threads/counting-tokens-for-openai.163361
	'https://www.b4x.com/android/forum/threads/unrecognized-encoding-using-jtokkit.163481/
	'https://www.b4x.com/android/forum/threads/jtokkit-java-tokenizer-kit.163440
	'https://github.com/knuddelsgmbh/jtokkit/blob/main/lib/src/main/java/com/knuddels/jtokkit/api/ModelType.java#L12
	LogColor("Sub btnCountTokens_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub txtAIInput_TextChanged (Old As String, New As String)
	LogColor("Sub txtAIInput_TextChanged started", 0xFF009901)
	CalculateTTSCost
	LogColor("Sub txtAIInput_TextChanged finished", 0xFFFF7100)
End Sub

'Chat message to Thread
Private Sub btnOpenAIRespondTextThread_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnOpenAIRespondTextThread_MouseClicked started", 0xFF009901)
	LogUserAction("OpenAI Respond Text Button clicked.")
	
	btnCountTokens.Text = "Count Tokens"
	
	If CurrentThreadID <> "" Then
		lblChatStatus.Text = "Adding Message to Thread... please wait up to 2 minutes."
		lblChatStatus.Style = "-fx-background-color: yellow;" 'Optional styling
		Dim role As String = "user"
		OpAI.AddMessageToThread(CurrentThreadID, role, txtAIInput.Text)
	Else
		xui.MsgboxAsync("Select Active Thread by Clicking on List Threads / Select Thread.  The select Activate button on the thread list.","Select Active Thread")
		ShowThreadList
		OpenAIMainPage
	End If
	LogColor("Sub btnOpenAIRespondTextThread_MouseClicked finished", 0xFFFF7100)
End Sub

'TTS
Private Sub btnOpenAIRespondTTS_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnOpenAIRespondTTS_MouseClicked started", 0xFF009901)
	LogUserAction("OpenAI Respond TTS Button clicked.")
	btnCountTokens.Text = "Count Tokens"
	lblChatStatus.Text = "Generating TTS... please wait up to 2 minutes."
	OpAI.TextToSpeech(lblTTSModel.Text, cmbTTSVoice.Items.Get(cmbTTSVoice.SelectedIndex), txtAIInput.text, TTSspeed)
	LogColor("Sub btnOpenAIRespondTTS_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub OpenAI_TTSResponse(inputStream As InputStream)
	LogColor("Sub OpenAI_TTSResponse started", 0xFF009901)
	lblChatStatus.Text = ""
	Dim FC As FileChooser
	FC.Initialize
	FC.InitialDirectory = DefaultFolder
	FC.Title = "Save TTS as mp3 file"
	
	FileChooserUtils.AddExtensionFilters4(FC,Array As String("MP3 Files"),Array As String("*.mp3"),True,"Output Files",True)
	FileChooserUtils.SetSelectedExtensionFilter(FC,"MP3 Files")

	Dim saveFileName As String = FC.ShowSave(MainForm)
	Dim FileName As String
	Dim Folder As String
	Dim Y As Byte
	
	'Log("saveFileName = " & saveFileName)
	'Log("Length = " & saveFileName.Length)
	
	For X = saveFileName.Length - 1 To 0 Step -1
		If saveFileName.SubString2(X,X+1) = "\" Then
			Y = X
			Exit
		End If
	Next

	Folder = saveFileName.SubString2(0,Y)
	'DefaultFolder = Folder 'Whichever folder the user chooses becomes the default folder
	FileName = saveFileName.SubString2(Y+1,saveFileName.Length)
	
	If saveFileName <> "" Then
		Dim out As OutputStream = File.OpenOutput(Folder, FileName, False)
		File.Copy2(inputStream, out)
		out.Close
		inputStream.Close
		Log("File saved successfully to: " & saveFileName)
		LogUserAction("TTS mp3 file saved as: " & saveFileName)
		Log("Here")
		fx.ShowExternalDocument(File.Combine(Folder, FileName)) 'This can be used to play the external mp3 file using the default Windows app.
	Else
		Log("File save operation was cancelled.")
		LogUserAction("TTS File save operation was cancelled.")
	End If
	LogColor("Sub OpenAI_TTSResponse finished", 0xFFFF7100)
End Sub

Private Sub sliderTTSSpeed_ValueChange (Value As Double)
	LogColor("Sub sliderTTSSpeed_ValueChange started", 0xFF009901)
	TTSspeed = Value
	lblTTSSpeed.Text = $"TTS Speed: ${NumberFormat2(Value, 1, 1, 0, False)}x"$
	LogUserAction("TTS Slider Speed changed to " & $"TTS Speed: ${NumberFormat2(Value, 1, 1, 0, False)}x"$)
	LogColor("Sub sliderTTSSpeed_ValueChange finished", 0xFFFF7100)
End Sub

'Image
Private Sub btnOpenAIRespondJPG_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnOpenAIRespondJPG_MouseClicked started", 0xFF009901)
	LogUserAction("OpenAI Respond JPG Button clicked.")
	btnCountTokens.Text = "Count Tokens"
	lblChatStatus.Text = "Generating image... please wait up to 2 minutes."
	lblChatStatus.Style = "-fx-background-color: yellow;" 'Optional styling
	
	Dim Quality As String = IIf(cmbImageQuality.SelectedIndex <> - 1, cmbImageQuality.Items.Get(cmbImageQuality.SelectedIndex),"")
	Dim Size As String = IIf(cmbImageSize.SelectedIndex <> - 1, cmbImageSize.Items.Get(cmbImageSize.SelectedIndex),"")
	Dim Quantity As String = IIf(cmbNumberOfImages.SelectedIndex <> - 1, cmbNumberOfImages.Items.Get(cmbNumberOfImages.SelectedIndex),"")
	Dim Style As String =  IIf(cmbImageStyle.SelectedIndex <> - 1, cmbImageStyle.Items.Get(cmbImageStyle.SelectedIndex),"")

	If lblCurrentImageModel.Text <> "" Then
		OpAI.generateImage(txtAIInput.Text, lblCurrentImageModel.Text, Quantity, Size, Quality, Style, "url", Null)
	Else
		xui.MsgboxAsync("Select Image Model First","PEBKAC Error")
	End If
		
	LogColor("Sub btnOpenAIRespondJPG_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub cmbImageSize_ValueChanged (Value As Object)
	LogColor("Sub cmbImageSize_ValueChanged started", 0xFF009901)

	Select lblCurrentImageModel.Text
		Case "dall-e-2"
			CalculateImageCost
		Case Else
			If cmbImageQuality.SelectedIndex <> -1 Then CalculateImageCost
	End Select
	LogColor("Sub cmbImageSize_ValueChanged finished", 0xFFFF7100)
End Sub

Private Sub cmbImageQuality_ValueChanged (Value As Object)
	LogColor("Sub cmbImageQuality_ValueChanged started", 0xFF009901)
	If cmbImageSize.SelectedIndex <> -1 Then CalculateImageCost
	LogColor("Sub cmbImageQuality_ValueChanged finished", 0xFFFF7100)
End Sub

Private Sub CalculateImageCost 'Image cost is based on which model is being used, image size and image quality.
	LogColor("Sub CalculateImageCost started", 0xFF009901)
	Select lblCurrentImageModel.Text

		Case "dall-e-2"

			Select cmbImageSize.Items.Get(cmbImageSize.SelectedIndex)
	
				Case "1024x1024"
					Log("Here3")
					lblImageCost.Text = "Image Cost: $0.02"

				Case "512x512"
					lblImageCost.Text = "Image Cost: $0.018"

				Case "256x256"
					lblImageCost.Text = "Image Cost: $0.016"
			End Select
			
		Case "dall-e-3"
	
			Select cmbImageSize.Items.Get(cmbImageSize.SelectedIndex)
			
				Case "1024x1024"

					Select cmbImageQuality.Items.Get(cmbImageQuality.SelectedIndex)
						
						Case "standard"
							Log("Here dall-e-3 1024 standard")
							lblImageCost.Text = "Image Cost: $0.04"
						
						Case "hd"
							Log("Here dall-e-3 1024 hd")
							lblImageCost.Text = "Image Cost: $0.08"
					End Select

				Case "1792x1024", "1024x1792"

					Select cmbImageQuality.Items.Get(cmbImageQuality.SelectedIndex)
						
						Case "standard"
							lblImageCost.Text = "Image Cost: $0.08"
						
						Case "hd"
							lblImageCost.Text = "Image Cost: $0.12"
					End Select
			End Select
	End Select
	LogColor("Sub CalculateImageCost finished", 0xFFFF7100)
End Sub

Private Sub OpenAI_ImageResponse(inputStream As InputStream)
	LogColor("Sub OpenAI_ImageResponse started", 0xFF009901)
	'Log("Here in main sub image response")
	lblChatStatus.Text = ""
	Dim FC As FileChooser
	FC.Initialize
	FC.InitialDirectory = DefaultFolder
	FC.Title = "Save image as"
	
	FileChooserUtils.AddExtensionFilters4(FC,Array As String("JPG Files"),Array As String("*.jpg"),True,"Output Files",True)
	FileChooserUtils.SetSelectedExtensionFilter(FC,"JPG Files")

	Dim saveFileName As String = FC.ShowSave(MainForm)
	Dim FileName As String
	Dim Folder As String
	Dim Y As Byte
	
	'Log("saveFileName = " & saveFileName)
	'Log("Length = " & saveFileName.Length)
	
	For X = saveFileName.Length - 1 To 0 Step -1
		If saveFileName.SubString2(X,X+1) = "\" Then
			Y = X
			Exit
		End If
	Next

	Folder = saveFileName.SubString2(0,Y)
	'DefaultFolder = Folder 'Whichever folder the user chooses becomes the default folder
	FileName = saveFileName.SubString2(Y+1,saveFileName.Length)
	
	If saveFileName <> "" Then
		Dim out As OutputStream = File.OpenOutput(Folder, FileName, False)
		File.Copy2(inputStream, out)
		out.Close
		inputStream.Close
		LogUserAction("Image saved as: " & saveFileName)
		fx.ShowExternalDocument(File.Combine(Folder, FileName)) 'This can be used to show the external jpg image using the default Windows app.
	Else
		Log("File save operation was cancelled.")
		LogUserAction("Image save operation cancelled.")
	End If
	
	lblChatStatus.Text = "Awaiting user input."
	lblChatStatus.Style = "-fx-background-color: yellow;" 'Optional styling
	LogColor("Sub OpenAI_ImageResponse finished", 0xFFFF7100)
End Sub

'PANE TABLE

Private Sub InitializeTables()
	LogColor("Sub InitializeTables started", 0xFF009901)
	' Initialize the data structure for table definitions
	TableDefinitions.Initialize

	' Define the Assistant List table configuration
	Dim table1 As Map
	table1.Initialize
	table1.Put("name", "Assistant List")
	Dim ColumnList As List
	ColumnList.Initialize
	ColumnList.AddAll(Array As String("Assistant Name", "Instructions", "Description", "Model", "Date Created", "ID", "Tool Resources", "Top_p", "Temperature", "Response Format", "Tools", "Meta Data", "Retrieve", "Edit", "Delete"))
	table1.Put("columns", ColumnList)
	table1.Put("columnWidths", Array As Int(200, 400, 70, 50, 80, 100, 100, 60, 100, 100, 100, 100, 100, 50, 80))
	table1.Put("tag", "ListAssistants")
	table1.Put("left", 5)
	table1.Put("top", 52)
	table1.Put("width", 1710)
	table1.Put("height", 505)
	TableDefinitions.Add(table1)

	' Define the Run List table configuration
	Dim table2 As Map
	table2.Initialize
	table2.Put("name", "Run List")
	Dim ColumnList As List
	ColumnList.Initialize
	ColumnList.AddAll(Array As String("RunID", "Assistant ID", "Status", "Date Created", "Date Started", "Date Completed", "Date Expired", "Date Failed", "Date Cancelled", "Last Error", "Incomplete Details", "Required Action", "Completion Tokens", "Prompt Tokens", "Total Tokens", "Max Completion Tokens", "Max Prompt Tokens", "Tools", "Instructions", "Model", "Type", "Temperature", "Tool Choice", "Truncation Strategy Last Messages", "Truncation Strategy Type", "Retrieve Run", "Cancel Run"))
	table2.Put("columns", ColumnList)
	table2.Put("columnWidths", Array As Int(50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 100, 70, 70))
	table2.Put("tag", "ListRuns")
	table2.Put("left", 5)
	table2.Put("top", 100)
	table2.Put("width", 1470)
	table2.Put("height", 505)
	TableDefinitions.Add(table2)

	' Define the Retrieve Run table configuration
	Dim table3 As Map
	table3.Initialize
	table3.Put("name", "Run Details")
	Dim ColumnList As List
	ColumnList.Initialize
	ColumnList.AddAll(Array As String("Key", "Value"))
	table3.Put("columns", ColumnList)
	table3.Put("columnWidths", Array As Int(200, 800))
	table3.Put("tag", "Run")
	table3.Put("left", 5)
	table3.Put("top", 52)
	table3.Put("width", 1020)
	table3.Put("height", 950)
	TableDefinitions.Add(table3)

	' Define the Thread List table configuration
	Dim table4 As Map
	table4.Initialize
	table4.Put("name", "Thread List")
	Dim ColumnList As List
	ColumnList.Initialize
	ColumnList.AddAll(Array As String("Name", "ID", "Created At", "Metadata", "Activate", "Modify", "Delete"))
	table4.Put("columns", ColumnList)
	table4.Put("columnWidths", Array As Int(200, 200, 100, 100, 80, 50, 80))
	table4.Put("tag", "ThreadList")
	table4.Put("left", 5)
	table4.Put("top", 52)
	table4.Put("width", 830)
	table4.Put("height", 500)
	TableDefinitions.Add(table4)

	' Define the Messages From Thread List table configuration
	Dim table5 As Map
	table5.Initialize
	table5.Put("name", "Messages From Thread List")
	Dim ColumnList As List
	ColumnList.Initialize
	ColumnList.AddAll(Array As String("Role", "Text", "Created", "Message ID", "Thread ID", "Assistant ID", "Type", "Retrieve", "Delete"))
	table5.Put("columns", ColumnList)
	table5.Put("columnWidths", Array As Int(80, 400, 200, 80, 80, 80, 80, 100, 80))
	table5.Put("tag", "MessagesFromThreadList")
	table5.Put("left", 5)
	table5.Put("top", 52)
	table5.Put("width", 1200)
	table5.Put("height", 950)
	TableDefinitions.Add(table5)

	' Define the Vector Store List table configuration
	Dim table6 As Map
	table6.Initialize
	table6.Put("name", "Vector Store List")
	Dim ColumnList As List
	ColumnList.Initialize
	ColumnList.AddAll(Array As String("Vector Store Name", "File Count", "In Progress", "Total", "Cancelled", "Completed", "Failed", "Date Created", "Bytes", "Vector Store ID", "Activate", "List Files", "Delete", "Add Vector Store to Assistant"))
	table6.Put("columns", ColumnList)
	table6.Put("columnWidths", Array As Int(200, 180, 80, 50, 80, 80, 50, 140, 50, 200, 100, 100, 100, 200))
	table6.Put("tag", "ListVectorStores")
	table6.Put("left", 5)
	table6.Put("top", 52)
	table6.Put("width", 1630)
	table6.Put("height", 950)
	TableDefinitions.Add(table6)

	' Define the OpenAI Files List table configuration
	Dim table7 As Map
	table7.Initialize
	table7.Put("name", "OpenAI Files List")
	Dim ColumnList As List
	ColumnList.Initialize
	ColumnList.AddAll(Array As String("Filename", "Purpose", "Bytes", "Date Created", "ID", "Download", "Delete", "Add To Vector Store", "Add to Current Message"))
	table7.Put("columns", ColumnList)
	table7.Put("columnWidths", Array As Int(400, 70, 70, 80, 100, 100, 60, 155, 170))
	table7.Put("tag", "ShowOpenAIFilesList")
	table7.Put("left", 5)
	table7.Put("top", 62)
	table7.Put("width", 1210)
	table7.Put("height", 500)
	TableDefinitions.Add(table7)

	' Define the Fine-Tuning Jobs List table configuration
	Dim table8 As Map
	table8.Initialize
	table8.Put("name", "Fine-Tuning Jobs List")
	Dim ColumnList As List
	ColumnList.Initialize
	ColumnList.AddAll(Array As String("Event ID", "Created At", "Level", "Message", "Type", "Data", "Cancel", "Job Events"))
	table8.Put("columns", ColumnList)
	table8.Put("columnWidths", Array As Int(200, 150, 100, 300, 150, 200, 100, 100))
	table8.Put("tag", "ListFineTuningJobs")
	table8.Put("left", 5)
	table8.Put("top", 52)
	table8.Put("width", 1320)
	table8.Put("height", 950)
	TableDefinitions.Add(table8)

	' Define the Retrieve Fine-Tuning Job table configuration
	Dim table9 As Map
	table9.Initialize
	table9.Put("name", "Fine-Tuning Job Details")
	Dim ColumnList As List
	ColumnList.Initialize
	ColumnList.AddAll(Array As String("Key", "Value"))
	table9.Put("columns", ColumnList)
	table9.Put("columnWidths", Array As Int(200, 800))
	table9.Put("tag", "RetrieveFineTuningJob")
	table9.Put("left", 5)
	table9.Put("top", 52)
	table9.Put("width", 1020)
	table9.Put("height", 950)
	TableDefinitions.Add(table9)

	' Define the Fine-Tuning Event List table configuration
	Dim table10 As Map
	table10.Initialize
	table10.Put("name", "Fine-Tuning Events List")
	Dim ColumnList As List
	ColumnList.Initialize
	ColumnList.AddAll(Array As String("ID", "Data", "Level", "Created", "Message", "Type", "Object"))
	table10.Put("columns", ColumnList)
	table10.Put("columnWidths", Array As Int(200, 150, 100, 150, 300, 100, 100))
	table10.Put("tag", "ListFineTuningEvents")
	table10.Put("left", 5)
	table10.Put("top", 52)
	table10.Put("width", 1320)
	table10.Put("height", 950)
	TableDefinitions.Add(table10)

	' Define the Retrieve Model table configuration
	Dim table11 As Map
	table11.Initialize
	table11.Put("name", "Retrieve Model")
	Dim ColumnList As List
	ColumnList.Initialize
	ColumnList.AddAll(Array As String("Key", "Value"))
	table11.Put("columns", ColumnList)
	table11.Put("columnWidths", Array As Int(200, 800))
	table11.Put("tag", "RetrieveModel")
	table11.Put("left", 5)
	table11.Put("top", 52)
	table11.Put("width", 1020)
	table11.Put("height", 950)
	TableDefinitions.Add(table11)

	' Define the Fine-Tuning Job Details table configuration
	Dim table12 As Map
	table12.Initialize
	table12.Put("name", "Fine-Tuning Job Details")
	Dim ColumnList As List
	ColumnList.Initialize
	ColumnList.AddAll(Array As String("Key", "Value"))
	table12.Put("columns", ColumnList)
	table12.Put("columnWidths", Array As Int(200, 800))
	table12.Put("tag", "FineTuningJobDetails")
	table12.Put("left", 5)
	table12.Put("top", 52)
	table12.Put("width", 1020)
	table12.Put("height", 950)
	TableDefinitions.Add(table12)

	' Define the Model List table configuration
	Dim table13 As Map
	table13.Initialize
	table13.Put("name", "ListModels")
	Dim ColumnList As List
	ColumnList.Initialize
	ColumnList.AddAll(Array As String("ModelID", "Created", "Owned By", "Max Input Tokens", "Max Output Tokens", "Training Date", "Price Input", "Price Output", "FT Price Input", "FT Price Output", "FT Price Training", "Price Audio Input", "Price Audio Output", "Token Limit Per Minute", "Token Limit Requests Per Minute", "Token Limit Requests Per Day", "Batch Queue Limit TPD", "Other Limits", "Description", "Retrieve", "Delete"))
	table13.Put("columns", ColumnList)
	table13.Put("columnWidths", Array As Int(150, 150, 95, 80, 80, 70, 50, 60, 50, 60, 70, 90, 90, 80, 80, 60, 80, 80, 200, 80, 80))
	table13.Put("tag", "ListModels")
	table13.Put("left", 5)
	table13.Put("top", 52)
	table13.Put("width", 1875)
	table13.Put("height", 950)
	TableDefinitions.Add(table13)
	
	' Define the Message table configuration
	Dim table14 As Map
	table14.Initialize
	table14.Put("name", "Message")
	Dim ColumnList As List
	ColumnList.Initialize
	ColumnList.AddAll(Array As String("Key1", "Value1"))
	table14.Put("columns", ColumnList)
	table14.Put("columnWidths", Array As Int(80, 800))
	table14.Put("tag", "Message")
	table14.Put("left", 5)
	table14.Put("top", 52)
	table14.Put("width", 900)
	table14.Put("height", 950)
	TableDefinitions.Add(table14)
	
	' Define the Vector Store table configuration
	Dim table15 As Map
	table15.Initialize
	table15.Put("name", "Vector Store")
	Dim ColumnList As List
	ColumnList.Initialize
	ColumnList.AddAll(Array As String("Key1", "Value1"))
	table15.Put("columns", ColumnList)
	table15.Put("columnWidths", Array As Int(200, 800))
	table15.Put("tag", "VectorStore")
	table15.Put("left", 5)
	table15.Put("top", 52)
	table15.Put("width", 1020)
	table15.Put("height", 950)
	TableDefinitions.Add(table15)
		
	' Define the List Run Step table configuration
	Dim table16 As Map
	table16.Initialize
	table16.Put("name", "Run Steps")
	Dim ColumnList As List
	ColumnList.Initialize
	ColumnList.AddAll(Array As String("RunID", "AssistantID", "ThreadID", "StepID", "Status", "MessageType", "MessageID", "StepType", "Object", "Created", "Completed", "Expired", "Failed", "Cancelled", "LastError", "Promp Tokens", "Completion Tokens", "Total Tokens", "Retrieve Step"))
	table16.Put("columns", ColumnList)
	table16.Put("columnWidths", Array As Int(50, 50, 50, 50, 50, 70, 50, 60, 50, 60, 70, 90, 90, 80, 80, 60, 60, 60, 80))
	table16.Put("tag", "ListRunSteps")
	table16.Put("left", 5)
	table16.Put("top", 52)
	table16.Put("width", 1230)
	table16.Put("height", 950)
	TableDefinitions.Add(table16)
	
	' Define the List Vector Store Files table configuration
	Dim table17 As Map
	table17.Initialize
	table17.Put("name", "List Vector Store Files")
	Dim ColumnList As List
	ColumnList.Initialize
	ColumnList.AddAll(Array As String("File Name", "FileID", "Date Created"))
	table17.Put("columns", ColumnList)
	table17.Put("columnWidths", Array As Int(200, 200, 140))
	table17.Put("tag", "VectorStoreFiles")
	table17.Put("left", 5)
	table17.Put("top", 52)
	table17.Put("width", 570)
	table17.Put("height", 950)
	TableDefinitions.Add(table17)
	
	LogColor("Sub InitializeTables finished", 0xFFFF7100)
End Sub

Private Sub ShowTable(tableName As String)
	LogColor("Sub ShowTable started for: " & tableName, 0xFF009901)

	' Hide all unneeded panes
	PaneSetup.Visible = False
	PaneGoogle.Visible = False
	PaneOpenAI.Visible = False

	PaneTable.Visible = True
	
	Dim selectedTable As Map
	selectedTable.Initialize

	' Find the selected table by name
	For Each table As Map In TableDefinitions
		If table.Get("name") = tableName Then
			selectedTable = table
			Exit
		End If
	Next

	If selectedTable <> Null Then
		' Clear previous nodes
		PaneTable.RemoveAllNodes

		' Initialize the TableView for the selected table
		
		tableView.Initialize(tableName)
		
		' Set the columns for the TableView
		tableView.SetColumns(selectedTable.Get("columns"))	
		tableView.Tag = selectedTable.Get("tag")
		Log("TableView.Tag = " & tableView.Tag)
		
		' Set the column widths
		Dim columnWidths() As Int
		columnWidths = selectedTable.Get("columnWidths")
		
		'Log("columnWidths.Length = " & columnWidths.Length)
		
		Dim width As Int
		Dim Length As Int = columnWidths.Length
		For i = 0 To Length - 1
			width = columnWidths(i)
			'Log("width = " & width)
			tableView.SetColumnWidth(i, width)
		Next

		' Set position and size for the table
		PaneTable.AddNode(tableView, selectedTable.Get("left"), selectedTable.Get("top"), selectedTable.Get("width"), selectedTable.Get("height"))

		' Additional UI updates as needed
		lblTableStatus.Text = "Loading " & tableName & ". please wait up to 2 minutes."
		lblTableStatus.Style = "-fx-background-color: yellow;" ' Optional styling
		PaneTable.AddNode(lblTableStatus, 100, 10, 500, 30)
		PaneTable.AddNode(lblSecondTableLabel, 650, 10, 500, 30)
		PaneTable.AddNode(btnPaneTableBack, 10, 10, 60, 30)

		btnPaneTableBack.Text = "BACK"

	Else
		Log("No table found with the name: " & tableName)
	End If

	LogColor("Sub ShowTable finished", 0xFF009901)
End Sub

Private Sub btnPaneTableBack_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnPaneTableBack_MouseClicked started", 0xFF009901)
	
	lblSecondTableLabel.Text = ""
	lblSecondTableLabel.Style = "-fx-background-color: white;" 'Optional styling
	
	Select tableView.Tag
		'Any list table goes back to the OpenAI Main Page.
		Case "ListAssistants", "ListRuns", "ThreadList", "MessagesFromThreadList", "ListVectorStores", "ListFineTuningJobs", "ListFineTuningEvents", "ListModels", "ShowOpenAIFilesList"
			OpenAIMainPage
		'All Cases below are for tables listing individual items.  They go back to their list table.
		Case "Run"
			ListRuns
		Case "RetrieveMessage"
			ShowMessagesFromThreadList
		Case "RetrieveFineTuningJob"
			ListFineTuningJobs
		Case "RetrieveModel"
			ListModels
		Case "FineTuningJobDetails"
			ListFineTuningJobs
		Case "Message"
			ShowMessagesFromThreadList
		Case "VectorStore", "VectorStoreFiles", "RetrieveVectorStore"
			ListVectorStores
	End Select
	LogUserAction("Back button clicked.")
	LogColor("Sub btnPaneTableBack_MouseClicked finished", 0xFFFF7100)
End Sub

'Assistants

Private Sub txtAssistantName_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub txtAssistantName_MouseClicked started", 0xFF009901)
	LogUserAction("User clicked on Assistant Name text field.")
	txtAssistantName.Style = "-fx-background-color: white;" 'Optional styling
	LogColor("Sub txtAssistantName_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnCreateAssistant_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnCreateAssistant_MouseClicked started", 0xFF009901)
	
	Private assistantTools As List
	Private assistantInstructions As String
	Private assistantModel As String
	
	If txtAssistantName.Text <> "" Then
	
		If txtAssistantName.Text = CurrentAssistantName Then
			xui.MsgboxAsync("Assistant name already exists.  Use a different name to create a new Assistant.","Assistant Name Error")
			txtAssistantName.Style = "-fx-background-color: yellow;" 'Optional styling
			Return
		End If
		
		'***Check the Assistant List to see if one exists with the same name as the one the user is trying to create.
		'Show an xui.MsgboxAsync informing the user that the name already exists and require them to choose a different name.
	
		assistantInstructions = txtAssistantInstructions.Text
		assistantModel = lblAssistantModel.text

		assistantTools.Initialize '***I don't think assistantTools should be a global variable.
	
		If chkCodeInterpreter.Checked Then
			assistantTools.Add(CreateMap("type": "code_interpreter"))
		End If
	
		If chkFileSearch.Checked Then
			assistantTools.Add(CreateMap("type": "file_search"))
		End If
    
		If chkFunctionCalling.Checked Then
			assistantTools.Add(CreateMap("type": "function_calling"))
		End If
	
		If lblAssistantModel.text <> "" Then
			LogUserAction("Proceeded to Create Assistant with model selected.")
			OpAI.CreateAssistant(txtAssistantName.text, assistantInstructions, assistantModel, assistantTools)
		Else
			xui.MsgboxAsync("Select Model before proceeding.", "Error")
			LogUserAction("Attempted to proceed to create assistant without selecting model.")
		End If
	Else
		xui.MsgboxAsync("Enter Assistant Name First","Assistant Name is Blank")
	End If

'	OpAI.CreateAssistant("Math Tutor", _
	'   "You are a personal math tutor. Write and run code to answer math questions.", _
	'   "gpt-4o", _
	'   tools)
	LogColor("Sub btnCreateAssistant_MouseClicked finished", 0xFFFF7100)
End Sub

'LIST ASSISTANTS
Private Sub btnListAssistants_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnListAssistants_MouseClicked started", 0xFF009901)
	ListAssistants
	LogColor("Sub btnListAssistants_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub ListAssistants
	LogColor("Sub ListAssistants started", 0xFF009901)
	LogUserAction("Opened OpenAI Assistants List shown.")
	
	ShowTable("Assistant List") ' Call to show the Fine-Tuning Job Details table

	'Set default parameters
	Dim limit As String = "100" 'Optional limit parameter
	Dim order As String = "desc" 'Optional ordering
	Dim after As String = "" 'Optional after parameter
	Dim before As String = "" 'Optional before parameter

	'Call to list assistants with parameters
	OpAI.ListAssistants(limit, order, after, before)

	LogColor("Sub ListAssistants finished", 0xFFFF7100)
End Sub

Sub ParseAssistantList(JSONResults As String)
	LogColor("Sub ParseAssistantList started", 0xFF009901)
	LogUserAction("Parse Assistant List sub started.")
	Dim Parser As JSONParser
	Parser.Initialize(JSONResults)
	Dim jRoot As Map = Parser.NextObject
	'Dim first_id As String = jRoot.Get("first_id")
	Dim data As List = jRoot.Get("data")
    
	For Each coldata As Map In data
		Dim instructions As String = coldata.Get("instructions")
		'Dim tool_resources As Map = coldata.Get("tool_resources") 'This has to be parsed to be displayed.
		'Dim metadata As Map = coldata.Get("metadata") 'This has to be parsed to be displayed.
		Dim created_at As Int = coldata.Get("created_at")
		Dim description As String = coldata.Get("description")
		'Dim tools As List = coldata.Get("tools") 'I need to parse this and display it as well.
		Dim top_p As Double = coldata.Get("top_p")
		Dim response_format As String = coldata.Get("response_format")
		Dim assistantName As String = coldata.Get("name")
		
		Dim temperature As Double = coldata.Get("temperature")
		Dim model As String = coldata.Get("model")
		Dim AssistantID As String = coldata.Get("id")
		'Dim object3 As String = coldata.Get("object")

		Dim toolsstring As String
		Dim metadatastring As String

		'Convert Unix timestamp to a readable date format
		Dim dateCreated As String = ConvertUnixTimestampToReadableDate(created_at)

		'Add the row to the TableView
		Dim row() As Object = CreateAssistantListRow(Array As String(assistantName, instructions, description, model, dateCreated, AssistantID, "tool_resources", top_p, temperature, response_format, toolsstring, metadatastring))
		tableView.Items.Add(row)
	Next
	
	lblTableStatus.Text = "Assistant List Completed."
	lblTableStatus.Style = "-fx-background-color: white;" 'Optional styling
	
	LogColor("Sub ParseAssistantList finished", 0xFFFF7100)
End Sub

Private Sub CreateAssistantListRow(Row() As String) As Object()
	LogColor("Sub CreateAssistantListRow started", 0xFF009901)
	LogUserAction("Create Assistant List Row sub started.")
	Dim labels(Row.Length + 3) As Object 'Add space for the buttons
	For i = 0 To Row.Length - 1
		Dim lbl As Label
		lbl.Initialize("")
		lbl.Text = Row(i)
		Dim CharactersPerLine As Double = Floor(tableView.GetColumnWidth(i) * .1)  '800 pixels fits 140 characters.  So 140 / 800 is .175 characters per pixel.
		Dim RowsOfTextRequired As Float = lbl.Text.Length / CharactersPerLine
		Dim IntRows As Double = Ceil(RowsOfTextRequired)
		lbl.WrapText = True
		lbl.PrefHeight = IntRows * 15
		labels(i) = lbl
	Next

	'Add Activate button
	Dim btnActivateAssistant As Button
	btnActivateAssistant.Initialize("btnActivateAssistant")
	btnActivateAssistant.Text = "Activate"
	btnActivateAssistant.Tag = Row(5) 'Assuming the ID is at index 5
	'Log("Retrieve Assistant Tag = " & btnRetrieveFile.Tag)
	labels(Row.Length) = btnActivateAssistant

	'Add Edit button
	Dim btnEditAssistant As Button
	btnEditAssistant.Initialize("btnEditAssistant")
	btnEditAssistant.Text = "Edit"
	btnEditAssistant.Tag = Row(5) 'Assuming the ID is at index 5
	'Log("Edit Assistant Tag = " & btnEditAssistant.Tag)
	labels(Row.Length + 1) = btnEditAssistant

	'Add Delete button
	Dim btnDeleteAssistant As Button
	btnDeleteAssistant.Initialize("btnDeleteAssistant")
	btnDeleteAssistant.Text = "Delete"
	btnDeleteAssistant.Tag = Row(5) 'Assuming the ID is at index 5
	'Log("Delete Assistant Tag = " & btnDeleteAssistant.Tag)
	labels(Row.Length + 2) = btnDeleteAssistant
	LogColor("Sub CreateAssistantListRow finished", 0xFFFF7100)
	Return labels
End Sub

Sub btnActivateAssistant_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnActivateAssistant_MouseClicked started", 0xFF009901)
	Log("Activating Assistant...")
	Dim btn As Button = Sender
	CurrentAssistantID = btn.Tag
	Log("AssistantId: " & CurrentAssistantID)
	 
	LogUserAction("OpenAI Assistant Activated ID = " & CurrentAssistantID)

	'Change button text to "Activated"
	btn.Text = "Activated"
	btn.Enabled = False 'Disable the activated button
	'CSSUtils.SetBackgroundColor(btn,fx.Colors.From32Bit(0xFFFAFF00)) 'Optionally add some style.
	
	'Deactivate all other buttons
	For Each b As Button In activeButtons
		If b <> btn Then
			b.Text = "Activate"  'Change text back to "Activate"
			b.Enabled = True  'Enable it again
		End If
	Next

	'Clear the list and add the currently activated button
	activeButtons.Clear
	activeButtons.Add(btn)

	OpAI.RetrieveAssistant(CurrentAssistantID)
	LogColor("Sub btnActivateAssistant_MouseClicked finished", 0xFFFF7100)
End Sub

Sub btnEditAssistant_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnEditAssistant_MouseClicked started", 0xFF009901)
	Dim btnDeleteAssistant As Button = Sender
	Dim assistantId As String = btnDeleteAssistant.Tag
	LogUserAction("Edit Assistant button clicked. Assistant ID = " & assistantId)
	OpAI.EditAssistant(assistantId)
	LogColor("Sub btnEditAssistant_MouseClicked finished", 0xFFFF7100)
End Sub

Sub btnDeleteAssistant_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnDeleteAssistant_MouseClicked started", 0xFF009901)
	
	Dim btnDeleteAssistant As Button = Sender
	Dim assistantId As String = btnDeleteAssistant.Tag
	LogUserAction("Delete Assistant button clicked. Assistant ID = " & assistantId)
	OpAI.DeleteAssistant(assistantId)
	LogColor("Sub btnDeleteAssistant_MouseClicked finished", 0xFFFF7100)
End Sub

'RUNS
'Create Run
Private Sub btnCreateRun_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnCreateRun_MouseClicked started", 0xFF009901)
	LogUserAction("Create Run started. Thread ID = " & CurrentThreadID & " Assistant ID = " & CurrentAssistantID)
	If CurrentThreadID <> "" And CurrentAssistantID <> "" Then
		OpAI.CreateRun(CurrentAssistantID, CurrentThreadID)
	Else
		xui.MsgboxAsync("Select/Create Assistant and Thread before Creating a Run","Assistant & Thread Required")
		'*** Add code to go back to the page where the CreateRun button is.
		OpenAIMainPage
	End If
	LogColor("Sub btnCreateRun_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub CheckRunStatus(RunId As String)
	LogColor("Sub CheckRunStatus started", 0xFF009901)
	LogUserAction("Check Run Status fired.")
		Sleep(1000) 'Wait for 1 second before checking again
		OpAI.CheckRunStatus(CurrentThreadID, RunId)
	LogColor("Sub CheckRunStatus finished", 0xFFFF7100)
End Sub

'List Runs

Private Sub btnListRuns_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnListRuns_MouseClicked started", 0xFF009901)
	ListRuns
	LogColor("Sub btnListRuns_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub ListRuns
	LogColor("Sub ListRuns started", 0xFF009901)

	LogUserAction("List Runs started.")
    
	ShowTable("Run List") ' Call to show the Run List table

	'Define additional parameters for the ListRuns call
	Dim limit As String = "100"  'Set the optional limit parameter
	Dim after As String = ""  'Optional after parameter, can be retrieved from input
	Dim before As String = ""  'Optional before parameter, can be retrieved from input
	Dim order As String = ""  'Optional order parameter, can be retrieved from input

	'Call to parse and display the run list with modified parameters
	OpAI.ListRuns(CurrentThreadID, limit, after, before, order)
    
	LogColor("Sub ListRuns finished", 0xFFFF7100)
End Sub

Private Sub ParseRunList(response As String)
	LogColor("Sub ParserunList started", 0xFF009901)
	LogUserAction("Parse Run List started.")
	Dim ParseR As JSONParser
	ParseR.Initialize(response)
	Dim jRoot As Map = ParseR.NextObject
	Dim first_id As String = jRoot.Get("first_id")
	Dim data As List = jRoot.Get("data")
	For Each coldata As Map In data
		Dim cancelled_at As String = coldata.Get("cancelled_at")'*
		Dim instructions As String = coldata.Get("instructions")'*
		'Dim metadata As Map = coldata.Get("metadata")
		Dim assistant_id As String = coldata.Get("assistant_id")'*
		Dim required_action As String = coldata.Get("required_action")'*
		Dim usage As Map = coldata.Get("usage")
		Dim completion_tokens As String = usage.Get("completion_tokens")'*
		Dim prompt_tokens As String = usage.Get("prompt_tokens")'*
		Dim total_tokens As String = usage.Get("total_tokens")'*
		Dim created_at As String = coldata.Get("created_at")'*
		Dim tools As List = coldata.Get("tools")'*
		'For Each coltools As Map In tools
			'Dim file_search As Map = coltools.Get("file_search")
			'Dim ranking_options As Map = file_search.Get("ranking_options")
			'Dim score_threshold As String = ranking_options.Get("score_threshold")
			'Dim ranker As String = ranking_options.Get("ranker")
			'Dim Type As String = coltools.Get("type")
		'Next
		Dim top_p As String = coldata.Get("top_p")
		Dim max_completion_tokens As String = coldata.Get("max_completion_tokens")'*
		Dim thread_id As String = coldata.Get("thread_id")'*
		Dim expires_at As String = coldata.Get("expires_at")'*
		Dim response_format As String = coldata.Get("response_format")
		Dim Type1 As String = "TEMP"'response_format.Get("type")'*
		Dim temperature As String = coldata.Get("temperature")'*
		Dim tool_choice As String = coldata.Get("tool_choice")'*
		Dim model As String = coldata.Get("model")'*
		Dim RunID As String = coldata.Get("id")'*
		Dim last_error As String = coldata.Get("last_error")'*
		Dim incomplete_details As String = coldata.Get("incomplete_details")'*
		Dim tool_resources As Map = coldata.Get("tool_resources")
		Dim truncation_strategy As Map = coldata.Get("truncation_strategy")
		Dim truncation_strategy_last_messages As String = truncation_strategy.Get("last_messages")'*
		Dim truncation_strategy_Type As String = truncation_strategy.Get("type")'*
		Dim completed_at As String = coldata.Get("completed_at")'*
		Dim parallel_tool_calls As String = coldata.Get("parallel_tool_calls")
		Dim started_at As String = coldata.Get("started_at")'*
		Dim failed_at As String = coldata.Get("failed_at")'*
		Dim max_prompt_tokens As String = coldata.Get("max_prompt_tokens")'*
		Dim object1 As String = coldata.Get("object")'*
		Dim status As String = coldata.Get("status")'*
		
		If cancelled_at <> "null" Then
			'Convert Unix timestamp to a readable date format
			Dim dateCancelled As String = ConvertUnixTimestampToReadableDate(cancelled_at)
		End If
		
		If created_at <> "null" Then
			'Convert Unix timestamp to a readable date format
			Dim dateCreated As String = ConvertUnixTimestampToReadableDate(created_at)
		End If
		
		If expires_at <> "null" Then
			'Convert Unix timestamp to a readable date format
			Dim dateExpired As String = ConvertUnixTimestampToReadableDate(expires_at)
		End If

		If completed_at <> "null" Then
			'Convert Unix timestamp to a readable date format
			Dim dateCompleted As String = ConvertUnixTimestampToReadableDate(completed_at)
		End If

		If started_at <> "null" Then
			'Convert Unix timestamp to a readable date format
			Dim dateStarted As String = ConvertUnixTimestampToReadableDate(started_at)
		End If

		If failed_at <> "null" Then
			'Convert Unix timestamp to a readable date format
			Dim dateFailed As String = ConvertUnixTimestampToReadableDate(failed_at)
		End If

		'Add the row to the TableView
		Dim row() As Object = CreateRunListRow(Array As String(RunID, assistant_id, status, dateCreated, dateStarted, dateCompleted, dateExpired, dateFailed, dateCancelled, last_error, incomplete_details, required_action, completion_tokens, prompt_tokens, total_tokens, max_completion_tokens, max_prompt_tokens, tools, instructions, model, Type1, temperature, tool_choice, truncation_strategy_last_messages, truncation_strategy_Type))
		tableView.Items.Add(row)

	Next
	Dim last_id As String = jRoot.Get("last_id")
	Dim has_more As String = jRoot.Get("has_more")
	Dim object2 As String = jRoot.Get("object")'*

	If has_more = "true" Then
		xui.MsgboxAsync("There is more to see of Run List","Has_more")
	End If

	lblTableStatus.Text  = "Run List Complete."
	lblTableStatus.Style = "-fx-background-color: white;" 'Optional styling
	
	LogColor("Sub ParserunList finished", 0xFFFF7100)
End Sub

Private Sub CreateRunListRow(Row() As String) As Object()
	LogColor("Sub CreateRunListRow started", 0xFF009901)
	LogUserAction("Create Run List Row started.")
	Dim labels(Row.Length + 3) As Object 'Add space for the buttons

	For i = 0 To Row.Length - 1
		Dim lbl As Label
		lbl.Initialize("")
		lbl.Text = Row(i)
		Dim CharactersPerLine As Double = Floor(tableView.GetColumnWidth(i) * .175)  '800 pixels fits 140 characters.  So 140 / 800 is .175 characters per pixel.
		Dim RowsOfTextRequired As Float = lbl.Text.Length / CharactersPerLine
		Dim IntRows As Double = Ceil(RowsOfTextRequired)
		lbl.WrapText = True
		lbl.PrefHeight = IntRows * 15
		labels(i) = lbl
	Next

	'Add Retrieve Run button
	Dim btnRetrieveRun As Button
	btnRetrieveRun.Initialize("btnRetrieveRun")
	btnRetrieveRun.Text = "Retrieve"
	btnRetrieveRun.Tag = Row(0) 'Assuming the RunID is at index 0
	'Log("Retrieve Run Tag = " & btnRetrieveRun.Tag)
	labels(Row.Length) = btnRetrieveRun
	
	'Add Cancel Run button
	Dim btnCancelRun As Button
	btnCancelRun.Initialize("btnCancelRun")
	btnCancelRun.Text = "Cancel"
	btnCancelRun.Tag = Row(0) 'Assuming the RunID is at index 0
	'Log("Retrieve Run Tag = " & btnCancelRun.Tag)
	labels(Row.Length + 1) = btnCancelRun

	'Add List Run Steps button
	Dim btnListRunSteps As Button
	btnListRunSteps.Initialize("btnListRunSteps")
	btnListRunSteps.Text = "Run Steps"
	btnListRunSteps.Tag = Row(0) 'Assuming the RunID is at index 0
	'Log("Retrieve Run Tag = " & btnListRunSteps.Tag)
	labels(Row.Length + 2) = btnListRunSteps
	
	LogColor("Sub CreateRunListRow finished", 0xFFFF7100)
	Return labels
End Sub

Sub btnCancelRun_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnCancelRun_MouseClicked started", 0xFF009901)
	Log("Cancelling Run...")
	Dim btn As Button = Sender
	Dim RunID As String = btn.Tag
	Log("RunID: " & RunID)
	 
	LogUserAction("Cancel Run button clicked. RunID = " & RunID)

	'Change button text to "Retrieved"
	btn.Text = "Cancelled"
	btn.Enabled = False 'Disable the Retrieved button
	'CSSUtils.SetBackgroundColor(btn,fx.Colors.From32Bit(0xFFFAFF00)) 'Optionally add some style.
	
	'Deactivate all other buttons
	For Each b As Button In activeButtons
		If b <> btn Then
			b.Text = "Cancelled"  'Change text back to "Retrieve"
			b.Enabled = True  'Enable it again
		End If
	Next

	'Clear the list and add the currently Retrieved button
	activeButtons.Clear
	activeButtons.Add(btn)

	OpAI.CancelRun(CurrentThreadID, RunID)
	
	LogColor("Sub btnCancelRun_MouseClicked finished", 0xFFFF7100)
End Sub

'Retrieve Run
Sub btnRetrieveRun_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnRetrieveRun_MouseClicked started", 0xFF009901)
	Log("Retrieving Run...")
	Dim btn As Button = Sender
	Dim RunID As String = btn.Tag
	Log("RunID: " & RunID)
	 
	LogUserAction("Run Retrieve button clicked. RunID = " & RunID)

	'Change button text to "Retrieved"
	btn.Text = "Retrieved"
	btn.Enabled = False 'Disable the Retrieved button
	'CSSUtils.SetBackgroundColor(btn,fx.Colors.From32Bit(0xFFFAFF00)) 'Optionally add some style.
	
	'Deactivate all other buttons
	For Each b As Button In activeButtons
		If b <> btn Then
			b.Text = "Retrieved"  'Change text back to "Retrieve"
			b.Enabled = True  'Enable it again
		End If
	Next

	'Clear the list and add the currently Retrieved button
	activeButtons.Clear
	activeButtons.Add(btn)

	RetrieveRun
	
	LogColor("Sub btnRetrieveRun_MouseClicked finished", 0xFFFF7100)
End Sub

Sub RetrieveRun
	LogColor("Sub RetrieveRun started", 0xFF009901)
	
	Dim b As Button = Sender
	Dim RunID As String = b.Tag
	LogUserAction("Run Retrieved sub started. RunID = " & RunID)

	Log("RunID: " & RunID)
	Log("ThreadID: " & CurrentThreadID)
	
	ShowTable("Run Details") ' Call to show the Run Details table
	
	OpAI.RetrieveRun(CurrentThreadID, RunID)
	LogColor("Sub RetrieveRun finished", 0xFFFF7100)
End Sub

Private Sub ParseRetrievedRun(response As String)
	LogColor("Sub ParseRetrievedRun started", 0xFF009901)
	LogUserAction("Parse Retrieved Run sub started.")
	
	Dim ParseR As JSONParser
	ParseR.Initialize(response)
	Dim jRoot As Map = ParseR.NextObject
	
	'Add rows to table for each of these:
	
	Dim RunID As String = jRoot.Get("id")
	Dim row() As Object = CreateRunRow(Array As String("Run ID:", RunID))
	tableView.Items.Add(row)
	
	Dim assistant_id As String = jRoot.Get("assistant_id")
	Dim row() As Object = CreateRunRow(Array As String("Assistant ID:", assistant_id)) 
	tableView.Items.Add(row) '***Change this to the Assistant Name.
	
	Dim thread_id As String = jRoot.Get("thread_id")
	Dim row() As Object = CreateRunRow(Array As String("Thread ID:", thread_id))
	tableView.Items.Add(row)
	
	Dim status As String = jRoot.Get("status")
	Dim row() As Object = CreateRunRow(Array As String("Status:", status))
	tableView.Items.Add(row)
	
	Dim created_at As String = jRoot.Get("created_at")
	Dim started_at As String = jRoot.Get("started_at")
	Dim completed_at As String = jRoot.Get("completed_at")
	Dim expires_at As String = jRoot.Get("expires_at")
	Dim failed_at As String = jRoot.Get("failed_at")
	Dim cancelled_at As String = jRoot.Get("cancelled_at")
	
	If cancelled_at <> "null" Then
		'Convert Unix timestamp to a readable date format
		Dim dateCancelled As String = ConvertUnixTimestampToReadableDate(cancelled_at)
		Dim row() As Object = CreateRunRow(Array As String("Date Cancelled:", dateCancelled))
		tableView.Items.Add(row)
	End If
		
	If created_at <> "null" Then
		'Convert Unix timestamp to a readable date format
		Dim dateCreated As String = ConvertUnixTimestampToReadableDate(created_at)
		Dim row() As Object = CreateRunRow(Array As String("Date Created:", dateCreated))
		tableView.Items.Add(row)
	End If
		
	If expires_at <> "null" Then
		'Convert Unix timestamp to a readable date format
		Dim dateExpired As String = ConvertUnixTimestampToReadableDate(expires_at)
		Dim row() As Object = CreateRunRow(Array As String("Date Expired:", dateExpired))
		tableView.Items.Add(row)
	End If

	If completed_at <> "null" Then
		'Convert Unix timestamp to a readable date format
		Dim dateCompleted As String = ConvertUnixTimestampToReadableDate(completed_at)
		Dim row() As Object = CreateRunRow(Array As String("Date Completed:", dateCompleted))
		tableView.Items.Add(row)
	End If

	If started_at <> "null" Then
		'Convert Unix timestamp to a readable date format
		Dim dateStarted As String = ConvertUnixTimestampToReadableDate(started_at)
		Dim row() As Object = CreateRunRow(Array As String("Date Started:", dateStarted))
		tableView.Items.Add(row)
	End If

	If failed_at <> "null" Then
		'Convert Unix timestamp to a readable date format
		Dim dateFailed As String = ConvertUnixTimestampToReadableDate(failed_at)
		Dim row() As Object = CreateRunRow(Array As String("Date Failed:", dateFailed))
		tableView.Items.Add(row)
	End If
	
	Dim last_error As String = jRoot.Get("last_error")
	Dim row() As Object = CreateRunRow(Array As String("Last Error:", last_error))
	tableView.Items.Add(row)
	
	Dim incomplete_details As String = jRoot.Get("incomplete_details")
	Dim row() As Object = CreateRunRow(Array As String("Incomplete Details:", incomplete_details))
	tableView.Items.Add(row)
	
	Dim usage As Map = jRoot.Get("usage") 'Don't add row.
	
	Dim completion_tokens As String = usage.Get("completion_tokens")
	Dim row() As Object = CreateRunRow(Array As String("Completion Tokens:", completion_tokens))
	tableView.Items.Add(row)
	
	Dim prompt_tokens As String = usage.Get("prompt_tokens")
	Dim row() As Object = CreateRunRow(Array As String("Prompt Tokens:", prompt_tokens))
	tableView.Items.Add(row)
	
	Dim total_tokens As String = usage.Get("total_tokens")
	Dim row() As Object = CreateRunRow(Array As String("Total Tokens:", total_tokens))
	tableView.Items.Add(row)
	
	Dim max_completion_tokens As String = jRoot.Get("max_completion_tokens")
	Dim row() As Object = CreateRunRow(Array As String("Max Completion Tokens:", max_completion_tokens))
	tableView.Items.Add(row)
	
	Dim max_prompt_tokens As String = jRoot.Get("max_prompt_tokens")
	Dim row() As Object = CreateRunRow(Array As String("Max Prompt Tookens:", max_prompt_tokens))
	tableView.Items.Add(row)
	
	'Dim tools As List = jRoot.Get("tools") 'Don't add row.
	
	Dim instructions As String = jRoot.Get("instructions")
	Dim row() As Object = CreateRunRow(Array As String("Instructions:", instructions))
	tableView.Items.Add(row)
	
	Dim model As String = jRoot.Get("model")
	Dim row() As Object = CreateRunRow(Array As String("Model:", model))
	tableView.Items.Add(row)
	
	Dim temperature As Double = jRoot.Get("temperature")
	Dim row() As Object = CreateRunRow(Array As String("Temperature:", temperature))
	tableView.Items.Add(row)
	
	Dim tool_choice As String = jRoot.Get("tool_choice")
	Dim row() As Object = CreateRunRow(Array As String("Tool Choice:", tool_choice))
	tableView.Items.Add(row)
	
	Dim truncation_strategy As Map = jRoot.Get("truncation_strategy") 'Don't add row.
	
	Dim last_messages As String = truncation_strategy.Get("last_messages")
	Dim row() As Object = CreateRunRow(Array As String("Truncation Strategy Last Messages:", last_messages))
	tableView.Items.Add(row)
	
	Dim Type1 As String = truncation_strategy.Get("type")
	Dim row() As Object = CreateRunRow(Array As String("Type", Type1))
	tableView.Items.Add(row)
	
	Dim object1 As String = jRoot.Get("object")
	Dim row() As Object = CreateRunRow(Array As String("Object:", object1))
	tableView.Items.Add(row)

	'Don't add rows to table for these at this point.
	'Dim metadata As Map = jRoot.Get("metadata")
	'For Each coltools As Map In tools
		'Dim Type1 As String = coltools.Get("type")
	'Next
	'Dim top_p As Double = jRoot.Get("top_p")
	'Dim response_format As String = jRoot.Get("response_format")
	'Dim parallel_tool_calls As String = jRoot.Get("parallel_tool_calls")
	Dim object1 As String = jRoot.Get("object")
	
	lblTableStatus.Text = "Run Loaded"
	lblTableStatus.Style = "-fx-background-color: white;" 'Optional styling
	LogColor("Sub ParseRetrievedRun finished", 0xFFFF7100)
End Sub

Private Sub CreateRunRow(Row() As String) As Object()
	LogColor("Sub CreateRunRow started", 0xFF009901)
	LogUserAction("Create Run Row started.")
	Dim labels(Row.Length) As Object 'Add space for the buttons

	For i = 0 To Row.Length - 1
		Dim lbl As Label
		lbl.Initialize("")
		lbl.Text = Row(i)
		Dim CharactersPerLine As Double = Floor(tableView.GetColumnWidth(i) * .175)  '800 pixels fits 140 characters.  So 140 / 800 is .175 characters per pixel.
		Dim RowsOfTextRequired As Float = lbl.Text.Length / CharactersPerLine
		Dim IntRows As Double = Ceil(RowsOfTextRequired)
		lbl.WrapText = True
		lbl.PrefHeight = IntRows * 15
		labels(i) = lbl
	Next
	LogColor("Sub CreateRunRow finished", 0xFFFF7100)
	Return labels
End Sub

'List Run Steps
Private Sub btnListRunSteps_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnListRunSteps_MouseClicked started", 0xFF009901)
	'https://platform.openai.com/docs/api-reference/run-steps/listRunSteps

	Dim b As Button = Sender
	Dim RunID As String = b.Tag
    
	ShowTable("Run Steps") ' Call to show the Run List table

	LogUserAction("List Run Steps sub started. RunID = " & RunID & "CurrentThreadID = " & CurrentThreadID)
	
	ShowTable("Run Details") ' Call to show the Run Details table
	
	'Define additional parameters for the ListRuns call
	Dim limit As String = "100"  'Set the optional limit parameter
	Dim after As String = ""  'Optional after parameter, can be retrieved from input
	Dim before As String = ""  'Optional before parameter, can be retrieved from input
	Dim order As String = ""  'Optional order parameter, can be retrieved from input
	
	If chkFileSearch.Checked = True Then
		Dim include As String = "step_details.tool_calls[*].file_search.results[*].content"
	Else
		Dim include As String = Null
	End If
	
	'Call to parse and display the run list with modified parameters
	OpAI.ListRunSteps(CurrentThreadID, RunID, limit, after, before, order, include)
    
	LogColor("Sub btnListRunSteps_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub ParseRunSteps(response As String)
	LogColor("Sub ParseRunSteps started", 0xFF009901)
	Dim parser As JSONParser
	parser.Initialize(response)
	Dim jRoot As Map = parser.NextObject
	Dim first_id As String = jRoot.Get("first_id")
	
	Dim data As List = jRoot.Get("data")
	For Each coldata As Map In data
		Dim cancelled_at As String = coldata.Get("cancelled_at")
		Dim run_id As String = coldata.Get("run_id")
		Dim assistant_id As String = coldata.Get("assistant_id")
		Dim usage As Map = coldata.Get("usage")
			Dim completion_tokens As String = usage.Get("completion_tokens")
			Dim prompt_tokens As String = usage.Get("prompt_tokens")
			Dim total_tokens As String = usage.Get("total_tokens")
		Dim created_at As String = coldata.Get("created_at")
		Dim expired_at As String = coldata.Get("expired_at")
		
		Dim message_type As String = coldata.Get("type")
		Dim step_details As Map = coldata.Get("step_details")
			Dim message_creation As Map = step_details.Get("message_creation")
			Dim message_id As String = message_creation.Get("message_id")
			Dim step_Type As String = step_details.Get("type")
		Dim completed_at As String = coldata.Get("completed_at")
		Dim thread_id As String = coldata.Get("thread_id")
		Dim step_id As String = coldata.Get("id")
		Dim failed_at As String = coldata.Get("failed_at")
		Dim last_error As String = coldata.Get("last_error")
		Dim object1 As String = coldata.Get("object")
		Dim status As String = coldata.Get("status")
		
		If cancelled_at <> "null" Then
			'Convert Unix timestamp to a readable date format
			Dim dateCancelled As String = ConvertUnixTimestampToReadableDate(cancelled_at)
		End If
		
		If created_at <> "null" Then
			'Convert Unix timestamp to a readable date format
			Dim dateCreated As String = ConvertUnixTimestampToReadableDate(created_at)
		End If
		
		If expired_at <> "null" Then
			'Convert Unix timestamp to a readable date format
			Dim dateExpired As String = ConvertUnixTimestampToReadableDate(expired_at)
		End If

		If completed_at <> "null" Then
			'Convert Unix timestamp to a readable date format
			Dim dateCompleted As String = ConvertUnixTimestampToReadableDate(completed_at)
		End If

		If failed_at <> "null" Then
			'Convert Unix timestamp to a readable date format
			Dim dateFailed As String = ConvertUnixTimestampToReadableDate(failed_at)
		End If

		'Add the row to the TableView
		Dim row() As Object = CreateRunListRow(Array As String(run_id, assistant_id, thread_id, step_id, status, message_type, message_id, step_Type, object1, dateCreated, dateCompleted, dateExpired, dateFailed, dateCancelled, last_error, prompt_tokens, completion_tokens, total_tokens))
		tableView.Items.Add(row)
	Next
	Dim last_id As String = jRoot.Get("last_id")
	Dim has_more As String = jRoot.Get("has_more")
	Dim object2 As String = jRoot.Get("object")
	
	If has_more = "true" Then
		xui.MsgboxAsync("There is more to see of Run Steps List","Has_more")
	End If

	lblTableStatus.Text  = "Run Steps List Complete."
	lblTableStatus.Style = "-fx-background-color: white;" 'Optional styling
	LogColor("Sub ParseRunSteps finished", 0xFFFF7100)
End Sub

'THREADS
Private Sub btnCreateThread_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnCreateThread_MouseClicked started", 0xFF009901)
	LogUserAction("Create Thread button clicked.")
	
	'Prompts user with yellow backgroudn on txtThreadName if user did not enter a thread name.
	If txtThreadName.Text = "" Then
		xui.MsgboxAsync("Enter Thread Name","Thread name cannot be blank")
		txtThreadName.Style = "-fx-background-color: yellow;" 'Optional styling
	Else
		CurrentThreadName = txtThreadName.Text
		OpAI.CreateThread
	End If
	
	If CurrentAssistantName = "" Then
		xui.MsgboxAsync("Select or create an Assistant before creating a thread.","Assistant Required to create Thread.")
		txtAssistantName.Style = "-fx-background-color: yellow;" 'Optional styling
	End If
	LogColor("Sub btnCreateThread_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub txtThreadName_MouseClicked(EventData As MouseEvent) 
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub txtThreadName_MouseClicked started", 0xFF009901)
	LogUserAction("Thread Name text box clicked.")
	txtThreadName.Text = ""
	txtThreadName.Style = "-fx-background-color: white;" 'Optional styling
	LogColor("Sub txtThreadName_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub AddThreadToSpreadsheet(CreatedAt As String, Metadata As String)
	LogColor("Sub AddThreadToSpreadsheet started", 0xFF009901)
	LogUserAction("Add Thread to Spreadsheet started.")
	'The reason for creating a spreadsheet listing the threads as they are created is because OpenAI does not
	'give the option of listing the Threads.  So we have to keep track of threads ourselves.
	
	Dim ThreadName As String = txtThreadName.Text
	
	Private XL As XLUtils
	XL.Initialize
	
	'***Add code to create the spreadsheet if it doesn't exist.
	
	'Define folder and filename
	'*** Figure out what folder I can specify that the code can always access on B4A and B4J that I can store the spreadsheet in without asking the user to select where.
	'Otherwise during setup, ask the user where to put working files.  This will also have to hold all the files that are uploaded by the user later.  It will be large.
	Dim Folder As String = DefaultFolder 
	Dim FileName As String = "ThreadList.xlsx" 'Spreadsheet filename

	'Create workbook and worksheet
	Dim workbook As XLWorkbookWriter = XL.CreateWriterFromTemplate(Folder, FileName)
	Dim sheet1 As XLSheetWriter = workbook.CreateSheetWriterByName("Threads")

	'Find the next empty row
	Dim RowNum As Int
	RowNum = workbook.PoiWorkbook.GetSheetByName("Threads").LastRowNumber + 2
	Log("RowNum = " & RowNum)

	'Dim Row As PoiRow = workbook.PoiWorkbook.GetSheetByName("Threads").GetRow(RowNum)

	'Write thread details into the new row
	'***Change the column order to make the Friendly Thread Name be in the first column in order to be consistent with the other tables that the user sees.
	sheet1.PutString(XL.AddressOne("A", RowNum), ThreadName) 'Column A for Thread Name
	sheet1.PutString(XL.AddressOne("B", RowNum), CurrentThreadID) 'Column B for ID
	sheet1.PutString(XL.AddressOne("C", RowNum), CreatedAt) 'Column C for Created_At
	sheet1.PutString(XL.AddressOne("D", RowNum), Metadata) 'Column D for Metadata
	
	'Save the workbook
	'Dim f As String = 
	workbook.SaveAs(Folder, FileName, True)
	'Wait For (XL.OpenExcel(f)) Complete (Success As Boolean)
	LogColor("Sub AddThreadToSpreadsheet finished", 0xFFFF7100)
End Sub

'THREAD LIST
Private Sub lblViewThreads_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub lblViewThreads_MouseClicked started", 0xFF009901)
	LogUserAction("Show Threads link clicked.")
	fx.ShowExternalDocument("https://platform.openai.com/threads/" & CurrentThreadID)
	LogColor("Sub lblViewThreads_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnListThreads_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnListThreads_MouseClicked started", 0xFF009901)
	LogUserAction("List Threads button clicked.")
	'Listing threads is not allowed via the API at this time.
	'OpAI.ListThreads

	'Read the thread list from the spreadsheet.
	'Put the list of threads in a table.
	'Add buttons to the table to Retrieve, Modify and Delete a thread.
	'FillTableFromSpreadsheet
	ShowThreadList
	LogColor("Sub btnListThreads_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub ShowThreadList
	LogColor("Sub ShowThreadList started", 0xFF009901)
	LogUserAction("Show Thread List started.")
	
	ShowTable("Thread List") ' Call to show the Thread List table
	
	'Call to load and display thread list from the spreadsheet
	LoadThreadListFromSpreadsheet
	LogColor("Sub ShowThreadList finished", 0xFFFF7100)
End Sub

Sub LoadThreadListFromSpreadsheet()
	LogColor("Sub LoadThreadListFromSpreadsheet started", 0xFF009901)
	Dim XL As XLUtils
	XL.Initialize

	'Define folder and filename
	Dim Folder As String = DefaultFolder 
	Dim FileName As String = "ThreadList.xlsx" 'Spreadsheet filename

	'Create workbook and get the sheet
	Dim workbook As XLWorkbookWriter = XL.CreateWriterFromTemplate(Folder, FileName)
	Dim sheet As PoiSheet = workbook.PoiWorkbook.GetSheetByName("Threads")

	Dim RowNum As Int
	Dim NumberOfRows As Int = sheet.LastRowNumber + 1 'Get the number of rows
	'Log("NumberOfRows = " & NumberOfRows)

	'Loop through rows and get cell values
	For RowNum = 1 To NumberOfRows - 1 'Assuming header is in the first row
		Dim Row As PoiRow = sheet.GetRow(RowNum)
        
		'Read values from the cells
		If Row.GetCell(0).IsInitialized Then
		Dim ThreadName As String = Row.GetCell(0).ValueString
		Dim ThreadID As String = Row.GetCell(1).ValueString
		Dim CreatedAt As String = Row.GetCell(2).ValueString
		
		Dim Metadata As String = Row.GetCell(3).ValueString
		
		'Add the row to the TableView
		Dim Row1() As Object = CreateThreadListRow(Array As String(ThreadName, ThreadID, CreatedAt, Metadata))
		tableView.Items.Add(Row1)
		Else
			xui.MsgboxAsync("There are not threads to list.  Create one first.","PEBKAC Error")
			Exit
		End If
	Next

	lblTableStatus.Text = "Thread List Completed."
	lblTableStatus.Style = "-fx-background-color: white;" 'Optional styling

	LogUserAction("Thread list table completed.")
	LogColor("Sub LoadThreadListFromSpreadsheet finished", 0xFFFF7100)
End Sub

Private Sub CreateThreadListRow(Row() As String) As Object()
	LogColor("Sub CreateThreadListRow started", 0xFF009901)
	LogUserAction("Create Thread List Row started.")
	Dim labels(Row.Length + 4) As Object

	For i = 0 To Row.Length - 1
		Dim lbl As Label
		lbl.Initialize("")
		lbl.Text = Row(i)
		Dim CharactersPerLine As Double = Floor(tableView.GetColumnWidth(i) * .175)  '800 pixels fits 140 characters.  So 140 / 800 is .175 characters per pixel.
		Dim RowsOfTextRequired As Float = lbl.Text.Length / CharactersPerLine
		Dim IntRows As Double = Ceil(RowsOfTextRequired)
		lbl.WrapText = True
		lbl.PrefHeight = IntRows * 15
		labels(i) = lbl
	Next

	'Add Activate button
	Dim btnActivateThread As Button
	btnActivateThread.Initialize("btnActivateThread")
	btnActivateThread.Text = "Activate"
	btnActivateThread.Tag = Row(1) & "~~" & Row(0) 'Assuming the ThreadID is at index 1 and ThreadName is a index 0.
	'Log("Activate Thread Tag = " & btnRetrieveFile.Tag)
	labels(Row.Length) = btnActivateThread

	'Add Edit button
	Dim btnEditThread As Button
	btnEditThread.Initialize("btnEditThread")
	btnEditThread.Text = "Edit"
	btnActivateThread.Tag = Row(1) & "~~" & Row(0) 'Assuming the ThreadID is at index 1 and ThreadName is a index 0.
	'Log("Edit Thread Tag = " & btnEditAssistant.Tag)
	labels(Row.Length + 1) = btnEditThread

	'Add Delete button
	Dim btnDeleteThread As Button
	btnDeleteThread.Initialize("btnDeleteThread")
	btnDeleteThread.Text = "Delete"
	'Log("Row(0) = " & Row(0))
	'Log("Row(3) = " & Row(3))
	btnDeleteThread.Tag = Row(1) & "~~" & Row(0) 'Assuming the ThreadID is at index 1 and ThreadName is a index 0.
	'Log("Delete Thread Button Tag = " & btnDeleteThread.Tag)
	labels(Row.Length + 2) = btnDeleteThread
	LogColor("Sub CreateThreadListRow finished", 0xFFFF7100)
	Return labels
End Sub

Private Sub btnActivateThread_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnActivateThread_MouseClicked started", 0xFF009901)
	
	Dim btnActivateThread As Button = Sender
	Dim tag As String = btnActivateThread.Tag
	Dim parts() As String = Regex.Split("~~", tag)
	CurrentThreadID = parts(0)
	CurrentThreadName = parts(1)
	Log("ThreadID: " & CurrentThreadID)
	Log("ThreadName: " & CurrentThreadName)
	txtThreadName.Text = CurrentThreadName
	lblThreadID.Text = CurrentThreadID
	
	LogUserAction("Thread Activated ID = " & CurrentThreadID)

	'Change button text to "Activated"
	btnActivateThread.Text = "Activated"
	btnActivateThread.Enabled = False 'Disable the activated button
	'CSSUtils.SetBackgroundColor(btnActivateThread,fx.Colors.From32Bit(0xFFFAFF00)) 'Optionally add some style.
	
	'Deactivate all other buttons
	For Each b As Button In activeButtons
		If b <> btnActivateThread Then
			b.Text = "Activate"  'Change text back to "Activate"
			b.Enabled = True  'Enable it again
		End If
	Next

	'Clear the list and add the currently activated button
	activeButtons.Clear
	activeButtons.Add(btnActivateThread)
	
	LogColor("Sub btnActivateThread_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnEditThread_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnEditThread_MouseClicked started", 0xFF009901)
		'***Editing a thread currently only allows the editing of the metadata for the thread.  Not useful at the moment.
	Dim btnEditThread As Button = Sender
	Dim tag As String = btnEditThread.Tag
	Dim parts() As String = Regex.Split("~~", tag)
	Dim ThreadID As String = parts(0)
	Dim ThreadName As String  = parts(1)
	LogUserAction("Edit Thread button clicked.  Thread Name = " & ThreadName & " ThreadID = " & ThreadID)
	'*** Write code for this.
	LogColor("Sub btnEditThread_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnDeleteThread_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnDeleteThread_MouseClicked started", 0xFF009901)
	Dim btnDeleteThread As Button = Sender
	Dim tag As String = btnDeleteThread.Tag
	Log("Delete Thread Button Tag2 = " & btnDeleteThread.Tag)
	Dim parts() As String = Regex.Split("~~", tag)
	'LogColor("parts(0) = " & parts(0),0xFFFF0000)
	'LogColor("parts(1) = " & parts(1),0xFFFF0000)
	Dim ThreadID As String = parts(0)
	Dim ThreadName As String = parts(1)
	LogUserAction("Delete Thread button clicked.  Thread Name = " & ThreadName & " ThreadID = " & ThreadID)
	'LogColor("ThreadID: " & ThreadID,0xFFFF0000)
	'LogColor("ThreadName: " & ThreadName,0xFFFF0000)

	'First, delete the thread using the OpenAI API
	OpAI.DeleteThread(ThreadID) 'This assumes you have a method to delete a thread in your OpAI class
	LogColor("Sub btnDeleteThread_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub DeleteThreadFromSpreadsheet
	LogColor("Sub DeleteThreadFromSpreadsheet started", 0xFF009901)
	LogUserAction("Delete Thread button clicked.  ThreadID = " & CurrentThreadID)
	Dim XL As XLUtils
	XL.Initialize

	'Define folder and filename
	Dim Folder As String = DefaultFolder 
	Dim FileName As String = "ThreadList.xlsx" 'Spreadsheet filename

	'Create workbook and get the sheet
	Dim workbook As XLWorkbookWriter = XL.CreateWriterFromTemplate(Folder, FileName)
	Dim sheet As PoiSheet = workbook.PoiWorkbook.GetSheetByName("Threads")

	'Find the row with the ThreadID and delete it
	Dim RowNum As Int
	Dim NumberOfRows As Int = sheet.LastRowNumber + 1
	LogColor("NumberOfRows = " & NumberOfRows,0xFFFF0000)
	
	For RowNum = 1 To NumberOfRows - 1 'Assuming header is in the first row, we start at row 1.  Row 0 contains the header.
		'Note: NumberOfRows is not zero based like RowNum is.  That is why the -1.
		Dim Row As PoiRow = sheet.GetRow(RowNum)
		Dim RowThreadID As String = Row.GetCell(1).ValueString 'Assuming Thread ID is in the first column
		LogColor("currentThreadId = " & CurrentThreadID,0xFFFF0000)
		
		If RowThreadID = CurrentThreadID Then
			'Shift rows up to remove the entry
			Dim jo As JavaObject = sheet
			Dim lastRowNum As Int = sheet.LastRowNumber
			LogColor("Rownum = " & RowNum,0xFFFF0000)
			LogColor("lastRowNum = " & lastRowNum,0xFFFF0000)

			'Shift rows upwards to fill in the deleted row
			Dim nextRow As PoiRow = sheet.GetRow(RowNum + 1)
			If nextRow <> Null Then
				Log("nextRow is not blank")
				Dim fromrow As Int = RowNum + 1
				Log("FromRow = " & fromrow)
				If fromrow > lastRowNum Then
					jo.RunMethod("removeRow", Array(jo.RunMethod("getRow", Array(lastRowNum))))
					'jo.RunMethod("removeRow", Array(lastRowNum))
				Else
					Dim torow As Int = lastRowNum
					LogColor("torow = " & torow,0xFFFF0000)
					Dim noofrows As Int = -1
					LogColor("noofrows = " & noofrows,0xFFFF0000)
					Log("")
					
					jo.RunMethod("shiftRows", Array(fromrow,torow,noofrows))
					
				End If
			End If

			'Log("Thread with ID " & CurrentThreadID & " deleted from spreadsheet.")
			Exit
		End If
	Next

	CurrentThreadID = ""
	CurrentThreadName = ""

	'Save the updated workbook after deletion
	'Dim f As String = 
	workbook.SaveAs(Folder, FileName, True)
	'Wait For (XL.OpenExcel(f)) Complete (Success As Boolean)
	ShowThreadList
	
	Log("Thread with ID " & CurrentThreadID & " deleted from spreadsheet.")
	LogColor("Sub DeleteThreadFromSpreadsheet finished", 0xFFFF7100)
End Sub

Sub ConvertUnixTimestampToReadableDate(unixTimestamp As Long) As String
	'LogColor("Sub ConvertUnixTimestampToReadableDate started", 0xFF009901)
	LogUserAction("Convert Time Stamp to human readable started.")
	'Convert Unix timestamp (seconds) to milliseconds
	Dim millis As Long = unixTimestamp * 1000
	'Use DateTime object to format the milliseconds into a readable date and time
	
	DateTime.DateFormat = "yyyy-MM-dd"
	DateTime.Timeformat ="hh:mm:ss a"
	Dim formattedDate As String = DateTime.Date(millis) & " " & DateTime.Time(millis)
	'LogColor("Sub ConvertUnixTimestampToReadableDate finished", 0xFFFF7100)
	Return formattedDate
End Sub

'Messages From Thread List
Private Sub btnListMessagesInThread_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnListMessagesInThread_MouseClicked started", 0xFF009901)
	LogUserAction("Get Messages From Thread button clicked.")
	ShowMessagesFromThreadList
	LogColor("Sub btnListMessagesInThread_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub ShowMessagesFromThreadList
	LogColor("Sub ShowMessagesFromThreadList started", 0xFF009901)
	LogUserAction("Show Messages From Thread List started.")

	ShowTable("Messages From Thread List") ' Call to show the Messages From Thread List table
		
	'Default parameters
	Dim thread_id As String = CurrentThreadID 'Set this to your actual thread ID
	Dim limit As String = "100" 'Optional limit parameter
	Dim order As String = "desc" 'Optional ordering parameter
	Dim after As String = "" 'Optional after cursor
	Dim before As String = "" 'Optional before cursor
	Dim run_id As String = "" 'Optional run id parameter
	
	If CurrentThreadID <> "" Then
		'Call the list messages with parameters
		OpAI.GetMessagesFromThread(thread_id, limit, order, after, before, run_id)
	Else
		xui.MsgboxAsync("Select Active Thread by Clicking on List Threads / Select Thread.  The select Activate button on the thread list.","Select Active Thread")
		OpenAIMainPage
	End If
	LogColor("Sub ShowMessagesFromThreadList finished", 0xFFFF7100)
End Sub

Private Sub ParseMessageList(response As String)
	LogColor("Sub ParseMessageList started", 0xFF009901)

	Dim Parser As JSONParser
	Parser.Initialize(response)
	Dim jRoot As Map = Parser.NextObject
	'Dim first_id As String = jRoot.Get("first_id")
	Dim data As List = jRoot.Get("data")
	For Each coldata As Map In data

		Dim ThreadID As String = coldata.Get("thread_id")
		'Dim metadata As Map = coldata.Get("metadata")
		Dim AssistantID As String = coldata.Get("assistant_id")
		'Dim run_id As String = coldata.Get("run_id")
		Dim role As String = coldata.Get("role")
		'Dim attachments As List = coldata.Get("attachments")
		Dim created_at As Int = coldata.Get("created_at")
		
		'Convert Unix timestamp to a readable date format
		Dim dateCreated As String = ConvertUnixTimestampToReadableDate(created_at)
		
		Dim Messageid As String = coldata.Get("id")
		Dim content As List = coldata.Get("content")
		For Each colcontent As Map In content
			Dim text As Map = colcontent.Get("text")
			'Dim annotations As List = text.Get("annotations")
			Dim value As String = text.Get("value")
			'Log("Value = " & value)
			Dim Type1 As String = colcontent.Get("type")
	
			'Add the row to the TableView

			'Dim row() As Object = CreateMessageListRow(Array As String("Role", "Text", "Created", "Message ID", "Thread ID", "Assistant ID","Type","Retrieve","Delete"))
			Dim row() As Object = CreateMessageListRow(Array As String(role, value, dateCreated, Messageid, ThreadID, AssistantID, Type1))

			tableView.Items.Add(row)

		Next
		'Dim object1 As String = coldata.Get("object")
	Next
	'Dim last_id As String = jRoot.Get("last_id")
	Dim has_more As String = jRoot.Get("has_more")
	If has_more = "true" Then
		xui.MsgboxAsync("There is more to see of Message List","Has_more")
	End If

	'Dim object2 As String = jRoot.Get("object")
	
	lblTableStatus.Text = "Message List Completed."
	lblTableStatus.Style = "-fx-background-color: white;" 'Optional styling
	
	LogUserAction("Messages From Thread table completed.")
	LogColor("Sub ParseMessageList finished", 0xFFFF7100)
End Sub

Private Sub CreateMessageListRow(Row() As String) As Object()
	LogColor("Sub CreateMessageListRow started", 0xFF009901)
	LogUserAction("Create Message List Row started.")

	Dim labels(Row.Length + 2) As Object 'Add space for the buttons

	For i = 0 To Row.Length - 1
		Dim lbl As Label
		lbl.Initialize("")
		lbl.Text = Row(i)
		Dim CharactersPerLine As Double = Floor(tableView.GetColumnWidth(i) * .175)  '800 pixels fits 140 characters.  So 140 / 800 is .175 characters per pixel.
		Dim RowsOfTextRequired As Float = lbl.Text.Length / CharactersPerLine
		Dim IntRows As Double = Ceil(RowsOfTextRequired)
		lbl.WrapText = True
		lbl.PrefHeight = IntRows * 15
		labels(i) = lbl
	Next
	
	'Add Retrieve Message Button
	Dim btnRetrieveMessage As Button
	btnRetrieveMessage.Initialize("btnRetrieveMessage")
	btnRetrieveMessage.Text = "View Message"
	btnRetrieveMessage.Tag = Row(3)'& "~~" & Row(4) 'Assuming the Message ID is at index 3 and Thread ID is at index 4.
	Log("Retrieve Tag = " & btnRetrieveMessage.Tag)
	labels(Row.Length) = btnRetrieveMessage 'Add button to labels array
	
	'Add Delete Message button
	Dim btnDeleteMessage As Button
	btnDeleteMessage.Initialize("btnDeleteFile")
	btnDeleteMessage.Text = "Delete"
	btnDeleteMessage.Tag = Row(3)'& "~~" & Row(4) 'Assuming the Message ID is at index 3 and Thread ID is at index 4.
	'Log("Delete Tag = " & btnDeleteMessage.Tag)
	labels(Row.Length + 1) = btnDeleteMessage 'Add delete button to labels array
	LogColor("Sub CreateMessageListRow finished", 0xFFFF7100)
	Return labels
End Sub

Sub btnDeleteMessage_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnDeleteMessage_MouseClicked started", 0xFF009901)
	LogUserAction("Delete Message button clicked.")
	Log("Here at DeleteFile Click in main code")
	Dim btnDeleteFile As Button = Sender
	Dim MessageID As String = btnDeleteFile.Tag
	Log("MessageID: " & MessageID)
	Log("ThreadID: " & CurrentThreadID)
	OpAI.DeleteMessageFromThread(CurrentThreadID, MessageID)
	LogColor("Sub btnDeleteMessage_MouseClicked finished", 0xFFFF7100)
End Sub

'Message
Private Sub btnRetrieveMessage_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnRetrieveMessage_MouseClicked started", 0xFF009901)
	LogUserAction("Retrieve Message button clicked.")
	Dim btnRetrieveMessage As Button = Sender
	Dim MessageID As String = btnRetrieveMessage.Tag
	Log("MessageID: " & MessageID)
	Log("ThreadID: " & CurrentThreadID)
	
	ShowTable("Message") ' Call to show the Message table
	
	OpAI.RetrieveMessageFromThread(CurrentThreadID, MessageID)
	LogColor("Sub btnRetrieveMessage_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub ParseMessage(response As String)	
	LogColor("Sub ParseMessage started", 0xFF009901)
	LogUserAction("Parse Message started.")
	'Log("Response in Sub ParseMessage = " & response)
	
	Dim Parser As JSONParser
	Parser.Initialize(response)
	Dim jRoot As Map = Parser.NextObject
	
	Dim thread_id As String = jRoot.Get("thread_id")
	'Dim metadata As Map = jRoot.Get("metadata")
	Dim assistant_id As String = jRoot.Get("assistant_id")
	Dim run_id As String = jRoot.Get("run_id")
	Dim role As String = jRoot.Get("role")
	'Dim attachments As List = jRoot.Get("attachments")
	Dim created_at As Int = jRoot.Get("created_at")
	Dim id As String = jRoot.Get("id")
	Dim content As List = jRoot.Get("content")

	Log("Assistant ID:"& assistant_id)
	Dim row() As Object = CreateMessageRow(Array As String("Assistant ID:", assistant_id))
	tableView.Items.Add(row)

	Log("Thread ID:" & thread_id)
	Dim row() As Object = CreateMessageRow(Array As String("Thread ID:", thread_id))
	tableView.Items.Add(row)
	
	Log("Run ID:" & run_id)
	Dim row() As Object = CreateMessageRow(Array As String("Run ID:", run_id))
	tableView.Items.Add(row)
	
	Log("Role:" & role)
	Dim row() As Object = CreateMessageRow(Array As String("Role:", role))
	tableView.Items.Add(row)
	
	'Convert Unix timestamp to a readable date format
	Dim dateCreated As String = ConvertUnixTimestampToReadableDate(created_at)
	
	Log("Created At:" & created_at)
	Dim row() As Object = CreateMessageRow(Array As String("Created At:", dateCreated))
	tableView.Items.Add(row)
	
	Log("Message ID:" & id)
	Dim row() As Object = CreateMessageRow(Array As String("Message ID:", id))
	tableView.Items.Add(row)
		
	For Each colcontent As Map In content
		Dim text As Map = colcontent.Get("text")
		'Dim annotations As List = text.Get("annotations")
		Dim value As String = text.Get("value")
		'Dim Type As String = colcontent.Get("type")
		
		Log("Text:" & value)
		Dim row() As Object = CreateMessageRow(Array As String("Text:", value))
		tableView.Items.Add(row)
	Next
	'Dim object1 As String = jRoot.Get("object")
	
	lblTableStatus.Text = "Message Complete."
	lblTableStatus.Style = "-fx-background-color: white;" 'Optional styling
	
	LogColor("Sub ParseMessage finished", 0xFFFF7100)
End Sub

Private Sub CreateMessageRow(Row() As String) As Object()
	LogColor("Sub CreateMessageRow started", 0xFF009901)
	LogUserAction("Create Message Row started.")
	Dim labels(Row.Length) As Object 'Add space for the buttons

	For i = 0 To Row.Length - 1
		Dim lbl As Label
		lbl.Initialize("")
		lbl.Text = Row(i)
		Dim CharactersPerLine As Double = Floor(tableView.GetColumnWidth(i) * .175)  '800 pixels fits 140 characters.  So 140 / 800 is .175 characters per pixel.
		Dim RowsOfTextRequired As Float = lbl.Text.Length / CharactersPerLine
		Dim IntRows As Double = Ceil(RowsOfTextRequired)
		lbl.WrapText = True
		lbl.PrefHeight = IntRows * 15
		labels(i) = lbl
	Next
	LogColor("Sub CreateMessageRow finished", 0xFFFF7100)
	Return labels
End Sub

'web links
Private Sub btnLimits_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnLimits_MouseClicked started", 0xFF009901)
	LogUserAction("Limits link clicked.")
	fx.ShowExternalDocument(LimitsWebPage)
	LogColor("Sub btnLimits_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnUsage_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnUsage_MouseClicked started", 0xFF009901)
	LogUserAction("Usage link clicked.")
	fx.ShowExternalDocument(UsageWebPage)
	LogColor("Sub btnUsage_MouseClicked finished", 0xFFFF7100)
End Sub

'Vector stores
Private Sub btnCreateVectorStore_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnCreateVectorStore_MouseClicked started", 0xFF009901)
	LogUserAction("Create Vector Store button clicked.")
	
	If txtVectorStoreName.text <> "" Then
		OpAI.CreateVectorStore(txtVectorStoreName.Text)
	Else
		CSSUtils.SetBackgroundColor(txtVectorStoreName,fx.Colors.From32Bit(0xFFFAFF00)) 'Optionally add some style.
	End If
	
	LogColor("Sub btnCreateVectorStore_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub ParseVectorStoreCreated(response As String)
	LogColor("Sub ParseVectorStoreCreated started", 0xFF009901)
	LogUserAction("Parse Vector Store Created started.")
	Dim Parser As JSONParser
	Parser.Initialize(response)
	Dim jRoot As Map = Parser.NextObject
	Dim file_counts As Map = jRoot.Get("file_counts")
	Dim in_progress As String = file_counts.Get("in_progress")
	Dim total As String = file_counts.Get("total")
	Dim cancelled As String = file_counts.Get("cancelled")
	Dim completed As String = file_counts.Get("completed")
	Dim failed As String = file_counts.Get("failed")
	Dim bytes As String = jRoot.Get("bytes")
	Dim name As String = jRoot.Get("name")
	Dim created_at As String = jRoot.Get("created_at")
	Dim id As String = jRoot.Get("id")
	Dim object1 As String = jRoot.Get("object")
	lblVectorStoreID.Text = id
	lblVectorStoreName.Text = name
	lblUploadSuccess.Text = "Vector store created"
	LogColor("Sub ParseVectorStoreCreated finished", 0xFFFF7100)
End Sub

Private Sub txtVectorStoreName_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub txtVectorStoreName_MouseClicked started", 0xFF009901)
	LogUserAction("Vector Store Name text field clicked.")
	txtVectorStoreName.Text = ""
	LogColor("Sub txtVectorStoreName_MouseClicked finished", 0xFFFF7100)
End Sub

'LIST VECTOR STORES
Private Sub btnListVectorStores_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnListVectorStores_MouseClicked started", 0xFF009901)
	ListVectorStores
	LogColor("Sub btnListVectorStores_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub ListVectorStores
	LogColor("Sub ListVectorStores started", 0xFF009901)
	LogUserAction("Opened OpenAI Vector Store List shown.")
	
	ShowTable("Vector Store List") ' Call to show the Vector Store List table

	'Call to parse and display vector store list with parameters
	Dim limit As String = "100" 'Optional limit parameter
	Dim order As String = "desc" 'Optional order parameter
	Dim after As String = "" 'Optional after parameter
	Dim before As String = "" 'Optional before parameter
	Dim filter As String = "" 'Optional filter parameter
	
	If txtAssistantName.Text = "" Then
		lblSecondTableLabel.Text = "Select or Create Assistant before Adding a Vector Store to Assistant"
		lblSecondTableLabel.Style = "-fx-background-color: yellow;" 'Optional styling
	Else
		lblSecondTableLabel.Text = "Current Assistant: " & txtAssistantName.Text
		lblSecondTableLabel.Style = "-fx-background-color: white;" 'Optional styling
	End If

	'Call to parse and display vector store list
	OpAI.ListVectorStores(limit, order, after, before, filter)	
	LogColor("Sub ListVectorStores finished", 0xFFFF7100)
End Sub

Private Sub ParseVectorStoreList(response As String)
	LogColor("Sub ParseVectorStoreList started", 0xFF009901)
	LogUserAction("Parse Vector Store List started.")
	Dim Parser As JSONParser
	Parser.Initialize(response)
	Dim jRoot As Map = Parser.NextObject
	Dim first_id As String = jRoot.Get("first_id")
	Dim data As List = jRoot.Get("data")
	For Each coldata As Map In data
		Dim file_counts As Map = coldata.Get("file_counts")
		Dim FileCountString As String = ""
		
		For Each k As String In file_counts.Keys
			Dim FileCount As String = k & ": " & file_counts.Get(k) & CRLF
			FileCountString = FileCountString & " " & FileCount
		Next

		Dim in_progress As String = file_counts.Get("in_progress")
		Dim total As String = file_counts.Get("total")
		Dim cancelled As String = file_counts.Get("cancelled")
		Dim completed As String = file_counts.Get("completed")
		Dim failed As String = file_counts.Get("failed")
		Dim bytes As String = coldata.Get("bytes")
		Dim VectorStoreName As String = coldata.Get("name")
		Dim created_at As String = coldata.Get("created_at")
		Dim vectorStoreId As String = coldata.Get("id")
		Dim VectorStoreObject As String = coldata.Get("object")
		
		'Convert Unix timestamp to a readable date format
		Dim dateCreated As String = ConvertUnixTimestampToReadableDate(created_at)

		'Add the row to the TableView
		Dim row() As Object = CreateVectorStoreListRow(Array As String(VectorStoreName, FileCountString, in_progress, total, cancelled, completed, failed, dateCreated, bytes, vectorStoreId))
		tableView.Items.Add(row)
		
	Next
	Dim last_id As String = jRoot.Get("last_id")
	Dim has_more As String = jRoot.Get("has_more")
	If has_more = "true" Then
		xui.MsgboxAsync("There is more to see of Vector Store List","Has_more")
	End If
	
	lblTableStatus.Text = "Vector Store List Completed."
	lblTableStatus.Style = "-fx-background-color: white;" 'Optional styling
	
	Dim VectorStoreListObject As String = jRoot.Get("object")
	LogColor("Sub ParseVectorStoreList finished", 0xFFFF7100)
End Sub

Private Sub CreateVectorStoreListRow(Row() As String) As Object()
	LogColor("Sub CreateVectorStoreListRow started", 0xFF009901)
	LogUserAction("Create Vector Store List Row started.")
	Dim labels(Row.Length + 4) As Object 'Add space for the buttons
	For i = 0 To Row.Length - 1
		Dim lbl As Label
		lbl.Initialize("")
		lbl.Text = Row(i)
		Dim CharactersPerLine As Double = Floor(tableView.GetColumnWidth(i) * .175)  '800 pixels fits 140 characters.  So 140 / 800 is .175 characters per pixel.
		Dim RowsOfTextRequired As Float = lbl.Text.Length / CharactersPerLine
		Dim IntRows As Double = Ceil(RowsOfTextRequired)
		lbl.WrapText = True
		lbl.PrefHeight = IntRows * 30
		labels(i) = lbl
	Next

	'Add Activate button
	Dim btnActivateVectorStore As Button
	btnActivateVectorStore.Initialize("btnActivateVectorStore")
	btnActivateVectorStore.Text = "Activate"
	btnActivateVectorStore.Tag = Row(9) 'Assuming the Vector Store ID is at index 9
	'Log("Activate Vector Store Tag = " & btnActivateVectorStore.Tag)
	labels(Row.Length) = btnActivateVectorStore
	
	'Add ListVectorStoreFiles button
	Dim btnListVectorStoreFiles As Button
	btnListVectorStoreFiles.Initialize("btnListVectorStoreFiles")
	btnListVectorStoreFiles.Text = "List Files"
	btnListVectorStoreFiles.Tag = Row(9) 'Assuming the Vector Store ID is at index 9
	'Log("Activate Vector Store Tag = " & btnListVectorStoreFiles.Tag)
	labels(Row.Length + 1) = btnListVectorStoreFiles
	
	'Add Delete button
	Dim btnDeleteVectorStore As Button
	btnDeleteVectorStore.Initialize("btnDeleteVectorStore")
	btnDeleteVectorStore.Text = "Delete"
	btnDeleteVectorStore.Tag = Row(9) 'Assuming the Vector Store ID is at index 5
	'Log("Delete Vectore Store Tag = " & btnDeleteVectorStore.Tag)
	labels(Row.Length + 2) = btnDeleteVectorStore
	
	'Add button to add vector store to assistant
	Dim btnAddVectorStoreToAssistant As Button
	btnAddVectorStoreToAssistant.Initialize("btnAddVectorStoreToAssistant")
	btnAddVectorStoreToAssistant.Text = "Add Vector Store to Assistant"
	btnDeleteVectorStore.Tag = Row(9) 'Assuming the Vector Store ID is at index 5
	'Log("Delete Vectore Store Tag = " & btnDeleteVectorStore.Tag)
	labels(Row.Length + 3) = btnAddVectorStoreToAssistant
	
	LogColor("Sub CreateVectorStoreListRow finished", 0xFFFF7100)
	Return labels
End Sub

Private Sub btnAddVectorStoreToAssistant_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnAddVectorStoreToAssistant_MouseClicked started", 0xFF009901)
	LogUserAction("Add Vector Store to Assistant button clicked.")
	If lblAssistantId.Text <> "" Then
		OpAI.AddVectorStoreToAssistant(lblAssistantId.Text, lblVectorStoreID.Text)
	End If
	LogColor("Sub btnAddVectorStoreToAssistant_MouseClicked finished", 0xFFFF7100)
End Sub

Sub btnActivateVectorStore_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnActivateVectorStore_MouseClicked started", 0xFF009901)
	Log("Activating Vector Store...")
	Dim btn As Button = Sender
	Dim vectorStoreId As String = btn.Tag
	Log("VectorStoreID: " & vectorStoreId)
	 
	LogUserAction("OpenAI Vector Store Activated ID = " & vectorStoreId)

	'Change button text to "Activated"
	btn.Text = "Activated"
	btn.Enabled = False 'Disable the activated button
	'CSSUtils.SetBackgroundColor(btn,fx.Colors.From32Bit(0xFFFAFF00)) 'Optionally add some style.
	
	'Deactivate all other buttons
	For Each b As Button In activeButtons
		If b <> btn Then
			b.Text = "Activate"  'Change text back to "Activate"
			b.Enabled = True  'Enable it again
		End If
	Next

	'Clear the list and add the currently activated button
	activeButtons.Clear
	activeButtons.Add(btn)

	txtVectorStoreName.Text = ""
	RetrieveVectorStore(vectorStoreId)
	LogColor("Sub btnActivateVectorStore_MouseClicked finished", 0xFFFF7100)
End Sub

'retrieve vector store
Sub RetrieveVectorStore(vectorStoreId As String)
	LogColor("Sub RetrieveVectorStore started", 0xFF009901)
	LogUserAction("Retrieve Vector Store started.")
	Dim btnRetrieveMessage As Button = Sender
	Dim MessageID As String = btnRetrieveMessage.Tag
	Log("MessageID: " & MessageID)
	Log("ThreadID: " & CurrentThreadID)
	
	ShowTable("Vector Store") ' Call to show the Models List table
	
	OpAI.RetrieveVectorStore(vectorStoreId)
	LogColor("Sub RetrieveVectorStore finished", 0xFFFF7100)
End Sub

Private Sub ParseVectorStoreRetrieved(response As String) 'This is the original JSON parsed by Erel's JSON tool.
	LogColor("Sub ParseVectorStoreRetrieved started", 0xFF009901)
	LogUserAction("Parse Vector Store Retrieved started.")
	Dim Parser As JSONParser
	Parser.Initialize(response)
	Dim jRoot As Map = Parser.NextObject
	
	'Add row to table for each of these:
	
	Dim name As String = jRoot.Get("name")
	Dim row() As Object = CreateVectorStoreRow(Array As String("Vector Store Name:", name))
	tableView.Items.Add(row)
	
	Dim id As String = jRoot.Get("id")
	Dim row() As Object = CreateVectorStoreRow(Array As String("Vector Store ID:", id))
	tableView.Items.Add(row)
	
	Dim file_counts As Map = jRoot.Get("file_counts")
	Dim row() As Object = CreateVectorStoreRow(Array As String("File Counts:", file_counts))
	tableView.Items.Add(row)
	
	Dim total As String = file_counts.Get("total")
	Dim row() As Object = CreateVectorStoreRow(Array As String("Total:", total))
	tableView.Items.Add(row)
	
	Dim in_progress As String = file_counts.Get("in_progress")
	Dim row() As Object = CreateVectorStoreRow(Array As String("In Progress:", in_progress))
	tableView.Items.Add(row)

	Dim cancelled As String = file_counts.Get("cancelled")
	Dim row() As Object = CreateVectorStoreRow(Array As String("Cancelled:", cancelled))
	tableView.Items.Add(row)
	
	Dim completed As String = file_counts.Get("completed")
	Dim row() As Object = CreateVectorStoreRow(Array As String("Completed:", completed))
	tableView.Items.Add(row)
	
	Dim failed As String = file_counts.Get("failed")
	Dim row() As Object = CreateVectorStoreRow(Array As String("Failed:", failed))
	tableView.Items.Add(row)
	
	Dim bytes As String = jRoot.Get("bytes")
	Dim row() As Object = CreateVectorStoreRow(Array As String("Bytes:", bytes))
	tableView.Items.Add(row)
	
	Dim created_at As String = jRoot.Get("created_at")
	If created_at <> "null" Then
		'Convert Unix timestamp to a readable date format
		Dim dateCreated As String = ConvertUnixTimestampToReadableDate(created_at)
		Dim row() As Object = CreateVectorStoreRow(Array As String("Date Created:", dateCreated))
		tableView.Items.Add(row)
	End If

	'Dim object1 As String = jRoot.Get("object")
	Dim row() As Object = CreateVectorStoreRow(Array As String("File Counts:", file_counts))
	tableView.Items.Add(row)
	
	lblVectorStoreID.Text = id
	lblVectorStoreName.Text = name
	
	lblTableStatus.Text = "Vector store loaded"
	lblTableStatus.Style = "-fx-background-color: yellow;" 'Optional styling
	LogColor("Sub ParseVectorStoreRetrieved finished", 0xFFFF7100)
End Sub

Private Sub CreateVectorStoreRow(Row() As String) As Object()
	LogColor("Sub CreateVectorStoreRow started", 0xFF009901)
	LogUserAction("Create Vector Store Row started.")
	Dim labels(Row.Length) As Object 'Add space for the buttons

	For i = 0 To Row.Length - 1
		Dim lbl As Label
		lbl.Initialize("")
		lbl.Text = Row(i)
		Dim CharactersPerLine As Double = Floor(tableView.GetColumnWidth(i) * .175)  '800 pixels fits 140 characters.  So 140 / 800 is .175 characters per pixel.
		Dim RowsOfTextRequired As Float = lbl.Text.Length / CharactersPerLine
		Dim IntRows As Double = Ceil(RowsOfTextRequired)
		lbl.WrapText = True
		lbl.PrefHeight = IntRows * 15
		labels(i) = lbl
	Next
	LogColor("Sub CreateVectorStoreRow finished", 0xFFFF7100)
	Return labels
End Sub

Sub btnDeleteVectorStore_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnDeleteVectorStore_MouseClicked started", 0xFF009901)
	Dim btnDeleteVectorStore As Button = Sender
	Dim vectorStoreId As String = btnDeleteVectorStore.Tag
	LogUserAction("Delete Vector Store button clicked. Vector Store ID = " & vectorStoreId)
	OpAI.DeleteVectorStore(vectorStoreId)
	LogColor("Sub btnDeleteVectorStore_MouseClicked finished", 0xFFFF7100)
End Sub

'Vector Store File List
Private Sub btnListVectorStoreFiles_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnListVectorStoreFiles_MouseClicked started", 0xFF009901)
	LogUserAction("Add Vector Store to Assistant button clicked.")
	
	Dim btn As Button = Sender
	Dim vectorStoreId As String = btn.Tag
	
	ShowTable("List Vector Store Files") ' Call to show the Vector Store List table
	
	Dim limit As String = "100" 'Optional limit parameter
	Dim order As String = "desc" 'Optional order parameter
	Dim after As String = "" 'Optional after parameter
	Dim before As String = "" 'Optional before parameter
	Dim filter As String = "" 'Optional filter parameter

	OpAI.ListVectorStoreFiles(vectorStoreId, limit, order, after, before, filter)

	LogColor("Sub btnListVectorStoreFiles_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub ParseVectorStoreFiles(response As String)
	LogColor("Sub ParseVectorStoreFiles started", 0xFF009901)
	Dim parser As JSONParser
	parser.Initialize(response)
	Dim jRoot As Map = parser.NextObject
	Dim first_id As String = jRoot.Get("first_id")
	Dim data As List = jRoot.Get("data")
	For Each coldata As Map In data
		Dim created_at As String = coldata.Get("created_at")
		Dim FileID As String = coldata.Get("id")
		Dim object1 As String = coldata.Get("object")
		Dim vector_store_id As String = coldata.Get("vector_store_id")
		
		'Convert Unix timestamp to a readable date format
		Dim dateCreated As String = ConvertUnixTimestampToReadableDate(created_at)

		Dim FileName As String = CheckForFileInSpreadsheet(FileID, "GetFileName")
		If FileName = "false" Then FileName = "File was not uploaded via this software. Filename Unknown."

		'Add the row to the TableView
		Dim row() As Object = CreateVectorStoreFilesRow(Array As String(FileName, FileID, dateCreated))
		tableView.Items.Add(row)
	Next
	Dim last_id As String = jRoot.Get("last_id")
	Dim has_more As String = jRoot.Get("has_more")
	Dim object2 As String = jRoot.Get("object")
	LogColor("Sub ParseVectorStoreFiles finished", 0xFFFF7100)
End Sub

Private Sub CreateVectorStoreFilesRow(Row() As String) As Object()
	LogColor("Sub CreateVectorStoreFilesRow started", 0xFF009901)
	LogUserAction("Create Vector Store Files Row started.")
	Dim labels(Row.Length) As Object 'Add space for the buttons
	For i = 0 To Row.Length - 1
		Dim lbl As Label
		lbl.Initialize("")
		lbl.Text = Row(i)
		Dim CharactersPerLine As Double = Floor(tableView.GetColumnWidth(i) * .175)  '800 pixels fits 140 characters.  So 140 / 800 is .175 characters per pixel.
		Dim RowsOfTextRequired As Float = lbl.Text.Length / CharactersPerLine
		Dim IntRows As Double = Ceil(RowsOfTextRequired)
		lbl.WrapText = True
		lbl.PrefHeight = IntRows * 30
		labels(i) = lbl
	Next

	LogColor("Sub CreateVectorStoreFilesRow finished", 0xFFFF7100)
	Return labels
End Sub

'OPENAI FILE LIST TABLE
Private Sub btnOpenAIFiles_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnOpenAIFiles_MouseClicked started", 0xFF009901)
	LogUserAction("OpenAI Files button clicked.")
	ShowOpenAIFilesList
	LogColor("Sub btnOpenAIFiles_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub ShowOpenAIFilesList
	LogColor("Sub ShowOpenAIFilesList started", 0xFF009901)
	LogUserAction("Opened OpenAI Files List shown.")
	
	If lblVectorStoreName.Text = "" Then
		lblSecondTableLabel.Text = "Select or Create Vector Store before adding file to Vector Store"
		lblSecondTableLabel.Style = "-fx-background-color: yellow;" 'Optional styling
	Else
		lblSecondTableLabel.Text = "Vector Store: " & lblVectorStoreName.Text
		lblSecondTableLabel.Style = "-fx-background-color: white;" 'Optional styling
	End If
	
	ShowTable("OpenAI Files List") ' Call to show the OpenAI Files List table

	'Call to parse and display file list
	OpAI.ListFiles
	LogColor("Sub ShowOpenAIFilesList finished", 0xFFFF7100)
End Sub

Sub ParseFileList(JSONResults As String)
	LogColor("Sub ParseFileList started", 0xFF009901)
	'Ensure JSONResults contains the JSON string from the API response
	Dim Parser As JSONParser
	LogUserAction("OpenAI file list shown: " & JSONResults)
	Parser.Initialize(JSONResults)
	Dim jRoot As Map = Parser.NextObject
	Dim FileList As List = jRoot.Get("data")

	For Each coldata As Map In FileList
		Dim FileName As String = coldata.Get("filename")
		Dim Purpose As String = coldata.Get("purpose")
		Dim bytes As Int = coldata.Get("bytes")
		Dim created_at As Int = coldata.Get("created_at")
		Dim id As String = coldata.Get("id")

		'Convert Unix timestamp to a readable date format
		Dim dateCreated As String = ConvertUnixTimestampToReadableDate(created_at)

		'Add the row to the TableView
		Dim row() As Object = CreateFileListRow(Array As String(FileName, Purpose, bytes, dateCreated, id))
		tableView.Items.Add(row)
	Next
	lblTableStatus.Text = "File List Completed."
	lblTableStatus.Style = "-fx-background-color: white;" 'Optional styling
	
	LogUserAction("Files list table completed.")
	LogColor("Sub ParseFileList finished", 0xFFFF7100)
End Sub

Private Sub CreateFileListRow(Row() As String) As Object()
	LogColor("Sub CreateFileListRow started", 0xFF009901)
	LogUserAction("Create File List Row started.")
	Dim labels(Row.Length + 4) As Object 'Add space for the buttons

	For i = 0 To Row.Length - 1
		Dim lbl As Label
		lbl.Initialize("")
		lbl.Text = Row(i)
		
		'Log("I = " & i & " tableView.GetColumnWidth(i) = " & tblFileList.GetColumnWidth(i))
		Dim CharactersPerLine As Double = Floor(tableView.GetColumnWidth(i) * .175)  '800 pixels fits 140 characters.  So 140 / 800 is .175 characters per pixel.
		Dim RowsOfTextRequired As Float = lbl.Text.Length / CharactersPerLine
		Dim IntRows As Double = Ceil(RowsOfTextRequired)
		lbl.WrapText = True
		lbl.PrefHeight = IntRows * 15
		labels(i) = lbl
	Next

	'Add Download button.
	Select Row(1) 'File Purpose.
		Case "assistants"
			If CheckForFileInSpreadsheet(Row(4),Null) = "TrueString" Then
				Dim btnRetrieveFileFromSpreadsheet As Button
				btnRetrieveFileFromSpreadsheet.Initialize("CheckForFileInSpreadsheet")
				btnRetrieveFileFromSpreadsheet.Text = "Download"
				btnRetrieveFileFromSpreadsheet.Tag = Row(4) & "~~" & Row(0) 'Assuming the ID is at index 4 and File Name is at index 0.
				Log("Retrieve Tag = " & btnRetrieveFileFromSpreadsheet.Tag)
				labels(Row.Length) = btnRetrieveFileFromSpreadsheet 'Add button to labels array
			Else
				'If file purpose is "assistants" and it was not uploaded from my computer, put a label indicating it can't be retrieved
				Dim lblCannotRetrieve As Label
				lblCannotRetrieve.Initialize("")
				lblCannotRetrieve.Text = "Can't Download"
				'CSSUtils.SetBackgroundColor(lblCannotRetrieve,fx.Colors.From32Bit(0xFFFAFF00)) 'Optionally add some style.
				labels(Row.Length) = lblCannotRetrieve 'Add label to labels array
			End If
		Case Else
			Dim btnRetrieveFileFromOpenAI As Button
			btnRetrieveFileFromOpenAI.Initialize("btnRetrieveFileFromOpenAI")
			btnRetrieveFileFromOpenAI.Text = "Download"
			btnRetrieveFileFromOpenAI.Tag = Row(4) & "~~" & Row(0) 'Assuming the ID is at index 4 and File Name is at index 0.
			Log("Retrieve Tag = " & btnRetrieveFileFromOpenAI.Tag)
			labels(Row.Length) = btnRetrieveFileFromOpenAI 'Add button to labels array
	End Select
	
	'Add Delete button
	Dim btnDeleteFile As Button
	btnDeleteFile.Initialize("btnDeleteFile")
	btnDeleteFile.Text = "Delete"
	btnDeleteFile.Tag = Row(4) 'Assuming the FileID is at index 4
	'Log("Delete Tag = " & btnDeleteFile.Tag)
	labels(Row.Length + 1) = btnDeleteFile 'Add delete button to labels array
	
	'Add button to Add to Vector Store
	Dim btnAddFileToVectorStore As Button
	btnAddFileToVectorStore.Initialize("btnAddFileToVectorStore")
	btnAddFileToVectorStore.Text = "Add File to Vector Store"
	btnAddFileToVectorStore.Tag = Row(4) 'Assuming the FileID is at index 4
	'Log("AddFileToVectorStore Tag = " & btnAddFileToVectorStore.Tag)
	labels(Row.Length + 2) = btnAddFileToVectorStore 'Add delete button to labels array

	'Add button to Add to Current Message
	Dim btnAddFileToCurrentMessage As Button
	btnAddFileToCurrentMessage.Initialize("btnAddFileToCurrentMessage")
	btnAddFileToCurrentMessage.Text = "Add File to Current Message"
	btnAddFileToCurrentMessage.Tag = Row(4) 'Assuming the FileID is at index 4
	labels(Row.Length + 3) = btnAddFileToCurrentMessage 'Add delete button to labels array

	LogColor("Sub CreateFileListRow finished", 0xFFFF7100)
	Return labels
End Sub

Private Sub btnAddFileToVectorStore_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnAddFileToVectorStore_MouseClicked started", 0xFF009901)
	LogUserAction("Add File to Vector Store button clicked.")
	If lblVectorStoreID.Text <> "" Then 'Create Vector Store and add file to it at the same time.
		If lblVectorStoreID.Text = "Vector Store will actually be created when a file is added to it." Then
			
		Else 'Add file to existing Vector Store.
			Dim btnAddFileToVectorStore As Button = Sender
			Dim fileId As String = btnAddFileToVectorStore.Tag
			OpAI.AddFileToVectorStore(lblVectorStoreID.Text, fileId)
			
		End If
		
	End If
	LogColor("Sub btnAddFileToVectorStore_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnAddFileToCurrentMessage_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnAddFileToCurrentMessage_MouseClicked started", 0xFF009901)
	LogUserAction("Add File to Vector Store button clicked.")
		Dim btnAddFileToCurrentMessage As Button = Sender
		Dim fileId As String = btnAddFileToCurrentMessage.Tag
	'***Add code here to add file to current message.  See here:  https://platform.openai.com/docs/assistants/deep-dive/creating-image-input-content	LogColor("Sub btnAddFileToCurrentMessage_MouseClicked finished", 0xFFFF7100)
	LogColor("Sub btnAddFileToCurrentMessage_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub ParseVectorStoreFile(response As String)
	LogColor("Sub ParseVectorStoreFile started", 0xFF009901)
	Dim parser As JSONParser
	parser.Initialize(response)
	Dim jRoot As Map = parser.NextObject
	Dim chunking_strategy As Map = jRoot.Get("chunking_strategy")
	Dim static As Map = chunking_strategy.Get("static")
	Dim max_chunk_size_tokens As Int = static.Get("max_chunk_size_tokens")
	Dim chunk_overlap_tokens As Int = static.Get("chunk_overlap_tokens")
	Dim Type As String = chunking_strategy.Get("type")
	Dim usage_bytes As Int = jRoot.Get("usage_bytes")
	Dim created_at As Int = jRoot.Get("created_at")
	Dim id As String = jRoot.Get("id")
	Dim last_error As String = jRoot.Get("last_error")
	Dim object1 As String = jRoot.Get("object")
	Dim vector_store_id As String = jRoot.Get("vector_store_id")
	Dim status As String = jRoot.Get("status")
	
	If status <> "completed" Then
		lblTableStatus.Text = "File added to vector store"
	Else
		'*** CHeck status every minute?
	End If
	LogColor("Sub ParseVectorStoreFile finished", 0xFFFF7100)
End Sub

Private Sub tblFileList_MouseClicked(EventData As MouseEvent)
	LogColor("Sub tblFileList_MouseClicked started", 0xFF009901)
	LogUserAction("File List Table button clicked.")
	Dim selectedRowIndex As Int = tableView.SelectedRow
    If selectedRowIndex > -1 Then
        Dim selectedColumnIndex As Int = GetSelectedColumn(EventData.X)
        If selectedColumnIndex = 4 Then 'Assuming the ID column is at index 4
            'Retrieve the cell label directly within this subroutine
			Dim row() As Object = tableView.Items.Get(selectedRowIndex)
			Dim fileId As String = row(selectedColumnIndex)
            fx.Clipboard.SetString(fileId) 'Copy the ID to the clipboard
            xui.MsgboxAsync("ID copied to clipboard: " & fileId, "Copy ID")
            LogUserAction("ID copied to clipboard: " & fileId)
        End If
    End If
	LogColor("Sub tblFileList_MouseClicked finished", 0xFFFF7100)
End Sub

Sub GetSelectedColumn(x As Double) As Int
	LogColor("Sub GetSelectedColumn started", 0xFF009901)
	LogUserAction("GetSelectedColumn sub started.")
	Dim totalWidth As Double = 0
	For i = 0 To tableView.ColumnsCount - 1
		totalWidth = totalWidth + tableView.GetColumnWidth(i)
		If x < totalWidth Then
			Return i
		End If
	Next
	LogColor("Sub GetSelectedColumn finished", 0xFFFF7100)
	Return -1
End Sub

Sub btnDeleteFile_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnDeleteFile_MouseClicked started", 0xFF009901)
	Dim btnDeleteFile As Button = Sender
	Dim fileId As String = btnDeleteFile.Tag
	LogUserAction("Delete File button clicked. FileID = " & fileId)
	DeleteFileFromSpreadsheet(fileId)
	OpAI.DeleteFile(fileId)
	
	LogColor("Sub btnDeleteFile_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub CheckForFileInSpreadsheet(FileID As String, Use As String) As String
	LogColor("Sub CheckForFileInSpreadsheet started", 0xFF009901)
	LogUserAction("Check for File In Spreadsheet started. FileID = " & FileID)
	Dim XL As XLUtils
	XL.Initialize

	'Define folder and filename
	Dim XLSXFolder As String = DefaultFolder
	Dim XLSXFileName As String = "FileList.xlsx" 'Spreadsheet filename

	'Create workbook and get the sheet
	Dim workbook As XLWorkbookWriter = XL.CreateWriterFromTemplate(XLSXFolder, XLSXFileName)
	Dim sheet As PoiSheet = workbook.PoiWorkbook.GetSheetByName("Files")

	'Find the row with the FileID and delete it
	Dim RowNum As Int
	Dim NumberOfRows As Int = sheet.LastRowNumber + 1
	'LogColor("Number Of Rows In the Spreadsheet = " & NumberOfRows,0xFFFF0000)
	
	For RowNum = 1 To NumberOfRows - 1 'Assuming header is in the first row, we start at row 1.  Row 0 contains the header.
		'Note: NumberOfRows is not zero based like RowNum is.  That is why the -1.
		Dim Row As PoiRow = sheet.GetRow(RowNum)
		Dim currentFileId As String = Row.GetCell(5).Value 'Assuming File ID is in the 5th column.
		'LogColor("currentFileId = " & currentFileIdCell,0xFFFF0000)
		
		If currentFileId = FileID Then
			Select Use
				Case Null
					Return "TrueString"
					Exit
				Case "GetFileName"
					Dim FileName As String = Row.GetCell(1).Value
					Return FileName
			End Select
		End If
	Next
	LogColor("Sub CheckForFileInSpreadsheet finished", 0xFFFF7100)
	Return False
End Sub

Private Sub DeleteFileFromSpreadsheet(FileID As String)
	LogColor("Sub DeleteFileFromSpreadsheet started", 0xFF009901)
	LogUserAction("Delete File from Spreadsheet started. FileID = " & FileID)
	Dim XL As XLUtils
	XL.Initialize

	'Define folder and filename
	Dim XLSXFolder As String = DefaultFolder 
	Dim XLSXFileName As String = "FileList.xlsx" 'Spreadsheet filename

	'Create workbook and get the sheet
	Dim workbook As XLWorkbookWriter = XL.CreateWriterFromTemplate(XLSXFolder, XLSXFileName)
	Dim sheet As PoiSheet = workbook.PoiWorkbook.GetSheetByName("Files")

	'Find the row with the FileID and delete it
	Dim RowNum As Int
	Dim NumberOfRows As Int = sheet.LastRowNumber + 1
	LogColor("Number Of Rows In the Spreadsheet = " & NumberOfRows,0xFFFF0000)
	
	For RowNum = 1 To NumberOfRows - 1 'Assuming header is in the first row, we start at row 1.  Row 0 contains the header.
		'Note: NumberOfRows is not zero based like RowNum is.  That is why the -1.
		Dim Row As PoiRow = sheet.GetRow(RowNum)
		
		Dim currentFileId As String = Row.GetCell(5).ValueString 'Assuming File is in the fifth column
		LogColor("currentFileId = " & currentFileId,0xFFFF0000)
		
		If currentFileId = FileID Then
			'Shift rows up to remove the entry
			Dim jo As JavaObject = sheet
			Dim lastRowNum As Int = sheet.LastRowNumber
			LogColor("Row numumber with File on it = " & RowNum,0xFFFF0000)
			LogColor("Last Row in spreadsheet = " & lastRowNum,0xFFFF0000)

			'Shift rows upwards to fill in the deleted row
			Dim nextRow As PoiRow = sheet.GetRow(RowNum + 1)
			
			If nextRow <> Null Then
				Log("nextRow is not blank")
				Dim fromrow As Int = RowNum + 1
				Log("FromRow = " & fromrow)
				If fromrow > lastRowNum Then
					jo.RunMethod("removeRow", Array(jo.RunMethod("getRow", Array(lastRowNum))))
					'jo.RunMethod("removeRow", Array(lastRowNum))
				Else
					Dim torow As Int = lastRowNum
					LogColor("torow = " & torow,0xFFFF0000)
					Dim noofrows As Int = -1
					LogColor("noofrows = " & noofrows,0xFFFF0000)
					Log("")
					
					jo.RunMethod("shiftRows", Array(fromrow,torow,noofrows))
					
				End If
			End If

			'Log("File with ID " & FileID & " deleted from spreadsheet.")
			Exit
		End If
	Next

	'Save the updated workbook after deletion
	'Dim f As String = 
	workbook.SaveAs(XLSXFolder, XLSXFileName, True)
	'Wait For (XL.OpenExcel(f)) Complete (Success As Boolean)
	ShowOpenAIFilesList
	
	Log("FIle with ID " & FileID & " deleted from spreadsheet.")
	LogColor("Sub DeleteFileFromSpreadsheet finished", 0xFFFF7100)
End Sub

Sub btnRetrieveFileFromOpenAI_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnRetrieveFileFromOpenAI_MouseClicked started", 0xFF009901)
	Log("Downloading file...")
	Dim btn As Button = Sender
	Dim fileId As String = btn.Tag
	LogUserAction("Retrieve File button clicked. FileID = " & fileId)
	Dim tag As String = btn.Tag
	Dim parts() As String = Regex.Split("~~", tag)
	Dim fileId As String = parts(0)
	Dim FileName As String = parts(1)
	Log("FileID: " & fileId)
	Log("FileName: " & FileName)

	Log("FileID in RetrieveFile sub = " & fileId)
	LogUserAction("OpenAI file downloaded ID = " & fileId)
	OpAI.RetrieveFile(fileId, FileName)
	LogColor("Sub btnRetrieveFileFromOpenAI_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub OpenAI_FileResponse(inputStream As InputStream, FileName As String)
	LogColor("Sub OpenAI_FileResponse started", 0xFF009901)
	lblChatStatus.Text = ""
	
	Dim FC As FileChooser
	FC.Initialize
	FC.InitialDirectory = DefaultFolder
	FC.InitialFileName = FileName
	FC.Title = "Save Downloaded File"
	
'	FileChooserUtils.AddExtensionFilters4(FC,Array As String("MP3 Files"),Array As String("*.mp3"),True,"Output Files",True)
'	FileChooserUtils.SetSelectedExtensionFilter(FC,"MP3 Files")

	Dim saveFileName As String = FC.ShowSave(MainForm)
	Dim Folder As String
	Dim Y As Byte
	
	'Log("saveFileName = " & saveFileName)
	'Log("Length = " & saveFileName.Length)
	
	For X = saveFileName.Length - 1 To 0 Step -1
		If saveFileName.SubString2(X,X+1) = "\" Then
			Y = X
			Exit
		End If
	Next

	Folder = saveFileName.SubString2(0,Y)
	FileName = saveFileName.SubString2(Y+1,saveFileName.Length)
	
	If saveFileName <> "" Then
		Dim out As OutputStream = File.OpenOutput(Folder, FileName, False)
		File.Copy2(inputStream, out)
		out.Close
		inputStream.Close
		Log("File saved successfully to: " & saveFileName)
		LogUserAction("Downloaded file: " & saveFileName)
		fx.ShowExternalDocument(File.Combine(Folder, FileName)) 'This can be used to play the external mp3 file using the default Windows app.
	Else
		Log("File save operation was cancelled.")
		LogUserAction("TTS File save operation was cancelled.")
	End If
	LogColor("Sub OpenAI_FileResponse finished", 0xFFFF7100)
End Sub

Private Sub ParseFile(response As String)
	LogColor("Sub ParseFile started", 0xFF009901)
	Dim parser As JSONParser
	parser.Initialize(response)
	Dim jRoot As Map = parser.NextObject
	Dim filename As String = jRoot.Get("filename")
	Dim purpose As String = jRoot.Get("purpose")
	Dim bytes As String = jRoot.Get("bytes")
	Dim created_at As String = jRoot.Get("created_at")
	Dim id As String = jRoot.Get("id")
	Dim object1 As String = jRoot.Get("object")
	
	OpAI.RetrieveFileContent(id, filename)
	LogColor("Sub ParseFile finished", 0xFFFF7100)
End Sub

Sub btnRetrieveFileFromSpreadsheet_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnRetrieveFileFromSpreadsheet_MouseClicked started", 0xFF009901)
	Log("Downloading file...")
	Dim btn As Button = Sender
	Dim fileId As String = btn.Tag
	LogUserAction("Retrieve File button clicked. FileID = " & fileId)
	Dim tag As String = btn.Tag
	Dim parts() As String = Regex.Split("~~", tag)
	Dim fileId As String = parts(0)
	Dim FileName As String = parts(1)
	Log("FileID: " & fileId)
	Log("FileName: " & FileName)
	
	OpenLocalFileFromSpreadsheet(fileId)
	
	Log("FileID in RetrieveFile sub = " & fileId)
	LogUserAction("OpenAI file downloaded ID = " & fileId)
'	OpAI.RetrieveFile(fileId, FileName)
	LogColor("Sub btnRetrieveFileFromSpreadsheet_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub OpenLocalFileFromSpreadsheet(FileID As String)
	LogColor("Sub OpenLocalFileFromSpreadsheet started", 0xFF009901)
	LogUserAction("Open Local File From Spreadsheet started. FileID = " & FileID)
	Dim XL As XLUtils
	XL.Initialize

	'Define folder and filename
	Dim XLSXFolder As String = DefaultFolder 
	Dim XLSXFileName As String = "FileList.xlsx" 'Spreadsheet filename

	'Create workbook and get the sheet
	Dim workbook As XLWorkbookWriter = XL.CreateWriterFromTemplate(XLSXFolder, XLSXFileName)
	Dim sheet As PoiSheet = workbook.PoiWorkbook.GetSheetByName("Files")

	'Find the row with the FileID and delete it
	Dim RowNum As Int
	Dim NumberOfRows As Int = sheet.LastRowNumber + 1
	LogColor("NumberOfRows = " & NumberOfRows,0xFFFF0000)
	
	For RowNum = 1 To NumberOfRows - 1 'Assuming header is in the first row, we start at row 1.  Row 0 contains the header.
		'Note: NumberOfRows is not zero based like RowNum is.  That is why the -1.
		Dim Row As PoiRow = sheet.GetRow(RowNum)
		Dim currentFileId As String = Row.GetCell(5).ValueString 'Assuming Thread ID is in the first column
		LogColor("currentFileId = " & currentFileId,0xFFFF0000)
		
		If currentFileId = FileID Then
			Dim Folder As String = Row.GetCell(0).Value
			Dim FileName As String = Row.GetCell(1).Value
			fx.ShowExternalDocument(File.Combine(Folder, FileName))
			'Log("File with ID " & FileID & " downloaded.")
			Exit
		End If
	Next

	'Save the updated workbook after deletion
	'Dim f As String = 
	workbook.SaveAs(XLSXFolder, XLSXFileName, True)
	'Wait For (XL.OpenExcel(f)) Complete (Success As Boolean)
	ShowThreadList
	
	Log("FIle with ID " & FileID & " deleted from spreadsheet.")
	LogColor("Sub OpenLocalFileFromSpreadsheet finished", 0xFFFF7100)
End Sub

Private Sub cmbPurpose_ValueChanged (Value As Object)
	LogColor("Sub cmbPurpose_ValueChanged started", 0xFF009901)
	Purpose2 = cmbPurposeAbbreviations.Get(cmbPurpose.SelectedIndex)
	LogUserAction("cmbPurpose Value Changed.  New Purpose = " & Purpose2)
	LogColor("Sub cmbPurpose_ValueChanged finished", 0xFFFF7100)
End Sub

Private Sub btnProceedToFileUpload_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnProceedToFileUpload_MouseClicked started", 0xFF009901)
	If cmbPurpose.SelectedIndex <> -1 Then
		LogUserAction("Proceeded to file upload with purpose: " & Purpose2)
		UploadFile(Purpose2,"","")
	Else
		xui.MsgboxAsync("Select Purpose before proceeding.", "Error")
		LogUserAction("Attempted to proceed to file upload without selecting purpose.")
	End If
	LogColor("Sub btnProceedToFileUpload_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnProceedToURLUpload_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnProceedToURLUpload_MouseClicked started", 0xFF009901)
	Dim GoodToGo As Boolean = False
	
	If cmbPurpose.SelectedIndex <> -1 Then
		GoodToGo = True
	Else
		xui.MsgboxAsync("Select Purpose before proceeding.", "Error")
	End If
	
	If txtURLtoUpload.Text = "" Then
		xui.MsgboxAsync("Enter URL before proceeding.", "Error")
	Else
		GoodToGo = True
	End If
	
	If GoodToGo = True Then
		LogUserAction("Proceeded to URL upload.")
		DownloadURLtemporarily(txtURLtoUpload.Text)
	End If
	LogColor("Sub btnProceedToURLUpload_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnCancelUpload_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnCancelUpload_MouseClicked started", 0xFF009901)
	LogUserAction("Cancel Upload button clicked. FileID = " & lblUploadID.Text)
	OpAI.CancelUpload(lblUploadID.Text)
	LogColor("Sub btnCancelUpload_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub DownloadURLtemporarily(URLtoDownload As String)
	LogColor("Sub DownloadURLtemporarily started", 0xFF009901)
	LogColor("URL to download = " & URLtoDownload,0xFFFF0000)
	Dim Job As HttpJob
	Job.Initialize("addtoai",Me)
	Job.GetRequest.Timeout = 120000 'That is 120 seconds or two minutes.  Default is 30 seconds.
	'URLtoSave = txtURLtoUpload.Text
	Job.Tag = URLtoDownload
	Job.Download(URLtoDownload)
	Log("Done here")
	LogUserAction("URL downloaded: " & URLtoDownload)
	LogColor("Sub DownloadURLtemporarily finished", 0xFFFF7100)
End Sub

Sub UploadFile(Purpose As String, Folder As String, FileName As String)
	LogColor("Sub UploadFile started", 0xFF009901)
	
	Dim FC As FileChooser
	FC.Initialize
	FC.InitialDirectory = DefaultFolder
	FC.Title = "Select a file to upload"
	Dim selectedFile As String = FC.ShowOpen(MainForm)
    
	If selectedFile <> "" Then
		Dim Y As Byte
		For X = selectedFile.Length - 1 To 0 Step -1
			If selectedFile.SubString2(X, X+1) = "\" Then
				Y = X
				Exit
			End If
		Next
		Folder = selectedFile.SubString2(0, Y)
		'DefaultFolder = Folder
		FileName = selectedFile.SubString2(Y+1, selectedFile.Length)
        
		Dim UploadedDate As String = DateTime.Date(DateTime.Now) & " " & DateTime.Time(DateTime.Now)
		
		Dim fileSize As Long = File.Size(Folder, FileName)

		lblUploadSuccess.Text = "Uploading File.  please wait up to 2 minutes."
		lblUploadSuccess.Style = "-fx-background-color: yellow;" 'Optional styling
		
		'Add line to the spreadsheet with the information from this sub regarding the file.  The FileID will be added in the Sub OpenAI_Response, Case "uploadfile".
		Dim FileID As String = ""
		AddFileToSpreadsheet(Folder, FileName, fileSize, UploadedDate, Purpose, FileID)
		
		If fileSize > 512 * 1024 * 1024 Then
			'Large file upload logic
			Log("File is larger than 512 MB. Using large file upload.")
			LogUserAction("Large file upload initialized " & Folder & "\" & FileName)
			lblUploadSuccess.Text = "Large upload started. Please wait..."
			lblUploadSuccess.Style = "-fx-background-color: yellow;" 'Optional styling
			OpAI.InitializeUpload(Purpose, Folder, FileName)
		Else
			'Normal upload logic using library method
			Log("File is smaller than 512 MB. Using normal upload.")
			OpAI.UploadFile(Folder & "\" & FileName, Purpose)
		End If
	Else
		Log("No file selected for upload.")
	End If
	LogColor("Sub UploadFile finished", 0xFFFF7100)
End Sub

Private Sub AddFileToSpreadsheet(Folder As String, FileName As String, fileSize As String, UploadedDate As String, Purpose As String, FileID As String)
	LogColor("Sub AddFileToSpreadsheet started", 0xFF009901)
	LogUserAction("Add File to Spreadsheet started.  FileName = " & FileName  & " FileID = " & FileID & " Purpose = " & Purpose)
	
	
	Log("FileID = " & FileID)
	
	'The reason for creating a spreadsheet listing the files as they are created is because OpenAI does not
	'give the option of downloading a file uploaded with the purpose of Assistants.  So we have to keep track of files ourselves so we can open them if wanted later.
	
	Private XL As XLUtils
	XL.Initialize
Log("DefaultFolder = " & DefaultFolder)
	Dim XLSXFileName As String = "FileList.xlsx"
	
	'Open workbook and worksheet
	Dim workbook As XLWorkbookWriter = XL.CreateWriterFromTemplate(DefaultFolder, XLSXFileName)
	Dim sheet1 As XLSheetWriter = workbook.CreateSheetWriterByName("Files")

	If FileID = "" Then
		'Find the next empty row
		Dim RowNum As Int
		RowNum = workbook.PoiWorkbook.GetSheetByName("Files").LastRowNumber + 2

		'Write thread details into the new row
		sheet1.PutString(XL.AddressOne("A", RowNum), Folder) 'Column A for Folder
		sheet1.PutString(XL.AddressOne("B", RowNum), FileName) 'Column B for FileName
		sheet1.PutString(XL.AddressOne("C", RowNum), fileSize) 'Column C for fileSize
		sheet1.PutString(XL.AddressOne("D", RowNum), UploadedDate) 'Column D for UploadedDate
		sheet1.PutString(XL.AddressOne("E", RowNum), Purpose) 'Column E for Purpose
	Else
		'Find the next empty row
		Dim RowNum As Int
		RowNum = workbook.PoiWorkbook.GetSheetByName("Files").LastRowNumber + 1
		sheet1.PutString(XL.AddressOne("F", RowNum), FileID) 'Column F for FileID
	End If
	'Save the workbook
	'Dim f As String = 
	workbook.SaveAs(DefaultFolder, XLSXFileName, True)
	'Wait For (XL.OpenExcel(f)) Complete (Success As Boolean)
	LogColor("Sub AddFileToSpreadsheet finished", 0xFFFF7100)
End Sub

'FINE TUNING JOBS

Private Sub btnListFineTuningJobs_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnListFineTuningJobs_MouseClicked started", 0xFF009901)
	ListFineTuningJobs
	LogColor("Sub btnListFineTuningJobs_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub ListFineTuningJobs
	LogColor("Sub ListFineTuningJobs started", 0xFF009901)
	LogUserAction("List Fine-Tuning Jobs started.")

	ShowTable("Fine-Tuning Jobs List") ' Call to show the fine-tuning jobs list

	'Call to list fine-tuning jobs with parameters
	Dim limit As String = "100"  'Optional limit parameter
	Dim after As String = ""       'Optional after parameter
	Dim before As String = ""      'Optional before parameter
    
	'Call the method to list fine-tuning jobs
	OpAI.ListFineTuningJobs(limit, after, before)

	LogColor("Sub ListFineTuningJobs finished", 0xFFFF7100)
End Sub

Private Sub ParseFineTuningJobs(response As String)
	LogColor("Sub ParseFineTuningJobs started", 0xFF009901)
	LogUserAction("Parse Fine Tuning Jobs started.")

	Dim Parser As JSONParser
	Parser.Initialize(response)
	Dim jRoot As Map = Parser.NextObject
	Dim data As List = jRoot.Get("data") 'Assuming "data" contains the jobs

	For Each jobData As Map In data
		Dim eventId As String = jobData.Get("id")
		Dim createdAt As String = jobData.Get("created_at")
		Dim level As String = jobData.Get("level")
		Dim message As String = jobData.Get("message")
		Dim Type1 As String = jobData.Get("type")
		Dim eventData As String = jobData.Get("data") 'Can be null, so handle appropriately

		'Convert timestamps to readable dates
		Dim createdDateFormatted As String = ConvertUnixTimestampToReadableDate(createdAt)
		
		'Add the row to the TableView
		Dim row() As Object = CreateFineTuningListRow(Array As Object(eventId, createdDateFormatted, level, message, Type1, eventData))
		tableView.Items.Add(row)
	Next

	Dim has_more As String = jRoot.Get("has_more")
	If has_more = "true" Then
		xui.MsgboxAsync("There are more fine-tuning jobs to see.", "Has More")
	End If

	lblTableStatus.Text = "Fine-Tuning Jobs List Completed."
	lblTableStatus.Style = "-fx-background-color: white;" 'Optional styling

	LogColor("Sub ParseFineTuningJobs finished", 0xFFFF7100)
End Sub

Private Sub CreateFineTuningListRow(Row() As String) As Object()
	LogColor("Sub CreateFineTuningListRow started", 0xFF009901)
	LogUserAction("Create Fine Tuning List Row started.")
	Dim labels(Row.Length + 2) As Object 'Add space for the buttons

	For i = 0 To Row.Length - 1
		Dim lbl As Label
		lbl.Initialize("")
		lbl.Text = Row(i)
		Dim CharactersPerLine As Double = Floor(tableView.GetColumnWidth(i) * .175)  '800 pixels fits 140 characters.  So 140 / 800 is .175 characters per pixel.
		Dim RowsOfTextRequired As Float = lbl.Text.Length / CharactersPerLine
		Dim IntRows As Double = Ceil(RowsOfTextRequired)
		lbl.WrapText = True
		lbl.PrefHeight = IntRows * 15
		labels(i) = lbl
	Next

	'Add Cancel Fine Tuning Job Button
	Dim btnCancelFineTuningJob As Button
	btnCancelFineTuningJob.Initialize("btnCancelFineTuningJob")
	btnCancelFineTuningJob.Text = "Retrieve"
	btnCancelFineTuningJob.Tag = Row(0) 'Assuming the RunID is at index 0
	'Log("Cancel Fine Tuning Job Tag = " & btnCancelFineTuningJob.Tag)
	labels(Row.Length) = btnCancelFineTuningJob

	'Add List Fine Tuning Events Button
	Dim btnListFineTuningEvents As Button
	btnListFineTuningEvents.Initialize("btnListFineTuningEvents")
	btnListFineTuningEvents.Text = "Retrieve"
	btnListFineTuningEvents.Tag = Row(0) 'Assuming the RunID is at index 0
	'Log("Retrieve Fine Tuning Event List Tag = " & btnListFineTuningEvents.Tag)
	labels(Row.Length + 1) = btnListFineTuningEvents

	LogColor("Sub CreateFineTuningListRow finished", 0xFFFF7100)
	Return labels
End Sub

Private Sub btnRetrieveFineTuningJob_MouseClick(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnRetrieveFineTuningJob_MouseClick started", 0xFF009901)
	Dim btn As Button = Sender
	Dim jobId As String = btn.Tag  'Job ID stored in the button's tag
	LogColor("Sub btnRetrieveFineTuningJob_MouseClicked started", 0xFF009901)
	LogUserAction("Fine-Tuning Job Retrieved sub started. Job ID = " & jobId)
    
	'Change the button state to indicate activation
	btn.Text = "Activated"
	btn.Enabled = False
	'CSSUtils.SetBackgroundColor(btn, fx.Colors.From32Bit(0xFFFAFF00)) 'Optional styling

	'Deactivate other buttons
	For Each b As Button In activeButtons
		If b <> btn Then
			b.Text = "Retrieve"  'Reset text for other buttons
			b.Enabled = True      'Enable the other buttons
		End If
	Next

	activeButtons.Clear()
	activeButtons.Add(btn)

	ShowTable("Fine-Tuning Job Details") ' Call to show the Fine-Tuning Job Details table

	'Call the method to retrieve the fine-tuning job
	OpAI.RetrieveFineTuningJob(jobId)

	LogColor("Sub btnRetrieveFineTuningJob_MouseClick finished", 0xFFFF7100)
End Sub

Private Sub ParseRetrievedFineTuningJob(response As String) 'Parse the fine-tuning job JSON.
	LogColor("Sub ParseRetrievedFineTuningJob started", 0xFF009901)
	LogUserAction("Parse Retrieved Fine-Tuning Job sub started.")

	Dim Parser As JSONParser
	Parser.Initialize(response)
	Dim jobDetails As Map = Parser.NextObject 'Parse the JSON response into a map

	'Extract relevant fields from the jobDetails map
	Dim jobId As String = jobDetails.Get("id")
	Dim model As String = jobDetails.Get("model")
	Dim createdAt As String = jobDetails.Get("created_at")
	Dim finishedAt As String = jobDetails.Get("finished_at")
	Dim fineTunedModel As String = jobDetails.Get("fine_tuned_model")
	Dim organizationId As String = jobDetails.Get("organization_id")
	Dim resultFiles As List = jobDetails.Get("result_files") 'This might be a list of IDs
	Dim status As String = jobDetails.Get("status")
	Dim trainingFile As String = jobDetails.Get("training_file")

	'Convert timestamps to readable formats
	Dim createdDateFormatted As String = ConvertUnixTimestampToReadableDate(createdAt)
	Dim finishedDateFormatted As String = IIf(finishedAt <> "null", ConvertUnixTimestampToReadableDate(finishedAt), "N/A")

	'Create rows to add to the table for each piece of information
	Dim row() As Object = CreateFineTuningJobRow(Array As String("Job ID:", jobId))
	tableView.Items.Add(row)
    
	row = CreateFineTuningJobRow(Array As String("Model:", model))
	tableView.Items.Add(row)
    
	row = CreateFineTuningJobRow(Array As String("Created At:", createdDateFormatted))
	tableView.Items.Add(row)
    
	row = CreateFineTuningJobRow(Array As String("Finished At:", finishedDateFormatted))
	tableView.Items.Add(row)
    
	row = CreateFineTuningJobRow(Array As String("Fine-Tuned Model:", fineTunedModel))
	tableView.Items.Add(row)
    
	row = CreateFineTuningJobRow(Array As String("Organization ID:", organizationId))
	tableView.Items.Add(row)
    
	'Convert list of resultFiles to a comma-separated string
	Dim resultFilesString As String = ""  'Initialize an empty string
	If resultFiles.Size > 0 Then
		For Each filename As String In resultFiles
			resultFilesString = resultFilesString & ", " &filename
		Next
	End If

	'Create and populate table row
	Dim row() As Object = CreateFineTuningJobRow(Array As String(resultFilesString))
	tableView.Items.Add(row)
    
	row = CreateFineTuningJobRow(Array As String("Status:", status))
	tableView.Items.Add(row)
    
	row = CreateFineTuningJobRow(Array As String("Training File:", trainingFile))
	tableView.Items.Add(row)

	LogColor("Sub ParseRetrievedFineTuningJob finished", 0xFFFF7100)
End Sub

Private Sub CreateFineTuningJobRow(Row() As String) As Object()
	LogColor("Sub CreateFineTuningJobRow started", 0xFF009901)

	Dim labels(Row.Length) As Object  'Define space for each label

	For i = 0 To Row.Length - 1
		Dim lbl As Label
		lbl.Initialize("")
		lbl.Text = Row(i)
		labels(i) = lbl
	Next

	LogColor("Sub CreateFineTuningJobRow finished", 0xFFFF7100)
	Return labels
End Sub

Private Sub btnCancelFineTuningJob_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnCancelFineTuningJob_MouseClicked started", 0xFF009901)
	Dim btn As Button = Sender
	Dim jobId As String = btn.Tag
	Log("Canceling Fine-Tuning Job ID: " & jobId)
    
	'Call your canceling method here
	 OpAI.CancelFineTuningJob(jobId)
    
	LogColor("Sub btnCancelFineTuningJob_MouseClicked finished", 0xFFFF7100)
End Sub

'FINE TUNING EVENTS

Sub btnListFineTuningEventList_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnListFineTuningEventList_MouseClicked started", 0xFF009901)
	Log("Cancelling Run...")
	Dim btn As Button = Sender
	Dim FineTuningJobID As String = btn.Tag
	Log("FineTuningJobID: " & FineTuningJobID)
	 
	LogUserAction("Cancel Fine Tuning Job button clicked. RunID = " & FineTuningJobID)

	'Change button text to "Retrieved"
	btn.Text = "Retrieved"
	btn.Enabled = False 'Disable the Retrieved button
	'CSSUtils.SetBackgroundColor(btn,fx.Colors.From32Bit(0xFFFAFF00)) 'Optionally add some style.
	
	'Deactivate all other buttons
	For Each b As Button In activeButtons
		If b <> btn Then
			b.Text = "Retrieved"  'Change text back to "Retrieve"
			b.Enabled = True  'Enable it again
		End If
	Next

	'Clear the list and add the currently Retrieved button
	activeButtons.Clear
	activeButtons.Add(btn)

	LogUserAction("List Fine-Tuning Jobs started.")

	ShowTable("Fine-Tuning Events List") ' Call to show the fine-tuning events list table

	'Call to list fine-tuning jobs with parameters
	Dim limit As String = "100"  'Optional limit parameter
	Dim after As String = ""       'Optional after parameter
    
	'Call the method to list fine-tuning jobs
	OpAI.ListFineTuningEvents(FineTuningJobID, limit, after)
	
	LogColor("Sub btnListFineTuningEventList_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub ParseFineTuningEvents(response As String)
	LogColor("Sub ParseFineTuningEvents started", 0xFF009901)
	LogUserAction("Parse Fine Tuning Events started.")
	Dim parser As JSONParser
	parser.Initialize(response)
	Dim jRoot As Map = parser.NextObject
	Dim data As List = jRoot.Get("data")
	For Each coldata As Map In data
		Dim data1 As String = coldata.Get("data")
		Dim level As String = coldata.Get("level")
		Dim created_at As String = coldata.Get("created_at")
		Dim id As String = coldata.Get("id")
		Dim message As String = coldata.Get("message")
		Dim Type1 As String = coldata.Get("type")
		Dim object1 As String = coldata.Get("object")
	
		If created_at <> "null" Then
			'Convert Unix timestamp to a readable date format
			Dim dateCreated As String = ConvertUnixTimestampToReadableDate(created_at)
		End If
		
		'Create new row using a sub similar to CreateRunListRow
		Dim row() As Object = Array As Object(id, data1, level, dateCreated, message,Type1, object1)
		tableView.Items.Add(row)
	Next
	Dim has_more As String = jRoot.Get("has_more")
	Dim object1 As String = jRoot.Get("object")
	
	If has_more = "true" Then
		xui.MsgboxAsync("There is more to see of Fine Tuning Events List","Has_more")
	End If

	lblTableStatus.Text  = "Fine Tuning Events List Complete."
	lblTableStatus.Style = "-fx-background-color: white;" 'Optional styling
	
	LogColor("Sub ParseFineTuningEvents finished", 0xFFFF7100)
End Sub

'MODELS
'The data for the models spreadsheet is from:
'https://platform.openai.com/docs/models
'https://openai.com/api/pricing/
'https://platform.openai.com/docs/guides/rate-limits
'https://help.openai.com/en/articles/9824962-openai-o1-preview-and-o1-mini-usage-limits-on-chatgpt-and-the-api

Private Sub btnSelectTTSModel_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnSelectTTSModel_MouseClicked started", 0xFF009901)
	'Specify which button was clicked that can call the model list:
	btnSelectTTSModel.Tag = True
	btnSelectImageModel.Tag = False
	btnSelectAssistantModel.tag = False
	btnSelectChatModel.Tag = False
	btnListModels.Tag = False
	
	lblSpeechCost.Text = ""
	ListModels
	LogColor("Sub btnSelectTTSModel_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnSelectImageModel_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnSelectImageModel_MouseClicked started", 0xFF009901)
	'Specify which button was clicked that can call the model list:
	btnSelectImageModel.Tag = True
	btnSelectTTSModel.Tag = False
	btnSelectAssistantModel.tag = False
	btnSelectChatModel.Tag = False
	btnListModels.Tag = False
	
	lblImageCost.Text = ""

	ListModels
	LogColor("Sub btnSelectImageModel_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnSelectAssistantModel_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnSelectAssistantModel_MouseClicked started", 0xFF009901)
	'Specify which button was clicked that can call the model list:
	btnSelectImageModel.Tag = False
	btnSelectTTSModel.Tag = False
	btnSelectAssistantModel.tag = True
	btnSelectChatModel.Tag = False
	btnListModels.Tag = False
	ListModels
	LogColor("Sub btnSelectAssistantModel_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnSelectChatModel_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnSelectChatModel_MouseClicked started", 0xFF009901)
	'Specify which button was clicked that can call the model list:
	btnSelectImageModel.Tag = False
	btnSelectTTSModel.Tag = False
	btnSelectAssistantModel.tag = False
	btnSelectChatModel.Tag = True
	btnListModels.Tag = False
	ListModels
	LogColor("Sub btnSelectChatModel_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnListModels_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnListModels_MouseClicked started", 0xFF009901)
	JustListModels
	LogColor("Sub btnListModels_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub JustListModels
	LogColor("Sub JustListModels started", 0xFF009901)
	'Specify which button was clicked that can call the model list:
	btnSelectAssistantModel.tag = False
	btnSelectChatModel.Tag = False
	btnListModels.Tag = True
	ListModels
	LogUserAction("List Models started.")
	LogColor("Sub JustListModels finished", 0xFFFF7100)
End Sub

Private Sub ListModels
	LogColor("Sub ListModels started", 0xFF009901)
	
	ShowTable("ListModels") ' Call to show the fine-tuning events list table

	'Define additional parameters for the ListRuns call
	Dim limit As String = "100"  'Set the optional limit parameter
	Dim after As String = ""  'Optional after parameter, can be retrieved from input
	Dim before As String = ""  'Optional before parameter, can be retrieved from input
	Dim order As String = ""  'Optional order parameter, can be retrieved from input

	'Call to parse and display the run list with modified parameters
	OpAI.ListModels
    
	LogColor("Sub ListModels finished", 0xFFFF7100)
End Sub

Private Sub ParseModelList(response As String)
	LogColor("Sub ParseModelList started", 0xFF009901)
	LogUserAction("Parse Model List started.")
	
	Dim OpenAIModelList As List
	OpenAIModelList.Initialize
	
	Dim parser As JSONParser
	parser.Initialize(response)
	Dim jRoot As Map = parser.NextObject
	Dim data As List = jRoot.Get("data")
	For Each coldata As Map In data
		Dim ModelInfo As Model
		ModelInfo.Initialize

		Dim created As String = coldata.Get("created")
		Dim owned_by As String = coldata.Get("owned_by")
		ModelInfo.OwnedBy = owned_by
		Dim id As String = coldata.Get("id")
		ModelInfo.ModelID = id
		'Dim object1 As String = coldata.Get("object")
	
		'Convert Unix timestamp to a readable date format
		Dim dateCreated As String = ConvertUnixTimestampToReadableDate(created)
		ModelInfo.Created = dateCreated
		
		'Dim object2 As String = jRoot.Get("object")
	
		OpenAIModelList.Add(ModelInfo)
		
	Next
	Dim last_id As String = jRoot.Get("last_id")
	Dim has_more As String = jRoot.Get("has_more")
	'Dim object2 As String = jRoot.Get("object")'*

	If has_more = "true" Then
		xui.MsgboxAsync("There is more to see of Run List","Has_more")
	End If

	Dim SpreadsheetModelList As List = ReadModelInfoFromSpreadsheet

	'Compare both model lists to see if any have been added or deleted from OpenAI.  Add or delete from SpreadsheetModel list according.
	'If any changes, copy them from the spreadsheet model list to the spreadsheet.

	Dim FoundItFlag As Boolean = False
	
	'OPENAI MODEL LIST
	'*Check that each model in the OpenAIModelList is found in the SpreadsheetModelList
	Log("OpenAIModelList.Size = " & OpenAIModelList.Size)
	
	For Each modelOAI As Model In OpenAIModelList
		Log("OpenAI Model ID = " & modelOAI.ModelID)
		FoundItFlag = False
		
		For Each modelXLSX As Model In SpreadsheetModelList
			If modelXLSX.ModelID = modelOAI.ModelID Then
				FoundItFlag = True
				modelXLSX.OwnedBy = modelOAI.OwnedBy 'Add the model owner to the SpreadsheetModelList.  This way if it is changed in OpenAI, it will be updated in the spreadsheet.
				'modelXLSX.Created = ConvertUnixTimestampToReadableDate(modelOAI.Created) 'Add the created date to the SpreadsheetModelList.
				modelXLSX.Created = modelOAI.Created 'Add the created date to the SpreadsheetModelList.
				SpreadsheetModelList.Set(SpreadsheetModelList.IndexOf(modelXLSX),modelXLSX) 'Add the modified modelXLSX to the spreadsheet model list.
			End If
		Next
		
		If FoundItFlag = False Then
			'Log("OpenAI model not found in Spreadsheet list: " & modelOAI.ModelID)
			SpreadsheetModelList.Add(modelOAI)
			xui.MsgboxAsync("Added " & modelOAI.ModelID & " to the Spreadsheet","Added model to spreadsheet")
		End If
	Next
	
	'SPREADSHEET MODEL LIST
	'*Check that each model in the SpreadsheetModelList is found in the OpenAIModelList
	Log("SpreadsheetModelList.Size = " & SpreadsheetModelList.Size)
	For Each modelXLSX As Model In SpreadsheetModelList
		'Log("Spreadsheet Model ID = " & modelXLSX.ModelID)
		FoundItFlag = False
		For Each modelOAI As Model In OpenAIModelList
			If modelOAI.ModelID = modelXLSX.ModelID Then
				FoundItFlag = True
			End If
		Next
		
		If FoundItFlag = False Then
			Log("Spreadsheet model not found in OpenAI list: " & modelXLSX.ModelID)
			SpreadsheetModelList.RemoveAt(SpreadsheetModelList.IndexOf(modelXLSX)) 'Delete this one from the SpreadsheetModelList
		End If
	Next
	
	'Write spreadsheet model list to spreadsheet.
	WriteModelInfoToSpreadsheet(SpreadsheetModelList)

	'Then build the table from the contents of the spreadsheet model list.
	' Add loop to get all the spreadsheet model list and put it in the table.
	For Each model As Model In SpreadsheetModelList
		'Log("Model.Assistant = " & model.Assistant)
		'Log("Model.chat = " & model.chat)
		'Log("Model.images = " & model.images)
		'Log("**")
		
		'Select which models to display based on what the model is being used for
		If btnSelectAssistantModel.tag = True Then
			If model.Assistant = 1 Then
				Dim row() As Object = CreateModelListRow(SpreadsheetModelList, Array As String(model.ModelID,	model.Created, model.OwnedBy, model.MaxInputTokens, model.MaxOutputTokens, model.TrainingDate, model.PriceInput, model.PriceOutput, model.FTPriceInput, model.FTPriceOutput, model.FTPriceTraining, model.PriceAudioInput, model.PriceAudioOutput, model.TokenLimitPerMinute, model.TokenLimitRequestsPerMinute, model.TokenLimitRequestsPerDay, model.BatchQueueLimitTPD, model.OtherLimits, model.Description))
				' Add the row to the TableView
				tableView.Items.Add(row)
			End If
		End If
		
		If btnSelectChatModel.Tag = True Then
			If model.chat = 1 Then
				Dim row() As Object = CreateModelListRow(SpreadsheetModelList, Array As String(model.ModelID,	model.Created, model.OwnedBy, model.MaxInputTokens, model.MaxOutputTokens, model.TrainingDate, model.PriceInput, model.PriceOutput, model.FTPriceInput, model.FTPriceOutput, model.FTPriceTraining, model.PriceAudioInput, model.PriceAudioOutput, model.TokenLimitPerMinute, model.TokenLimitRequestsPerMinute, model.TokenLimitRequestsPerDay, model.BatchQueueLimitTPD, model.OtherLimits, model.Description))
				' Add the row to the TableView
				tableView.Items.Add(row)
			End If
		End If
		
		If btnListModels.Tag = True Then
			Dim row() As Object = CreateModelListRow(SpreadsheetModelList, Array As String(model.ModelID,	model.Created, model.OwnedBy, model.MaxInputTokens, model.MaxOutputTokens, model.TrainingDate, model.PriceInput, model.PriceOutput, model.FTPriceInput, model.FTPriceOutput, model.FTPriceTraining, model.PriceAudioInput, model.PriceAudioOutput, model.TokenLimitPerMinute, model.TokenLimitRequestsPerMinute, model.TokenLimitRequestsPerDay, model.BatchQueueLimitTPD, model.OtherLimits, model.Description))
			' Add the row to the TableView
			tableView.Items.Add(row)
		End If
		
		If btnSelectTTSModel.Tag = True Then
			If model.speech = 1 Then
				Dim row() As Object = CreateModelListRow(SpreadsheetModelList, Array As String(model.ModelID,	model.Created, model.OwnedBy, model.MaxInputTokens, model.MaxOutputTokens, model.TrainingDate, model.PriceInput, model.PriceOutput, model.FTPriceInput, model.FTPriceOutput, model.FTPriceTraining, model.PriceAudioInput, model.PriceAudioOutput, model.TokenLimitPerMinute, model.TokenLimitRequestsPerMinute, model.TokenLimitRequestsPerDay, model.BatchQueueLimitTPD, model.OtherLimits, model.Description))
				' Add the row to the TableView
				tableView.Items.Add(row)
			End If
		End If
	
		If btnSelectImageModel.Tag = True Then
			If model.images = 1 Then
				Dim row() As Object = CreateModelListRow(SpreadsheetModelList, Array As String(model.ModelID,	model.Created, model.OwnedBy, model.MaxInputTokens, model.MaxOutputTokens, model.TrainingDate, model.PriceInput, model.PriceOutput, model.FTPriceInput, model.FTPriceOutput, model.FTPriceTraining, model.PriceAudioInput, model.PriceAudioOutput, model.TokenLimitPerMinute, model.TokenLimitRequestsPerMinute, model.TokenLimitRequestsPerDay, model.BatchQueueLimitTPD, model.OtherLimits, model.Description))
				' Add the row to the TableView
				tableView.Items.Add(row)
			End If
		End If
	Next
	
	'Then sort the table by the model creation date so the newest model is at the top of the list.
	SortTable(tableView, 1)

	'Select which status message to display
	If btnSelectAssistantModel.tag = True Then lblTableStatus.Text = "Model List Complete.  Select Model for Assistant."
	If btnSelectChatModel.Tag = True Then lblTableStatus.Text = "Model List Complete.  Select Model for Chat."
	If btnListModels.Tag = True Then lblTableStatus.Text  = "Model List Complete.  View Model."
	If btnSelectImageModel.Tag = True Then lblTableStatus.Text = "Model List Complete.  Select Model for Images."
	If btnSelectTTSModel.Tag = True Then lblTableStatus.Text = "Model List Complete.  Select Model for Speech."
	lblTableStatus.Style = "-fx-background-color: white;" 'Optional styling
	
	LogColor("Sub ParseModelList finished", 0xFFFF7100)
End Sub

Private Sub ReadModelInfoFromSpreadsheet As List
	'The purpose of this sub is to put the models from the spreadsheet into a list called SpreadsheetModelList.
	LogColor("Sub ReadModelInfoFromSpreadsheet started", 0xFF009901)
	LogUserAction("ReadModelInfoFromSpreadsheet started")
	Dim XL As XLUtils
	XL.Initialize

	'Define folder and filename
	Dim XLSXFolder As String = DefaultFolder 
	Dim XLSXFileName As String = "Models.xlsx" 'Spreadsheet filename

	'Create workbook and get the sheet
	Dim workbook As XLWorkbookWriter = XL.CreateWriterFromTemplate(XLSXFolder, XLSXFileName)
	Dim sheet As PoiSheet = workbook.PoiWorkbook.GetSheetByName("Sheet1")

	Dim SpreadsheetModelList As List
	SpreadsheetModelList.Initialize
	
'	'As we loop through the spreadhseet, we have to check for deleted models.  The RowNum of the spreadsheet whose model has been deleted will be saved.
'	Dim ListOfRowsWithDeletedModel As List
'	
'	'We will also loop through all the models to see if they are all in the spreadsheet.
'	Dim ModelIndexesFoundInTheSpreadsheet As List

	'Find the row with the FileID and delete it
	Dim RowNum As Int
	Dim NumberOfRows As Int
	NumberOfRows = sheet.LastRowNumber + 1
	LogColor("Number Of Rows In the Spreadsheet = " & NumberOfRows,0xFFFF0000)
	
	'The loop below reads all the models from the spreadsheet and puts them in a list called SpreadsheetModelList
	For RowNum = 1 To NumberOfRows - 1 'Assuming header is in the first row, we start at row 1.  Row 0 contains the header.
		'Note: NumberOfRows is not zero based like RowNum is.  That is why the -1.
		Dim ModelInfo As Model
		ModelInfo.Initialize
		Dim Row As PoiRow = sheet.GetRow(RowNum)

		If Row.GetCell(0).IsInitialized Then
				 
			For Column = 0 To 29 'Loop through the columns in the spreadsheet row.
				If Row.GetCell(Column).IsInitialized Then
							
					'Type Model(ModelID as String, OwnedBy As String, Created As String, Encoding As String, MaxInputTokens As Int, MaxOutputTokens As Int, TrainingDate As String, PriceInput  As String, PriceOutput As String, FTPriceInput As String, FTPriceOutput As String, FTPriceTraining As String, PriceAudioInput As String, PriceAudioOutput As String, TokenLimitPerMinute As Int, TokenLimitRequestsPerMinute As Int, TokenLimitRequestsPerDay As Int, BatchQueueLimitTPD As Int, OtherLimits As String, Description As String)	
					Select Column
						Case 0 'Model ID
							ModelInfo.ModelID = Row.GetCell(Column).Value
						Case 1 'Created
							ModelInfo.Created= Row.GetCell(Column).Value
						Case 2 'Owned By
							ModelInfo.OwnedBy = Row.GetCell(Column).Value
						Case 3 'Encoding
							ModelInfo.Encoding = Row.GetCell(Column).Value
						Case 4 'Max Input Tokens
							ModelInfo.MaxInputTokens = Row.GetCell(Column).Value
						Case 5 'Max Output Tokens
							ModelInfo.MaxOutputTokens = Row.GetCell(Column).Value
						Case 6 'Training Date
							ModelInfo.TrainingDate = Row.GetCell(Column).Value
						Case 7 'Pricing Text - Input (/ M Tokens)
							ModelInfo.PriceInput = Row.GetCell(Column).Value
						Case 8 'Pricing Text - Output  (/ M Tokens)
							ModelInfo.PriceOutput = Row.GetCell(Column).Value
						Case 9 'Fine Tuning Pricing Text - Input (/ M Tokens)
							ModelInfo.FTPriceInput = Row.GetCell(Column).Value
						Case 10 'Fine Tuning Pricing Text - Output  (/ M Tokens)
							ModelInfo.FTPriceOutput = Row.GetCell(Column).Value
						Case 11 'Fine Tuning Fine Tuning Pricing Text Training  (/ M Tokens)
							ModelInfo.FTPriceTraining = Row.GetCell(Column).Value
						Case 12 'Pricing Audio Input
							ModelInfo.PriceAudioInput = Row.GetCell(Column).Value
						Case 13 'Pricing Audio Output
							ModelInfo.PriceAudioOutput = Row.GetCell(Column).Value
						Case 14 'Token Limits TPM
							ModelInfo.TokenLimitPerMinute = Row.GetCell(Column).Value
						Case 15 'Requests per minute
							ModelInfo.TokenLimitRequestsPerMinute = Row.GetCell(Column).Value
						Case 16 'Requests per day
							ModelInfo.TokenLimitRequestsPerDay = Row.GetCell(Column).Value
						Case 17 'Batch Queue Limit TPD
							ModelInfo.BatchQueueLimitTPD = Row.GetCell(Column).Value
						Case 18 'Other limits
							ModelInfo.OtherLimits = Row.GetCell(Column).Value
						Case 19 'Description
							ModelInfo.Description = Row.GetCell(Column).Value
						Case 20 'Assistant
							ModelInfo.Assistant = Row.GetCell(Column).Value
						Case 21 'RetrievalTool
							ModelInfo.RetrievalTool = Row.GetCell(Column).Value
						Case 22 'transcriptions
							ModelInfo.transcriptions = Row.GetCell(Column).Value
						Case 23 'translations
							ModelInfo.translations = Row.GetCell(Column).Value
						Case 24 'speech
							ModelInfo.speech = Row.GetCell(Column).Value
						Case 25 'chat
							ModelInfo.chat = Row.GetCell(Column).Value
						Case 26 'embeddings
							ModelInfo.embeddings = Row.GetCell(Column).Value
						Case 27 'FineTuning
							ModelInfo.FineTuning = Row.GetCell(Column).Value
						Case 28 'images
							ModelInfo.images = Row.GetCell(Column).Value
						Case 29 'realtime
							ModelInfo.realtime = Row.GetCell(Column).Value
							
					End Select
				End If
			Next
			SpreadsheetModelList.Add(ModelInfo)
		End If
	Next
	
	LogColor("Sub ReadModelInfoFromSpreadsheet finished", 0xFFFF7100)
	Return SpreadsheetModelList
End Sub

Private Sub WriteModelInfoToSpreadsheet(SpreadsheetModelList As List)
	LogColor("Sub WriteModelInfoToSpreadsheet started", 0xFF009901)
	LogUserAction("WriteModelInfoToSpreadsheet started.")

	Private XL As XLUtils
	XL.Initialize

	' Define folder and filename
	Dim Folder As String = DefaultFolder
	Dim FileName As String = "Models.xlsx" ' Spreadsheet filename

	Dim Workbook As XLWorkbookWriter = XL.CreateWriterBlank
	Dim sheet1 As XLSheetWriter = Workbook.CreateSheetWriterByName("Sheet1")
	
	Dim RowNum As Byte' = Workbook.PoiWorkbook.GetSheetByName("Sheet1").LastRowNumber + 2
	Log("Heree")
	'The above Row number is 1 because it is being referenced as A,B,C, etc.  It is not zero referenced.
	' Write headers (optional step for clarity)
	sheet1.PutString(XL.AddressOne("A", 1), "ModelID")
	sheet1.PutString(XL.AddressOne("B", 1), "Created")
	sheet1.PutString(XL.AddressOne("C", 1), "Owned By")
	sheet1.PutString(XL.AddressOne("D", 1), "Encoding")
	sheet1.PutString(XL.AddressOne("E", 1), "Max Input Tokens")
	sheet1.PutString(XL.AddressOne("F", 1), "Max Output Tokens")
	sheet1.PutString(XL.AddressOne("G", 1), "Training Date")
	sheet1.PutString(XL.AddressOne("H", 1), "Price Text - Input (/ M Tokens)")
	sheet1.PutString(XL.AddressOne("I", 1), "Price Text - Output  (/ M Tokens)")
	sheet1.PutString(XL.AddressOne("J", 1), "Fine Tuning Price Text - Input (/ M Tokens)")
	sheet1.PutString(XL.AddressOne("K", 1), "Fine Tuning Price Text - Output  (/ M Tokens)")
	sheet1.PutString(XL.AddressOne("L", 1), "Fine Tuning Pricing Text Training  (/ M Tokens)")
	sheet1.PutString(XL.AddressOne("M", 1), "Price Audio Input")
	sheet1.PutString(XL.AddressOne("N", 1), "Price Audio Output")
	sheet1.PutString(XL.AddressOne("O", 1), "Token Limit Per Minute")
	sheet1.PutString(XL.AddressOne("P", 1), "Token Limit Requests Per Minute")
	sheet1.PutString(XL.AddressOne("Q", 1), "Token Limit Requests Per Day")
	sheet1.PutString(XL.AddressOne("R", 1), "Batch Queue Limit TPD")
	sheet1.PutString(XL.AddressOne("S", 1), "Other Limits")
	sheet1.PutString(XL.AddressOne("T", 1), "Description")
	sheet1.PutString(XL.AddressOne("U", 1), "Assistant")
	sheet1.PutString(XL.AddressOne("V", 1), "Retrieval Tool")
	sheet1.PutString(XL.AddressOne("W", 1), "transcriptions")
	sheet1.PutString(XL.AddressOne("X", 1), "translations")
	sheet1.PutString(XL.AddressOne("Y", 1), "speech")
	sheet1.PutString(XL.AddressOne("Z", 1), "chat")
	sheet1.PutString(XL.AddressOne("AA", 1), "embeddings")
	sheet1.PutString(XL.AddressOne("AB", 1), "Fine-Tuning")
	sheet1.PutString(XL.AddressOne("AC", 1), "images")
	sheet1.PutString(XL.AddressOne("AD", 1), "realtime")
	
	'The above Row number is 1 because it is being referenced as A,B,C, etc.
	' Go through each model in the SpreadsheetModelList and write to the spreadsheet
	RowNum = 2 'Assuming header is in the first row, we start at row 1.  Row 0 contains the header.
	'Note: NumberOfRows is not zero based like RowNum is.  That is why the -1.
	
	For Each model As Model In SpreadsheetModelList
		'Log("A= " & model.ModelID)
		sheet1.PutString(XL.AddressOne("A", RowNum), model.ModelID)
		'Log("B= " & model.Created)
		sheet1.PutString(XL.AddressOne("B", RowNum), model.Created)
		'Log("C= " & model.OwnedBy)
		sheet1.PutString(XL.AddressOne("C", RowNum), model.OwnedBy)
		'Log("D= " & model.Encoding)
		sheet1.PutString(XL.AddressOne("D", RowNum), model.Encoding)
		'Log("E= " & model.MaxInputTokens)
		sheet1.PutString(XL.AddressOne("E", RowNum), model.MaxInputTokens)
		'Log("F= " & model.MaxOutputTokens)
		sheet1.PutString(XL.AddressOne("F", RowNum), model.MaxOutputTokens)
		'Log("G= " & model.TrainingDate)
		sheet1.PutString(XL.AddressOne("G", RowNum), model.TrainingDate)
		'Log("H= " & model.priceinput)
		sheet1.PutString(XL.AddressOne("H", RowNum), model.PriceInput)
		'Log("I= " & model.PriceOutput)
		sheet1.PutString(XL.AddressOne("I", RowNum), model.PriceOutput)
		'Log("J= " & model.FTPriceInput)
		sheet1.PutString(XL.AddressOne("J", RowNum), model.FTPriceInput)
		'Log("K= " & model.FTPriceOutput)
		sheet1.PutString(XL.AddressOne("K", RowNum), model.FTPriceOutput)
		'Log("L= " & model.FTPriceTraining)
		sheet1.PutString(XL.AddressOne("L", RowNum), model.FTPriceTraining)
		'Log("M= " & model.PriceAudioInput)
		sheet1.PutString(XL.AddressOne("M", RowNum), model.PriceAudioInput)
		'Log("N= " & model.PriceAudioOutput)
		sheet1.PutString(XL.AddressOne("N", RowNum), model.PriceAudioOutput)
		'Log("O= " & model.TokenLimitPerMinute)
		sheet1.PutString(XL.AddressOne("O", RowNum), model.TokenLimitPerMinute)
		'Log("P= " & model.TokenLimitRequestsPerMinute)
		sheet1.PutString(XL.AddressOne("P", RowNum), model.TokenLimitRequestsPerMinute)
		'Log("Q= " & model.TokenLimitRequestsPerDay)
		sheet1.PutString(XL.AddressOne("Q", RowNum), model.TokenLimitRequestsPerDay)
		'Log("R= " & model.BatchQueueLimitTPD)
		sheet1.PutString(XL.AddressOne("R", RowNum), model.BatchQueueLimitTPD)
		'Log("S= " & model.OtherLimits)
		sheet1.PutString(XL.AddressOne("S", RowNum), model.OtherLimits)
		'Log("T= " & model.Description)
		sheet1.PutString(XL.AddressOne("T", RowNum), model.Description)
		'Log("U= " & model.Assistant)
		sheet1.PutString(XL.AddressOne("U", RowNum), model.Assistant)
		'Log("V= " & model.RetrievalTool)
		sheet1.PutString(XL.AddressOne("V", RowNum), model.RetrievalTool)
		'Log("W= " & model.transcriptions)
		sheet1.PutString(XL.AddressOne("W", RowNum), model.transcriptions)
		'Log("X= " & model.translations)
		sheet1.PutString(XL.AddressOne("X", RowNum), model.translations)
		'Log("Y= " & model.speech)
		sheet1.PutString(XL.AddressOne("Y", RowNum), model.speech)
		'Log("Z= " & model.chat)
		sheet1.PutString(XL.AddressOne("Z", RowNum), model.chat)
		'Log("AA= " & model.embeddings)
		sheet1.PutString(XL.AddressOne("AA", RowNum), model.embeddings)
		'Log("AB= " & model.FineTuning)
		sheet1.PutString(XL.AddressOne("AB", RowNum), model.FineTuning)
		'Log("AC= " & model.images)
		sheet1.PutString(XL.AddressOne("AC", RowNum), model.images)
		'Log("AD= " & model.realtime)
		sheet1.PutString(XL.AddressOne("AD", RowNum), model.realtime)
		
		RowNum = RowNum + 1
	Next

	' Save the workbook
	Dim f As String = Workbook.SaveAs(Folder, FileName, True)
	'Wait For (XL.OpenExcel(f)) Complete (Success As Boolean)
	LogColor("Spreadsheet saved as: " & f, 0xFF009901)

	LogColor("Sub WriteModelInfoToSpreadsheet finished", 0xFFFF7100)
End Sub

Sub SortTable(tv As TableView, ColumnIndex As Int)
	LogColor("Sub SortTable started", 0xFF009901)
	
	Dim list1 As List
	list1.Initialize

	'Add items to the list from TableView
	For Each row() As Object In tv.Items
		Dim th As TableHelper
		th.SortColumn = GetSortColumnValue(row(ColumnIndex)) 'Extract value properly
		th.TableRow = row
		list1.Add(th)
	Next

	'Manual sorting using Bubble Sort
	Dim sortedList As List
	sortedList.Initialize

	'Populate sortedList with the original items
	For Each th As TableHelper In list1
		sortedList.Add(th)
	Next

	'Bubble sort logic
	Dim needSwap As Boolean = True
	Do While needSwap
		needSwap = False
		For j = 0 To sortedList.Size - 2
			Dim leftTH As TableHelper = sortedList.Get(j)
			Dim rightTH As TableHelper = sortedList.Get(j + 1)

			'Compare SortColumn values as numbers
			Dim leftValue As String = leftTH.SortColumn
			Dim rightValue As String = rightTH.SortColumn

			'Valid string comparison
			If leftValue <> Null And rightValue <> Null Then
				Dim leftNum As Long = ParseDateStringToNumber(leftValue)
				Dim rightNum As Long = ParseDateStringToNumber(rightValue)

				If leftNum < rightNum Then 'Ascending order
					'Swap items if they are in the wrong order
					Dim temp As TableHelper = leftTH
					sortedList.Set(j, rightTH)
					sortedList.Set(j + 1, temp)
					needSwap = True
				End If
			End If
		Next
	Loop

	tv.Items.Clear
	For Each th As TableHelper In sortedList
		'Put back the original format in the table
		tv.Items.Add(th.TableRow)
	Next
	LogColor("Sub SortTable finished", 0xFFFF7100)
End Sub

'Function to extract the appropriate value for sorting
Sub GetSortColumnValue(value As Object) As String
	LogColor("Sub GetSortColumnValue started", 0xFF009901)
	If value Is String Then
		'Log("Sort1")
		'LogColor("Sub GetSortColumnValue finished", 0xFFFF7100)
		Return value
	Else If value Is Label Then 'Check if it is a Label
		'Log("Sort2")
		Dim lbl As Label
		lbl = value 'Assign the Label
		'LogColor("Sub GetSortColumnValue finished", 0xFFFF7100)
		Return lbl.Text 'Return the text of the Label
	Else If IsNumber(value) Then 'Add any necessary handling for numeric values if needed
		'Log("Sort3")
		'LogColor("Sub GetSortColumnValue finished", 0xFFFF7100)
		Return value 'Convert number to string if needed
	End If
	LogColor("Sub GetSortColumnValue finished", 0xFFFF7100)
	Return "" 'Default to empty if not a recognized type
End Sub

'Function to parse the date string into a sortable Long value
Sub ParseDateStringToNumber(dateString As String) As Long
	LogColor("Sub ParseDateStringToNumber started", 0xFF009901)
	'Log("dateString = " & dateString)
	If IsNumber(dateString) Then dateString = ConvertUnixTimestampToReadableDate(dateString)
	
	'Example format: "2023-04-19 03:49:11 PM"
	Dim parts() As String = Regex.Split(" ", dateString)
	'Log("Parts Length = " & parts.Length)
	Dim datePart As String = parts(0) '"2023-04-19"
	'Log("Date part = " & datePart)
	Dim timePart As String = parts(1)'"03:49:11"
	'Log("Time Part = " & timePart)
	Dim AMPM As String = parts(2) '"PM"
	'Log("AMPM = " & AMPM)
		
	Dim dateComponents() As String = Regex.Split("-", datePart)
	Dim year As Int = dateComponents(0)
	Dim month As Int = dateComponents(1)
	Dim day As Int = dateComponents(2)

	Dim timeComponents() As String = Regex.Split(":", timePart)
	Dim hour As Int = timeComponents(0)
	Dim minute As Int = timeComponents(1)
	Dim second As Int = timeComponents(2)

	'Convert hour to 24-hour format
	If AMPM.ToUpperCase = "PM" And hour < 12 Then
		hour = hour + 12
	Else If AMPM.ToUpperCase = "AM" And hour = 12 Then
		hour = 0
	End If

	'Create a long number in the format YYYYMMDDHHMMSS
	Dim sortableNumber As Long = year * 10000000000 + month * 100000000 + day * 1000000 + hour * 10000 + minute * 100 + second
	LogColor("Sub ParseDateStringToNumber finished", 0xFFFF7100)
	Return sortableNumber
End Sub

Private Sub CreateModelListRow(SpreadSheetList As List, Row() As String) As Object()
	LogColor("Sub CreateModelListRow started", 0xFF009901)
	LogUserAction("Create Model ListRow Row started.")
	Dim labels(Row.Length + 2) As Object 'Add space for the buttons
	'Log("Row.Length = " & Row.Length)

	For i = 0 To Row.Length - 1
		Dim lbl As Label
		lbl.Initialize("")
		lbl.Text = Row(i)
		Dim CharactersPerLine As Double = Floor(tableView.GetColumnWidth(i) * .1)  '800 pixels fits 140 characters.  So 140 / 800 is .175 characters per pixel.
		Dim RowsOfTextRequired As Float = lbl.Text.Length / CharactersPerLine
		Dim IntRows As Double = Ceil(RowsOfTextRequired)
		lbl.WrapText = True
		lbl.PrefHeight = IntRows * 15
		labels(i) = lbl
	Next

	'Add Retrieve Model button
	Dim btnRetrieveModel As Button
	btnRetrieveModel.Initialize("btnRetrieveModel")
	btnRetrieveModel.Text = "Retrieve"
	btnRetrieveModel.Tag = Row(0) 'Assuming the ModelID is at index 0
	For Each model As Model In SpreadSheetList
		If model.ModelID = Row(0) Then
			btnRetrieveModel.Id = model.Encoding
			Exit
		End If
	Next

	labels(Row.Length) = btnRetrieveModel

	'Check ownership to determine if the delete button should be shown
	Dim owned_by As String = Row(2) 'Assuming owned_by is at index 2
	If owned_by = "system" Or owned_by= "openai-internal"  Or owned_by= "openai"  Then
		Dim lblCannotDelete As Label
		lblCannotDelete.Initialize("")
		lblCannotDelete.Text = "N/A"
		labels(Row.Length + 1) = lblCannotDelete
	Else
		'Add Delete Fine Tuned Model button
		Dim btnDeleteFineTuningModel As Button
		btnDeleteFineTuningModel.Initialize("btnDeleteFineTuningModel")
		btnDeleteFineTuningModel.Text = "Delete"
		btnDeleteFineTuningModel.Tag = Row(0) 'Assuming the ModelID is at index 0
		labels(Row.Length + 2) = btnDeleteFineTuningModel
	End If

	LogColor("Sub CreateModelListRow finished", 0xFFFF7100)
	Return labels
End Sub

Sub btnDeleteFineTunedModel_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnDeleteFineTunedModel_MouseClicked started", 0xFF009901)
	Log("Deleting Fine Tuned Model...")
	Dim btn As Button = Sender
	Dim ModelID As String = btn.Tag
	Log("ModelID: " & ModelID)
	 
	LogUserAction("Delete Fine Tuned Model button clicked. RunID = " & ModelID)

	'Change button text to "Retrieved"
	btn.Text = "Cancelled"
	btn.Enabled = False 'Disable the Retrieved button
	'CSSUtils.SetBackgroundColor(btn,fx.Colors.From32Bit(0xFFFAFF00)) 'Optionally add some style.
	
	'Deactivate all other buttons
	For Each b As Button In activeButtons
		If b <> btn Then
			b.Text = "Cancelled"  'Change text back to "Retrieve"
			b.Enabled = True  'Enable it again
		End If
	Next

	'Clear the list and add the currently Retrieved button
	activeButtons.Clear
	activeButtons.Add(btn)

	OpAI.DeleteFineTunedModel(ModelID)
	
	LogColor("Sub btnDeleteFineTunedModel_MouseClicked finished", 0xFFFF7100)
End Sub

'Retrieve Model.  This selects the retrieved model as the active model.  Sets the encoding and handles the limts for the model.
Sub btnRetrieveModel_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnRetrieveModel_MouseClicked started", 0xFF009901)
	Log("Retrieving Model...")
	Dim btn As Button = Sender
	If btn.Id <> "" Then Encoding = btn.Id
	
	Dim ModelID As String = btn.Tag
	Log("ModelID: " & ModelID)
	 
	LogUserAction("Retrieve Model button clicked. RunID = " & ModelID)

	'Change button text to "Retrieved"
	btn.Text = "Retrieved"
	btn.Enabled = False 'Disable the Retrieved button
	'CSSUtils.SetBackgroundColor(btn,fx.Colors.From32Bit(0xFFFAFF00)) 'Optionally add some style.
	
	'Deactivate all other buttons
	For Each b As Button In activeButtons
		If b <> btn Then
			b.Text = "Retrieved"  'Change text back to "Retrieve"
			b.Enabled = True  'Enable it again
		End If
	Next

	'Clear the list and add the currently Retrieved button
	activeButtons.Clear
	activeButtons.Add(btn)

	'Select which status message to display
	If btnSelectAssistantModel.tag = True Then 
		lblTableStatus.Text = "Assistant Model Selected: " & ModelID
		lblAssistantModel.Text = ModelID
	 End If
	 
	If btnSelectChatModel.Tag = True Then
		lblTableStatus.Text = "Chat Model Selected: " & ModelID
		 lblCurrentChatModel.Text = ModelID
	End If
	
	If btnListModels.Tag = True Then
		 lblTableStatus.Text  = "Model List Complete.  View Model."
		RetrieveModel(ModelID)
	End If

	If btnSelectTTSModel.tag = True Then
		lblTableStatus.Text = "Voice Model Selected: " & ModelID
		lblTTSModel.Text = ModelID
	End If
	
	If btnSelectImageModel.Tag = True Then 
		lblTableStatus.Text = "Image Model Selected: " & ModelID
		lblCurrentImageModel.Text = ModelID
	
		'Set values for comboboxes for image Quality, Resolution and quantity available based on model selected.
		Select ModelID
			Case "dall-e-2"
				cmbImageQuality.Items.Clear
				cmbImageQuality.Visible = False 
				lblSelectImageQuality.Visible = False

				cmbNumberOfImages.Items.Clear
				cmbNumberOfImages.Visible = True
				lblSelectNumberOfImages.Visible = True
				
				cmbImageSize.Items.Clear
				cmbImageSize.Visible = True
				lblSelectImageSize.Visible = True
				
				cmbImageStyle.Items.Clear
				cmbImageStyle.Visible = False
				lblSelectImageStyle.Visible = False
				
				'cmbImageQuality.Items.AddAll(Array As String("standard"))
				cmbNumberOfImages.Items.AddAll(Array As Byte(1,2,3,4,5,6,7,8,9,10))
				cmbImageSize.Items.AddAll(Array As String("1024x1024","512x512","256x256"))
				'cmbImageStyle.Items.AddAll(Array As String("vivid","natural"))

			Case "dall-e-3"
				cmbImageSize.Items.Clear
				cmbImageSize.Visible = True
				lblSelectImageSize.Visible = True

				cmbImageStyle.Items.Clear
				cmbImageStyle.Visible = True
				lblSelectImageStyle.Visible = True
				
				cmbImageQuality.Items.Clear
				cmbImageQuality.Visible = True
				lblSelectImageQuality.Visible = True
				
				cmbNumberOfImages.Items.Clear
				cmbNumberOfImages.Visible = True
				lblSelectNumberOfImages.Visible = True
				
				cmbImageQuality.Items.AddAll(Array As String("standard","hd"))
				cmbImageSize.Items.AddAll(Array As String("1024x1024","1792x1024","1024x1792"))
				cmbNumberOfImages.Items.AddAll(Array As Byte(1))
				cmbNumberOfImages.SelectedIndex = 0
				cmbImageStyle.Items.AddAll(Array As String("vivid","natural"))
		End Select
	End If

	LogColor("Sub btnRetrieveModel_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub CalculateTTSCost 'Image cost is based on which model is being used, image size and image quality.
	LogColor("Sub CalculateTTSCost started", 0xFF009901)
	Select lblTTSModel.Text
		Case "tts-1", "tts-1-1106"
			Dim Cost As Float = txtAIInput.Text.Length / 1000000 * 15
			lblSpeechCost.Text = "$ " & Cost
			
		Case "tts-1-hd", "tts-1-hd-1106"
			Dim Cost As Float = txtAIInput.Text.Length / 1000000 * 30
			lblSpeechCost.Text = "$ " & Cost
	End Select
	LogColor("Sub CalculateTTSCost finished", 0xFFFF7100)
End Sub

Sub RetrieveModel(ModelID As String)
	LogColor("Sub RetrieveModel started", 0xFF009901)
	LogUserAction("Retrieve Model sub started. RunID = " & ModelID)
	Dim btnRetrieveModel As Button = Sender
	Dim ModelID As String = btnRetrieveModel.Tag
	Log("ModelID: " & ModelID)
	
	ShowTable("Retrieve Model") ' Call to show the Retrieve Model table
	
	'I want the model retrieved from the spreadsheet. Retrieving it from online just gives me information I already have and not all the info I need.
	'OpAI.RetrieveModel(ModelID)
	
	ShowModelTableFromSpreadsheet(ModelID)
	
	LogColor("Sub RetrieveModel finished", 0xFFFF7100)
End Sub

Private Sub ShowModelTableFromSpreadsheet(ModelID As String) 'This is the original JSON parsed by Erel's JSON tool.
	LogColor("Sub ShowModelTableFromSpreadsheet started", 0xFF009901)
	LogUserAction("ShowModelTableFromSpreadsheet sub started.")
	
	Dim XL As XLUtils
	XL.Initialize

	'Define folder and filename
	Dim XLSXFolder As String = DefaultFolder 
	Dim XLSXFileName As String = "Models.xlsx" 'Spreadsheet filename

	'Create workbook and get the sheet
	Dim workbook As XLWorkbookWriter = XL.CreateWriterFromTemplate(XLSXFolder, XLSXFileName)
	Dim sheet As PoiSheet = workbook.PoiWorkbook.GetSheetByName("Sheet1")

	'Find the row with the FileID and delete it
	Dim RowNum As Int
	Dim NumberOfRows As Int
	NumberOfRows = sheet.LastRowNumber + 1
	LogColor("Number Of Rows In the Spreadsheet = " & NumberOfRows,0xFFFF0000)
	
	'The loop below is used to find the desired model.
	For RowNum = 1 To NumberOfRows - 1 'Assuming header is in the first row, we start at row 1.  Row 0 contains the header.
		'Note: NumberOfRows is not zero based like RowNum is.  That is why the -1.
		
		Dim ModelInfo As Map
		ModelInfo.Initialize
		Dim Row As PoiRow = sheet.GetRow(RowNum)

		If Row.GetCell(0).IsInitialized Then
			Dim ModelIDFromSpreadsheet As String = Row.GetCell(0).Value 'Model ID is in the first column.
			
			If ModelIDFromSpreadsheet = ModelID Then
				 
				For Column = 0 To 19 'Loop through the columns in the spreadsheet row.
					If Row.GetCell(Column).IsInitialized Then
							
						'Type Model(ModelID as String, OwnedBy As String, Created As String, Encoding As String, MaxInputTokens As Int, MaxOutputTokens As Int, TrainingDate As String, PriceInput  As String, PriceOutput As String, FTPriceInput As String, FTPriceOutput As String, FTPriceTraining As String, PriceAudioInput As String, PriceAudioOutput As String, TokenLimitPerMinute As Int, TokenLimitRequestsPerMinute As Int, TokenLimitRequestsPerDay As Int, BatchQueueLimitTPD As Int, OtherLimits As String, Description As String)
						Select Column
							Case 0 'Model ID
								ModelInfo.Put("ModelID", Row.GetCell(Column).Value)
							Case 1 'Created
								ModelInfo.Put("Created=", Row.GetCell(Column).Value)
							Case 2 'Owned By
								ModelInfo.Put("OwnedBy", Row.GetCell(Column).Value)
							Case 3 'Encoding
								ModelInfo.Put("Encoding", Row.GetCell(Column).Value)
							Case 4 'Max Input Tokens
								ModelInfo.Put("MaxInputTokens", Row.GetCell(Column).Value)
							Case 5 'Max Output Tokens
								ModelInfo.Put("MaxOutputTokens", Row.GetCell(Column).Value)
							Case 6 'Training Date
								ModelInfo.Put("TrainingDate", Row.GetCell(Column).Value)
							Case 7 'Pricing Text - Input (/ M Tokens)
								ModelInfo.Put("PriceInput", Row.GetCell(Column).Value)
							Case 8 'Pricing Text - Output  (/ M Tokens)
								ModelInfo.Put("PriceOutput", Row.GetCell(Column).Value)
							Case 9 'Fine Tuning Pricing Text - Input (/ M Tokens)
								ModelInfo.Put("FTPriceInput", Row.GetCell(Column).Value)
							Case 10 'Fine Tuning Pricing Text - Output  (/ M Tokens)
								ModelInfo.Put("FTPriceOutput", Row.GetCell(Column).Value)
							Case 11 'Fine Tuning Fine Tuning Pricing Text Training  (/ M Tokens)
								ModelInfo.Put("FTPriceTraining", Row.GetCell(Column).Value)
							Case 12 'Pricing Audio Input
								ModelInfo.Put("PriceAudioInput", Row.GetCell(Column).Value)
							Case 13 'Pricing Audio Output
								ModelInfo.Put("PriceAudioOutput", Row.GetCell(Column).Value)
							Case 14 'Token Limits TPM
								ModelInfo.Put("TokenLimitPerMinute", Row.GetCell(Column).Value)
							Case 15 'Requests per minute
								ModelInfo.Put("TokenLimitRequestsPerMinute", Row.GetCell(Column).Value)
							Case 16 'Requests per day
								ModelInfo.Put("TokenLimitRequestsPerDay", Row.GetCell(Column).Value)
							Case 17 'Batch Queue Limit TPD
								ModelInfo.Put("BatchQueueLimitTPD", Row.GetCell(Column).Value)
							Case 18 'Other limits
								ModelInfo.Put("OtherLimits", Row.GetCell(Column).Value)
							Case 19 'Description
								ModelInfo.Put("Description", Row.GetCell(Column).Value)
						End Select
					End If
				Next
				Exit
			End If
		End If
	Next
	
	For Each k As String In ModelInfo.Keys
		Dim v As String = ModelInfo.Get(k)
		Dim Row1() As Object = CreateModelRow(Array As String(k, v))
		tableView.Items.Add(Row1)
	Next

	lblTableStatus.Text = "Model Loaded"
	lblTableStatus.Style = "-fx-background-color: white;" 'Optional styling
	LogColor("Sub ShowModelTableFromSpreadsheet finished", 0xFFFF7100)
End Sub

Private Sub ParseRetrievedModel(response As String) 'This is the original JSON parsed by Erel's JSON tool.
	LogColor("Sub ParseRetrievedModel started", 0xFF009901)
	LogUserAction("ParseRetrieved Model sub started.")
	
	Dim parser As JSONParser
	parser.Initialize(response)
	Dim jRoot As Map = parser.NextObject
	
	'Add a row for each of these:	

	Dim created_at As String = jRoot.Get("created")
	If created_at <> "null" Then
		'Convert Unix timestamp to a readable date format
		Dim dateCreated As String = ConvertUnixTimestampToReadableDate(created_at)
		Dim row() As Object = CreateModelRow(Array As String("Date Created:", dateCreated))
		tableView.Items.Add(row)
	End If
	
	Dim owned_by As String = jRoot.Get("owned_by")
	Dim row() As Object = CreateModelRow(Array As String("Owned:", owned_by))
	tableView.Items.Add(row)
	
	Dim id As String = jRoot.Get("id")
	Dim row() As Object = CreateModelRow(Array As String("Model ID:", id))
	tableView.Items.Add(row)
	
	Dim object1 As String = jRoot.Get("object")
	Dim row() As Object = CreateModelRow(Array As String("Object:", object1))
	tableView.Items.Add(row)

	'Select which text to put in the last row of the table
	Dim ModelAssignment As String
	If btnSelectAssistantModel.tag = True Then 
		ModelAssignment = "This model is selected as the Assistant Model"
		Dim row() As Object = CreateModelRow(Array As String("", ModelAssignment))
		lblAssistantModel.text = id
		tableView.Items.Add(row)
	End If
	
	If btnSelectChatModel.Tag = True Then 
		ModelAssignment = "This model is selected as the Chat Model"
		Dim row() As Object = CreateModelRow(Array As String("", ModelAssignment))
		lblCurrentChatModel.Text = id
		tableView.Items.Add(row)
	End If

	lblTableStatus.Text = "Model Loaded"
	lblTableStatus.Style = "-fx-background-color: white;" 'Optional styling
	Log("here")
	LogColor("Sub ParseRetrievedModel finished", 0xFFFF7100)
End Sub

Private Sub CreateModelRow(Row() As String) As Object()
	LogColor("Sub CreateModelRow started", 0xFF009901)
	LogUserAction("Create Run Row started.")
	Dim labels(Row.Length) As Object 'Add space for the buttons

	For i = 0 To Row.Length - 1
		Dim lbl As Label
		lbl.Initialize("")
		lbl.Text = Row(i)
		Dim CharactersPerLine As Double = Floor(tableView.GetColumnWidth(i) * .1)  '800 pixels fits 140 characters.  So 140 / 800 is .175 characters per pixel.
		Dim RowsOfTextRequired As Float = lbl.Text.Length / CharactersPerLine
		Dim IntRows As Double = Ceil(RowsOfTextRequired)
		lbl.WrapText = True
		lbl.PrefHeight = IntRows * 15
		labels(i) = lbl
	Next
	LogColor("Sub CreateModelRow finished", 0xFFFF7100)
	Return labels
End Sub

'GOOGLE SEARCH TOOL
Private Sub btnGoogle_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnGoogle_MouseClicked started", 0xFF009901)
	
	PaneSetup.Visible = False
	PaneGoogle.Visible = True
	PaneTable.Visible = False
	
	'Dim ps As Screen = fx.PrimaryScreen
	'MainForm.SetWindowSizeLimits(ps.MaxX, ps.MaxY, ps.MaxX, ps.MaxY)
	MainForm.SetWindowSizeLimits(1920,1050, 1920,1050)
	
	SearchResults.Initialize
	InitializeComboBoxes
	LogUserAction("Google button clicked.")
	LogColor("Sub btnGoogle_MouseClicked finished", 0xFFFF7100)
End Sub

Sub InitializeComboBoxes
	LogColor("Sub InitializeComboBoxes started", 0xFF009901)
	'Initialize comboboxes with options for each.
	LogUserAction("Initialize Combo Boxes started.")
	
	cmbc2coffAbbreviations.Initialize
	cmbc2coff.Items.AddAll(Array("Enabled (default)", "Disabled"))
	cmbc2coffAbbreviations.AddAll(Array("0", "1"))
	
	cmbcrAbbreviations.Initialize
	cmbcr.Items.AddAll(Array("Afghanistan","Albania","Algeria","American Samoa","Andorra","Angola","Anguilla","Antarctica","Antigua and Barbuda","Argentina","Armenia","Aruba","Australia","Austria","Azerbaijan","Bahamas","Bahrain","Bangladesh","Barbados","Belarus","Belgium","Belize","Benin","Bermuda","Bhutan","Bolivia","Bosnia and Herzegovina","Botswana","Bouvet Island","Brazil","British Indian Ocean Territory","Brunei Darussalam","Bulgaria","Burkina Faso","Burundi","Cambodia","Cameroon","Canada","Cape Verde","Cayman Islands","Central African Republic","Chad","Chile","China","Christmas Island","Cocos (Keeling) Islands","Colombia","Comoros","Congo","Congo, the Democratic Republic of the","Cook Islands","Costa Rica","Cote D'ivoire","Croatia (Hrvatska)","Cuba","Cyprus","Czech Republic","Denmark","Djibouti","Dominica","Dominican Republic","East Timor","Ecuador","Egypt","El Salvador","Equatorial Guinea","Eritrea","Estonia","Ethiopia","European Union","Falkland Islands (Malvinas)","Faroe Islands","Fiji","Finland","France","France, Metropolitan","French Guiana","French Polynesia","French Southern Territories","Gabon","Gambia","Georgia","Germany","Ghana","Gibraltar","Greece","Greenland","Grenada","Guadeloupe","Guam","Guatemala","Guinea","Guinea-Bissau","Guyana","Haiti","Heard Island and Mcdonald Islands","Holy See (Vatican City State)","Honduras","Hong Kong","Hungary","Iceland","India","Indonesia","Iran, Islamic Republic of","Iraq","Ireland","Israel","Italy","Jamaica","Japan","Jordan","Kazakhstan","Kenya","Kiribati","Korea, Democratic People's Republic of","Korea, Republic of","Kuwait","Kyrgyzstan","Lao People's Democratic Republic","Latvia","Lebanon","Lesotho","Liberia","Libyan Arab Jamahiriya","Liechtenstein","Lithuania","Luxembourg","Macao","Macedonia, the Former Yugosalv Republic of","Madagascar","Malawi","Malaysia","Maldives","Mali","Malta","Marshall Islands","Martinique","Mauritania","Mauritius","Mayotte","Mexico","Micronesia, Federated States of","Moldova, Republic of","Monaco","Mongolia","Montserrat","Morocco","Mozambique","Myanmar","Namibia","Nauru","Nepal","Netherlands","Netherlands Antilles","New Caledonia","New Zealand","Nicaragua","Niger","Nigeria","Niue","Norfolk Island","Northern Mariana Islands","Norway","Oman","Pakistan","Palau","Palestinian Territory","Panama","Papua New Guinea","Paraguay","Peru","Philippines","Pitcairn","Poland","Portugal","Puerto Rico","Qatar","Reunion","Romania","Russian Federation","Rwanda","Saint Helena","Saint Kitts and Nevis","Saint Lucia","Saint Pierre and Miquelon","Saint Vincent and the Grenadines","Samoa","San Marino","Sao Tome and Principe","Saudi Arabia","Senegal","Serbia and Montenegro","Seychelles","Sierra Leone","Singapore","Slovakia","Slovenia","Solomon Islands","Somalia","South Africa","South Georgia and the South Sandwich Islands","Spain","Sri Lanka","Sudan","Suriname","Svalbard and Jan Mayen","Swaziland","Sweden","Switzerland","Syrian Arab Republic","Taiwan, Province of China","Tajikistan","Tanzania, United Republic of","Thailand","Togo","Tokelau","Tonga","Trinidad and Tobago","Tunisia","Turkey","Turkmenistan","Turks and Caicos Islands","Tuvalu","Uganda","Ukraine","United Arab Emirates","United Kingdom","United States","United States Minor Outlying Islands","Uruguay","Uzbekistan","Vanuatu","Venezuela","Vietnam","Virgin Islands, British","Virgin Islands, U.S.","Wallis and Futuna","Western Sahara","Yemen","Yugoslavia","Zambia","Zimbabwe"))
	cmbcrAbbreviations.AddAll(Array("countryAF","countryAL","countryDZ","countryAS","countryAD","countryAO","countryAI","countryAQ","countryAG","countryAR","countryAM","countryAW","countryAU","countryAT","countryAZ","countryBS","countryBH","countryBD","countryBB","countryBY","countryBE","countryBZ","countryBJ","countryBM","countryBT","countryBO","countryBA","countryBW","countryBV","countryBR","countryIO","countryBN","countryBG","countryBF","countryBI","countryKH","countryCM","countryCA","countryCV","countryKY","countryCF","countryTD","countryCL","countryCN","countryCX","countryCC","countryCO","countryKM","countryCG","countryCD","countryCK","countryCR","countryCI","countryHR","countryCU","countryCY","countryCZ","countryDK","countryDJ","countryDM","countryDO","countryTP","countryEC","countryEG","countrySV","countryGQ","countryER","countryEE","countryET","countryEU","countryFK","countryFO","countryFJ","countryFI","countryFR","countryFX","countryGF","countryPF","countryTF","countryGA","countryGM","countryGE","countryDE","countryGH","countryGI","countryGR","countryGL","countryGD","countryGP","countryGU","countryGT","countryGN","countryGW","countryGY","countryHT","countryHM","countryVA","countryHN","countryHK","countryHU","countryIS","countryIN","countryID","countryIR","countryIQ","countryIE","countryIL","countryIT","countryJM","countryJP","countryJO","countryKZ","countryKE","countryKI","countryKP","countryKR","countryKW","countryKG","countryLA","countryLV","countryLB","countryLS","countryLR","countryLY","countryLI","countryLT","countryLU","countryMO","countryMK","countryMG","countryMW","countryMY","countryMV","countryML","countryMT","countryMH","countryMQ","countryMR","countryMU","countryYT","countryMX","countryFM","countryMD","countryMC","countryMN","countryMS","countryMA","countryMZ","countryMM","countryNA","countryNR","countryNP","countryNL","countryAN","countryNC","countryNZ","countryNI","countryNE","countryNG","countryNU","countryNF","countryMP","countryNO","countryOM","countryPK","countryPW","countryPS","countryPA","countryPG","countryPY","countryPE","countryPH","countryPN","countryPL","countryPT","countryPR","countryQA","countryRE","countryRO","countryRU","countryRW","countrySH","countryKN","countryLC","countryPM","countryVC","countryWS","countrySM","countryST","countrySA","countrySN","countryCS","countrySC","countrySL","countrySG","countrySK","countrySI","countrySB","countrySO","countryZA","countryGS","countryES","countryLK","countrySD","countrySR","countrySJ","countrySZ","countrySE","countryCH","countrySY","countryTW","countryTJ","countryTZ","countryTH","countryTG","countryTK","countryTO","countryTT","countryTN","countryTR","countryTM","countryTC","countryTV","countryUG","countryUA","countryAE","countryUK","countryUS","countryUM","countryUY","countryUZ","countryVU","countryVE","countryVN","countryVG","countryVI","countryWF","countryEH","countryYE","countryYU","countryZM","countryZW"))
	
	cmbfilterAbbreviations.Initialize
	cmbfilter.Items.AddAll(Array("Remove Duplicates", "Allow Duplicates"))
	cmbfilterAbbreviations.AddAll(Array("1", "0"))
	
	clbglAbbreviations.Initialize
	cmbgl.Items.AddAll(Array("Afghanistan","Albania","Algeria","American Samoa","Andorra","Angola","Anguilla","Antarctica","Antigua and Barbuda","Argentina","Armenia","Aruba","Australia","Austria","Azerbaijan","Bahamas","Bahrain","Bangladesh","Barbados","Belarus","Belgium","Belize","Benin","Bermuda","Bhutan","Bolivia","Bosnia and Herzegovina","Botswana","Bouvet Island","Brazil","British Indian Ocean Territory","Brunei Darussalam","Bulgaria","Burkina Faso","Burundi","Cambodia","Cameroon","Canada","Cape Verde","Cayman Islands","Central African Republic","Chad","Chile","China","Christmas Island","Cocos (Keeling) Islands","Colombia","Comoros","Congo","Congo, the Democratic Republic of the","Cook Islands","Costa Rica","Cote D'ivoire","Croatia","Cuba","Cyprus","Czech Republic","Denmark","Djibouti","Dominica","Dominican Republic","Ecuador","Egypt","El Salvador","Equatorial Guinea","Eritrea","Estonia","Ethiopia","Falkland Islands (Malvinas)","Faroe Islands","Fiji","Finland","France","French Guiana","French Polynesia","French Southern Territories","Gabon","Gambia","Georgia","Germany","Ghana","Gibraltar","Greece","Greenland","Grenada","Guadeloupe","Guam","Guatemala","Guinea","Guinea-Bissau","Guyana","Haiti","Heard Island and Mcdonald Islands","Holy See (Vatican City State)","Honduras","Hong Kong","Hungary","Iceland","India","Indonesia","Iran, Islamic Republic of","Iraq","Ireland","Israel","Italy","Jamaica","Japan","Jordan","Kazakhstan","Kenya","Kiribati","Korea, Democratic People's Republic of","Korea, Republic of","Kuwait","Kyrgyzstan","Lao People's Democratic Republic","Latvia","Lebanon","Lesotho","Liberia","Libyan Arab Jamahiriya","Liechtenstein","Lithuania","Luxembourg","Macao","Macedonia, the Former Yugosalv Republic of","Madagascar","Malawi","Malaysia","Maldives","Mali","Malta","Marshall Islands","Martinique","Mauritania","Mauritius","Mayotte","Mexico","Micronesia, Federated States of","Moldova, Republic of","Monaco","Mongolia","Montserrat","Morocco","Mozambique","Myanmar","Namibia","Nauru","Nepal","Netherlands","Netherlands Antilles","New Caledonia","New Zealand","Nicaragua","Niger","Nigeria","Niue","Norfolk Island","Northern Mariana Islands","Norway","Oman","Pakistan","Palau","Palestinian Territory, Occupied","Panama","Papua New Guinea","Paraguay","Peru","Philippines","Pitcairn","Poland","Portugal","Puerto Rico","Qatar","Reunion","Romania","Russian Federation","Rwanda","Saint Helena","Saint Kitts and Nevis","Saint Lucia","Saint Pierre and Miquelon","Saint Vincent and the Grenadines","Samoa","San Marino","Sao Tome and Principe","Saudi Arabia","Senegal","Serbia and Montenegro","Seychelles","Sierra Leone","Singapore","Slovakia","Slovenia","Solomon Islands","Somalia","South Africa","South Georgia and the South Sandwich Islands","Spain","Sri Lanka","Sudan","Suriname","Svalbard and Jan Mayen","Swaziland","Sweden","Switzerland","Syrian Arab Republic","Taiwan, Province of China","Tajikistan","Tanzania, United Republic of","Thailand","Timor-Leste","Togo","Tokelau","Tonga","Trinidad and Tobago","Tunisia","Turkey","Turkmenistan","Turks and Caicos Islands","Tuvalu","Uganda","Ukraine","United Arab Emirates","United Kingdom","United States","United States Minor Outlying Islands","Uruguay","Uzbekistan","Vanuatu","Venezuela","Viet Nam","Virgin Islands, British","Virgin Islands, U.S.","Wallis and Futuna","Western Sahara","Yemen","Zambia","Zimbabwe"))
	clbglAbbreviations.AddAll(Array("af","al","dz","as","ad","ao","ai","aq","ag","ar","am","aw","au","at","az","bs","bh","bd","bb","by","be","bz","bj","bm","bt","bo","ba","bw","bv","br","io","bn","bg","bf","bi","kh","cm","ca","cv","ky","cf","td","cl","cn","cx","cc","co","km","cg","cd","ck","cr","ci","hr","cu","cy","cz","dk","dj","dm","do","ec","eg","sv","gq","er","ee","et","fk","fo","fj","fi","fr","gf","pf","tf","ga","gm","ge","de","gh","gi","gr","gl","gd","gp","gu","gt","gn","gw","gy","ht","hm","va","hn","hk","hu","is","in","id","ir","iq","ie","il","it","jm","jp","jo","kz","ke","ki","kp","kr","kw","kg","la","lv","lb","ls","lr","ly","li","lt","lu","mo","mk","mg","mw","my","mv","ml","mt","mh","mq","mr","mu","yt","mx","fm","md","mc","mn","ms","ma","mz","mm","na","nr","np","nl","an","nc","nz","ni","ne","ng","nu","nf","mp","no","om","pk","pw","ps","pa","pg","py","pe","ph","pn","pl","pt","pr","qa","re","ro","ru","rw","sh","kn","lc","pm","vc","ws","sm","st","sa","sn","cs","sc","sl","sg","sk","si","sb","so","za","gs","es","lk","sd","sr","sj","sz","se","ch","sy","tw","tj","tz","th","tl","tg","tk","to","tt","tn","tr","tm","tc","tv","ug","ua","ae","uk","us","um","uy","uz","vu","ve","vn","vg","vi","wf","eh","ye","zm","zw"))

	cmbimgColorTypeAbbreviations.Initialize
	cmbimgColorType.Items.AddAll(Array("color", "grayscale", "mono: black and white", "trans: transparent background"))
	cmbimgColorTypeAbbreviations.AddAll(Array("color", "gray", "mono", "trans"))

	cmblrAbbreviations.Initialize
	cmblr.Items.AddAll(Array("Arabic"," Bulgarian"," Catalan"," Chinese (Simplified)"," Chinese (Traditional)"," Croatian"," Czech"," Danish"," Dutch"," English"," Estonian"," Finnish"," French"," German"," Greek"," Hebrew"," Hungarian"," Icelandic"," Indonesian"," Italian"," Japanese"," Korean"," Latvian"," Lithuanian"," Norwegian"," Polish"," Portuguese"," Romanian"," Russian"," Serbian"," Slovak"," Slovenian"," Spanish"," Swedish"," Turkish"))
	cmblrAbbreviations.AddAll(Array("lang_ar","lang_bg","lang_ca","lang_zh-CN","lang_zh-TW","lang_hr","lang_cs","lang_da","lang_nl","lang_en","lang_et","lang_fi","lang_fr","lang_de","lang_el","lang_iw","lang_hu","lang_is","lang_id","lang_it","lang_ja","lang_ko","lang_lv","lang_lt","lang_no","lang_pl","lang_pt","lang_ro","lang_ru","lang_sr","lang_sk","lang_sl","lang_es","lang_sv","lang_tr"))
	
	cmbsiteSearchFilterAbbreviations.Initialize
	cmbsiteSearchFilter.Items.AddAll(Array("Include", "Exclude"))
	cmbsiteSearchFilterAbbreviations.Addall(Array("i","e"))

	cmbsearchTypeAbbreviations.Initialize
	cmbsearchType.Items.AddAll(Array("Normal Search", "Image Search"))
	cmbsearchTypeAbbreviations.AddAll(Array("", "image"))
	
	cmbdateRestrictAbbreviations.Initialize
	cmbdateRestrict.Items.AddAll(Array("Days","Weeks","Month","Years")) 'Days, Weeks, Months, Years
	cmbdateRestrictAbbreviations.AddAll(Array("d", "w", "m", "y"))
	
	cmbhlAbbreviations.Initialize
	cmbhl.Items.AddAll(Array("Afrikaans","Albanian","Amharic","Arabic","Azerbaijani","Basque","Belarusian","Bengali","Bihari","Bosnian","Bulgarian","Catalan","Chinese (Simplified)","Chinese (Traditional)","Croatian","Czech","Danish","Dutch","English","Esperanto","Estonian","Faroese","Finnish","French","Frisian","Galician","Georgian","German","Greek","Gujarati","Hebrew","Hindi","Hungarian","Icelandic","Indonesian","Interlingua","Irish","Italian","Japanese","Javanese","Kannada","Korean","Latin","Latvian","Lithuanian","Macedonian","Malay","Malayam","Maltese","Marathi","Nepali","Norwegian","Norwegian (Nynorsk)","Occitan","Persian","Polish","Portuguese (Brazil)","Portuguese (Portugal)","Punjabi","Romanian","Russian","Scots Gaelic","Serbian","Sinhalese","Slovak","Slovenian","Spanish","Sudanese","Swahili","Swedish","Tagalog","Tamil","Telugu","Thai","Tigrinya","Turkish","Ukrainian","Urdu","Uzbek","Vietnamese","Welsh","Xhosa","Zulu"))
	cmbhlAbbreviations.AddAll(Array("af","sq","sm","ar","az","eu","be","bn","bh","bs","bg","ca","zh-CN","zh-TW","hr","cs","da","nl","en","eo","et","fo","fi","fr","fy","gl","ka","de","el","gu","iw","hi","hu","is","id","ia","ga","it","ja","jw","kn","ko","la","lv","lt","mk","ms","ml","mt","mr","ne","no","nn","oc","fa","pl","pt-BR","pt-PT","pa","ro","ru","gd","sr","si","sk","sl","es","su","sw","sv","tl","ta","te","th","ti","tr","uk","ur","uz","vi","cy","xh","zu"))

	cmbfileTypeAbbreviations.Initialize
	cmbfileType.Items.AddAll(Array("Adobe Portable Document Format (.pdf)","Adobe PostScript (.ps)","Comma-Separated Values (.csv)","Electronic Publication (.epub)","Google Earth (.kml, .kmz)","GPS eXchange Format (.gpx)","Hancom Hanword (.h)","HTML (.htm, .html)","Microsoft Excel (.xls, .xlsx)","Microsoft PowerPoint (.ppt, .pptx)","Microsoft Word (.doc, .docx)","OpenOffice presentation (.odp)","OpenOffice spreadsheet (.ods)","OpenOffice text (.odt)","Rich Text Format (.rtf)","Scalable Vector Graphics (.svg)","TeX/LaTeX (.tex)","Text (.txt, .text)","Basic source code (.bas)","C/C++ source code (.c, .cc, .cpp, .cxx, .h, .hpp)","C# source code (.cs)","Java source code (.java)","Perl source code (.pl)","Python source code (.py)","Wireless Markup Language (.wml, .wap)","XML (.xml)"))
	cmbfileTypeAbbreviations.AddAll(Array(".pdf",".ps",".csv",".epub",".kml, .kmz",".gpx",".hwp",".htm, .html",".xls, .xlsx",".ppt, .pptx",".doc, .docx",".odp",".ods",".odt",".rtf",".svg",".tex",".txt, .text",".bas",".c, .cc, .cpp, .cxx, .h, .hpp",".cs",".java",".pl",".py",".wml, .wap",".xml"))
	'Supported File Types: https://developers.google.com/search/docs/crawling-indexing/indexable-file-types?visit_id=638602063170612119-29538758&rd=1
	
	cmbgooglehost.Items.AddAll(Array("google.com", "google.co.uk", "google.ca", "google.com.au", "google.co.in"))
	cmbsafe.Items.AddAll(Array("active", "off"))
	cmbimgDominantColor.Items.AddAll(Array("black", "blue", "brown", "gray", "green", "orange", "pink", "purple", "red", "teal", "white", "yellow"))
	cmbimgSize.Items.AddAll(Array("icon",  "small", "medium", "large", "xlarge", "xxlarge", "huge"))
	cmbimgType.Items.AddAll(Array("clipart", "face", "lineart", "news", "photo"))
	cmbrights.Items.AddAll(Array("cc_publicdomain", "cc_attribute", "cc_sharealike", "cc_noncommercial", "cc_nonderived"))
	cmbsort.Items.AddAll(Array("date", "relevance"))
	LogColor("Sub InitializeComboBoxes finished", 0xFFFF7100)
End Sub

Sub btnGenerateRequest_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnGenerateRequest_MouseClicked started", 0xFF009901)
	GenerateRequest
	LogColor("Sub btnGenerateRequest_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub GenerateRequest
	LogColor("Sub GenerateRequest started", 0xFF009901)
	'Button click event to assemble the HTTP request
	lblTableStatus.Text = ""
	Dim client As HttpJob
	client.Initialize("googlesearch",Me)
	Dim url As String = "https://www.googleapis.com/customsearch/v1?key=" & GoogleApiKey & "&cx=" & searchEngineId & "&q=" & txtQuery.Text
	
	'ComboBoxes without abbreviations
	If cmbc2coff.SelectedIndex <> -1 Then url = url & "&c2coff=" & cmbc2coff.Items.Get(cmbc2coff.SelectedIndex)
	If cmbfileType.SelectedIndex <> -1 Then url = url & "&fileType=" & cmbfileType.Items.Get(cmbfileType.SelectedIndex)
	If cmbgooglehost.SelectedIndex <> -1 Then url = url & "&googlehost=" & cmbgooglehost.Items.Get(cmbgooglehost.SelectedIndex)
	If cmbimgDominantColor.SelectedIndex <> -1 Then url = url & "&imgDominantColor=" & cmbimgDominantColor.Items.Get(cmbimgDominantColor.SelectedIndex)
	If cmbimgSize.SelectedIndex <> -1 Then url = url & "&imgSize=" & cmbimgSize.Items.Get(cmbimgSize.SelectedIndex)
	If cmbimgType.SelectedIndex <> -1 Then url = url & "&imgType=" & cmbimgType.Items.Get(cmbimgType.SelectedIndex)
	If cmbrights.SelectedIndex <> -1 Then url = url & "&rights=" & cmbrights.Items.Get(cmbrights.SelectedIndex)
	If cmbsafe.SelectedIndex <> -1 Then url = url & "&safe=" & cmbsafe.Items.Get(cmbsafe.SelectedIndex)
	If cmbsearchType.SelectedIndex <> -1 Then url = url & "&searchType=" & cmbsearchType.Items.Get(cmbsearchType.SelectedIndex)
	If cmbsort.SelectedIndex <> -1 Then url = url & "&sort=" & cmbsort.Items.Get(cmbsort.SelectedIndex)

	'ComboBoxes with abbreviations
	If cmbfilter.SelectedIndex <> -1 Then url = url & "&filter=" & cmbfilterAbbreviations.Get(cmbfilter.SelectedIndex)
	If cmbcr.SelectedIndex <> -1 Then url = url & "&cr=" & cmbcrAbbreviations.Get(cmbcr.SelectedIndex)
	If cmbgl.SelectedIndex <> -1 Then url = url & "&gl=" & clbglAbbreviations.Get(cmbgl.SelectedIndex)
	If cmbhl.SelectedIndex <> -1 Then url = url & "&hl=" & cmbhlAbbreviations.Get(cmbhl.SelectedIndex)
	If cmbimgColorType.SelectedIndex <> -1 Then url = url & "&imgColorType=" & cmbimgColorTypeAbbreviations.Get(cmbimgColorType.SelectedIndex)

	If cmblr.SelectedIndex <> -1 Then url = url & "&lr=" & cmblrAbbreviations.Get(cmblr.SelectedIndex)
	If cmbsiteSearchFilter.SelectedIndex <> -1 Then url = url & "siteSearchFilter=" & cmbsiteSearchFilterAbbreviations.Get(cmbsiteSearchFilter.SelectedIndex)

	'Handle dateRestrict
	If cmbdateRestrict.SelectedIndex <> -1 And txtdateRestrict.Text <> "" Then
		url = url & cmbdateRestrictAbbreviations.Get(cmbdateRestrict.SelectedIndex) & txtdateRestrict.Text
	End If

	'Text Entries
	If txtexactTerms.Text <> "" Then url = url & "&exactTerms=" & txtexactTerms.Text
	If txtexcludeTerms.Text <> "" Then url = url & "&excludeTerms=" & txtexcludeTerms.Text
	If txthq.Text <> "" Then url = url & "hq=" & txthq.Text
	If txtlinkSite.text <> "" Then url = url & "linkSite=" & txtlinkSite.Text
	If txtorTerms.Text <> "" Then url = url & "&orTerms=" & txtorTerms.Text
	If txtsiteSearch.Text <> "" Then url = url & "&siteSearch=" & txtsiteSearch.Text

	'Start is assigned to the value given by the user.  Otherwise it is calculated based on the PreviousPage and NextPage buttons.
	If txtstart.Text = "" Then
		txtstart.Text = 0 'Valid values are 0 to 89 because the search gives a maximum of 100 results and 10 are displayed per page.
	End If
	
	'Add these parts to the url.
	url = url & "&start=" & txtstart.Text 'index of the first result to return
	
	LogUserAction("User entered search query: " & url)
	
	Log("Generated URL: " & url)
	client.Download(url)
	LogColor("Sub GenerateRequest finished", 0xFFFF7100)
End Sub

Private Sub lblurlforhelp_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub lblurlforhelp_MouseClicked started", 0xFF009901)
	LogUserAction("Google Search Help button clicked.")
	
	fx.ShowExternalDocument("https://developers.google.com/custom-search/v1/reference/rest/v1/cse/list")
	LogColor("Sub lblurlforhelp_MouseClicked finished", 0xFFFF7100)
End Sub

Sub JSONParsing(text As String)
	LogColor("Sub JSONParsing started", 0xFF009901)
	Dim Parser As JSONParser
	Parser.Initialize(text)
	LogUserAction("JSON Parsing: " & text)
	Dim jroot As Map 
	jroot.Initialize
	jroot = Parser.NextObject
	'Dim kind As String = jroot.Get("kind")
	Dim context As Map
	context.Initialize
	context = jroot.Get("context")
	Dim title As String = context.Get("title")
	Dim queries As Map
	queries.Initialize
	queries = jroot.Get("queries")
	Dim request As List = queries.Get("request")
	request.Initialize
	'For Each colrequest As Map In request
		'Dim inputEncoding As String = colrequest.Get("inputEncoding")
		'Dim totalResults As String = colrequest.Get("totalResults")
		'Dim startIndex As Int = colrequest.Get("startIndex")
		'Dim outputEncoding As String = colrequest.Get("outputEncoding")
		'Dim searchTerms As String = colrequest.Get("searchTerms")
		'Dim cx As String = colrequest.Get("cx")
		'Dim count As Int = colrequest.Get("count")
		'Dim safe As String = colrequest.Get("safe")
		'Dim title As String = colrequest.Get("title")
	'Next
	Dim nextPage As List
	nextPage.Initialize
	nextPage = queries.Get("nextPage")
	For Each colnextPage As Map In nextPage
		'Dim inputEncoding As String = colnextPage.Get("inputEncoding")
		'Dim totalResults As String = colnextPage.Get("totalResults")
		'Dim startIndex As Int = colnextPage.Get("startIndex")
		'Dim outputEncoding As String = colnextPage.Get("outputEncoding")
		'Dim searchTerms As String = colnextPage.Get("searchTerms")
		'Dim cx As String = colnextPage.Get("cx")
		'Dim count As Int = colnextPage.Get("count")
		'Dim safe As String = colnextPage.Get("safe")
		Dim title As String = colnextPage.Get("title")
	Next
	Dim searchInformation As Map = jroot.Get("searchInformation")
	searchInformation.Initialize
	'Dim searchTime As String = searchInformation.Get("searchTime")
	'Dim totalResults As String = searchInformation.Get("totalResults")
	'Dim formattedTotalResults As String = searchInformation.Get("formattedTotalResults")
	'Dim formattedSearchTime As String = searchInformation.Get("formattedSearchTime")
	Dim items As List = jroot.Get("items")
	For Each colitems As Map In items
		Dim snippet As String = colitems.Get("snippet")
		'Dim htmlFormattedUrl As String = colitems.Get("htmlFormattedUrl")
		'Dim htmlTitle As String = colitems.Get("htmlTitle")
		'Dim kind As String = colitems.Get("kind")
		Dim pagemap As Map = colitems.Get("pagemap")
		Dim metatags As List = pagemap.Get("metatags")
		metatags.Initialize
		For Each colmetatags As Map In metatags
			'Dim lastmodified As String = colmetatags.Get("last-modified")
			'Dim ogType As String = colmetatags.Get("og:type")
			'Dim viewport As String = colmetatags.Get("viewport")
			'Dim ogtitle As String = colmetatags.Get("og:title")
			Dim title As String = colmetatags.Get("title")
			Dim ogurl As String = colmetatags.Get("og:url")
			Log("ogURL = " & ogurl)
		Next
		'Dim displayLink As String = colitems.Get("displayLink")
		'Dim link As String = colitems.Get("link")
		'Dim htmlSnippet As String = colitems.Get("htmlSnippet")
		Dim title As String = colitems.Get("title")
		Dim formattedUrl As String = colitems.Get("formattedUrl")
		Dim TempSearchResult As SearchResult
		TempSearchResult.Initialize
		TempSearchResult.URL = formattedUrl
		TempSearchResult.Title = title
		TempSearchResult.Snippet = snippet
		SearchResults.Add(TempSearchResult)
'		Log("SearchResult URL = "  & formattedUrl)
	Next
	'Dim url As Map = jroot.Get("url")
	'Dim template As String = url.Get("template")
	'Dim Type As String = url.Get("type")
	'***In the code above, many variables are not used.  Will the user have need of any of that information?
	LogColor("Sub JSONParsing finished", 0xFFFF7100)
End Sub

Private Sub btnPreviousPage_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnPreviousPage_MouseClicked started", 0xFF009901)
	LogUserAction("Google Search Previous Page Button Clicked")
	lblTableStatus.Text = ""
	txtstart.Text = txtstart.Text - 10
	If txtstart.Text < 0 Then txtstart.Text = 0
	ShowSearchResults
	LogColor("Sub btnPreviousPage_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnNextPage_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnNextPage_MouseClicked started", 0xFF009901)
	LogUserAction("Google Search Next Page Button Clicked")
	lblTableStatus.Text = ""
	txtstart.Text = txtstart.Text + 10
	Log("txtstart.Text = " & txtstart.Text)
	Log("Search Results Size = " & SearchResults.Size)
	If txtstart.Text + 10 > SearchResults.Size Then
		GenerateRequest
	Else
		ShowSearchResults
	End If
	LogColor("Sub btnNextPage_MouseClicked finished", 0xFFFF7100)
End Sub

Sub ShowSearchResults
	LogColor("Sub ShowSearchResults started", 0xFF009901)
	For x = txtstart.Text To txtstart.Text + 9
		LogUserAction("Google Search Results shown" & "Start = " & x & ". Last = " & txtstart.Text)
		Dim TempSearchResult As SearchResult
		TempSearchResult.Initialize
		TempSearchResult = SearchResults.Get(x)
		Select x
			Case txtstart.Text
				lblUrlResult1.Text = TempSearchResult.URL
				lblTitleResult1.Text = TempSearchResult.Title
				lblSnippetResult1.Text = TempSearchResult.Snippet
				
			Case txtstart.Text + 1
				lblUrlResult2.Text = TempSearchResult.URL
				lblTitleResult2.Text = TempSearchResult.Title
				lblSnippetResult2.Text = TempSearchResult.Snippet
				
			Case txtstart.Text + 2
				lblUrlResult3.Text = TempSearchResult.URL
				lblTitleResult3.Text = TempSearchResult.Title
				lblSnippetResult3.Text = TempSearchResult.Snippet

			Case txtstart.Text + 3
				lblUrlResult4.Text = TempSearchResult.URL
				lblTitleResult4.Text = TempSearchResult.Title
				lblSnippetResult4.Text = TempSearchResult.Snippet

			Case txtstart.Text + 4
				lblUrlResult5.Text = TempSearchResult.URL
				lblTitleResult5.Text = TempSearchResult.Title
				lblSnippetResult5.Text = TempSearchResult.Snippet

			Case txtstart.Text + 5
				lblUrlResult6.Text = TempSearchResult.URL
				lblTitleResult6.Text = TempSearchResult.Title
				lblSnippetResult6.Text = TempSearchResult.Snippet

			Case txtstart.Text + 6
				lblUrlResult7.Text = TempSearchResult.URL
				lblTitleResult7.Text = TempSearchResult.Title
				lblSnippetResult7.Text = TempSearchResult.Snippet

			Case txtstart.Text + 7
				lblUrlResult8.Text = TempSearchResult.URL
				lblTitleResult8.Text = TempSearchResult.Title
				lblSnippetResult8.Text = TempSearchResult.Snippet

			Case txtstart.Text + 8
				lblUrlResult9.Text = TempSearchResult.URL
				lblTitleResult9.Text = TempSearchResult.Title
				lblSnippetResult9.Text = TempSearchResult.Snippet

			Case txtstart.Text + 9
				lblUrlResult10.Text = TempSearchResult.URL
				lblTitleResult10.Text = TempSearchResult.Title
				lblSnippetResult10.Text = TempSearchResult.Snippet
		End Select
		
		LogUserAction("SearchResult URL = " & TempSearchResult.URL)
		LogUserAction("SearchResult Title = " & TempSearchResult.Title)
		LogUserAction("SearchResult Snippet = " & TempSearchResult.Snippet)
	Next
	LogColor("Sub ShowSearchResults finished", 0xFFFF7100)
End Sub

Sub AddToAI1(Index As Byte)
	LogColor("Sub AddToAI1 started", 0xFF009901)
	'Adds google search result to OpenAI.
	lblTableStatus.Text = ""
	
	Dim TempSearchResult As SearchResult
	TempSearchResult.Initialize
	'Log("Index = " & Index)
	TempSearchResult = SearchResults.Get(Index)
	DownloadURLtemporarily(TempSearchResult.URL)
	
	LogUserAction("Web page added to AI: " & TempSearchResult.URL)
'	Job.Initialize("addtoai",Me)
'	job.GetRequest.Timeout = 120000 'That is 120 seconds or two minutes.  Default is 30 seconds.
'	Job.Tag = TempSearchResult 'URLtoSave.
'	Job.Download(TempSearchResult.URL)
'	'URLtoSave = TempSearchResult.URL
	LogColor("Sub AddToAI1 finished", 0xFFFF7100)
End Sub

Private Sub btnAddToAI1_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnAddToAI1_MouseClicked started", 0xFF009901)
	AddToAI1(0)
	LogColor("Sub btnAddToAI1_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnAddToAI2_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnAddToAI2_MouseClicked started", 0xFF009901)
	AddToAI1(1)
	LogColor("Sub btnAddToAI2_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnAddToAI3_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnAddToAI3_MouseClicked started", 0xFF009901)
	AddToAI1(2)
	LogColor("Sub btnAddToAI3_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnAddToAI4_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnAddToAI4_MouseClicked started", 0xFF009901)
	AddToAI1(3)
	LogColor("Sub btnAddToAI4_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnAddToAI5_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnAddToAI5_MouseClicked started", 0xFF009901)
	AddToAI1(4)
	LogColor("Sub btnAddToAI5_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnAddToAI6_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnAddToAI6_MouseClicked started", 0xFF009901)
	AddToAI1(5)
	LogColor("Sub btnAddToAI6_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnAddToAI7_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnAddToAI7_MouseClicked started", 0xFF009901)
	AddToAI1(6)
	LogColor("Sub btnAddToAI7_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnAddToAI8_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnAddToAI8_MouseClicked started", 0xFF009901)
	AddToAI1(7)
	LogColor("Sub btnAddToAI8_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnAddToAI9_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnAddToAI9_MouseClicked started", 0xFF009901)
	AddToAI1(8)
	LogColor("Sub btnAddToAI9_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnAddToAI10_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnAddToAI10_MouseClicked started", 0xFF009901)
	AddToAI1(9)
	LogColor("Sub btnAddToAI10_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub lblUrlResult1_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub lblUrlResult1_MouseClicked started", 0xFF009901)
	LogUserAction("URL result 1 clicked: " & lblUrlResult1.Text)
	Log("URL = " & lblUrlResult1.Text)
	fx.ShowExternalDocument(lblUrlResult1.Text) 'Loads web page using the default Windows app.
	Log("DONE")
	LogColor("Sub lblUrlResult1_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub lblUrlResult2_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub lblUrlResult2_MouseClicked started", 0xFF009901)
	LogUserAction("URL result 2 clicked: " & lblUrlResult2.Text)
	fx.ShowExternalDocument(lblUrlResult2.Text)
	LogColor("Sub lblUrlResult2_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub lblUrlResult3_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub lblUrlResult3_MouseClicked started", 0xFF009901)
	LogUserAction("URL result 3 clicked: " & lblUrlResult3.Text)
	fx.ShowExternalDocument(lblUrlResult3.Text)
	LogColor("Sub lblUrlResult3_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub lblUrlResult4_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub lblUrlResult4_MouseClicked started", 0xFF009901)
	LogUserAction("URL result 4 clicked: " & lblUrlResult4.Text)
	fx.ShowExternalDocument(lblUrlResult4.Text)
	LogColor("Sub lblUrlResult4_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub lblUrlResult5_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub lblUrlResult5_MouseClicked started", 0xFF009901)
	LogUserAction("URL result 5 clicked: " & lblUrlResult5.Text)
	fx.ShowExternalDocument(lblUrlResult5.Text)
	LogColor("Sub lblUrlResult5_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub lblUrlResult6_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub lblUrlResult6_MouseClicked started", 0xFF009901)
	LogUserAction("URL result 6 clicked: " & lblUrlResult6.Text)
	fx.ShowExternalDocument(lblUrlResult6.Text)
	LogColor("Sub lblUrlResult6_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub lblUrlResult7_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub lblUrlResult7_MouseClicked started", 0xFF009901)
	LogUserAction("URL result 7 clicked: " & lblUrlResult7.Text)
	fx.ShowExternalDocument(lblUrlResult7.Text)
	LogColor("Sub lblUrlResult7_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub lblUrlResult8_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub lblUrlResult8_MouseClicked started", 0xFF009901)
	LogUserAction("URL result 8 clicked: " & lblUrlResult8.Text)
	fx.ShowExternalDocument(lblUrlResult8.Text)
	LogColor("Sub lblUrlResult8_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub lblUrlResult9_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub lblUrlResult9_MouseClicked started", 0xFF009901)
	LogUserAction("URL result 9 clicked: " & lblUrlResult9.Text)
	fx.ShowExternalDocument(lblUrlResult9.Text)
	LogColor("Sub lblUrlResult9_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub lblUrlResult10_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub lblUrlResult10_MouseClicked started", 0xFF009901)
	LogUserAction("URL result 10 clicked: " & lblUrlResult10.Text)
	fx.ShowExternalDocument(lblUrlResult10.Text)
	LogColor("Sub lblUrlResult10_MouseClicked finished", 0xFFFF7100)
End Sub

Private Sub btnBackGoogle_MouseClicked(EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then Return
	LogColor("Sub btnBackGoogle_MouseClicked started", 0xFF009901)
	LogUserAction("Navigated back from Google pane.")
	OpenAIMainPage
	LogColor("Sub btnBackGoogle_MouseClicked finished", 0xFFFF7100)
End Sub

'Handle HTTP job responses for Google Search only.
Sub JobDone(Job As HttpJob) 'NOTE: This JobDone sub has nothing to do with the OpenAI library.  It is only for google search functions.
	LogColor("Sub JobDone started", 0xFF009901)
	Log("JobDone")
	'Dim FileID As String
	'Private JSONResults As String
	If Job.Success Then
		'JSONResults = Job.GetString
		Select Job.JobName

			Case "addtoai"
				'Log(Job.GetString)
				LogColor("Here2 = ",0xFFFF0000)
				Dim URLtoDownload As String = Job.Tag
				LogColor("URL to download = " & URLtoDownload,0xFF06FF00)
				Dim FileName As String
				Dim Folder As String
				Folder = DefaultFolder
				Dim TextWriter1 As TextWriter
				FileName =  URLtoDownload.Replace("/", "~")&".html"
				Log("Filename = " & FileName)
				TextWriter1.Initialize(File.OpenOutput(DefaultFolder,FileName, False))
				TextWriter1.Write(Job.GetString)
				TextWriter1.Close
				LogColor("Here3 = ",0xFFFF0000)
				'Job.Release
				LogUserAction("File downloaded which will be uploaded to OpenAI: " & Folder & "\" & FileName)
				UploadFile("assistants", Folder, FileName)
		
			Case "googlesearch"
				'Private GoogleJSONResults As String
				GoogleJSONResults = Job.GetString
				JSONParsing(GoogleJSONResults)
				ShowSearchResults
				'Log("Google Search JSON Results: " & GoogleJSONResults)
				
			Case Else
				Log(Job.GetString)
		End Select
	Else
		Log("Error in Job: " & Job.JobName & " - " & Job.ErrorMessage)
		LogUserAction("Error in Job: " & Job.JobName & " - " & Job.ErrorMessage)
		xui.MsgboxAsync("Error: " & Job.ErrorMessage, "Job Error")
	End If
	Job.Release
	LogColor("Sub JobDone finished", 0xFFFF7100)
End Sub

'New method to handle OpenAI responses
Sub OpenAI_Response(response As String)
	LogColor("Sub OpenAI_Response started", 0xFF009901)
	Log("Response in main code: " & response) 'response is a JSON formatted string.  See https://www.b4x.com/android/forum/threads/android-json-tutorial.6923/
	LogUserAction("Response from Library: " & response)
	Dim Parser As JSONParser 'JSON objects are converted to maps.  JSON arrays are converted to lists.
	Parser.Initialize(response) 'Initializes the object and set the text that will be parsed.
	Dim result As Map = Parser.NextObject
	Dim object1 As String = result.Get("object")
	Log("Object = " &  object1) 'This is the OpenAI object.
	
	Select object1
		
		Case "ListVectorStoreFiles"
			ParseVectorStoreFiles(response)
		
		Case "retrieveFileJob"
			ParseFile(response)
		
		Case "ListRunSteps"
			ParseRunSteps(response)
		
		Case "CreateThreadMessageJob"
			lblChatStatus.Text = "Message Added To Thread."
			lblChatStatus.Style = "-fx-background-color: white;" 'Optional styling
		
		Case "vector_store.file"
			ParseVectorStoreFile(response)
		
		Case "ListModels"
			ParseModelList(response)
		
		Case "DeleteFineTunedModel" 'The Models will be listed showing the deleted Model.
			JustListModels
		
		Case "model"
			Log("Here Case Model")
			ParseRetrievedModel(response)
		
		Case "ListFineTuningJobs"
			ParseFineTuningJobs(response)
			
		Case "ListFineTuningEvents"
			ParseFineTuningEvents(response)
			
		Case "fine_tuning.job"
			ParseRetrievedFineTuningJob(response)

		Case "CancelFineTuningJob" 'The Fine Tuning Jobs will be listed showing the cancelled job.
			ListFineTuningJobs
         
		Case "ListFineTuningJobs"
			ParseFineTuningJobs(response)
		
		Case "thread.run"
			Log("Thread Run Returned")
			Dim RunID As String = result.Get("id")
			CheckRunStatus(RunID)
		
		Case "CheckRunStatus"
			Dim status As String = result.Get("status")
			Dim RunID As String = result.Get("id")
			
			Select status
				
				Case "queued", "in_progress", "cancelling"
					LogUserAction("Run Status:" & status)
					CheckRunStatus(RunID)
					
				Case "cancelled", "failed", "completed", "incomplete", "expired", "requires_action"
					LogUserAction("Run Status:" & status)
					lblTableStatus.Text = "Run Status: " & status
					ListRuns
			End Select
			lblTableStatus.Text = "Run Status: " & status
			
		Case "RetrieveVectorStore"
			ParseVectorStoreRetrieved(response)
			
		Case "DeleteVectorStore"
			ListVectorStores
		
		Case "imageresponse"
			txtOpenAIResponse.Text = response
		
		Case "ListVectorStores"
			ParseVectorStoreList(response)
		
		Case "vector_store"
			ParseVectorStoreCreated(response)
		
		Case "ListRuns"
			ParseRunList(response)
		
		Case "RetrieveRun"
			ParseRetrievedRun(response)
	
		Case "GetMessagesFromThread"
			ParseMessageList(response)

		Case "thread.message"
			Log("here")
			ParseMessage(response)
			
		Case "thread.message.deleted"
			ShowMessagesFromThreadList
		
		Case "thread.deleted"
			CurrentThreadID = result.Get("id")
			LogColor("ThreadID passed to DeleteThreadFromSpreadsheet = " & CurrentThreadID,0xFFFF0000)
			'Delete the corresponding row from the spreadsheet
			DeleteThreadFromSpreadsheet
			LogColor("Thread was supposed to be deleted from spreadsheet.",0xFFFF0000)
			LogUserAction("Thread deleted with ID: " & CurrentThreadID)
			ShowThreadList
		
		Case "thread" 'Thread created
			CurrentThreadID = result.Get("id")
			Dim CreatedAt As String = result.Get("created_at")
			Dim metadata As Map = result.Get("metadata")
			Dim jsonGen As JSONGenerator
			jsonGen.Initialize(metadata)
			Dim jsonString As String = jsonGen.ToPrettyString(3)
			AddThreadToSpreadsheet(CreatedAt, jsonString)
			'***Make the created thread the activated thread.
			
			txtThreadName.Text = CurrentThreadName
			lblThreadID.text = CurrentThreadID
			
		Case "assistant.deleted"
			Dim AssistantID As String
			AssistantID = result.Get("id")
			Log("Assistant deleted = " & AssistantID)
			ListAssistants
			
		Case "RetrieveAssistant"
			CurrentAssistantID = result.Get("id")
			CurrentAssistantName = result.Get("name")
			Dim Model As String = result.Get("model")
			Dim Instructions As String = result.Get("instructions")
			
			Log("Assistant activated = " & CurrentAssistantID)
			lblAssistantId.Text = CurrentAssistantID
			txtAssistantName.text = CurrentAssistantName
			lblAssistantId.Text = " ID: " & CurrentAssistantID
			
			lblAssistantModel.text = Model
		
			Dim Tools As List = result.Get("tools")
			'Check if tools is not null
			LogColor("here", 0xFF0000FF)
			For Each item As Map In Tools
				Dim key As String
				Dim value As String
				For Each k In item.Keys
					key = k
					value = item.Get(k)
					LogColor("Key: " & key & ", Value: " & value, 0xFF0000FF) 'Log the key-value pairs
					Select Case value
						Case "file_search"
							chkFileSearch.Checked = True
						Case "code_interpreter"
							chkCodeInterpreter.Checked = True
						Case "function_calling"
							chkFunctionCalling.Checked = True
					End Select
				Next
			Next
			txtAssistantInstructions.Text = Instructions
			
		Case "ListAssistants"
			ParseAssistantList(response)
		
		Case "CancelUpload"
			Dim FileId As String
			FileId = result.Get("id")
			Log("Upload cancelled: " & FileId)
			lblUploadSuccess.Text = "Upload cancelled: " & FileId
			lblTableStatus.Text = "Upload cancelled: " & FileId
			lblUploadID.Text = FileId
			btnCancelUpload.Visible = False
			LogUserAction("Upload cancelled: " & FileId)
		
		Case "initializeupload" 'This is the initialization of a multi-part upload.
			Dim FileId As String
			FileId = result.Get("id")
			Log("Large file uploaded initialized: " & FileId)
			lblUploadSuccess.Text = "Large file upload initialized. FileID = " & FileId
			lblTableStatus.Text = "Large file upload initialized. FileID = " & FileId
			lblUploadID.Text = FileId
			btnCancelUpload.Visible = True
			LogUserAction("Large file uploaded initialized successfully. FileID = " & FileId)
			'AddFileToVectorStore(FileId)
		
		Case "upload.part" 'This is the upload of one part of a large file.
			Dim FileId As String
			FileId = result.Get("partId")
			Log("Large file part uploaded: " & FileId)
			lblUploadSuccess.Text = "Large file part uploaded. FileID = " & FileId
			lblTableStatus.Text = "Large file part uploaded. FileID = " & FileId
			btnCancelUpload.Visible = True
			LogUserAction("Large file part uploaded. FileID = " & FileId)
		
		Case "completeUploadJob" 'This is the completion of a large file upload
			Dim FileId As String
			FileId = result.Get("id")
			Log("Large file upload completed: " & FileId)
			lblUploadSuccess.Text = "Large file upload completed: " & FileId
			lblUploadSuccess.Style = "-fx-background-color: white;" 'Optional styling
			lblTableStatus.Text = "Large file upload completed: " & FileId
			lblTableStatus.Style = "-fx-background-color: white;" 'Optional styling
			lblUploadID.Text = FileId
			btnCancelUpload.Visible = True
			LogUserAction("Large file upload completed: " & FileId)
		
		Case "chat.completion"
			Dim choices As List = result.Get("choices")
			Dim choice As Map = choices.Get(0)
			Dim message As Map = choice.Get("message")
			
			Dim content As String = message.Get("content")
			Log("Content2 = " & content)
			LogUserAction("Received assistant response: " & content)
			txtOpenAIResponse.Text = content
			lblChatStatus.Text = ""
        
		Case "deleteFileJob"
'			Dim fileId As String = responseData.Get("fileId")
'			LogUserAction("OpenAI file deleted ID = " & fileId)
'			Log("OpenAI file deleted ID = " & fileId)
			'xui.MsgboxAsync("File Deleted Successfully. ID = " & fileId, "Success")
			ShowOpenAIFilesList 'Instead of the above, just show the file list with the file now deleted.
			
		Case "listFilesJob"
			ParseFileList(response)
			
		Case "assistant"
			CurrentAssistantID = result.Get("id")
			CurrentAssistantName = result.Get("name")
			Dim Model As String = result.Get("model")
			Dim Instructions As String = result.Get("instructions")
			
			Log("Assistant activated = " & CurrentAssistantID)
			lblAssistantId.Text = CurrentAssistantID
			txtAssistantName.text = CurrentAssistantName
			lblAssistantModel.text = Model
			Dim Tools As List = result.Get("tools")
			'Check if tools is not null
			LogColor("here", 0xFF0000FF)
			For Each item As Map In Tools
				Dim key As String
				Dim value As String
				For Each k In item.Keys
					key = k
					value = item.Get(k)
					LogColor("Key: " & key & ", Value: " & value, 0xFF0000FF) 'Log the key-value pairs
					Select Case value
						Case "file_search"
							chkFileSearch.Checked = True
						Case "code_interpreter"
							chkCodeInterpreter.Checked = True
						Case "function_calling"
							chkFunctionCalling.Checked = True
					End Select
				Next
			Next
			txtAssistantInstructions.Text = Instructions
			LogUserAction("Assistant created with ID: " & CurrentAssistantID)
			
		Case "UploadFile"
			Dim FileId As String
			FileId = result.Get("id")
			Log("File uploaded successfully: " & FileId)
			lblUploadSuccess.Text = "File uploaded successfully. FileID: "
			lblUploadSuccess.Style = "-fx-background-color: white;" 'Optional styling
			lblTableStatus.Text = "File uploaded successfully. FileID: " & FileId
			lblTableStatus.Style = "-fx-background-color: white;" 'Optional styling
			lblUploadID.Text = FileId
			btnCancelUpload.Visible = True
			LogUserAction("File uploaded successfully. FileID = " & FileId)
			AddFileToSpreadsheet("", "", "", "", "", FileId)
			'AddFileToVectorStore(FileId)
	End Select
	LogColor("Sub OpenAI_Response finished", 0xFFFF7100)
End Sub

Sub LogUserAction(Action As String)
	'LogColor("Sub LogUserAction started", 0xFF009901)
	'Append the action to the log file with a timestamp
	Dim writer As TextWriter
	writer.Initialize(File.OpenOutput(DefaultFolder, LogFileName, True))
	writer.WriteLine(DateTime.Date(DateTime.Now) & " " & DateTime.Time(DateTime.Now) & " - " & Action)
	writer.WriteLine("")
	writer.Close
	'Log(DateTime.Date(DateTime.Now) & " " & DateTime.Time(DateTime.Now) & " - " & Action)
	'LogColor("Sub LogUserAction finished", 0xFFFF7100)
End Sub

'New method to handle OpenAI errors
Sub OpenAI_Error(ErrorMessage As String)
	LogColor("Sub OpenAI_Error started", 0xFF009901)
	xui.MsgboxAsync(ErrorMessage, "OpenAI Error")
	LogUserAction("OpenAI Error: " & ErrorMessage)
	lblChatStatus.Text = "Error occurred. Please try again."
	LogColor("Sub OpenAI_Error finished", 0xFFFF7100)
End Sub

Sub Todos
	'***Search the code for '*** and implement all changes.
	'***Update all actions so they are logged with a LogUserAction() statement and are accurate.
	'***Implement all the options for a chat request.  See my code called ChatCompletionTest.  It is all but done there.
	'***Add vision:  https://platform.openai.com/docs/guides/vision
	'***Add OpenAI o1-preview and o1-mini as soon as they are available for tier 1.  Usage Limits on ChatGPT and the API: https://help.openai.com/en/articles/9824962-openai-o1-preview-and-o1-mini-usage-limits-on-chatgpt-and-the-api
	'***Add the realtime API: https://platform.openai.com/docs/guides/realtime
	'***Add streaming support.
	'***Make code enforce limits so the user doesn't get a warning that they have gone over any limits.
	'***How To download up To 10 images?  Seems that only one image Is able To be downloaded with Dall-e-2 Or Dall-e-3.  The returned object only includes one url even If I request 2 images. https://platform.openai.com/docs/api-reference/images/create#images-create-n
	'***Make token count show inptut And output tokens.  This will eventually include reasoning tokens when the o1 models are available to tier 1.
	'***Make token count For the entire thread show. That Is what it exceeded by the warning when you reach your limt.  It Is Not just the tokens For the current submission To OpenAI.
	'***Add spell checking To the input box.
	'***Figure out how To upload an image: https://platform.openai.com/docs/guides/text-generation/quickstart?text-generation-quickstart-example=image
	'***Add audio and visual modalities: https://platform.openai.com/docs/api-reference/chat/create#chat-create-messages
	'***Make it so user can select which model for fine tuning and the other uses above when they are implemented in the code.  The Models spreadsheet already has columns for this.  The right 10 columns.
	'***Make the code remove the .0 from numbers stored at text in the models spreadsheet.
	
	'***Add code change to only clean up chat submission if it is going to be tts.  Presently all text submissions are cleaned up.
	'***Check on removing the sanitizing of chat inputs.  See if there is a better way to remove the + signs between words for html upload.
	'***Figure out the cleaning up of the chat text submission. Hopefully by looking at the source code for the other AI web pages.

	
	'***Fix file formats: "message": "Invalid extension htm. Supported formats: c, cpp, css, csv, docx, gif, html, java, jpeg, jpg, js, json, md, pdf, php, pkl, png, pptx, py, rb, tar, tex, ts, txt, webp, xlsx, xml, zip
	'***Add a label in settings showing where the log file is.
	'***Scramble the defaults file to prevent others from seeing your keys.
	'***Make sure every action has logging that calls the LogUserAction
	'***Add a button at the AI output to save the files each output is a separate file consecutively.

	'***Make my software offer the user in setup to make a local copy or simply keep track of where the local copy came from when they upload a file. And then in the file table if they click to view the file it'll load it from either location.
	'***Make a local store for uploaded file.  Remove the can't download label because they will be loaded from the local folder when someone clicks the view file button.
	'***Add code that will allow a user to upload a folder of files. Notify them of the limits and let them know when they're approaching them.
	'***Code to my software to allow a person to view files that you presently cannot view in the file list by storing them locally.
	
	'***See if I can make open AI create code and save it as a file
	'***Add activation to the setup screen
	'***Make the defaults text file be in the correct place when stand alone is unzipped
	'***Save a log of all AI interaction.  Add to this all items sent to google or OpenAI and all responses from them.
	'***Put logging of HTTP requests into the same location as the normal log.  It has to be passed to the OpenAI library.  If none is passed, don't log http requests?
	'***Handle rate limits in my code: D:\Downloads\B4J\openai-cookbook-main python\examples\How_to_handle_rate_limits.ipynb
	'***Count tokens in chat window before user submission and display the tokens.  D:\Downloads\B4J\openai-cookbook-main python\examples\How_to_count_tokens_with_tiktoken.ipynb

	'***Make lblChatStatus.Text show appropriate status at every stage of operation of the AI.

	'***Make the code log the job.string and json string for every response. Also sent requests.
	'My overall goal is to add every function in the API to the library and this code.  That would include all attributes of each function as well.

	'***Make the file list show number of files and total size.  This is because the API limits you to 20 files per assistant and 100GB in total file size.  https://www.google.com/search?q=openai+api+number+of+files+limit
	'***Show tokens enter / limit as the user enters text. Red when over limit and prevent submit. Different limit for tts and image?
	'***Make a help button and F1.  I am thinking more of a CTRL click rather than an F1 button.  CTRL Click on a button or field to pull up help for that field.
	'***Make html log viewer using browser?
	'***Add json viewer to my code so I can see json payloads
	'***View the web page source to see how openai sends chat text. Perplexity too.
	'***Don't allow closing software or can jobs be picked up later?
	'***Make each screen have a status indicator at the bottom that shows asynchronous results when they come in. Make a pending jobs screen.
End Sub

Sub Notes
End Sub