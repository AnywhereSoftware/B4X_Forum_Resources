AppType=JavaFX
Build1=Default,b4j.example
File1=Layout1.bjl
FileGroup1=Default Group
Group=Default Group
Library1=jcore
Library2=jfx
Library3=pnd_selenium
NumberOfFiles=1
NumberOfLibraries=3
NumberOfModules=0
Version=10
@EndOfDesignText@
#Region Project Attributes 
	#MainFormWidth: 400
	#MainFormHeight: 200 
	#MergeLibraries: False 
#End Region

Sub Process_Globals
	Private fx As JFX
	Private MainForm As Form
	Private Selenium As Pnd_Selenium
End Sub


Sub AppStart (Form1 As Form, Args() As String)
	MainForm = Form1
	MainForm.RootPane.LoadLayout("Layout1")
	MainForm.Show
	Sleep(500) ' To show MainForm before Chrome
	
	' Add argument(s) BEFORE Initialize
	' List of possible arguments: https://peter.sh/experiments/chromium-command-line-switches/
	' Another list of possible arguments: https://github.com/GoogleChrome/chrome-launcher/blob/main/docs/chrome-flags-for-tools.md
	' Selenium.AddArgument("--headless") 'Run in headless mode, without a UI or display server dependencies.
	' Selenium.AddArgument("--start-maximized")
	' Selenium.AddArgument("--user-agent=Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)")
	
	' For Windows use:
	' Chrome For Testing: https://storage.googleapis.com/chrome-for-testing-public/131.0.6778.204/win64/chrome-win64.zip
	' Chrome Driver:      https://storage.googleapis.com/chrome-for-testing-public/131.0.6778.204/win64/chromedriver-win64.zip
		
	' If you are using other OS then go to: https://googlechromelabs.github.io/chrome-for-testing/
	' This version is tested with Chrome For Testing and Chrome Driver v131.0.6778.204
			
	' Selenium is no longer connected to the version of Chrome browser installed on your computer,
	' but instead is linked to the Chrome For Testing version, which is completely separate from the Desktop version you already have installed on your computer.
	' When you download Chrome For Testing as well as the Chrome Driver, make sure to extract everything into one folder.
	' chrome.exe and chromedriver.exe should be in same folder.
	
	' Ignore error in log: WARNING: Unable to find an exact match for CDP version 131, returning the closest version; found: 129; Please update to a Selenium version that supports CDP version 131

	
	Selenium.Initialize("Selenium", "e:\Kotlin\Wrap_Selenium\ChromeForTestingAndChromeDriver\chromedriver.exe")
	Dim LogLevel As Pnd_LogLevel
	Selenium.LogLevel = LogLevel.INFO
'	Selenium.PageLoadTimeout = 10000 ' 10 seconds
'	Selenium.ImplicitlyWait = 10000  ' 10 seconds
	Selenium.ScriptTimeout = 10000   ' 10 seconds
	Selenium.NavigateTo("https://www.nasdaq.com/")
	'Selenium.Get("https://www.b4x.com/android/forum/")
End Sub


Sub Selenium_NavigationFinished
	If Selenium.CurrentUrl = "https://www.nasdaq.com/" Then
		DemoExample
	Else			
		FormExample
	End If
End Sub


Sub FormExample
	Dim WebElement1 As Pnd_WebElement = Selenium.FindById("search")
	WebElement1.SendKeys("pendrush")
	WebElement1.Submit
	Sleep(5000)
	Selenium.Quit
	ExitApplication
End Sub

		
Sub DemoExample
	' Add text in search field
	Dim WebElement1 As Pnd_WebElement = Selenium.FindByClassName( "jupiter22-find-symbol__input")
	WebElement1.SendKeys("TEST test")
	
	' Execute synchronous JavaScript and return value
	Dim JsReturnValue As String = Selenium.ExecuteScript("let a=10; let b=20; return a+b;", WebElement1)
	Log("JsReturnValue: " & JsReturnValue)
	Sleep(3000)
		
	' Execute Async JavaScript and return value from Callback
	' Selenium.ScriptTimeout must be set over 2000 (2 seconds) because we have await sleep(2000) in JavaScript
	Dim AsyncJavaScript As String = $"
		const cb = arguments[arguments.length - 1];
		function sleep(ms) {{
			return new Promise(resolve => setTimeout(resolve, ms));
		}}
		async function test() {{
	    	await sleep(2000);
	    	cb("example value");
		}}
		test();
	"$
	Log ("ExecuteAsyncScript - Start")
	' Try will fail if Selenium.ScriptTimeout is exceeded, also if you don't set Selenium.ScriptTimeout, the default timout is 0ms.
	Try
		Dim JsAsyncScript As String = Selenium.ExecuteAsyncScript(AsyncJavaScript, WebElement1)
		Log ("JsAsyncScript: " & JsAsyncScript)
	Catch
		Log(LastException)
	End Try
	Log ("ExecuteAsyncScript - Finish")
	Sleep(3000)
	
	' Execute another synchronous JavaScript but we don't need/use returned value
	Dim WebElement2 As Pnd_WebElement = Selenium.FindByClassName("jupiter22-find-symbol__label-wrapper")
	Selenium.ExecuteScript("let element=arguments[0]; element.style.color='red'; element.innerHTML='CHANGED FROM SELENIUM<br>CHANGED FROM SELENIUM<br>CHANGED FROM SELENIUM<br>CHANGED FROM SELENIUM';", WebElement2)
	Sleep(3000)
	
	
	
	
	' Switch to alert dialog if exist
	Dim SwitchSuccess As Boolean
	SwitchSuccess = Selenium.AlertSwitchTo ' AlertSwitchTo will switch to alert dialog and initilize usage of other Alert properties
	If SwitchSuccess Then
		Dim AlertText As String = Selenium.AlertGetText
		Log (AlertText)
		Selenium.AlertAccept
	Else
		Log ("Alert dialog not found")
	End If
	
	
	
	' Get all cookies
'	Dim CookiesList As List = Selenium.GetAllCookies
'	For Each Cookie As Pnd_Cookies In CookiesList
'		Log (Cookie.Name & "   " & Cookie.Value & "   " & Cookie.Expires )
'	Next
		
	' Add cookie with name test
	Dim Tomorrow As Long = DateTime.Add(DateTime.Now, 0, 0, 1)
	Selenium.AddCookie("test", "testValue", ".nasdaq.com", "/", Tomorrow, True, False, "Lax")
	
	' Get cookie by name
	Dim TestCookie As Pnd_Cookies
	TestCookie = Selenium.GetCookieNamed("test")
	Log ("TestCookie: " & TestCookie.Name & " - " & TestCookie.Value & " - " & TestCookie.Expires & " - " & TestCookie.SameSite)
	
	' Change test cookies
	Selenium.AddCookie(TestCookie.Name, "testValue2", TestCookie.Domain, TestCookie.Path, Tomorrow, TestCookie.IsSecure, TestCookie.IsHttpOnly, TestCookie.SameSite)
	Dim TestCookie2 As Pnd_Cookies
	TestCookie2 = Selenium.GetCookieNamed("test")
	Log ("TestCookie2: " & TestCookie2.Name & " - " & TestCookie2.Value & " - " & TestCookie2.Expires & " - " & TestCookie2.SameSite)
	
	' Delete cookies with name test
	Selenium.DeleteCookieNamed("test")
	Log ("Delete cookie with name 'test'")
	
	' After delete we can check again is cookes with name "test" exist
	Dim TestCookie2 As Pnd_Cookies
	TestCookie2 = Selenium.GetCookieNamed("test")
	If TestCookie2.Name = "" Then
		Log ("There is no cookie with name: test")
	Else
		Log (TestCookie.Name & "   " & TestCookie.Value & "   " & TestCookie.Expires)
	End If

	' Delete all the cookies for the current domain
	Selenium.DeleteAllCookies
	
	
	
	
	
	Dim MyList1 As List = Selenium.FindByClassNameList("jupiter22-c-symbol-table__symbol")
	For Each WebElement As Pnd_WebElement In MyList1
		Log(WebElement.GetText & " - " & WebElement.GetTagName & " - " & WebElement.GetRect)
	Next

	
	Dim MyList6 As List = Selenium.FindByClassNameList("jupiter22-c-symbol-table__company-name")
	For Each WebElement As Pnd_WebElement In MyList6
		Log(WebElement.GetText & " - " & WebElement.GetTagName & " - " & WebElement.GetRect)
	Next
	
	' Will give same output as example above, this is only simplier to use, depends what you want to do.
	Dim MyList2 As List = Selenium.FindByClassNameList("jupiter22-c-symbol-table__company-name")
	For Each WebElement As Pnd_WebElement In MyList2
		Log(WebElement.GetText & " - " & WebElement.GetTagName & " - " & WebElement.GetRect)
	Next

	
	Dim MyList3 As List = Selenium.FindByClassNameList("jupiter22-c-symbol-table__table-data-last-sale")

		
	For i = 0 To MyList1.Size - 1
		Dim Symbol As String = MyList1.Get(i).As(Pnd_WebElement).GetText
		Dim Company As String = MyList2.Get(i).As(Pnd_WebElement).GetText
		Dim Price As String =  MyList3.Get(i).As(Pnd_WebElement).GetText
		Log ("Symbol: " & Symbol & " - Company: " & Company & " - Price: " & Price)
	Next
			

	
	Dim MyList4 As List = Selenium.FindByLinkTextList("CONTACT")
	For Each WebElement As Pnd_WebElement In MyList4
		Log("Contact link: " & WebElement.GetDomAttribute("href") & " - Link title: " &  WebElement.GetDomAttribute("title"))
	Next




	' Gets all links from page, slow process, be patient. On https://www.nasdaq.com/ 5+ seconds
'	Dim MyList5 As List = Selenium.FindByTagNameList("a")
'	For Each WebElement As Pnd_WebElement In MyList5
'		Log("Link Text: " & WebElement.GetText & " - Link: " & WebElement.GetDomAttribute("href"))
'	Next
	
	
	
'	Log(Selenium.PageSource)



	Log("Current URL: " & Selenium.CurrentUrl)
	Log("Page Title: " & Selenium.Title)
	
	Sleep(2000)
		
		
		
		
	' Get <BODY>
	Dim WebElement3 As Pnd_WebElement = Selenium.FindByXpath("/html/body")
	
	Dim KeyCodes As Pnd_KeyCodes
	
	WebElement3.SendKeys((KeyCodes.PAGE_DOWN).As(Object))
	Sleep(1000)
	WebElement3.SendKeys((KeyCodes.PAGE_DOWN).As(Object))
	Sleep(1000)
	WebElement3.SendKeys((KeyCodes.PAGE_DOWN).As(Object))
	Sleep(1000)
	WebElement3.SendKeys((KeyCodes.PAGE_DOWN).As(Object))
	Sleep(1000)
	WebElement3.SendKeys((KeyCodes.PAGE_UP).As(Object))
	Sleep(1000)
	WebElement3.SendKeys((KeyCodes.PAGE_UP).As(Object))
	Sleep(1000)
	WebElement3.SendKeys((KeyCodes.PAGE_UP).As(Object))
	Sleep(500)
	WebElement3.SendKeys((KeyCodes.PAGE_UP).As(Object))
	Sleep(500)
	WebElement3.SendKeys((KeyCodes.PAGE_UP).As(Object))
	Sleep(500)
	WebElement3.SendKeys((KeyCodes.ARROW_DOWN).As(Object))
	Sleep(2000)

	Dim TabName As String
	For Each name As String In Selenium.AllTabs
		TabName = name
	Next
	Selenium.SwitchToTab(TabName)
	Sleep(1000)
	
	Selenium.TakeScreenshotToFile("jpg", File.DirApp & "\test.jpg")
	Log("Screenshot: " & File.DirApp & "\test.jpg")
		
	' Send CTRL + A (Select all)
	WebElement3.SendKeys((KeyCodes.CONTROL).As(Object) & "a")
	Log("CTRL + A")
	
	' Send CTRL + C (Copy to clipboard)
	WebElement3.SendKeys((KeyCodes.CONTROL).As(Object) & "c")
	Log("CTRL + C")
	Log("Copy to clipboard, you can now PASTE text in notepad for example.")
	Sleep(2000)
	
	Selenium.NavigateTo("https://www.b4x.com/android/forum/")
End Sub