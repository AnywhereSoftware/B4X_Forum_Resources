B4J=true
Group=Default Group
ModulesStructureVersion=1
Type=Class
Version=2.8
@EndOfDesignText@
'Class Module
Sub Class_Globals
	'Private fx As JFX ' Uncomment if required for B4j only
	Private PA As JavaObject

End Sub
'Initializes the object. You can add parameters to this method if needed.
Public Sub Initialize
	'This is an autogenerated constructor, there may not be a matching constructor in the class, you will then have to remove the next line of code
	PA.InitializeStatic("javafx.print.PrinterAttributes")
End Sub

'The default collation setting.
Public Sub GetDefaultCollation As String
'One of: COLLATED,UNCOLLATED
	Return PA.RunMethod("getDefaultCollation",Null)
End Sub
'The default number of copies to print.
Public Sub GetDefaultCopies As Int
	Return PA.RunMethod("getDefaultCopies",Null)
End Sub
'Return the default orientation for paper on this printer.
'One of:LANDSCAPE ,	PORTRAIT ,REVERSE_LANDSCAPE ,REVERSE_PORTRAIT
Public Sub GetDefaultPageOrientation As String
	Return PA.RunMethodJO("getDefaultPageOrientation",Null).RunMethod("toString",Null)
End Sub
'Return the default paper size used on this printer.
Public Sub GetDefaultPaper As Paper
	Dim P As Paper
	P.Initialize
	P.SetObject(PA.RunMethod("getDefaultPaper",Null))
	Return P
End Sub
'Return the default paper input source/tray/
'One of: Automatic,Bottom,Envelope,Large_Capacity,Main,Manual,Middle,Side or Top
Public Sub GetDefaultPaperSource As String
	Return PA.RunMethodJO("getDefaultPaperSource",Null).RunMethod("toString",Null)
End Sub
'Get the default color setting : greyscale or color
'One of: COLOR, MONOCHROME (Docs say greyscale but ENum says MONOCHROME) probably the latter, but may be either.
Public Sub GetDefaultPrintColor As String
	Return PA.RunMethodJO("getDefaultPrintColor",Null).RunMethod("toString",Null)
End Sub
'Return the default quality setting
'One of: DRAFT, HIGH, LOW, NORMAL
Public Sub GetDefaultPrintQuality As String
	Return PA.RunMethodJO("getDefaultPrintQuality",Null).RunMethod("toString",Null)
End Sub
'Return the default print resolution for paper on this printer.
Public Sub GetDefaultPrintResolution As PrintResolution
	Dim PR As PrintResolution
	PR.Initialize
	Dim JO As JavaObject =PA.RunMethod("getDefaultPrintResolution",Null)
	PR.CrossFeedResolution = JO.RunMethod("getCrossFeedResolution",Null)
	PR.FeedResolution = JO.RunMethod("getFeedResolution",Null)
	Return PR
End Sub
'Returns the default value for duplex settings.
'One of: DUPLEX, ONE_SIDED, TUMBLE
Public Sub GetDefaultPrintSides As String
	Return PA.RunMethodJO("getDefaultPrintSides",Null).RunMethod("toString",Null)
End Sub
'The maximum supported number of copies.
Public Sub GetMaxCopies As Int
	Return PA.RunMethod("getMaxCopies",Null)
End Sub
'Returns an unmodifiable set of the supported collation settings for this printer.
'Returns a list of strings. Possible values : COLLATED,UNCOLLATED
Public Sub GetSupportedCollations As List
	Dim L As List
	L.Initialize
	Dim CO As JavaObject = PA.RunMethod("getSupportedCollations",Null)
	    'Get an iterator for the set
    Dim Iterator As JavaObject = CO.RunMethod("iterator",Null)
    'Loop through the Keys Set and add each item to the output list
    Do While Iterator.RunMethod("hasNext",Null)
		L.Add(Iterator.RunMethod("next",Null).As(JavaObject).RunMethod("toString",Null))
    Loop
    Return L
End Sub
'Returns an unmodifiable set of the supported orientations for this printer.
'Returns a list of strings. Possible values: LANDSCAPE , PORTRAIT ,REVERSE_LANDSCAPE ,REVERSE_PORTRAIT
Public Sub GetSupportedPageOrientations As List
	Dim L As List
	L.Initialize
	Dim PO As JavaObject = PA.RunMethod("getSupportedPageOrientations",Null)
	'Get an Iterator For the set
    Dim Iterator As JavaObject = PO.RunMethod("iterator",Null)
    'Loop through the Keys Set and add each item to the output list
    Do While Iterator.RunMethod("hasNext",Null)
		L.Add(Iterator.RunMethod("next",Null).As(JavaObject).RunMethod("toString",Null))
    Loop
    Return L
End Sub
'Returns an unmodifiable set of the supported paper sizes for this printer.
Public Sub GetSupportedPapers As List
	Dim L As List
	L.Initialize
	Dim SP As JavaObject = PA.RunMethod("getSupportedPapers",Null)
	'Get an Iterator For the set
    Dim Iterator As JavaObject = SP.RunMethod("iterator",Null)
    'Loop through the Keys Set and add each item to the output list
    Do While Iterator.RunMethod("hasNext",Null)
		Dim Wrapper As Paper
		Wrapper.Initialize
		Wrapper.SetObject(Iterator.RunMethod("next",Null))
		L.Add(Wrapper)
    Loop
    Return L
End Sub
'Returns an unmodifiable set of the supported paper sources (ie input bins or trays) for this printer.
'Returns a list of strings. Possible values: Automatic,Bottom,Envelope,Large_Capacity,Main,Manual,Middle,Side or Top
Public Sub GetSupportedPaperSources As List
	Dim L As List
	L.Initialize
	Dim PS As JavaObject = PA.RunMethod("getSupportedPaperSources",Null)
	'Get an Iterator For the set
    Dim Iterator As JavaObject = PS.RunMethod("iterator",Null)
    'Loop through the Keys Set and add each item to the output list
    Do While Iterator.RunMethod("hasNext",Null)
		L.Add(Iterator.RunMethod("next",Null).As(JavaObject).RunMethod("toString",Null))
    Loop
    Return L
End Sub
'Returns an unmodifiable set of the supported color settings for this printer.
'Returns a list of strings. Possible values: COLOR, MONOCHROME (Docs say greyscale but ENum says MONOCHROME) probably the latter, but may be either.
Public Sub GetSupportedPrintColors As List
	Dim L As List
	L.Initialize
	Dim PC As JavaObject = PA.RunMethod("getSupportedPrintColors",Null)
	'Get an Iterator For the set
    Dim Iterator As JavaObject = PC.RunMethod("iterator",Null)
    'Loop through the Keys Set and add each item to the output list
    Do While Iterator.RunMethod("hasNext",Null)
		L.Add(Iterator.RunMethod("next",Null).As(JavaObject).RunMethod("toString",Null))
    Loop
    Return L
End Sub
'Returns an unmodifiable set of the supported quality settings for this printer.
'Returns a list of strings.  Possible values: DRAFT, HIGH, LOW, NORMAL
Public Sub GetSupportedPrintQuality As List
Dim L As List
	L.Initialize
	Dim PQ As JavaObject = PA.RunMethod("getSupportedPrintQuality",Null)
	'Get an Iterator For the set
    Dim Iterator As JavaObject = PQ.RunMethod("iterator",Null)
    'Loop through the Keys Set and add each item to the output list
    Do While Iterator.RunMethod("hasNext",Null)
		L.Add(Iterator.RunMethod("next",Null).As(JavaObject).RunMethod("toString",Null))
    Loop
    Return L
End Sub
'Returns an unmodifiable set of the supported print resolutions for this printer.
'Returns a list of Objects
Public Sub GetSupportedPrintResolutions As List
	Dim L As List
	L.Initialize
	Dim PR As JavaObject = PA.RunMethod("getSupportedPrintResolutions",Null)
	'Get an Iterator For the set
    Dim Iterator As JavaObject = PR.RunMethod("iterator",Null)
    'Loop through the Keys Set and add each item to the output list
    Do While Iterator.RunMethod("hasNext",Null)
		L.Add(Iterator.RunMethod("next",Null))
    Loop
	Return L
End Sub
'Returns an unmodifiable set of the supported print resolutions for this printer.
'Returns a list of printerRResolutionTypes
Public Sub GetSupportedPrintResolutions2 As List
	Dim L As List
	L.Initialize
	Dim PR As JavaObject = PA.RunMethod("getSupportedPrintResolutions",Null)
	'Get an Iterator For the set
    Dim Iterator As JavaObject = PR.RunMethod("iterator",Null)
    'Loop through the Keys Set and add each item to the output list
    Do While Iterator.RunMethod("hasNext",Null)
		Dim Wrapper As PrintResolution
		Wrapper.Initialize
		Dim Jo As JavaObject = Iterator.RunMethod("next",Null)
		Wrapper.CrossFeedResolution = Jo.RunMethod("getCrossFeedResolution",Null)
		Wrapper.FeedResolution = Jo.RunMethod("getFeedResolution",Null)
		L.Add(Wrapper)
    Loop
    Return L
End Sub
'Returns an unmodifiable set of the supported duplex settings for this printer.
'Returns a list of strings. Possible Values : DUPLEX, ONE_SIDED, TUMBLE
Public Sub GetSupportedPrintSides As List
Dim L As List
	L.Initialize
	Dim PS As JavaObject = PA.RunMethod("getSupportedPrintSides",Null)
	'Get an Iterator For the set
    Dim Iterator As JavaObject = PS.RunMethod("iterator",Null)
    'Loop through the Keys Set and add each item to the output list
    Do While Iterator.RunMethod("hasNext",Null)
		L.Add(Iterator.RunMethod("next",Null).As(JavaObject).RunMethod("toString",Null))
    Loop
    Return L
End Sub
'Reports if page ranges are supported.
Public Sub SupportsPageRanges As Boolean
	Return PA.RunMethod("supportsPageRanges",Null)
End Sub
Public Sub GetObject As Object
	Return PA
End Sub
Public Sub SetObject(Obj As JavaObject)
	PA = Obj
End Sub