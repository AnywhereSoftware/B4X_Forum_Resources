AppType=JavaFX
Build1=Default,b4j.example
Group=Default Group
Library1=jcore
Library2=jfx
Library3=jsql
Library4=json
Library5=javaobject
NumberOfFiles=0
NumberOfLibraries=5
NumberOfModules=0
Version=7.8
@EndOfDesignText@
#Region Project Attributes 
	#MainFormWidth: 600
	#MainFormHeight: 600 
#End Region

#AdditionalJar: sqlite-jdbc-3.21.0

Sub Process_Globals
	Private fx As JFX
	Private MainForm As Form
	Private SQLite As SQL
End Sub

Sub AppStart (Form1 As Form, Args() As String)
	'RedirectOutput(File.DirApp, "sqlite2json.txt")
	'
	SQLite2JSON("sqlite.db",False,False,True,True)
	'
	'ViewFile(File.DirApp, "sqlite2json.txt")
	ExitApplication
End Sub

'Return true to allow the default exceptions handler to handle the uncaught exception.
Sub Application_Error (Error As Exception, StackTrace As String) As Boolean
	Return True
End Sub

'open the database file
Sub SQLite2JSON(dbName As String, bIndexes As Boolean, bSchema As Boolean, bData As Boolean, bSeparate As Boolean)
	Dim schema As List
	schema.Initialize
	'copy file from dirassets to dirapp
	File.Copy(File.DirAssets,dbName, File.dirapp,dbName)
	'open the database
	SQLite.InitializeSQLite(File.DirApp,dbName, False)
	'get the table names
	Dim tables As List = ExecuteMaps(SQLite, "SELECT * FROM sqlite_master WHERE type = 'table' and name NOT IN ('sqlite_sequence')",Null)
	'get the structure
	For Each tblm As Map In tables
		'get the table name
		Dim tname As String = tblm.Get("name")
		Dim sql As String = tblm.Get("sql")
		'exclude sqlite table
		If tname.StartsWith("sqlite_stat") Then Continue
		'create a new schema for this table
		Dim tbSchema As Map = CreateMap()
		'get the data
		Dim data As List = ExecuteMaps(SQLite, $"SELECT * FROM [${tname}]"$, Null)
		'get the table definition
		Dim fields As List = ExecuteMaps(SQLite, $"PRAGMA table_info ('${tname}')"$, Null)
		'get the index list
		Dim idxList As List = ExecuteMaps(SQLite, $"PRAGMA INDEX_LIST ('${tname}')"$, Null)
		Dim idxmap As List
		idxmap.Initialize 
		For Each idx As Map In idxList
			Dim idxname As String = idx.GetDefault("name","")
			Dim unique As String = idx.GetDefault("unique","0")
			Dim bunique As Boolean = False
			If unique = "1" Then bunique = True
			'
			Dim eachIndex As Map = CreateMap()
			eachIndex.Put("name", idxname)
			eachIndex.Put("unique", bunique)
			'go deeper and get the column names for this index
			'we store the column names
			Dim idxcols As List = ExecuteMaps(SQLite, $"PRAGMA index_info('${idxname}');"$, Null)
			Dim cols As List
			cols.Initialize
			For Each idxcol As Map In idxcols
				Dim colname As String = idxcol.GetDefault("name","")
				cols.Add(colname)
			Next
			eachIndex.Put("columns", cols)
			idxmap.Add(eachIndex)
		Next
		
		tbSchema.Put("tablename", tname)
		If bSchema Then tbSchema.Put("sql", sql)
		If bSchema Then tbSchema.Put("schema", fields)
		If bIndexes Then tbSchema.Put("indexes", idxmap)
		If bData Then tbSchema.Put("data", data)
		'
		'update the schema
		schema.add(tbSchema)
		If bSeparate Then
			'create individual files
			Dim sbEach As StringBuilder
			sbEach.Initialize
			'code to get data
			sbEach.Append($"function Get${tname}Data(){"$).Append(CRLF)
			sbEach.Append($"return ${tname}.data;"$).Append(CRLF) 
			sbEach.Append("}").Append(CRLF).Append(CRLF)
			 
			sbEach.Append($"var ${tname} = "$)
			sbEach.Append(Map2JsonPretty(tbSchema))
			'
			Dim jsEachFile As String = tname & ".js"
			File.WriteString(File.DirApp, jsEachFile, sbEach.ToString)
			'open the file
			ViewFile(File.DirApp, jsEachFile)
		End If
	Next
	'get the file name
	Dim fName As String = File.GetName(File.Combine(File.DirApp, dbName))
	'only file name without extension
	fName = MvField(fName,1,".")
	Dim sb As StringBuilder
	sb.Initialize 
	sb.Append($"var ${fName} = "$)
	sb.Append(List2JSONPretty(schema))
	'
	'write to file
	Dim jsFile As String = fName & ".js"
	File.WriteString(File.DirApp, jsFile, sb.ToString)
	'open the file
	ViewFile(File.DirApp, jsFile) 
End Sub

Sub ExecuteMaps(jSQL As SQL, Query As String, StringArgs() As String) As List
	If Query.trim.ToLowerCase.StartsWith("select ") Then
	else If Query.trim.ToLowerCase.StartsWith("pragma ") Then
	else If Query.trim.ToLowerCase.StartsWith("show ") Then
	else If Query.trim.ToLowerCase.StartsWith("describe ") Then
	else If Query.trim.ToLowerCase.StartsWith("insert ") Then
	else If Query.trim.ToLowerCase.StartsWith("update ") Then
	else If Query.trim.ToLowerCase.StartsWith("delete ") Then
	Else
		Query = $"select * from ${Query}"$
	End If
	Dim lst As List
	lst.Initialize
	Try
		Dim res As Map
		Dim cur As ResultSet
		If 	StringArgs <> Null Then
			cur = jSQL.ExecQuery2(Query, StringArgs)
		Else
			cur = jSQL.ExecQuery(Query)
		End If
		Do While cur.NextRow
			res.Initialize
			For i = 0 To cur.ColumnCount - 1
				Dim fValue As String = cur.GetString2(i)
				fValue = FixNull(fValue)
				res.Put(cur.GetColumnName(i).ToLowerCase, fValue)
			Next
			lst.Add(res)
		Loop
		cur.Close
		Return lst
	Catch
		Log(Query)
		Log("ExecuteMaps: " & LastException.Message)
		Return lst
	End Try
End Sub

Sub CStr(o As Object) As String
	Return "" & o
End Sub

Sub FixNull(sObj As Object) As String
	Dim sValue As String
	If sObj = Null Then
		sValue = ""
	Else
		sValue = CStr(sObj)
	End If
	sValue = sValue.Replace("NULL","").Replace("null","")
	Return sValue
End Sub


Sub Map2Json(m As Map) As String
	Dim gen As JSONGenerator
	Dim outJSON As String
	gen.Initialize(m)
	outJSON = gen.ToString
	Return outJSON
End Sub

Sub Map2JsonPretty(m As Map) As String
	Dim gen As JSONGenerator
	Dim outJSON As String
	gen.Initialize(m)
	outJSON = gen.ToPrettyString(4)
	Return outJSON
End Sub

' convert a list containing maps to json
Sub List2JSON(lst As List) As String
	Dim sOut As String
	Dim jsonGen As JSONGenerator
	jsonGen.Initialize2(lst)
	sOut = jsonGen.ToString
	Return sOut
End Sub

Sub List2JSONPretty(lst As List) As String
	Dim sOut As String
	Dim jsonGen As JSONGenerator
	jsonGen.Initialize2(lst)
	sOut = jsonGen.ToPrettyString(4)
	Return sOut
End Sub


Sub RedirectOutput (Dir As String, FileName As String)
   #if RELEASE
	Dim out As OutputStream = File.OpenOutput(Dir, FileName, False) 'Set to True to append the logs
	Dim ps As JavaObject
	ps.InitializeNewInstance("java.io.PrintStream", Array(out, True, "utf8"))
	Dim jo As JavaObject
	jo.InitializeStatic("java.lang.System")
	jo.RunMethod("setOut", Array(ps))
	jo.RunMethod("setErr", Array(ps))
   #end if
End Sub


'open the app on browser
Sub ViewFile(Dir As String, FileName As String)
	Dim URL As String = File.GetUri(Dir,FileName)
	fx.ShowExternalDocument(URL)
End Sub


private Sub FixDelimiter(sValue As String) As String
	If sValue = "|" Then sValue = "\|"
	If sValue = "." Then sValue = "\."
	If sValue = "\" Then sValue = "\\"
	If sValue = "^" Then sValue = "\^"
	If sValue = "$" Then sValue = "\$"
	If sValue = "?" Then sValue = "\?"
	If sValue = "*" Then sValue = "\*"
	If sValue = "+" Then sValue = "\+"
	If sValue = "(" Then sValue = "\("
	If sValue = ")" Then sValue = "\)"
	If sValue = "[" Then sValue = "\["
	If sValue = "{" Then sValue = "\{"
	If sValue = ";" Then sValue = "\;"
	If sValue = "$" Then sValue = "\$"
	Return sValue
End Sub

private Sub MvField(sValue As String, iPosition As Int, Delimiter As String) As String
	If sValue.Length = 0 Then Return ""
	Dim xPos As Int: xPos = sValue.IndexOf(Delimiter)
	If xPos = -1 Then Return sValue
	Dim mValues() As String
	Dim tValues As Int
	Delimiter = FixDelimiter(Delimiter)
	mValues = Regex.split(Delimiter, sValue)
	tValues = mValues.Length -1
	Select Case iPosition
		Case -1
			Return mValues(tValues)
		Case -2
			Return mValues(tValues - 1)
		Case Else
			iPosition = iPosition - 1
			If iPosition <= -1 Then Return mValues(tValues)
			If iPosition > tValues Then Return ""
			Return mValues(iPosition)
	End Select
End Sub