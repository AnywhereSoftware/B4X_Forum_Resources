B4J=true
Group=Default Group
ModulesStructureVersion=1
Type=Class
Version=8.5
@EndOfDesignText@
#Event: Open(ID as String)
#Event: Connection(Connection As BANanoObject)
#Event: Call(Connection As BANanoObject)
#Event: Close()
#Event: Disconnected()
#Event: Error(Err as BANanoObject)
Sub Class_Globals
	Private BANano As BANano 'ignore
	Private Peer As BANanoObject 'ignore
	Private mCallBack As Object
	Private mEventName As String
	
	Public Const ERROR_BROWSER_INCOMPATIBLE As String ="browser-incompatible"
	Public Const ERROR_DISCONNECTED As String ="disconnected"
	Public Const ERROR_INVALID_ID As String ="invalid-id"
	Public Const ERROR_NETWORK As String ="network"
	Public Const ERROR_PEER_UNAVAILABLE As String ="peer-unavailable"
	Public Const ERROR_SSL_UNAVAILABLE As String ="ssl-incompatible"
	Public Const ERROR_SERVER_ERROR As String ="server-error"
	Public Const ERROR_SOCKET_ERROR As String ="socket-error"
	Public Const ERROR_SOCKET_CLOSED As String ="socket-closed"
	Public Const ERROR_UNAVAILABLE_ID As String ="unavailable-id"	
	Public Const ERROR_WEBRTC As String ="webrtc"
	
	Public const DEBUG_NO_LOGS As Int = 0
	Public const DEBUG_ERRORS As Int = 1
	Public const DEBUG_ERRORS_WARNINGS As Int = 2
	Public const DEBUG_ALL_LOGS As Int = 3
End Sub

' ID (Optional): Other peers can connect to this peer using the provided ID. If no ID is given, one will be generated by the brokering server. 
'               The ID must start and end with an alphanumeric character (lower or upper case character or a digit). In the middle of the ID spaces, 
'               dashes (-) and underscores (_) are allowed.
' ConnectOptions (Optional): set to Null if not used
Public Sub Initialize(callBack As Object, eventName As String, ID As String, ConnectOptions As PeerConnectOptions)
	mCallBack = callBack
	mEventName = eventName.ToLowerCase
	If ConnectOptions = Null Then
		If ID <> "" Then
			Peer.Initialize2("Peer", Array(ID))
		Else
			Peer.Initialize2("Peer", Null)
		End If
	Else
		Dim m As Map
		m.Initialize
		If ConnectOptions.Host <> "0.peerjs.com" Then m.Put("host", ConnectOptions.Host)
		If ConnectOptions.Port <> 443 Then m.Put("port", ConnectOptions.Port)
		If ConnectOptions.PingInterval <> 5000 Then m.Put("pingInterval", ConnectOptions.PingInterval)
		If ConnectOptions.Path <> "/" Then m.Put("path", ConnectOptions.Path)
		m.Put("secure", ConnectOptions.Secure)
		If ConnectOptions.Debug <> 0 Then m.Put("debug", ConnectOptions.Debug)
		If ConnectOptions.IceServers.Size > 0 Then
			Dim Config As Map
			Config.Initialize
			Config.Put("iceServers", ConnectOptions.IceServers)
			Config.Put("sdpSemantics", ConnectOptions.SdpSemantics)
			m.Put("config", Config)
		End If
		
		If ID <> "" Then
			Peer.Initialize2("Peer", Array(ID, m))
		Else
			Peer.Initialize2("Peer", Array(m))
		End If
	End If
	
	Dim Connection As BANanoObject
	Dim Err As BANanoObject
	
	Peer.Runmethod("on", Array("open", BANano.CallBack(mCallBack, mEventName & "_open", Array(ID))))
	Peer.Runmethod("on", Array("connection", BANano.CallBack(mCallBack, mEventName & "_connection", Array(Connection))))
	Peer.Runmethod("on", Array("call", BANano.CallBack(mCallBack, mEventName & "_call", Array(Connection))))
	Peer.Runmethod("on", Array("close", BANano.CallBack(mCallBack, mEventName & "_close", Null)))
	Peer.Runmethod("on", Array("disconnected", BANano.CallBack(mCallBack, mEventName & "_disconnected", Null)))
	Peer.Runmethod("on", Array("error", BANano.CallBack(mCallBack, mEventName & "_close", Array(Err))))
	
End Sub

' Close the connection to the server, leaving all existing data and media connections intact. 
' peer.disconnected will be set to true and the disconnected event will fire. This cannot be undone; the respective peer object 
' will no longer be able to create or receive any connections and its ID will be forfeited on the (cloud) server.
public Sub Disconnect()
	Peer.RunMethod("disconnect", Null)
End Sub

' Attempt to reconnect to the server with the peer's old ID. Only disconnected peers can be reconnected. 
' Destroyed peers cannot be reconnected. If the connection fails (as an example, if the peer's old ID is now taken), 
' the peer's existing connections will not close, but any associated errors events will fire.
public Sub Reconnect()
	Peer.RunMethod("reconnect", Null)
End Sub

' Close the connection to the server and terminate all existing connections. peer.destroyed will be set to true.
' This cannot be undone; the respective peer object will no longer be able to create or receive any connections, 
' its ID will be forfeited on the (cloud) server, and all of its data and media connections will be closed.
public Sub Destroy()
	Peer.RunMethod("destroy", Null)
End Sub

' The brokering ID of this peer. If no ID was specified in Initialize, this will be undefined until the open event is emitted.
public Sub getID() As String
	Return Peer.GetField("id").Result
End Sub

' A hash of all connections associated with this peer, keyed by the remote peer's ID.
' We recommend keeping track of connections yourself rather than relying on this hash.
public Sub getConnections() As BANanoObject
	Return Peer.GetField("connections").Result
End Sub

' false if there is an active connection to the PeerServer.
public Sub getDisconnected() As Boolean
	Return Peer.GetField("disconnected").Result
End Sub

' true if this peer and all of its connections can no longer be used.
public Sub getDestroyed() As Boolean
	Return Peer.GetField("destroyed").Result
End Sub

' Connects to the remote peer specified by id. Be sure to listen on the error event in case the connection fails.
'
' ID: The brokering ID of the remote peer (their Peer.ID)
' Label: A unique label by which you want to identify this data connection. If left unspecified, a label will be generated at random
' MetaData: Metadata associated with the connection, passed in by whoever initiated the connection
' Serialization: Can be "binary" (default), "binary-utf8", "json", or "none"
'                binary-utf8 will take a performance hit because of the way UTF8 strings are packed into binary format.
' Reliable: Whether the underlying data channels should be reliable (e.g. for large file transfers) or not (e.g. for gaming or streaming). Defaults to false.
public Sub Connect(ID As String, Label As String, MetaData As Object, Serialization As String, Reliable As Boolean) As BANanoObject
	Dim Options As BANanoObject
	Options.Initialize5
	If Label <> "" Then Options.SetField("label", Label)
	If MetaData <> Null Then Options.SetField("metadata", MetaData)
	If Serialization <> "" Then Options.SetField("serialization", Serialization)
	Options.SetField("reliable", Reliable)
	
	Return Peer.RunMethod("connect", Array(ID, Options)).Result
End Sub

' Calls the remote peer specified by id and returns a media connection. 
' Be sure to listen on the error event in case the connection fails.
'
' ID: The brokering ID of the remote peer (their peer.id)
' Stream: The caller's media stream
' Metadata: meta data associated with the connection, passed in by whoever initiated the connection. 
'           Can be accessed with mediaConnection.metadata. Can be any serializable type. Set to null if not used.
' sdpTransform: Function which runs before create offer to modify sdp offer message. Set to null if not used.
public Sub Call(ID As String, Stream As BANanoObject, MetaData As Object, sdpTransform As BANanoObject) As BANanoObject
	Dim Options As BANanoObject
	Options.Initialize5
	
	If MetaData <> Null Then Options.SetField("metadata", MetaData)
	If sdpTransform <> Null Then Options.SetField("sdpTransform", sdpTransform)
	
	Return Peer.RunMethod("call", Array(ID, Stream, Options)).Result
End Sub

' The current browser. This property can be useful in determining whether or not two peers can connect. 
' For example, as of now data connections are not yet interoperable between major browsers. 
' browser can currently have the values 'Firefox', 'Chrome', 'Unsupported', or 'Supported' (unknown WebRTC-compatible browser).
public Sub getBrowser() As String
	Dim util As BANanoObject
	util.Initialize("peerjs.util")
	Return util.GetField("browser").Result
End Sub

' Returns whether the AudioVideo feature is supported by the current browser. 
public Sub getSupportsAudioVideo() As Boolean
	Dim util As BANanoObject
	util.Initialize("peerjs.util")
	Return util.GetField("supports").GetField("audioVideo").Result
End Sub

' Returns whether the Data feature is supported by the current browser. 
public Sub getSupportsData() As Boolean
	Dim util As BANanoObject
	util.Initialize("peerjs.util")
	Return util.GetField("supports").GetField("data").Result
End Sub

' Returns whether the Binary feature is supported by the current browser. 
public Sub getSupportsBinary() As Boolean
	Dim util As BANanoObject
	util.Initialize("peerjs.util")
	Return util.GetField("supports").GetField("binary").Result
End Sub

' Returns whether the Reliable feature is supported by the current browser. 
public Sub getSupportsReliable() As Boolean
	Dim util As BANanoObject
	util.Initialize("peerjs.util")
	Return util.GetField("supports").GetField("reliable").Result
End Sub


