<?xml version="1.0" encoding="utf-8"?>
<root>
  <doclet-version-NOT-library-version>1.00</doclet-version-NOT-library-version>
  <b4x_version>9.80</b4x_version>
  <dependsOn>jcore</dependsOn>
  <dependsOn>jfx</dependsOn>
  <dependsOn>javaobject</dependsOn>
  <dependsOn>json</dependsOn>
  <class>
    <name>b4j.example.canvasext</name>
    <shortname>CanvasExt</shortname>
    <method>
      <name>IsInitialized</name>
      <comment>Tests whether the object has been initialized.</comment>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="appendSVGPath">_appendsvgpath</name>
      <comment>Appends a SVGPath string to the current path
M = moveTo
L = lineTo
H = horizontal lineTo
V = vertical lineTo
C = curveto
S = smooth curveto
Q = quadratic Bézier curve
T = smooth quadratic Bézier curveto
A = elliptical arc
Z = closePath
All of the commands above can also be expressed with lower letters.
Capital letters means absolutely positioned, lower cases means relatively positioned.
For more details look here:
https://www.w3schools.com/graphics/svg_path.asp
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>SVGPath</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="arc">_arc</name>
      <comment>Adds an arc to the arc end point in the current path
CenterX, CenterY coordinates of the center
RadiusX and RadiusY X and Y radius
StartAngle
Length length of the arc
Adds path elements to the current path to make an arc that uses Euclidean degrees.
This Euclidean orientation sweeps from East to North, then West, then South, then back to East.
The coordinates are transformed by the current transform as they are added to the path.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>CenterX</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>CenterY</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>RadiusX</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>RadiusY</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>StartAngle</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>Lenght</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="arcTo">_arcto</name>
      <comment>Adds an arc to the next point (x2, y2) in the current path
x1, y1 coordinates of point 1
x2, y2 coordinates of point 2
Radius
For details look here:
https://docs.oracle.com/javase/8/javafx/api/javafx/scene/canvas/GraphicsContext.html#arc-double-double-double-double-double-double-
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>x1</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>y1</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>x2</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>y2</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>Radius</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="beginPath">_beginpath</name>
      <comment>Begins a new current path
</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="bezierCurveTo">_beziercurveto</name>
      <comment>Adds a cubic Bezier curve to the next point (x1, y1) in the current path
xc1, yc1 coordinates of first Bezier control point
xc2, yc2 coordinates of second Bezier control point
x1, y1 coordinates of the end point
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>xc1</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>yc1</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>xc2</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>yc2</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>x1</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>y1</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Class_Globals">_class_globals</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="Clip">_clip</name>
      <comment>Intersects the current clip with the current path and applies it to subsequent rendering operation as an anti-aliased mask.
</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="closePath">_closepath</name>
      <comment>Closes the path
</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="DrawArc">_drawarc</name>
      <comment>Draws an eliptic Arc
x = left coordinate of the surrounding rectangle
Y = top coordinate of the surrounding rectangle
Width = width coordinate of the surrounding rectangle
Height = height coordinate of the surrounding rectangle
StartingAngle = starting angle in degrees, 0 = horizontal right
AngleExtend = angle extend in degrees positve counter clockwise
ArcType  possible values CHORD, OPEN or ROUND
  CHORD joins the begin and end points
  ROUND joins the begin and end points to the center point
  OPEN  the arc is open, when Filled = True is equivalent to CHORD
Color = fx.Colors.Color
Filled  True Filled, False only the line
Stroke = line width, has no effect when Filled = True
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>x</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>y</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>Width</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>Height</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>StartAngle</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>AngleExtend</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>ArcType</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Color</name>
        <type>anywheresoftware.b4j.objects.JFX.PaintWrapper</type>
      </parameter>
      <parameter>
        <name>Filled</name>
        <type>boolean</type>
      </parameter>
      <parameter>
        <name>LineWidth</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="DrawArc2">_drawarc2</name>
      <comment>Draws a circular Arc
CenterX = center X coordinate
CenterY = center X coordinate
Radius = radius of the arc
StartingAngle = starting angle in degrees, 0 = horizontal right
AngleExtend = angle extend in degrees positve counter clockwise
ArcType  possible values CHORD, OPEN or ROUND
  CHORD joins the begin and end points
  ROUND joins the begin and end points to the center point
  OPEN  the arc is open, when Filled = True is ie equivalent to CHORD
Color = fx.Colors.Color
Filled  True Filled, False only the line
Stroke = line width, has no effect when Filled = True
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>CenterX</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>CenterY</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>Radius</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>StartAngle</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>AngleExtend</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>ArcType</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Color</name>
        <type>anywheresoftware.b4j.objects.JFX.PaintWrapper</type>
      </parameter>
      <parameter>
        <name>Filled</name>
        <type>boolean</type>
      </parameter>
      <parameter>
        <name>LineWidth</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="DrawDashedLine">_drawdashedline</name>
      <comment>Draws a dashed line
x = left coordinate of the surrounding rectangle
Y = top coordinate of the surrounding rectangle
Width = width coordinate of the surrounding rectangle
Height = height coordinate of the surrounding rectangle
Radius = corner radius
Color = fx.Colors.Color
Filled  True Filled, False only the line
Stroke = line width, has no effect when Filled = True
Example:
Private Dashes(4)	As Double
Dashes = Array As Double(15, 5, 35, 10)
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>x1</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>y1</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>x2</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>y2</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>Color</name>
        <type>anywheresoftware.b4j.objects.JFX.PaintWrapper</type>
      </parameter>
      <parameter>
        <name>LineWidth</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>LineDashes</name>
        <type>double[]</type>
      </parameter>
      <parameter>
        <name>LineDashOffset</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="DrawOval">_drawoval</name>
      <comment>Draws an Oval
x = left coordinate of the surrounding rectangle
Y = top coordinate of the surrounding rectangle
Width = width coordinate of the surrounding rectangle
Height = height coordinate of the surrounding rectangle
Color = fx.Colors.Color
Filled  True Filled, False only the line
Stroke = line width, has no effect when Filled = True
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>x</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>y</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>Width</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>Height</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>Color</name>
        <type>anywheresoftware.b4j.objects.JFX.PaintWrapper</type>
      </parameter>
      <parameter>
        <name>Filled</name>
        <type>boolean</type>
      </parameter>
      <parameter>
        <name>LineWidth</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="DrawPolygon">_drawpolygon</name>
      <comment>Draws a polygon
x() a one dimension array of the x coordinates
y() a one dimension array of the y coordinates
NumberPoints = number of points it can be smaller than the x and y array lenths
The polygon is automatically closed, no need to set the last point equal to the firrst one
Color = fx.Colors.Color
Filled  True Filled, False only the line
Stroke = line width, has no effect when Filled = True
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>x</name>
        <type>double[]</type>
      </parameter>
      <parameter>
        <name>y</name>
        <type>double[]</type>
      </parameter>
      <parameter>
        <name>NumberPoints</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>Color</name>
        <type>anywheresoftware.b4j.objects.JFX.PaintWrapper</type>
      </parameter>
      <parameter>
        <name>Filled</name>
        <type>boolean</type>
      </parameter>
      <parameter>
        <name>LineWidth</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="DrawPolyline">_drawpolyline</name>
      <comment>Draws a polyline
x() a one dimension array of the x coordinates
y() a one dimension array of the y coordinates
NumberPoints = number of points it can be smaller than the x and y arrays
Color = fx.Colors.Color
Stroke = line width, has no effect when Filled = True
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>x</name>
        <type>double[]</type>
      </parameter>
      <parameter>
        <name>y</name>
        <type>double[]</type>
      </parameter>
      <parameter>
        <name>NumberPoints</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>Color</name>
        <type>anywheresoftware.b4j.objects.JFX.PaintWrapper</type>
      </parameter>
      <parameter>
        <name>LineWidth</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="DrawPolyline2">_drawpolyline2</name>
      <comment>Draws a polyline with LineCap and LineJoin
x() a one dimension array of the x coordinates
y() a one dimension array of the y coordinates
NumberPoints = number of points it can be smaller than the x and y arrays
Color = fx.Colors.Color
LineWidth = line width, has no effect when Filled = True
strokeLineCap = line extremities shape, possible values: BUTT, ROUND, or SQUARE
strokeLineJoin = line join shapes, possible values: MITER, BEVEL or ROUND
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>x</name>
        <type>double[]</type>
      </parameter>
      <parameter>
        <name>y</name>
        <type>double[]</type>
      </parameter>
      <parameter>
        <name>NumberPoints</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>Color</name>
        <type>anywheresoftware.b4j.objects.JFX.PaintWrapper</type>
      </parameter>
      <parameter>
        <name>LineWidth</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>strokeLineCap</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>strokeLineJoin</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="DrawRect">_drawrect</name>
      <comment>Draws a Rectangle
x = left coordinate of the surrounding rectangle
Y = top coordinate of the surrounding rectangle
Width = width coordinate of the surrounding rectangle
Height = height coordinate of the surrounding rectangle
Color = fx.Colors.Color
Filled  True Filled, False only the line
Stroke = line width, has no effect when Filled = True
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>x</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>y</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>Width</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>Height</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>Color</name>
        <type>anywheresoftware.b4j.objects.JFX.PaintWrapper</type>
      </parameter>
      <parameter>
        <name>Filled</name>
        <type>boolean</type>
      </parameter>
      <parameter>
        <name>LineWidth</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="DrawRect2">_drawrect2</name>
      <comment>Draws a Rectangle
x1 = left coordinate of the rectangle
Y1 = top coordinate of the rectangle
x2 = right coordinate of the rectangle
y2 = bottom coordinate of the rectangle
Color = fx.Colors.Color
Filled  True Filled, False only the line
Stroke = line width, has no effect when Filled = True
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>x1</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>y1</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>x2</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>y2</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>Color</name>
        <type>anywheresoftware.b4j.objects.JFX.PaintWrapper</type>
      </parameter>
      <parameter>
        <name>Filled</name>
        <type>boolean</type>
      </parameter>
      <parameter>
        <name>LineWidth</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="DrawRectRounded">_drawrectrounded</name>
      <comment>Draws a rouded Rectangle
x = left coordinate of the surrounding rectangle
Y = top coordinate of the surrounding rectangle
Width = width coordinate of the surrounding rectangle
Height = height coordinate of the surrounding rectangle
ArcWidth = corner arc width  for a radius set both Arc values the same
ArcHeight = corner arc height
Color = fx.Colors.Color
Filled  True Filled, False only the line
Stroke = line width, has no effect when Filled = True
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>x</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>y</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>Width</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>Height</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>ArcWidth</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>ArcHeight</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>Color</name>
        <type>anywheresoftware.b4j.objects.JFX.PaintWrapper</type>
      </parameter>
      <parameter>
        <name>Filled</name>
        <type>boolean</type>
      </parameter>
      <parameter>
        <name>LineWidth</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="DrawRectRounded2">_drawrectrounded2</name>
      <comment>Draws a rouded Rectangle
x1 = left coordinate of the rectangle
Y1 = top coordinate of the rectangle
x2 = right coordinate of the rectangle
y2 = bottom coordinate of the rectangle
ArcWidth = corner arc width		for a radius set both Arc values the same
ArcHeight = corner arc height
Color = fx.Colors.Color
Filled  True Filled, False only the line
Stroke = line width, has no effect when Filled = True
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>x1</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>y1</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>x2</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>y2</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>ArcWidth</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>ArcHeight</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>Color</name>
        <type>anywheresoftware.b4j.objects.JFX.PaintWrapper</type>
      </parameter>
      <parameter>
        <name>Filled</name>
        <type>boolean</type>
      </parameter>
      <parameter>
        <name>LineWidth</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="DrawText3">_drawtext3</name>
      <comment>Draws a text
Text = text to draw
x = x coordinate of the reference point
y = y coordinate of the reference point
Font = text font name
Color =  fx.Colors.Color
HorizontalAlignment possible values: LEFT, CENTER, RIGHT
VerticalAlignment	 possible values: TOP, CENTER, BASELINE, or BOTTOM
Filled 	True for standard text  False for empty text.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Text</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>x</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>y</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>Font</name>
        <type>anywheresoftware.b4j.objects.JFX.FontWrapper</type>
      </parameter>
      <parameter>
        <name>Color</name>
        <type>anywheresoftware.b4j.objects.JFX.PaintWrapper</type>
      </parameter>
      <parameter>
        <name>HorizontalAlignment</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>VerticalAlignment</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Filled</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="fill">_fill</name>
      <comment>Fills the current path (fills the area)
</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="fillPolygon">_fillpolygon</name>
      <comment>Fills a polygon with the current fill properties
x() a one dimension array of the x coordinates
y() a one dimension array of the y coordinates
NumberPoints = number of points it can be smaller than the x and y array lenths
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>x</name>
        <type>double[]</type>
      </parameter>
      <parameter>
        <name>y</name>
        <type>double[]</type>
      </parameter>
      <parameter>
        <name>NumberPoints</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="GetPaint">_getpaint</name>
      <comment>Returns the paint object according to the color string
</comment>
      <returntype>anywheresoftware.b4j.objects.JFX.PaintWrapper</returntype>
      <parameter>
        <name>Color</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="GetPixelColor">_getpixelcolor</name>
      <comment>Gets the color of the pixel at the x and y coordinates
Uses PixelReader
</comment>
      <returntype>anywheresoftware.b4j.objects.JFX.PaintWrapper</returntype>
      <parameter>
        <name>x</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>y</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="GetTransformMatrix">_gettransformmatrix</name>
      <comment>Returns the 2D Transform matrix in a 2 x 3 Doube Array
Mxx  Mxy  Tx
Myx  Myy  Ty
</comment>
      <returntype>double[][]</returntype>
    </method>
    <method>
      <name DesignerName="GetTransformMatrixTx">_gettransformmatrixtx</name>
      <comment>Returns Tx, the x Transfer value from the 2D Transform matrix
</comment>
      <returntype>double</returntype>
    </method>
    <method>
      <name DesignerName="GetTransformMatrixTy">_gettransformmatrixty</name>
      <comment>Returns Ty, the y Transfer value from the 2D Transform matrix
</comment>
      <returntype>double</returntype>
    </method>
    <method>
      <name DesignerName="Initialize">_initialize</name>
      <comment>Initializes the object.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>ba</name>
        <type>anywheresoftware.b4a.BA</type>
      </parameter>
      <parameter>
        <name>Canvas</name>
        <type>anywheresoftware.b4j.objects.CanvasWrapper</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="InitTransformMatrix">_inittransformmatrix</name>
      <comment>Initializes the Transform matrix to
1  0  0
0  1  0
</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="isPointInPath">_ispointinpath</name>
      <comment>Returns true if the given point is insides the current path
</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>x</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>y</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="lineTo">_lineto</name>
      <comment>Adds a line to the next point (x, y) in the current path
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>x</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>y</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="moveTo">_moveto</name>
      <comment>Moves to the next point (x, y) in the current path
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>x</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>y</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="quadraticCurveTo">_quadraticcurveto</name>
      <comment>Adds a quadratic curve to the next point (x1, y1) in the current path
Adds segments to the current path to make a quadratic Bezier curve.
xc, yc coordinates of the control point
x1, y1 coordinates of the end point
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>xc</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>yc</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>x1</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>y1</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Restore">_restore</name>
      <comment>Pops the state off of the stack, setting the following attributes to their value at the time when that state was pushed onto the stack.
</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="Rotate">_rotate</name>
      <comment>Rotates the future drawings by Angle
cos(Angle)  -sin(Angle)  0
sin(Angle)   cos(Angle)  0
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Angle</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Save">_save</name>
      <comment>Saves the following attributes onto a stack.
</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="Scale">_scale</name>
      <comment>Scales the current transform matrix by x, y
This is cumulative, the current scale is multiplied be this one.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>x</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>y</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SetFill">_setfill</name>
      <comment>Sets the filled color
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Color</name>
        <type>anywheresoftware.b4j.objects.JFX.PaintWrapper</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SetLineCap">_setlinecap</name>
      <comment>Sets the line Cap
possible values are SQUARE, BUTT, ROUND
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>LineCap</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SetLineDashes">_setlinedashes</name>
      <comment>Sets the line dashes
LineDashes() array of doubles of finite non-negative dash lengths
Example:&lt;code&gt;
Private Dashes(4)	As Double
Dashes = Array As Double(15, 5, 35, 10)
cvsTestExt.DrawDashedLine(0, 10, cvsTest.Width, 10, fx.Colors.Red, 2, Dashes, 0)
&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>LineDashes</name>
        <type>double[]</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SetLineDashOffset">_setlinedashoffset</name>
      <comment>Sets the line dash offset
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>LineDashOffset</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SetLineJoin">_setlinejoin</name>
      <comment>Sets the line Join
possible values are MITER, BEVEL, ROUND
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>LineJoin</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SetLineWidth">_setlinewidth</name>
      <comment>Sets the line width
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>LineWidth</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SetMiterLimit">_setmiterlimit</name>
      <comment>Sets the miter Limit
possible values are MITER, BEVEL, ROUND
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>MiterLimit</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SetPixelColor">_setpixelcolor</name>
      <comment>Sets the color of the pixel at the x and y coordinates
Uses PixelWriter
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>x</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>y</name>
        <type>int</type>
      </parameter>
      <parameter>
        <name>Color</name>
        <type>anywheresoftware.b4j.objects.JFX.PaintWrapper</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SetScaleX">_setscalex</name>
      <comment>Scales the x axis of the entire Canvas
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>scaleX</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SetScaleY">_setscaley</name>
      <comment>Scales the y axis of the entire Canvas
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>ScaleY</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SetStroke">_setstroke</name>
      <comment>Sets the stroke (line) color
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Color</name>
        <type>anywheresoftware.b4j.objects.JFX.PaintWrapper</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SetTransform">_settransform</name>
      <comment>Sets the Transform matrix
be aware that the values are column by column
mxx  mxy  mxt
myx  myy  myt
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>mxx</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>myx</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>mxy</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>myy</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>mxt</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>myt</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SetTranslateX">_settranslatex</name>
      <comment>Moves the Canvas horizontally by x pixels
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>x</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="SetTranslateY">_settranslatey</name>
      <comment>Moves the Canvas vertically by y pixels
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>y</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="stroke">_stroke</name>
      <comment>Strokes (draws) the current path
</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="strokeLine">_strokeline</name>
      <comment>Strokes (draws) a line with the current stroke properties
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>x1</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>y1</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>x2</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>y2</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="strokePolygon">_strokepolygon</name>
      <comment>Strokes (draws) a polygon with the current stroke properties
x() a one dimension array of the x coordinates
y() a one dimension array of the y coordinates
NumberPoints = number of points it can be smaller than the x and y array lenths
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>x</name>
        <type>double[]</type>
      </parameter>
      <parameter>
        <name>y</name>
        <type>double[]</type>
      </parameter>
      <parameter>
        <name>NumberPoints</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="strokePolyline">_strokepolyline</name>
      <comment>Strokes (draws) a polyline with the current stroke properties
x() a one dimension array of the x coordinates
y() a one dimension array of the y coordinates
NumberPoints = number of points, it can be smaller than the x and y array lenths
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>x</name>
        <type>double[]</type>
      </parameter>
      <parameter>
        <name>y</name>
        <type>double[]</type>
      </parameter>
      <parameter>
        <name>NumberPoints</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Transform">_transform</name>
      <comment>Concatenates the input to the current Transform matrix
be aware that the values are column by column
mxx  mxy  mxt
myx  myy  myt
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>mxx</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>myx</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>mxy</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>myy</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>mxt</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>myt</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Translate">_translate</name>
      <comment>Translates the future drawings by x and y
1  0  x
0  1  y
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>x</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>y</name>
        <type>double</type>
      </parameter>
    </method>
  </class>
  <version>1.1</version>
  <author>Klaus CHRISTL (klaus)</author>
</root>