B4J=true
Group=Default Group
ModulesStructureVersion=1
Type=Class
Version=5.9
@EndOfDesignText@
'Class Module
Sub Class_Globals
  'Private fx As JFX ' Uncomment if required. For B4j only
  Private JO As JavaObject
  Type MidiBarMetricsType(StartTick As Long, BarTicks As Long, Numerator As Int, Denominator As Int)

End Sub
'Initializes the object. You can add parameters to this method if needed.
Public Sub Initialize
  'This is an autogenerated constructor, there may not be a matching constructor in the class, you will then have to remove the next line of code
  JO.InitializeStatic("javax.sound.midi.Track")
End Sub

'Adds a new event to the track.
Public Sub Add(Event As MidiEvent) As Boolean
  Return JO.RunMethod("add",Array As Object(Event.GetObject))
End Sub
'Obtains the event at the specified index.
Public Sub Get(Index As Int) As MidiEvent
	Dim Mev As MidiEvent
	Mev.Initialize
	Mev.SetObject(JO.RunMethod("get",Array As Object(Index)))
  Return Mev
End Sub
'Returns a hash code value for the object.
Public Sub getHashCode As Int
	Return JO.RunMethod("hashCode",Null)
End Sub
'Removes the specified event from the track.
Public Sub Remove(Event As MidiEvent) As Boolean
  Return JO.RunMethod("remove",Array As Object(Event.GetObject))
End Sub
'Obtains the number of events in this track.
Public Sub Size As Int
  Return JO.RunMethod("size",Null)
End Sub
'Obtains the length of the track, expressed in MIDI ticks.
Public Sub Ticks As Long
  Return JO.RunMethod("ticks",Null)
End Sub

'Get the unwrapped object
Public Sub GetObject As Object
  Return JO
End Sub

'Get the unwrapped object As a JavaObject
Public Sub GetObjectJO As JavaObject
  Return JO
End Sub
'Comment if not needed

'Set the underlying Object, must be of correct type
Public Sub SetObject(Obj As Object)
	JO = Obj
End Sub


'Returns the track name if there is one
Public Sub GetTrackName(Chrset As String) As String
	For i = 0 To Size - 1
		Dim MEvt As MidiEvent = Get(i)
		If MEvt.GetMessage.IsMidiMetaMessage Then
				If MEvt.GetMessage.AsMidiMetaMessage.GetType_ = MidiMetaMessage_Static.SEQ_OR_TRACK_NAME Then
				Return MEvt.GetMessage.AsMidiMetaMessage.GetMetaText(Chrset)
			End If
		End If
	Next
	Return ""
End Sub

'Returns the Instrument name if there is one
Public Sub GetInstrumentName(ChrSet As String)As String
	For i = 0 To Size - 1
		Dim Mevt As MidiEvent = Get(i)
		If Mevt.GetMessage.IsMidiMetaMessage Then
			If Mevt.GetMessage.GetMessage(1) = MidiMetaMessage_Static.INSTRUMENT_NAME Then
				Return Mevt.GetMessage.AsMidiMetaMessage.GetMetaText(ChrSet)
			End If
		End If
	Next
	Return ""
End Sub

'Returns a Map of the time signatures in this midi track. Key = Tick, Value = TimeSignatureType
'This is a helper method, if you are parsing the track it would be more efficient 
'to capture these yourself.  The list may be empty in which case a time signature
'of 4/4 is to be assumed.
'For a type 0 Midifile, there could be a number of time signatures in the track
'For a type 1 midifile, the time signatures SHOULD be in track 0
'For a type 2 midi file each track SHOULD have a time signature
Public Sub GetTimeSignatures(Seq As MidiSequence) As Map
	Dim M As Map
	M.Initialize
	For i = 0 To Size - 1
		Dim Mevt As MidiEvent = Get(i)
		If Mevt.GetMessage.IsMidiMetaMessage And Mevt.GetMessage.AsMidiMetaMessage.GetType_ = MidiMetaMessage_Static.TIME_SIGNATURE Then
			M.Put(Mevt.GetTick,MidiUtils.TimeSigFromEvent(Mevt,Seq))
		End If
	Next
	Return M
End Sub

Public Sub GetBarMetrics(Seq As MidiSequence) As Map
	Dim TSMap As Map = Seq.GetTracks(0).GetTimeSignatures(Seq)
	Dim Key As Long = 0
	If TSMap.Size = 0 Or TSMap.ContainsKey(Key) = False Then
		Seq.GetTracks(0).Add(MidiEventBuilder.TimesignatureEvent(4,4,0))
		TSMap = Seq.GetTracks(0).GetTimeSignatures(Seq)
	End If
	Dim Result As Map
	Result.Initialize
	
	Dim KeyCount As Int
	Dim BarStart As Long
	Dim NextTick As Long = 0
	For Key = 0 To TSMap.Size - 1
		Dim TS As TimeSignatureType = TSMap.Get(NextTick)
		If Key < TSMap.Size - 1 Then
			KeyCount = KeyCount + 1
			NextTick = TSMap.GetKeyAt(KeyCount)
		Else
			NextTick = Seq.GetTickLength
		End If
		Do While BarStart < NextTick
			Dim B As MidiBarMetricsType
			B.Initialize
			B.BarTicks = TS.BarTicks
			B.Numerator = TS.Numerator
			B.Denominator = TS.Denominator
			Result.Put(BarStart,B)
			BarStart = BarStart + TS.BarTicks
		Loop
	Next
	
	'Add one more at the end of the list in case the sequence
	'does not end on a bar line
	Dim B As MidiBarMetricsType
	B.Initialize
	B.BarTicks = TS.BarTicks
	B.Numerator = TS.Numerator
	B.Denominator = TS.Denominator
	Result.Put(BarStart,B)
	
	Return Result
End Sub