B4J=true
Group=Default Group
ModulesStructureVersion=1
Type=Class
Version=5.9
@EndOfDesignText@
'Class Module
#Event: Received(Msg As MidiShortMessage, TimeStamp As Long)
Sub Class_Globals
	'Private fx As JFX ' Uncomment if required. For B4j only
	Private TJO As JavaObject
	Private ListenerMap As Map
End Sub
'Initializes the object. You can add parameters to this method if needed.
Public Sub Initialize
	'This is an autogenerated constructor, there may not be a matching constructor in the class, you will then have to remove the next line of code
	TJO.InitializeStatic("javax.sound.midi.Transmitter")
	
End Sub

'Indicates that the application has finished using the transmitter, and that limited resources it requires may be released or made available.
Public Sub Close
	TJO.RunMethod("close",Null)
	If ListenerMap.IsInitialized Then  ListenerMap.Clear
End Sub
'Obtains the current receiver to which this transmitter will deliver MIDI messages.
Public Sub GetReceiver As MidiReceiver
	Dim Wrapper As MidiReceiver
	Wrapper.Initialize
	Wrapper.SetObject(TJO.RunMethod("getReceiver",Null))
	Return Wrapper
End Sub
'Sets the receiver to which this transmitter will deliver MIDI messages.
Public Sub SetReceiver(TReceiver As MidiReceiver)
	Dim MEJO As JavaObject = Me
	MEJO.RunMethod("setReceiver",Array(TJO,TReceiver.GetObject))
	
'	Dim R As Reflector
'	R.Target = TJO
'	R.RunMethod4("setReceiver",Array As Object(TReceiver.GetObject),Array As String("javax.sound.midi.Receiver"))
End Sub

Public Sub AddListener(Callback As Object,EventName As String) As MidiReceiver
	Dim R As MidiReceiver
	If Not (SubExists(Callback,EventName & "_Received")) Then Return R
	If ListenerMap.IsInitialized = False Then
		ListenerMap.Initialize
		Dim O As Object = TJO.CreateEvent("javax.sound.midi.Receiver","MidiData","")
		Dim R As MidiReceiver
		R.Initialize
		R.SetObject(O)
		SetReceiver(R)
	End If
	Dim LT As MidiListenerClass = GetListener(Callback,EventName)
	If LT.IsInitialized Then
		R = ListenerMap.Get(LT)
	Else
		Dim LT As MidiListenerClass
		LT.Initialize(Callback,EventName)
		ListenerMap.Put(LT,R)
	End If
	Return R
End Sub

Private Sub GetListener(CallBack As Object,EventName As String) As MidiListenerClass
	For Each LT As MidiListenerClass In ListenerMap.Keys
		If LT.Callback = CallBack And LT.EventName = EventName Then Return LT
	Next
	Dim LT As MidiListenerClass
	Return LT
End Sub

Private Sub MidiData_Event (MethodName As String, Args() As Object)
	Dim Msg As MidiMessage
	Msg.Initialize
	Msg.SetObject(Args(0))
	For Each LT As MidiListenerClass In ListenerMap.Keys
		CallSub3(LT.Callback,LT.EventName & "_Received",Msg,Args(1))
	Next
End Sub

Public Sub RemoveListener(R As MidiReceiver)
	ListenerMap.Remove(R)
End Sub

'Get the unwrapped object
Public Sub GetObject As Object
	Return TJO
End Sub

'Get the unwrapped object As a JavaObject
Public Sub GetObjectJO As JavaObject
	Return TJO
End Sub
'Comment if not needed

'Set the underlying Object, must be of correct type
Public Sub SetObject(Obj As Object)
	TJO = Obj
End Sub


#if java
import javax.sound.midi.Transmitter;
import javax.sound.midi.Receiver;

public void setReceiver(Transmitter tra, Receiver rec){
	tra.setReceiver(rec);
}
#End If
