B4J=true
Group=Default Group
ModulesStructureVersion=1
Type=Class
Version=5.9
@EndOfDesignText@
'Class Module
Sub Class_Globals
	'Private fx As JFX ' Uncomment if required. For B4j only
	Private TJO As JavaObject

End Sub
'Initializes the object. You can add parameters to this method if needed.
Public Sub Initialize
	'This is an autogenerated constructor, there may not be a matching constructor in the class, you will then have to remove the next line of code
	TJO.InitializeStatic("javax.sound.midi.Receiver")
End Sub

'Indicates that the application has finished using the receiver, and that limited resources it requires may be released or made available.
Public Sub Close
	TJO.RunMethod("close",Null)
End Sub
'Sends a MIDI message and time-stamp to this receiver.
Public Sub Send(Message As Object, TimeStamp As Long)
	Dim MEJO As JavaObject = Me
	MEJO.RunMethod("send",Array(TJO,GetWrappedObject(Message), TimeStamp))
End Sub

'Get the unwrapped object
Public Sub GetObject As Object
	Return TJO
End Sub

'Get the unwrapped object As a JavaObject
Public Sub GetObjectJO As JavaObject
	Return TJO
End Sub
'Comment if not needed

'Set the underlying Object, must be of correct type
Public Sub SetObject(Obj As Object)
	TJO = Obj
End Sub

'Gets a wrapped object from any wrapper class that has a GetObject Sub 
'without knowing it's type
Sub GetWrappedObject(jObj As JavaObject) As JavaObject
	Try
    #if Debug
    Return jObj.RunMethod("_getobject",Array(jObj))
    #end if
    #if Release
		Return jObj.RunMethod("_getobject",Null)
    #End if
	Catch
		Log("Invalid type passed to Sub " & GetType(jObj))
		Return Null
	End Try
End Sub

#If Java
import javax.sound.midi.MidiMessage;
import javax.sound.midi.Receiver;

public void send(Receiver rec,MidiMessage msg, Long timeStamp) {
	rec.send(msg,timeStamp);
}
#End If