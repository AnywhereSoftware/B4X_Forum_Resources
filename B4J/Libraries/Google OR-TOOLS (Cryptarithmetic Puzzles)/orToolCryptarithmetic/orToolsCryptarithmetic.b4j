AppType=JavaFX
Build1=Default,b4j.example
File1=Layout1.bjl
File2=Login.css
FileGroup1=Default Group
FileGroup2=Default Group
Group=Default Group
Library1=javaobject
Library2=jcore
Library3=jfx
Library4=jxui
Library5=cssutils
NumberOfFiles=2
NumberOfLibraries=5
NumberOfModules=0
Version=10
@EndOfDesignText@
#Region Project Attributes 
	#MainFormWidth: 1100
	#MainFormHeight: 600 
#End Region

#AdditionalJar: ortools-java-9.14.6206
#AdditionalJar: com.sun.jna_5.13.0
#AdditionalJar: protobuf-java-4.31.1

Sub Process_Globals
	Private fx As JFX
	Private MainForm As Form
	Private xui As XUI 

	
	Dim nativeMe As JavaObject


	Private TextArea1 As TextArea
End Sub

Sub AppStart (Form1 As Form, Args() As String)
	MainForm = Form1
	MainForm.RootPane.LoadLayout("Layout1")
	MainForm.Show
	
	nativeMe = Me
	TextArea1.Text = "CP + IS + FUN = TRUE" & CRLF

	Dim answerList As List
	answerList.Initialize
	answerList = nativeMe.RunMethod("main1", Null)
	
	For i = 0 To answerList.Size - 1 Step 20
		TextArea1.Text = TextArea1.Text & ("" &  answerList.Get(i) & answerList.Get(i+1) &  _
		                                   "" &  answerList.Get(i+2) & answerList.Get(i+3) & "+" & _
										   "" &  answerList.Get(i+4) & answerList.Get(i+5)  & _
										   "" &  answerList.Get(i+6) & answerList.Get(i+7) & "+" & _
										   "" &  answerList.Get(i+8) & answerList.Get(i+9) & answerList.Get(i+10) & answerList.Get(i+11) & answerList.Get(i+12) & answerList.Get(i+13) & " = " & _
										   "" &  answerList.Get(i+14) & answerList.Get(i+15) & answerList.Get(i+16) & answerList.Get(i+17) & answerList.Get(i+10) & answerList.Get(i+11)& answerList.Get(i+18) & answerList.Get(i+19)) & " = " & _
										   "" & answerList.Get(i+1) & answerList.Get(i+3) & " + " & answerList.Get(i+5) & answerList.Get(i+7) & " + " & _
										   "" & answerList.Get(i+9) & answerList.Get(i+11) & answerList.Get(i+13) & " = " & _
										   "" & answerList.Get(i+15) & answerList.Get(i+17) & answerList.Get(i+11) & answerList.Get(i+19) & CRLF
		
	Next
	
End Sub


#If Java


import com.google.ortools.Loader;
import com.google.ortools.sat.CpModel;
import com.google.ortools.sat.CpSolver;
import com.google.ortools.sat.CpSolverSolutionCallback;
import com.google.ortools.sat.CpSolverStatus;
import com.google.ortools.sat.IntVar;
import com.google.ortools.sat.LinearExpr;
import java.util.ArrayList;
import java.util.List;


static List<Object> answer = new ArrayList<>();

/** Cryptarithmetic puzzle. */

  static class VarArraySolutionPrinter extends CpSolverSolutionCallback {
    public VarArraySolutionPrinter(IntVar[] variables) {
      variableArray = variables;
    }

	
    @Override
    public void onSolutionCallback() {
      for (IntVar v : variableArray) {
//        System.out.printf("  %s = %d", v.getName(), value(v));
		answer.add(v.getName());
		answer.add(value(v));
      }
//      System.out.println();
      solutionCount++;
	  
    }

    public int getSolutionCount() {
      return solutionCount;
    }

    private int solutionCount;
    private final IntVar[] variableArray;
  }


  public static List main1() {
    Loader.loadNativeLibraries();
    // Create the model.
    CpModel model = new CpModel();

    final int base = 10;
    IntVar c = model.newIntVar(1, base - 1, "C");
    IntVar p = model.newIntVar(0, base - 1, "P");
    IntVar i = model.newIntVar(1, base - 1, "I");
    IntVar s = model.newIntVar(0, base - 1, "S");
    IntVar f = model.newIntVar(1, base - 1, "F");
    IntVar u = model.newIntVar(0, base - 1, "U");
    IntVar n = model.newIntVar(0, base - 1, "N");
    IntVar t = model.newIntVar(1, base - 1, "T");
    IntVar r = model.newIntVar(0, base - 1, "R");
    IntVar e = model.newIntVar(0, base - 1, "E");

    // We need to group variables in a list to use the constraint AllDifferent.
    IntVar[] letters = new IntVar[] {c, p, i, s, f, u, n, t, r, e};

    // Define constraints.
    model.addAllDifferent(letters);

    // CP + IS + FUN = TRUE
    model.addEquality(LinearExpr.weightedSum(new IntVar[] {c, p, i, s, f, u, n, t, r, u, e},
                          new long[] {base, 1, base, 1, base * base, base, 1, -base * base * base,
                              -base * base, -base, -1}),
        0);

    // Create a solver and solve the model.
    CpSolver solver = new CpSolver();
    VarArraySolutionPrinter cb = new VarArraySolutionPrinter(letters);
    // Tell the solver to enumerate all solutions.
    solver.getParameters().setEnumerateAllSolutions(true);
    // And solve.
    CpSolverStatus unusedStatus = solver.solve(model, cb);

	
    // Statistics.
    System.out.println("Statistics");
    System.out.println("  - conflicts : " + solver.numConflicts());
    System.out.println("  - branches  : " + solver.numBranches());
    System.out.println("  - wall time : " + solver.wallTime() + " s");
    System.out.println("  - solutions : " + cb.getSolutionCount());
	return answer;
  }


#End If





