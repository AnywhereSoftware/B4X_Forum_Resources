AppType=JavaFX
Build1=Default,b4j.simple_layout_designer
File1=Layout1.bjl
File10=sld08.png
File11=sld09.png
File12=sld10.png
File13=sld11.png
File2=notedialog_layout.bjl
File3=sld_doc.sld
File4=sld01.png
File5=sld02.png
File6=sld03.png
File7=sld04.png
File8=sld05.png
File9=sld06.png
FileGroup1=Default Group
FileGroup10=images
FileGroup11=images
FileGroup12=images
FileGroup13=images
FileGroup2=Default Group
FileGroup3=sld_files
FileGroup4=images
FileGroup5=images
FileGroup6=images
FileGroup7=images
FileGroup8=images
FileGroup9=images
Group=Default Group
Library1=jcore
Library2=jfx
Library3=jfx8print
Library4=json
Library5=jxui
Library6=xui views
Library7=javaobject
NumberOfFiles=13
NumberOfLibraries=7
NumberOfModules=0
Version=9.8
@EndOfDesignText@
#Region Project Attributes 
	#MainFormWidth: 1300
	#MainFormHeight: 650 
#End Region

Sub Process_Globals
	Private fx As JFX
	Private MainForm As Form
	Private xui As XUI 
	Type tagdata (PressedX As Int, PressedY As Int, count As Int, id As String, imgurl As String, _
		 backcolor As Int, brdthick As Int, brdcolor As Int, brdradius As Int, noborder As Boolean, _
		 fontfamily As String, fontsize As Int, isbold As Boolean, isitalic As Boolean, _
		 alignment As String, textcolor As Int)
	Private edgewidth As Int = 10
	Private resizing As Boolean = False
	Private xpress As Int
	Private ypress As Int
	Private lxpos As Int
	Private lypos As Int
	Private currlabel As Label
	Private nodecnt As Int = 0
	Private panemain As Pane
	Public layoutfilesfolder As String
	Public imagefilesfolder As String
	Private notedialog As B4XDialog
	Private lblnotetitle As Label
	Private tanote As TextArea
	Private spane As ScrollPane
	Private currpane As Pane
	Private panepressed As Boolean
	Private panemnu As ContextMenu
	Private lblmnu As ContextMenu
	'Private ColorPicker1 As ColorPicker
	Private fchoose As FileChooser
	Private mnu1 As MenuBar
	Private lblruler As Label
	Private pnscroll As Pane
	Private currfile As String
	Private lblcompinfo As Label
	Private clrpick As ColorPicker
	Private currnode As B4XView
	Private borderclr As ColorPicker
	Private spinradius As Spinner
	Private spinthick As Spinner
	Private cboxborder As CheckBox
	Private btnimgselect As Button
	Private btnsettext As Button
	Private btnimgremove As Button
	Private cmbfont As ComboBox
	Private spinsize As Spinner
	Private textclr As ColorPicker
	Private cboxbold As CheckBox
	Private cboxitalic As CheckBox
	Private cmbalign As ComboBox
	Private btnprtpane As Button
End Sub
Sub AppStart (Form1 As Form, Args() As String)
	MainForm = Form1
	MainForm.RootPane.LoadLayout("Layout1")
	MainForm.Title = "Simple Layout Designer"
	fchoose.Initialize
'	Dim mf As JavaObject = MainForm
'	mf.GetFieldJO("stage").RunMethod("setMaximized", Array(True))
	spane.InnerNode = pnscroll
	spane.InnerNode.PrefHeight = pnscroll.prefHeight
	lblruler.Style = "-fx-padding:0;"
	MainForm.Show
	MainForm.Resizable = False
	xui.SetDataFolder("simple_layout_designer")
	File.MakeDir(xui.DefaultFolder,"layoutfiles")
	layoutfilesfolder = File.DirData("simple_layout_designer") & "\layoutfiles"
	File.MakeDir(xui.DefaultFolder,"imagefiles")
	imagefilesfolder = File.DirData("simple_layout_designer") & "\imagefiles"
	copy_doc_files
	notedialog.Initialize(panemain)
	notedialog.PutAtTop = True
	notedialog.BodyTextColor = xui.Color_Blue
	notedialog.BackgroundColor = xui.Color_LightGray
	fill_cmbfont
	fill_cmbalign
End Sub
Private Sub copy_doc_files
	If File.Exists(layoutfilesfolder,"sld_doc.sld") = False Then
		File.Copy(File.DirAssets,"sld_doc.sld",layoutfilesfolder,"sld_doc.sld")
		File.Copy(File.DirAssets,"sld01.png",imagefilesfolder,"sld01.png")
		File.Copy(File.DirAssets,"sld02.png",imagefilesfolder,"sld02.png")
		File.Copy(File.DirAssets,"sld03.png",imagefilesfolder,"sld03.png")
		File.Copy(File.DirAssets,"sld04.png",imagefilesfolder,"sld04.png")
		File.Copy(File.DirAssets,"sld05.png",imagefilesfolder,"sld05.png")
		File.Copy(File.DirAssets,"sld06.png",imagefilesfolder,"sld06.png")
		File.Copy(File.DirAssets,"sld08.png",imagefilesfolder,"sld08.png")
		File.Copy(File.DirAssets,"sld09.png",imagefilesfolder,"sld09.png")
		File.Copy(File.DirAssets,"sld10.png",imagefilesfolder,"sld10.png")
		File.Copy(File.DirAssets,"sld11.png",imagefilesfolder,"sld11.png")
	End If
End Sub
Private Sub mnu1_Action
	Dim mitem As MenuItem = Sender
	Select mitem.Text
		Case "New _Label"
			add_new_label
		Case "New _Pane"
			add_new_pane
		Case "_Attach"
			attach_node_to_pane
		Case "_Detach"
			detach_node_from_pane
		Case "_Remove"
			remove_component
		Case "_New"
			reset_panemain
		Case "_Load"
			load_layout
		Case "_Save"
			save_layout
		Case "_Print"
			print_pane(panemain)
		Case "_Exit"
			ExitApplication
	End Select
End Sub
Private Sub reset_panemain
	panemain.RemoveAllNodes
	nodecnt = 0
	currlabel = Null
	currpane = Null
	currnode = Null
	lblcompinfo.text = ""
	currfile = "layout.sld"
	MainForm.Title = "Simple Layout Designer "
End Sub

Private Sub add_new_label
	panepressed = False
	Dim td As tagdata
	td.PressedX = 0
	td.PressedY = 0
	td.count = nodecnt
	td.id = "Label" & nodecnt
	Dim newlbl As Label
	newlbl.Initialize("lbl")
	newlbl.SetSize(100,50)
	newlbl.Top = 20		' top left corner	'panemain.Height - 60 => bottom left corner
	newlbl.Left = 20
	newlbl.Text = "Label" & nodecnt
	newlbl.Id = "Label" & nodecnt
	newlbl.Font = fx.CreateFont("Verdana",15,False,False)
	newlbl.Alignment = "TOP_LEFT"
	newlbl.WrapText = True
	CSSUtils.SetBorder(newlbl,2,fx.Colors.Black,5)
	Dim red As Int = Rnd(150,250)
	Dim green As Int = Rnd(150,250)
	Dim blue As Int = Rnd(150,250)
	CSSUtils.SetBackgroundColor(newlbl, fx.Colors.ARGB(255,red,green,blue))
	td.brdthick = 2
	td.brdcolor = xui.PaintOrColorToColor(fx.Colors.Black)
	td.brdradius = 5
	td.backcolor = xui.PaintOrColorToColor(fx.Colors.ARGB(255,red,green,blue))
	td.noborder = False
	td.fontfamily = "Verdana"
	td.fontsize = 15
	td.isbold = "false"
	td.isitalic = "false"
	td.alignment = "TOP_LEFT"
	td.textcolor = xui.PaintOrColorToColor(fx.Colors.Black)
	td.imgurl = ""
	newlbl.Tag = td
	'Log(td)
	'newlbl = set_contextmenu(newlbl)
	panemain.AddNode(newlbl,newlbl.Left,newlbl.top,100,50)
	nodecnt = nodecnt + 1
End Sub
Private Sub lblmenu_Action
	' no longer needed - use the properties panel on the right
	' a context menu pops up to much when moving or resizing a component 
	If Sender Is MenuItem Then		
		Dim mi As MenuItem = Sender
		Select mi.Text
			Case "Set text"
				Dim td As tagdata = currlabel.Tag
				Dim albl As Label = panemain.GetNode(td.count)
				Wait for(get_new_text(albl)) Complete (Result As String)
				albl.Text = Result
			Case "Set color"
				Dim td As tagdata = currlabel.Tag
				Dim albl As Label = panemain.GetNode(td.count)
				Wait for(show_colorpicker_dialog) Complete (Result1 As Paint)
				CSSUtils.SetBackgroundColor(albl, Result1)
			Case "Set background image"
				Dim td As tagdata = currlabel.Tag
				Dim albl As Label = panemain.GetNode(td.count)
				Dim img As String = select_image
				If img <> "" Then
					CSSUtils.SetBackgroundImage(albl,imagefilesfolder,img)
					td.imgurl = imagefilesfolder & "/" & img
					albl.Tag = td									
				End If
			Case "Remove"
				remove_component
			Case "Close"
				Private jo As JavaObject = lblmnu
				jo.RunMethod("hide",Array())
				lblcompinfo.Text = ""
				currnode = Null
		End Select
	End If
End Sub
Private Sub select_image As String
	fchoose.InitialDirectory = imagefilesfolder
	fchoose.setExtensionFilter("Image", Array As String("*.jpg","*.png"))
	Dim filename As String = fchoose.ShowOpen(MainForm)
	If filename = "" Then Return ""
	Dim filepath As String = filename.SubString2(0,filename.LastIndexOf("\"))
	filename = filename.SubString(filename.LastIndexOf("\")+1)
	'Log(filename)
	'Log(filepath)
	If File.Exists(imagefilesfolder,filename) = False Then
		File.Copy(filepath,filename,imagefilesfolder,filename)
	End If
	Return filename
End Sub
Private Sub remove_component
	If currnode.IsInitialized Then
		Dim td As tagdata = currnode.Tag
		panemain.RemoveNodeAt(td.count)
		nodecnt = 0
		For Each nod As Node In panemain.GetAllViewsRecursive
			If nod.Tag <> "" Then
				Dim td2 As tagdata = nod.Tag
				td2.count = nodecnt
				nod.Tag = td2
				nodecnt = nodecnt + 1
			End If
		Next
		currnode = Null
		lblcompinfo.Text = ""
	End If
End Sub
Private Sub lbl_MouseDragged (EventData As MouseEvent)
	panepressed = False
	Dim view As B4XView = Sender
	Dim td As tagdata = view.Tag
	If td.id.Contains("Pane") Then Return
	Dim ParentX As Int = EventData.X + view.Left
	Dim ParentY As Int = EventData.Y + view.Top
	If resizing = False Then
		view.Left = ParentX - td.PressedX
		view.Top = ParentY - td.PressedY
		If view.Left < 0 Then view.Left = 0
		If view.Top < 0 Then view.Top = 0
		If view.Left + view.Width > panemain.Width Then view.Left = panemain.Width - view.Width
		If view.top + view.Height > panemain.Height Then view.top = panemain.Height - view.Height
	Else
		view.As(Label).MouseCursor = fx.Cursors.CLOSED_HAND
		CSSUtils.SetBorder(view,10,fx.Colors.Blue,0)		
	End If
	currlabel = view
	currnode = view
End Sub
Private Sub lbl_MouseEntered (EventData As MouseEvent)
End Sub
Private Sub lbl_MouseExited (EventData As MouseEvent)
	panepressed = False
	Dim view As B4XView = Sender
	Dim td As tagdata = view.Tag
	If td.id.Contains("Pane") Then Return
	view.As(Label).MouseCursor = fx.Cursors.MOVE
	set_border(view)
End Sub
Private Sub lbl_MousePressed (EventData As MouseEvent)
	panepressed = False
	Dim view As B4XView = Sender
	Dim td As tagdata = view.Tag
	If td.id.Contains("Pane") Then Return
	td.PressedX = EventData.X
	td.PressedY = EventData.Y
	view.Tag = td
	xpress = EventData.X
	ypress = EventData.Y
	If td.PressedX <= edgewidth Or td.PressedX >= view.Width - edgewidth  Then resizing = True
	If td.PressedY <= edgewidth Or td.PressedY >= view.Height - edgewidth  Then resizing = True
	lxpos = td.PressedX + view.Left
	lypos = td.PressedY + view.Top
End Sub
Private Sub lbl_MouseReleased (EventData As MouseEvent)
	panepressed = False
	resizing = False
End Sub
Private Sub lbl_MouseMoved (EventData As MouseEvent)
	panepressed = False
	Dim view As B4XView = Sender
	Dim td As tagdata = view.Tag
	If td.id.Contains("Pane") Then Return
	Dim rightsizing As Int = view.Width - edgewidth
	Dim downsizing As Int = view.Height - edgewidth
	Dim leftsizing As Int = edgewidth
	Dim topsizing As Int = edgewidth
	If EventData.X > rightsizing Or EventData.Y > downsizing Or EventData.X < leftsizing Or EventData.Y < topsizing Then
		view.As(Label).MouseCursor = fx.Cursors.OPEN_HAND
		CSSUtils.SetBorder(view,10,fx.Colors.Blue,0)
	Else
		view.As(Label).MouseCursor = fx.Cursors.MOVE
		set_border(view)
	End If
End Sub
Private Sub lbl_MouseClicked(EventData As MouseEvent)
	Dim view As B4XView = Sender
	currlabel = view
	show_component_info(view)
	If view.Tag <> "panemain" Then
		'Private jo As JavaObject = lblmnu
		'jo.RunMethod("show",Array(view,EventData.X+view.Left,EventData.Y+view.Top))
	End If
	currnode = view
End Sub
Private Sub resize_label(ParentX As Double, ParentY As Double)
	Dim gap As Int = 2
	Dim minwidth As Int = edgewidth * 4
	Dim minheight As Int = edgewidth * 4
	If resizing = True Then
		If lxpos > 0 And lypos > 0 Then
			If xpress <= edgewidth Then	' left edge
				If lxpos > ParentX Then	' moving left
					If currlabel.Left - gap > 0 Then
						currlabel.Left = currlabel.Left - gap
						currlabel.prefWidth = currlabel.Width + gap
					End If
				Else	' moving right
					If currlabel.Width - gap > minwidth Then
						currlabel.Left = currlabel.Left + gap
						currlabel.prefWidth = currlabel.Width - gap
					End If
				End If
			End If
			If xpress >= (currlabel.Width - edgewidth) And xpress < currlabel.Width Then	' right edge
				If lxpos > ParentX Then	' moving left
					If currlabel.Width > minwidth Then
						currlabel.prefWidth = currlabel.Width - gap
						xpress = xpress - gap
					End If
				Else	' moving right
					If currlabel.Width + currlabel.Left < panemain.Width Then
						currlabel.prefWidth = currlabel.Width + gap
						xpress = xpress + gap
					End If
				End If
			End If
			If ypress <= edgewidth Then	'top edge
				If lypos > ParentY Then	' moving up
					If currlabel.Top - gap > 0 Then
						currlabel.Top = currlabel.Top - gap
						currlabel.prefHeight = currlabel.Height + gap
					End If
				Else	' moving down
					If currlabel.Height - gap > minheight Then
						currlabel.Top = currlabel.Top + gap
						currlabel.PrefHeight = currlabel.Height - gap
					End If
				End If
			End If
			If ypress >= (currlabel.Height - edgewidth) And ypress < currlabel.Height Then	' bottom edge
				If lypos > ParentY Then	' moving up
					If currlabel.Height > minheight Then
						currlabel.prefHeight = currlabel.Height - gap
						ypress = ypress - gap
					End If
				Else	'moving down
					If currlabel.Height + currlabel.Top < panemain.Height Then
						currlabel.prefHeight = currlabel.Height + gap
						ypress = ypress + gap
					End If
				End If
			End If
		End If
	End If
End Sub

Private Sub show_component_info(vw As B4XView)
	Dim td As tagdata = vw.Tag
	Dim str As String = ""
	str = str & "ID: " & td.id & CRLF
	str = str & "Left: " & vw.Left
	str = str & " Top: " & vw.Top & CRLF
	str = str & "Width: " & vw.Width
	str = str & " Height: " & vw.Height & CRLF
	Dim strimg As String = ""
	If td.imgurl <> "null" Then
		strimg = td.imgurl.SubString(td.imgurl.LastIndexOf("/")+1)
	End If
	str = str & "Image: " & strimg & CRLF
	str = str & "Background color: " & td.backcolor & CRLF
	str = str & "Border thickness: " & td.brdthick & CRLF
	str = str & "Border color: " & td.brdcolor & CRLF
	str = str & "Border radius: " & td.brdradius & CRLF
	Dim strnobrd As String = td.noborder
	str = str & "No Border: " & strnobrd & CRLF
	lblcompinfo.Text = str
	currnode = vw
	clrpick.SelectedColor = fx.Colors.From32Bit(td.backcolor)
	borderclr.SelectedColor = fx.Colors.From32Bit(td.brdcolor)
	spinthick.Value = td.brdthick
	spinradius.Value = td.brdradius
	cboxborder.Checked = td.noborder
	Dim ifont As Int = get_font_index(td.fontfamily)
	cmbfont.SelectedIndex = ifont
	spinsize.Value = td.fontsize
	cboxbold.Checked = td.isbold
	cboxitalic.Checked = td.isitalic
	Dim ialign As Int = get_align_index(td.alignment)
	cmbalign.SelectedIndex = ialign
	textclr.SelectedColor = fx.Colors.From32Bit(td.textcolor)
End Sub

Private Sub panemain_MouseClicked(EventData As MouseEvent)
End Sub
Private Sub panemain_MouseMoved (EventData As MouseEvent)

End Sub
Private Sub panemain_MouseReleased (EventData As MouseEvent)
	panepressed = False
	resizing = False
	lxpos = 0
	lypos = 0
End Sub
Private Sub panemain_MouseDragged (EventData As MouseEvent)
 	If resizing = False Then
		lxpos = 0
		lypos = 0
	End If
	If panepressed Then
		resize_pane(EventData.X,EventData.Y)
	Else
		resize_label(EventData.X,EventData.Y)
	End If
End Sub

Private Sub save_layout
	Dim llst As List
	llst.Initialize
	For Each nod As Node In panemain.GetAllViewsRecursive
		If nod.Tag <> "" Then
			Dim td As tagdata
			td = nod.tag
			Dim valuemap As Map
			valuemap.Initialize
			valuemap.Put("top",nod.Top)
			valuemap.Put("left",nod.Left)
			valuemap.Put("width",nod.PrefWidth)
			valuemap.Put("height",nod.PrefHeight)
			If td.id.Contains("Label") Then
				Dim strtxt As String = nod.As(Label).Text
				strtxt = strtxt.Replace(Chr(10),"&lf;")
				strtxt = strtxt.Replace("""","&quote;")
				strtxt = strtxt.Replace(",","&comma;")
			Else
				strtxt = ""				
			End If
			valuemap.Put("text","""" & strtxt & """")
			valuemap.Put("pressedx",td.PressedX)
			valuemap.Put("pressedy",td.PressedY)
			valuemap.Put("count",td.count)
			valuemap.Put("id",td.id)
			If td.imgurl <> Null Then
				Dim strurl As String = td.imgurl
				strurl = strurl.Replace("\","/")
				valuemap.Put("imgurl","""" & strurl & """")
			Else
				valuemap.Put("imgurl","""" & td.imgurl & """")
			End If
			'Dim strclr As String = 
			valuemap.Put("backcolor",td.backcolor)		'td.backcolor)
			valuemap.Put("brdthick",td.brdthick)
			'strclr = 
			valuemap.Put("brdcolor",td.brdcolor)			'td.brdcolor)
			valuemap.Put("brdradius",td.brdradius)
			Dim nobord As String
			If td.noborder = False Then
				nobord = "false"
			Else
				nobord = "true"	
			End If
			valuemap.Put("noborder","""" & nobord & """")
			valuemap.Put("fontfamily","""" & td.fontfamily & """")
			valuemap.Put("fontsize",td.fontsize)
			valuemap.Put("isbold","""" & td.isbold & """")
			valuemap.Put("isitalic","""" & td.isitalic & """")
			valuemap.Put("alignment","""" & td.alignment & """")
			valuemap.Put("textcolor",td.textcolor)
			llst.Add(valuemap)
		End If
	Next
	fchoose.InitialDirectory = layoutfilesfolder
	fchoose.InitialFileName = currfile		'"layout.sld"
	fchoose.setExtensionFilter("Layout", Array As String("*.sld"))
	Dim filename As String = fchoose.ShowSave(MainForm)
	If filename = "" Then Return
	'Dim filepath As String = filename.SubString2(0,filename.LastIndexOf("\"))
	filename = filename.SubString(filename.LastIndexOf("\")+1)
	If filename <> "" Then
		File.WriteList(layoutfilesfolder,filename,llst)
		currfile = filename
		MainForm.Title = "Simple Layout Designer - " & currfile
	End If	
End Sub
Private Sub load_layout
	fchoose.InitialDirectory = layoutfilesfolder
	fchoose.setExtensionFilter("Layout", Array As String("*.sld"))
	Dim filename As String = fchoose.ShowOpen(MainForm)
	If filename = "" Then Return
	'Dim filepath As String = filename.SubString2(0,filename.LastIndexOf("\"))
	filename = filename.SubString(filename.LastIndexOf("\")+1)
	currfile = filename
	MainForm.Title = "Simple Layout Designer - " & currfile
	panemain.RemoveAllNodes
	Dim llst As List
	llst.Initialize
	llst = File.ReadList(layoutfilesfolder,filename)
	For i = 0 To llst.Size - 1
		Dim valstr As String = llst.Get(i)
		Dim valuesmap As Map = valstr.As(JSON).ToMap
		Dim td As tagdata
		td.PressedX = valuesmap.Get("pressedx")
		td.PressedY = valuesmap.Get("pressedy")
		td.count = valuesmap.Get("count")
		td.id = valuesmap.Get("id")
		td.imgurl = valuesmap.Get("imgurl")
		'Log("load layout id: " & td.id)
		td.backcolor = valuesmap.Get("backcolor")
		td.brdthick = valuesmap.Get("brdthick")
		td.brdcolor = valuesmap.Get("brdcolor")
		td.brdradius = valuesmap.Get("brdradius")
		td.noborder = valuesmap.Get("noborder")
		td.fontfamily = valuesmap.Get("fontfamily")
		td.fontsize = valuesmap.Get("fontsize")
		td.isbold = valuesmap.Get("isbold")
		td.isitalic = valuesmap.Get("isitalic")
		td.alignment = valuesmap.Get("alignment")
		td.textcolor = valuesmap.Get("textcolor")
		If td.id.Contains("Label") Then
			load_label(td,valuesmap)
		Else
			load_pane(td,valuesmap)	
		End If
		'Log(td)
		nodecnt = i
	Next
	nodecnt = nodecnt + 1
End Sub
Private Sub load_label(td As tagdata,valuesmap As Map)
	Dim newlbl As Label
	newlbl.Initialize("lbl")
	newlbl.Top = valuesmap.Get("top")
	newlbl.Left = valuesmap.Get("left")
	newlbl.prefwidth = valuesmap.Get("width")
	newlbl.prefheight = valuesmap.Get("height")
	Dim strtxt As String = valuesmap.Get("text")
	strtxt = strtxt.Replace("&lf;",Chr(10))
	strtxt = strtxt.Replace("&quote;","""")
	strtxt = strtxt.Replace("&comma;",",")
	newlbl.Text = strtxt
	newlbl.Tag = td
	newlbl.Id = td.id
	newlbl.WrapText = True
	newlbl.TextColor = fx.Colors.From32Bit(td.textcolor)
	CSSUtils.SetStyleProperty(newlbl,"-fx-font-family",td.fontfamily)
	CSSUtils.SetStyleProperty(newlbl,"-fx-font-size",td.fontsize)
	If td.isitalic = "true" Then
		CSSUtils.SetStyleProperty(newlbl,"-fx-font-style","italic")
	Else
		CSSUtils.SetStyleProperty(newlbl,"-fx-font-style","normal")
	End If
	If td.isbold = "true" Then
		CSSUtils.SetStyleProperty(newlbl,"-fx-font-weight","bold")
	Else
		CSSUtils.SetStyleProperty(newlbl,"-fx-font-weight","normal")
	End If
	newlbl.Alignment = td.alignment
	CSSUtils.SetBorder(newlbl,td.brdthick,fx.Colors.From32Bit(td.brdcolor),td.brdradius)
	CSSUtils.SetBackgroundColor(newlbl, fx.Colors.From32Bit(td.backcolor))	
	If td.imgurl <> "" Then
		Dim folder As String = td.imgurl.SubString2(0,td.imgurl.LastIndexOf("/"))
		Dim fname As String = td.imgurl.SubString(td.imgurl.LastIndexOf("/")+1)
		CSSUtils.SetBackgroundImage(newlbl,folder,fname)
	End If
	panemain.AddNode(newlbl,newlbl.Left,newlbl.Top,newlbl.prefWidth,newlbl.prefHeight)
	'newlbl = set_contextmenu(newlbl)
End Sub
Private Sub load_pane(td As tagdata,valuesmap As Map)
	Dim newpnl As Pane
	newpnl.Initialize("pnl")
	newpnl.Top = valuesmap.Get("top")
	newpnl.Left = valuesmap.Get("left")
	newpnl.prefwidth = valuesmap.Get("width")
	newpnl.prefheight = valuesmap.Get("height")
	' color and border settings from td!
	td.noborder = valuesmap.Get("noborder")
	newpnl.Tag = td
	newpnl.Id = td.id
	CSSUtils.SetBorder(newpnl,td.brdthick,fx.Colors.From32Bit(td.brdcolor),td.brdradius)
	CSSUtils.SetBackgroundColor(newpnl, fx.Colors.From32Bit(td.backcolor))
	If td.imgurl <> "" Then
		Dim folder As String = td.imgurl.SubString2(0,td.imgurl.LastIndexOf("/"))
		Dim fname As String = td.imgurl.SubString(td.imgurl.LastIndexOf("/")+1)
		CSSUtils.SetBackgroundImage(newpnl,folder,fname)
	End If
	panemain.AddNode(newpnl,newpnl.Left,newpnl.Top,newpnl.prefWidth,newpnl.prefHeight)
	'newpnl = set_pane_contextmenu(newpnl)
End Sub

Private Sub set_contextmenu(nlbl As Label) As Label
	' no longer needed - use the properties panel on the right
	' a context menu pops up to much when moving or resizing a component
	panepressed = False
	lblmnu.Initialize("lblmenu")
	Dim mnuitem1 As MenuItem
	mnuitem1.Initialize("Set text","lblmenu")
	mnuitem1.Tag = nlbl.Tag
	lblmnu.MenuItems.Add(mnuitem1)
	Dim mnuitem2 As MenuItem
	mnuitem2.Initialize("Set color","lblmenu")
	mnuitem2.Tag = nlbl.Tag
	lblmnu.MenuItems.Add(mnuitem2)
	Dim mnuitem3 As MenuItem
	mnuitem3.Initialize("Set background image","lblmenu")
	mnuitem3.Tag = nlbl.Tag
	lblmnu.MenuItems.Add(mnuitem3)
	Dim mnuitem4 As MenuItem
	mnuitem4.Initialize("Remove","lblmenu")
	mnuitem4.Tag = nlbl.Tag
	lblmnu.MenuItems.Add(mnuitem4)
	Dim mnuitem5 As MenuItem
	mnuitem5.Initialize("Close","lblmenu")
	mnuitem5.Tag = nlbl.Tag
	lblmnu.MenuItems.Add(mnuitem5)
	Private jo As JavaObject = nlbl
	Private ev As Object = jo.CreateEventFromUI("javafx.event.EventHandler","lbl",False)
	jo.RunMethod("setOnContextMenuRequested",Array(ev))
	'nlbl.ContextMenu = lblmnu		' for a label this works with a right click
	Return nlbl
End Sub
Private Sub get_new_text(albl As Label) As ResumableSub
	Dim newtxt As String = ""
	Dim pnl As B4XView = xui.CreatePanel("")
	pnl.SetLayoutAnimated(0, 0dip, 0dip, 600dip, 400dip)
	pnl.LoadLayout("notedialog_layout")
	lblnotetitle.Text = "Set new text for label " & albl.Id
	tanote.Text = albl.text
	Dim rs1 As ResumableSub =  notedialog.ShowCustom(pnl, "OK", "", "CANCEL")
	Wait For (rs1) Complete (Result As Int)
	If Result = xui.dialogResponse_Positive Then
		newtxt = tanote.Text
	End If
	If Result = xui.dialogResponse_Cancel Then
		newtxt = albl.Text
	End If
	Return newtxt
End Sub
Private Sub print_pane(pn As Pane)
	Dim PJ As PrinterJob = PrinterJob_Static.CreatePrinterJob
	PJ.ShowPageSetupdialog(Null)
	PJ.ShowPrintDialog(Null)
	PJ.PrintPage(pn)
	PJ.EndJob
	' no dialogs
'	Dim P As Printer = Printer_Static.GetDefaultPrinter
'	Dim PJ As PrinterJob = PrinterJob_Static.CreatePrinterJob2(P)
'	PJ.PrintPage(pn)
'	PJ.EndJob
End Sub
Private Sub btnprtpane_Click
	If currnode.IsInitialized = False Then Return
	Dim td As tagdata = currnode.Tag
	If td.id.Contains("Pane") Then
		print_pane(currnode)
	End If
End Sub
Private Sub add_new_pane
	Dim td As tagdata
	td.PressedX = 0
	td.PressedY = 0
	td.count = nodecnt
	td.id = "Pane" & nodecnt
	Dim newpnl As Pane
	newpnl.Initialize("pnl")
	newpnl.SetSize(100,50)
	newpnl.Top = 80		' top left corner	'panemain.Height - 60 => bottom left corner
	newpnl.Left = 20
	newpnl.Id = "Pane" & nodecnt
	CSSUtils.SetBorder(newpnl,2,fx.Colors.Black,5)
	Dim red As Int = Rnd(150,250)
	Dim green As Int = Rnd(150,250)
	Dim blue As Int = Rnd(150,250)	
	CSSUtils.SetBackgroundColor(newpnl, fx.Colors.ARGB(255,red,green,blue))
	td.brdthick = 2
	td.brdcolor = xui.PaintOrColorToColor(fx.Colors.Black)
	td.brdradius = 5
	td.backcolor = xui.PaintOrColorToColor(fx.Colors.ARGB(255,red,green,blue))
	td.noborder = False
	td.fontfamily = "Verdana"
	td.fontsize = 15
	td.isbold = "false"
	td.isitalic = "false"
	td.alignment = "TOP_LEFT"
	td.textcolor = xui.PaintOrColorToColor(fx.Colors.Black)
	td.imgurl = ""
	newpnl.Tag = td
	'newpnl = set_pane_contextmenu(newpnl)
	panemain.AddNode(newpnl,newpnl.Left,newpnl.top,100,50)
	nodecnt = nodecnt + 1
End Sub
Private Sub set_pane_contextmenu(npnl As Pane) As Pane
	' no longer needed - use the properties panel on the right
	' a context menu pops up to much when moving or resizing a component
	panemnu.Initialize("pnlmenu")
	Dim mnuitem1 As MenuItem
	mnuitem1.Initialize("Set color","pnlmenu")
	mnuitem1.Tag = npnl.Tag
	panemnu.MenuItems.Add(mnuitem1)
	Dim mnuitem2 As MenuItem
	mnuitem2.Initialize("Set background image","pnlmenu")
	mnuitem2.Tag = npnl.Tag
	panemnu.MenuItems.Add(mnuitem2)
	Dim mnuitem3 As MenuItem
	mnuitem3.Initialize("Remove","pnlmenu")
	mnuitem3.Tag = npnl.Tag
	panemnu.MenuItems.Add(mnuitem3)
	Dim mnuitem4 As MenuItem
	mnuitem4.Initialize("Close","pnlmenu")
	mnuitem4.Tag = npnl.Tag
	panemnu.MenuItems.Add(mnuitem4)
	Private jo As JavaObject = npnl
	Private ev As Object = jo.CreateEventFromUI("javafx.event.EventHandler","pnl",False)
	jo.RunMethod("setOnContextMenuRequested",Array(ev))
	'npnl.ContextMenu = panemnu		' a panel doesn't have a property ContextMenu
	Return npnl
End Sub
Private Sub pnl_MouseClicked(EventData As MouseEvent)
	Dim view As B4XView = Sender
	currpane = view
	show_component_info(view)
	If view.Tag <> "panemain" Then
		'Private jo As JavaObject = panemnu
		'jo.RunMethod("show",Array(view,EventData.X+view.Left,EventData.Y+view.Top))
	End If
	currnode = view
End Sub
Private Sub pnl_MouseDragged (EventData As MouseEvent)
	panepressed = True
	Dim view As B4XView = Sender
	Dim td As tagdata = view.Tag
	Dim ParentX As Int = EventData.X + view.Left
	Dim ParentY As Int = EventData.Y + view.Top
	If resizing = False Then
		view.Left = ParentX - td.PressedX
		view.Top = ParentY - td.PressedY
		If view.Left < 0 Then view.Left = 0
		If view.Top < 0 Then view.Top = 0
		If view.Left + view.Width > panemain.Width Then view.Left = panemain.Width - view.Width
		If view.top + view.Height > panemain.Height Then view.top = panemain.Height - view.Height
	Else
		view.As(Pane).MouseCursor = fx.Cursors.CLOSED_HAND
		CSSUtils.SetBorder(view,10,fx.Colors.Blue,0)		
	End If
	currpane = view
	currnode = view
End Sub
Private Sub pnl_MouseEntered (EventData As MouseEvent)
End Sub
Private Sub pnl_MouseExited (EventData As MouseEvent)
	panepressed = False
	Dim view As B4XView = Sender
	view.As(Pane).MouseCursor = fx.Cursors.MOVE
	set_border(view)
End Sub
Private Sub pnl_MousePressed (EventData As MouseEvent)
	panepressed = True
	Dim view As B4XView = Sender
	Dim td As tagdata = view.Tag
	td.PressedX = EventData.X
	td.PressedY = EventData.Y
	view.Tag = td
	xpress = EventData.X
	ypress = EventData.Y
	If td.PressedX <= edgewidth Or td.PressedX >= view.Width - edgewidth  Then resizing = True
	If td.PressedY <= edgewidth Or td.PressedY >= view.Height - edgewidth  Then resizing = True
	lxpos = td.PressedX + view.Left
	lypos = td.PressedY + view.Top
End Sub
Private Sub pnl_MouseReleased (EventData As MouseEvent)
	panepressed = False
	resizing = False
End Sub
Private Sub pnl_MouseMoved (EventData As MouseEvent)
	panepressed = True
	Dim view As B4XView = Sender
	Dim rightsizing As Int = view.Width - edgewidth
	Dim downsizing As Int = view.Height - edgewidth
	Dim leftsizing As Int = edgewidth
	Dim topsizing As Int = edgewidth
	If EventData.X > rightsizing Or EventData.Y > downsizing Or EventData.X < leftsizing Or EventData.Y < topsizing Then
		view.As(Pane).MouseCursor = fx.Cursors.OPEN_HAND
		CSSUtils.SetBorder(view,10,fx.Colors.Blue,0)
	Else
		view.As(Pane).MouseCursor = fx.Cursors.MOVE
		set_border(view)
	End If
End Sub
Private Sub resize_pane(ParentX As Double, ParentY As Double)
	Dim gap As Int = 2
	Dim minwidth As Int = edgewidth * 4
	Dim minheight As Int = edgewidth * 4
	If resizing = True Then
		If lxpos > 0 And lypos > 0 Then
			If xpress <= edgewidth Then	' left edge
				If lxpos > ParentX Then	' moving left
					If currpane.Left - gap > 0 Then
						currpane.Left = currpane.Left - gap
						currpane.prefWidth = currpane.Width + gap
					End If
				Else	' moving right
					If currpane.Width - gap > minwidth Then
						currpane.Left = currpane.Left + gap
						currpane.prefWidth = currpane.Width - gap
					End If
				End If
			End If
			If xpress >= (currpane.Width - edgewidth) And xpress < currpane.Width Then	' right edge
				If lxpos > ParentX Then	' moving left
					If currpane.Width > minwidth Then
						currpane.prefWidth = currpane.Width - gap
						xpress = xpress - gap
					End If
				Else	' moving right
					If currpane.Width + currpane.Left < panemain.Width Then
						currpane.prefWidth = currpane.Width + gap
						xpress = xpress + gap
					End If
				End If
			End If
			If ypress <= edgewidth Then	'top edge
				If lypos > ParentY Then	' moving up
					If currpane.Top - gap > 0 Then
						currpane.Top = currpane.Top - gap
						currpane.prefHeight = currpane.Height + gap
					End If
				Else	' moving down
					If currpane.Height - gap > minheight Then
						currpane.Top = currpane.Top + gap
						currpane.PrefHeight = currpane.Height - gap
					End If
				End If
			End If
			If ypress >= (currpane.Height - edgewidth) And ypress < currpane.Height Then	' bottom edge
				If lypos > ParentY Then	' moving up
					If currpane.Height > minheight Then
						currpane.prefHeight = currpane.Height - gap
						ypress = ypress - gap
					End If
				Else	'moving down
					If currpane.Height + currpane.Top < panemain.Height Then
						currpane.prefHeight = currpane.Height + gap
						ypress = ypress + gap
					End If
				End If
			End If
		End If
	End If
End Sub
Private Sub pnlmenu_Action
	' no longer needed - use the properties panel on the right
	' a context menu pops up to much when moving or resizing a component
	'Log("pnlmenu_Action")
	If Sender Is MenuItem Then
		Dim mi As MenuItem = Sender
		Select mi.Text
			Case "Set color"
				Dim td As tagdata = currpane.Tag
				Dim apnl As Pane = panemain.GetNode(td.count)
				Wait for(show_colorpicker_dialog) Complete (Result As Paint)
				CSSUtils.SetBackgroundColor(apnl, Result)
			Case "Set background image"
				Dim td As tagdata = currpane.Tag
				Dim apnl As Pane = panemain.GetNode(td.count)
				Dim img As String = select_image
				If img <> "" Then
					CSSUtils.SetBackgroundImage(apnl,imagefilesfolder,img)
					td.imgurl = imagefilesfolder & "/" & img
					apnl.Tag = td
				End If
			Case "Remove"
				remove_component
			Case "Close"
				Private jo As JavaObject = panemnu
				jo.RunMethod("hide",Array())
				lblcompinfo.Text = ""
				currnode = Null
		End Select
	End If
End Sub
Private Sub show_colorpicker_dialog As ResumableSub
	Dim clr As Paint
	Dim pnl As B4XView = xui.CreatePanel("")
	pnl.SetLayoutAnimated(0, 0dip, 0dip, 260dip, 400dip)
	'pnl.LoadLayout("colorpickerdialog_layout")
	Dim rs1 As ResumableSub =  notedialog.ShowCustom(pnl, "OK", "", "")
	Wait For (rs1) Complete (Result As Int)
	If Result = xui.dialogResponse_Positive Then
		'clr = ColorPicker1.SelectedColor
	End If
	Return clr
End Sub
Private Sub clrpick_ValueChanged (Value As Paint)
	If currnode.IsInitialized = True Then
		Dim td As tagdata = currnode.Tag
		td.backcolor = xui.PaintOrColorToColor(Value)
		CSSUtils.SetBackgroundColor(currnode, Value)
		currnode.Tag = td
	End If
End Sub
Private Sub set_border(vw As B4XView)
	Dim td As tagdata = vw.Tag
	If td.noborder = False Then
		CSSUtils.SetBorder(vw,td.brdthick,fx.Colors.From32Bit(td.brdcolor),td.brdradius)
	Else
		CSSUtils.SetBorder(vw,0,fx.Colors.Black,0)
	End If
End Sub
Private Sub spinthick_ValueChanged (Value As Object)
	If currnode.IsInitialized = True Then
		Dim td As tagdata = currnode.Tag
		td.brdthick = Value
		CSSUtils.SetBorder(currnode,Value,borderclr.SelectedColor,spinradius.Value)
		currnode.Tag = td
	End If	
End Sub
Private Sub spinradius_ValueChanged (Value As Object)
	If currnode.IsInitialized = True Then
		Dim td As tagdata = currnode.Tag
		td.brdradius = Value
		CSSUtils.SetBorder(currnode,spinthick.Value,borderclr.SelectedColor,Value)
		currnode.Tag = td
	End If
End Sub
Private Sub borderclr_ValueChanged (Value As Paint)
	If currnode.IsInitialized = True Then
		Dim td As tagdata = currnode.Tag
		td.brdcolor = xui.PaintOrColorToColor(Value)
		CSSUtils.SetBorder(currnode,spinthick.Value,Value,spinradius.Value)
		currnode.Tag = td
	End If	
End Sub
Private Sub cboxborder_CheckedChange(Checked As Boolean)
	If currnode.IsInitialized = True Then
		If Checked Then
			Dim td As tagdata = currnode.Tag
			'If td.IsInitialized Then
				CSSUtils.SetBorder(currnode,0,fx.Colors.Black,0)
				td.noborder = True
				currnode.Tag = td
			'End If
		Else
			Dim td As tagdata = currnode.Tag
			'If td.IsInitialized Then 
				CSSUtils.SetBorder(currnode,td.brdthick,fx.Colors.From32Bit(td.brdcolor),td.brdradius)
				td.noborder = False
				currnode.Tag = td
			'End If
		End If
		'Log("cbxborder_checkedChange" & td.noborder)
	End If
End Sub
Private Sub btnimgselect_Click
	If currnode.IsInitialized = False Then Return
	Dim td As tagdata = currnode.Tag
	Dim img As String = ""
	If td.imgurl <> Null Then
		img = select_image
	Else
		img = select_image
	End If
	If img <> "" Then
		CSSUtils.SetBackgroundImage(currnode,imagefilesfolder,img)
		td.imgurl = imagefilesfolder & "/" & img
		currnode.Tag = td
	End If
End Sub
Private Sub btnsettext_Click
	If currnode.IsInitialized = False Then Return
	Dim td As tagdata = currnode.Tag
	If td.id.Contains("Label") Then
		Dim albl As Label = panemain.GetNode(td.count)
		Wait for(get_new_text(albl)) Complete (Result As String)
		albl.Text = Result
	End If
End Sub
Private Sub btnimgremove_Click
	If currnode.IsInitialized = True Then
		Dim td As tagdata = currnode.Tag
		td.imgurl = ""
		CSSUtils.SetBackgroundImage(currnode,imagefilesfolder,"")
		currnode.Tag = td
	End If
End Sub
Private Sub textclr_ValueChanged (Value As Paint)
	If currnode.IsInitialized = True Then
		Dim td As tagdata = currnode.Tag
		td.textcolor = xui.PaintOrColorToColor(Value)
		currnode.TextColor = xui.PaintOrColorToColor(Value)
		currnode.Tag = td
	End If
End Sub
Private Sub spinsize_ValueChanged (Value As Object)
	If currnode.IsInitialized = True Then
		Dim td As tagdata = currnode.Tag
		td.fontsize = Value
		CSSUtils.SetStyleProperty(currnode,"-fx-font-size",Value)
		currnode.Tag = td
	End If
End Sub
Private Sub cmbfont_ValueChanged (Value As Object)
	If currnode.IsInitialized = True Then
		Dim td As tagdata = currnode.Tag
		td.fontfamily = Value
		CSSUtils.SetStyleProperty(currnode,"-fx-font-family",Value)
		currnode.Tag = td
	End If
End Sub
Private Sub cmbfont_SelectedIndexChanged(Index As Int, Value As Object)
	If currnode.IsInitialized = True Then
		Dim td As tagdata = currnode.Tag
		td.fontfamily = Value
		CSSUtils.SetStyleProperty(currnode,"-fx-font-family",Value)
		currnode.Tag = td
	End If
End Sub
Private Sub cboxitalic_CheckedChange(Checked As Boolean)
	If currnode.IsInitialized = True Then
		If Checked Then
			Dim td As tagdata = currnode.Tag
			td.isitalic = "true"
			CSSUtils.SetStyleProperty(currnode,"-fx-font-style","italic")
			currnode.Tag = td
		Else
			Dim td As tagdata = currnode.Tag
			td.isitalic = "false"
			CSSUtils.SetStyleProperty(currnode,"-fx-font-style","normal")
			currnode.Tag = td
		End If
	End If
End Sub
Private Sub cboxbold_CheckedChange(Checked As Boolean)
	If currnode.IsInitialized = True Then
		If Checked Then
			Dim td As tagdata = currnode.Tag
			td.isbold = "true"
			CSSUtils.SetStyleProperty(currnode,"-fx-font-weight","bold")
			currnode.Tag = td
		Else
			Dim td As tagdata = currnode.Tag
			td.isbold = "false"
			CSSUtils.SetStyleProperty(currnode,"-fx-font-weight","normal")
			currnode.Tag = td
		End If
	End If
End Sub
Private Sub fill_cmbfont
	Dim fntlst As List = fx.GetAllFontFamilies
	For i = 0 To fntlst.Size -1
		Dim fntname As String = fntlst.Get(i)
		cmbfont.Items.Add(fntname)
	Next
End Sub
Private Sub fill_cmbalign
	Dim alignlst As List = Array As String("TOP_LEFT","TOP_CENTER","TOP_RIGHT", _
										   "CENTER_LEFT","CENTER","CENTER_RIGHT", _
										   "BOTTOM_LEFT","BOTTOM_CENTER","BOTTOM_RIGHT", _
										   "BASELINE_LEFT","BASELINE_CENTER","BASELINE_RIGHT")
	For i = 0 To alignlst.Size -1 
		cmbalign.Items.Add(alignlst.Get(i))
	Next
End Sub
Private Sub cmbalign_ValueChanged (Value As Object)
	If currnode.IsInitialized = True Then
		Dim td As tagdata = currnode.Tag
		If td.id.Contains("Label") Then
			td.alignment = Value
			currlabel.Alignment = Value
			currnode.Tag = td
		End If
	End If
End Sub
Private Sub cmbalign_SelectedIndexChanged(Index As Int, Value As Object)
	If currnode.IsInitialized = True Then
		Dim td As tagdata = currnode.Tag
		If td.id.Contains("Label") Then
			td.alignment = Value
			currlabel.Alignment = Value
			currnode.Tag = td
		End If
	End If	
End Sub
Private Sub get_font_index(strfont As String)  As Int
	Dim fntlst As List = fx.GetAllFontFamilies
	For i = 0 To fntlst.Size -1
		Dim fntname As String = fntlst.Get(i)
		If fntname = strfont Then Return i
	Next
	Return 0
End Sub
Private Sub get_align_index(stralign As String) As Int
	Dim alignlst As List = Array As String("TOP_LEFT","TOP_CENTER","TOP_RIGHT", _
										   "CENTER_LEFT","CENTER","CENTER_RIGHT", _
										   "BOTTOM_LEFT","BOTTOM_CENTER","BOTTOM_RIGHT", _
										   "BASELINE_LEFT","BASELINE_CENTER","BASELINE_RIGHT")
	For i = 0 To alignlst.Size -1
		If alignlst.Get(i) = stralign Then Return i
	Next
	Return 0
End Sub

Private Sub attach_node_to_pane
	If currnode.IsInitialized Then
		Dim td1 As tagdata = currnode.Tag
		If td1.id.Contains("Pane") Then
			Dim pn As Pane = currnode
		Else
			Return			
		End If
		For Each nod As Node In panemain.GetAllViewsRecursive
			If nod.Tag <> "" Then
				Dim td As tagdata = nod.Tag
				If td.id.Contains("Label") Then
					Dim lbl As Label = nod
					If lbl.Left >= pn.Left And lbl.Top >= pn.Top Then
						If lbl.Left+lbl.Width <= pn.Left+pn.Width And lbl.Top+lbl.Height <= pn.Top+pn.Height Then
							pn.AddNode(lbl,lbl.Left-pn.Left,lbl.Top-pn.Top,lbl.PrefWidth,lbl.PrefHeight)
						End If
					End If
				End If
			End If
		Next
	End If
End Sub
Private Sub detach_node_from_pane
	If currnode.IsInitialized Then
		For Each nod As Node In panemain.GetAllViewsRecursive
			If nod.Tag <> "" Then
				Dim td As tagdata = nod.Tag
				If td.id.Contains("Label") Then
					Dim lbl As Label = nod
					If lbl.Parent <> panemain Then
						panemain.AddNode(lbl,lbl.Left,lbl.Top,lbl.PrefWidth,lbl.PrefHeight)
					End If
				End If
			End If
		Next
	End If
End Sub