<?xml version="1.0" encoding="utf-8"?>
<root>
  <doclet-version-NOT-library-version>1.00</doclet-version-NOT-library-version>
  <b4x_version>10.00</b4x_version>
  <dependsOn>archiver</dependsOn>
  <dependsOn>jcore</dependsOn>
  <dependsOn>jfx</dependsOn>
  <dependsOn>jnetwork</dependsOn>
  <dependsOn>jserver</dependsOn>
  <dependsOn>json</dependsOn>
  <dependsOn>c3p0-0.9.5.2</dependsOn>
  <dependsOn>c3p0-oracle-thin-extras-0.9.5.2</dependsOn>
  <dependsOn>mchange-commons-java-0.2.11</dependsOn>
  <dependsOn>jserver/http2-common-11.0.9</dependsOn>
  <dependsOn>jserver/http2-server-11.0.9</dependsOn>
  <dependsOn>jserver/jetty-alpn-java-server-11.0.9</dependsOn>
  <dependsOn>jserver/jetty-alpn-server-11.0.9</dependsOn>
  <dependsOn>jserver/jetty-io-11.0.9</dependsOn>
  <dependsOn>jserver/jetty-jakarta-servlet-api-5.0.2</dependsOn>
  <dependsOn>jserver/jetty-jakarta-websocket-api-2.0.0</dependsOn>
  <dependsOn>jserver/jetty-server-11.0.9</dependsOn>
  <dependsOn>jserver/jetty-servlet-11.0.9</dependsOn>
  <dependsOn>jserver/jetty-servlets-11.0.9</dependsOn>
  <dependsOn>jserver/jetty-slf4j-impl-11.0.9</dependsOn>
  <dependsOn>jserver/jetty-util-11.0.9</dependsOn>
  <dependsOn>jserver/slf4j-api-2.0.0-alpha6</dependsOn>
  <dependsOn>jserver/websocket-core-common-11.0.9</dependsOn>
  <dependsOn>jserver/websocket-core-server-11.0.9</dependsOn>
  <dependsOn>jserver/websocket-jakarta-client-11.0.9</dependsOn>
  <dependsOn>jserver/websocket-jakarta-common-11.0.9</dependsOn>
  <dependsOn>jserver/websocket-jakarta-server-11.0.9</dependsOn>
  <dependsOn>jserver/websocket-jetty-api-11.0.9</dependsOn>
  <dependsOn>jserver/websocket-jetty-common-11.0.9</dependsOn>
  <dependsOn>jserver/websocket-jetty-server-11.0.9</dependsOn>
  <dependsOn>jserver/websocket-servlet-11.0.9</dependsOn>
  <dependsOn>jserver/jetty-http-11.0.9</dependsOn>
  <dependsOn>jserver/jetty-security-11.0.9</dependsOn>
  <dependsOn>jserver/http2-hpack-11.0.9</dependsOn>
  <dependsOn>jserver/jetty-webapp-11.0.9</dependsOn>
  <dependsOn>javaobject</dependsOn>
  <dependsOn>jxui</dependsOn>
  <dependsOn>jstringutils</dependsOn>
  <dependsOn>okhttp</dependsOn>
  <dependsOn>okhttp-4.9.0</dependsOn>
  <dependsOn>okio-2.8.0</dependsOn>
  <dependsOn>okhttp-urlconnection-4.9.3</dependsOn>
  <dependsOn>kotlin-stdlib-1.6.10</dependsOn>
  <class>
    <name>b4j.example.b4xmainpage</name>
    <shortname>B4XMainPage</shortname>
    <method>
      <name>IsInitialized</name>
      <comment>Verifica se l'oggetto sia stato inizializzato.</comment>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="Class_Globals">_class_globals</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="DemoScene1">_demoscene1</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="DemoScene2">_demoscene2</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="Initialize">_initialize</name>
      <returntype>String</returntype>
      <parameter>
        <name>ba</name>
        <type>anywheresoftware.b4a.BA</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="WebGL_Error">_webgl_error</name>
      <comment> Called if error occours
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Error</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="WebGL_ReadyToCode">_webgl_readytocode</name>
      <comment> Called when the library is fully initialized and user is ready to code
</comment>
      <returntype>void</returntype>
      <parameter>
        <name>Url</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="WebGL_ServerLog">_webgl_serverlog</name>
      <comment> Called when there are library server logs
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Text</name>
        <type>String</type>
      </parameter>
    </method>
  </class>
  <class>
    <name>b4j.example.mypagehandler</name>
    <shortname>MyPageHandler</shortname>
    <comment>Handler class
</comment>
    <method>
      <name>IsInitialized</name>
      <comment>Verifica se l'oggetto sia stato inizializzato.</comment>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="Class_Globals">_class_globals</name>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="Handle">_handle</name>
      <returntype>String</returntype>
      <parameter>
        <name>Request</name>
        <type>anywheresoftware.b4j.object.JServlet.ServletRequestWrapper</type>
      </parameter>
      <parameter>
        <name>Response</name>
        <type>anywheresoftware.b4j.object.JServlet.ServletResponseWrapper</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Initialize">_initialize</name>
      <returntype>String</returntype>
      <parameter>
        <name>ba</name>
        <type>anywheresoftware.b4a.BA</type>
      </parameter>
    </method>
  </class>
  <class>
    <name>b4j.example.webgl</name>
    <shortname>WebGL</shortname>
    <event>ReadyToCode(Url As String)</event>
    <event>Updated(Url As String)</event>
    <event>Error(Error As String)</event>
    <event>Value(Val As String)</event>
    <event>ServerLog(Text As String)</event>
    <method>
      <name>IsInitialized</name>
      <comment>Verifica se l'oggetto sia stato inizializzato.</comment>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="Add">_add</name>
      <comment>Add a generic object to parent.

Return a string with injected code.

Example:&lt;code&gt;gl.Add(ObjectName, ParentName)&lt;/code&gt;

Helper for &lt;code&gt;gl.Inject($"${ParentName}.add(${ObjectName});"$)&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>ObjectName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>ParentName</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="AdjustOrbitControls">_adjustorbitcontrols</name>
      <comment>Helper to adjust OrbitControls.

Return a string with injected code.

This is the same than:
&lt;code&gt;
gl.Inject($"${ObjectName}.rotateSpeed = ${RotateSpeed};  // By default 1.0
	${ObjectName}.zoomSpeed = ${ZoomSpeed};  // By default 1.0
	${ObjectName}.panSpeed = ${PanSpeed};    // By default 1.0
	${ObjectName}.enableDamping = ${dmp};    // By default False
	${ObjectName}.dampingFactor = ${DampingFactor};   // By default 0.05
"$)&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>ObjectName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>RotateSpeed</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>ZoomSpeed</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>PanSpeed</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>EnableDamping</name>
        <type>boolean</type>
      </parameter>
      <parameter>
        <name>DampingFactor</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Alert">_alert</name>
      <comment>Show an alert box.

Return a string with injected code.

Helper for &lt;code&gt;gl.Inject($"alert(${Message});"$)&lt;/code&gt;

IMPORTANT NOTES:

- On some browsers long alert messages will be truncated.
- Always remember to use single quotes inside a double quote if
   you want to alert a string, eg. gl.Alert("'Hello'") will print Hello as string
   on the alert, this will end up with the follow JS code: alert('Hello');
   If you do not use single quotes, eg. gl.Alert("Hello") this probably will
   alert 'undefined' because the JS engine get the variable Hello and so this
   return the follow wrong JS code: alert(Hello);
   You can also use triple double quotes """, eg. gl.Alert("""Hello""")
   will end up with the follow JS code: alert("Hello");
- To alert JS Array or Object you need to use JSON.stringify() in this form:
   JSON.stringify(ArrayOrObject)  A single line rappresentation of Array or Object
   JSON.stringify(ArrayOrObject, null, 3)  A multi line rappresentation of Array or Object.
                                                                      The last parameter is the number of spaces for indentation.
   If you do not use JSON.stringify the JS engine will just return 'Object'
   as resulting string, instead of string object rappresentation.

Some examples:
&lt;code&gt;gl.Alert("'Hello'")  ' Alert a single string&lt;/code&gt;
&lt;code&gt;gl.Alert("'The number is: ' + myNumber")  ' Not using identifier&lt;/code&gt;
&lt;code&gt;gl.Alert($"'The number is: ' + ${myNumber}"$)  ' Using identifier&lt;/code&gt;
&lt;code&gt;gl.Alert("'Here is the cube: ' + JSON.stringify(cube)")  ' Not using an identifier and formatted on single line&lt;/code&gt;
&lt;code&gt;gl.Alert("'Here is the sphere: ' + JSON.stringify(sphere, null, 3)")  ' Not using an identifier and formatted on multi line&lt;/code&gt;
&lt;code&gt;gl.Alert($"'Here is the mesh: ' + JSON.stringify(${Mesh})"$)  ' Using an identifier and formatted on single line&lt;/code&gt;
&lt;code&gt;gl.Alert($"'Here is the light: ' + JSON.stringify(${Light1}, null, 3)"$)  ' Using an identifier and formatted on multi line&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Message</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="AppendChild">_appendchild</name>
      <comment>Append a generic object to a child parent.

Return a string with injected code.

Example:&lt;code&gt;gl.AppendChild(ObjectName, ParentName)&lt;/code&gt;

Helper for &lt;code&gt;gl.Inject($"${ParentName}.appendChild(${ObjectName});"$)&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>ObjectName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>ParentName</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="B4XListToJSArray">_b4xlisttojsarray</name>
      <comment>Convert B4X List to a JavaScript Array as string notation.

Return a string in format [one, two, three, ...]

Example:
&lt;code&gt;
Dim List1 As List
List1.Initialize2(Array (1, 2, 3, "Computer", "Tablet", "Smartphone", 4.5678, cPI, "Support"))
Dim ArrayFromList As String = B4XListToJSArray(List1)
Log(ArrayFromList)
gl.Create ("const", "myArray", ArrayFromList)
gl.Console ("JSON.stringify(myArray, null, 3)")&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>ls</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="B4XMapToJSObject">_b4xmaptojsobject</name>
      <comment>Convert B4X Map to a JavaScript Object as string notation.

Return a string in format {one: 1, two: 2, three: 3, ...: ...}

Example:
&lt;code&gt;
Dim Map1 As Map = CreateMap("January": 1, "February": 2, "Name": "Frank", "Age": 32, "Vote": 9, "Height": 1.82, "Weight": 72.4)
Dim ObjectFromMap As String = B4XMapToJSObject(Map1)
Log(ObjectFromMap)
gl.Create ("const", "myObject", ObjectFromMap)
gl.Console ("JSON.stringify(myObject, null, 3)")&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>m</name>
        <type>anywheresoftware.b4a.objects.collections.Map</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Confirm">_confirm</name>
      <comment>Show a confirm box.

Return a string with injected code.

Helper for &lt;code&gt;gl.Inject($"${Prefix} ${ObjectName} = confirm(${Message});"$)&lt;/code&gt;

Prefix:                 var, let, const keywords
ObjectName:    The name of object to refer as prompt result
Message:           The prompt message

See Console or Alert description for important notes.

Example:
&lt;code&gt;gl.Confirm("let", "reply", "'Do you want continue ?'")  ' Show a confirm box
gl.Inject($"
if (reply) {
   console.log("Ok you want continue ...");
} else {
   console.log("You decided to abandon. Bye!");
}"$)&lt;/code&gt;

</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Prefix</name>
        <type>Object</type>
      </parameter>
      <parameter>
        <name>ObjectName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Message</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Console">_console</name>
      <comment>Log a message on console.

Return a string with injected code.

Helper for &lt;code&gt;gl.Inject($"console.log(${Message});"$)&lt;/code&gt;

IMPORTANT NOTES:

- Always remember to use single quotes inside a double quote if
   you want to log a string, eg. gl.Console("'Hello'") will print Hello as string
   on the console, this will end up with the follow JS code: console.log('Hello');
   If you do not use single quotes, eg. gl.Console("Hello") this probably will
   log 'undefined' because the JS engine get the variable Hello and so this
   return the follow wrong code: console.log(Hello);
   You can also use triple double quotes """, eg. gl.Console("""Hello""")
   will end up with the follow JS code: console.log("Hello");
- To log JS Array or Object you need to use JSON.stringify() in this form:
   JSON.stringify(ArrayOrObject)  A single line rappresentation of Array or Object
   JSON.stringify(ArrayOrObject, null, 3)  A multi line rappresentation of Array or Object.
                                                                      The last parameter is the number of spaces for indentation.
   If you do not use JSON.stringify the JS engine will just return 'Object'
   as resulting string, instead of string object rappresentation.

Some examples:
&lt;code&gt;gl.Console("'Hello'")  ' Log a single string&lt;/code&gt;
&lt;code&gt;gl.Console("'The number is: ' + myNumber")  ' Not using identifier&lt;/code&gt;
&lt;code&gt;gl.Console($"'The number is: ' + ${myNumber}"$)  ' Using identifier&lt;/code&gt;
&lt;code&gt;gl.Console("'Here is the cube: ' + JSON.stringify(cube)")  ' Not using an identifier and formatted on single line&lt;/code&gt;
&lt;code&gt;gl.Console("'Here is the plane: ' + JSON.stringify(plane, null, 3)")  ' Not using an identifier and formatted on multi line&lt;/code&gt;
&lt;code&gt;gl.Console($"'Here is the mesh: ' + JSON.stringify(${Mesh})"$)  ' Using an identifier and formatted on single line&lt;/code&gt;
&lt;code&gt;gl.Console($"'Here is the light: ' + JSON.stringify(${Light1}, null, 3)"$)  ' Using an identifier and formatted on multi line&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Message</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="CopyResourceFile">_copyresourcefile</name>
      <comment>Helper to asynchronously copy single resource file (Assets) to the destination folder.

Destination: The file path where resource file will be copied (without the ProjectFolder prefix)
ForceOverwrite:  If True and destination file already exist, the file will be ovewrited (eg. use this after you change it and copy again with same name)
                              If False and destination file already exist, the library just will return success and avoid to overwrite it.

NOTES:
- Destination folder will be created if not exist.
- Source file should be in Assets and should be named the same as Destination file (case sensitive).

Some examples:

This will copy MyModel.stl from Assets to models/stl/ inside ProjectFolder.
&lt;code&gt;
Wait For (gl.CopyResourceFile("models/stl/MyModel.stl", False)) Complete (Success As Boolean)
If Success Then
   Log("Resource file copied")
Else
   Log("Error occoured")
End If
&lt;/code&gt;
This will copy MyTexture.jpg from Assets to textures/patterns/mySkyTextures/ inside ProjectFolder.
&lt;code&gt;
Wait For (gl.CopyResourceFile("textures/patterns/mySkyTextures/MyTexture.jpg", True)) Complete (Success As Boolean)
If Success Then
   Log("Resource file copied")
Else
   Log("Error occoured")
End If
&lt;/code&gt;
</comment>
      <returntype>anywheresoftware.b4a.keywords.Common.ResumableSubWrapper</returntype>
      <parameter>
        <name>Destination</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>ForceOverwrite</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="CopyResourcesFromZipFile">_copyresourcesfromzipfile</name>
      <comment>Helper to asynchronously copy all resources from zip file (Assets) to multiple folders inside ProjectFolder.

Destination folders will be created if not exist.

ResourcesList:  A list containing the path where files will be unzipped (without the ProjectFolder prefix)
ZipFileName:  Zip file name, should be in Assets folder
BufferSize:  The size of buffer used while unzip files (2048, 4096, 8192, 16384 and more)

IMPORTANT NOTES: 1) The sub just check for the first file existence in the list (first element of passed List) to know if all files already exists.
                                          If the first element exist, then it supposes that all resource files already exists and avoid to unzip.
                                          Not more elegant but probably will be changed in future.

                                      2) The file names inside the zip file must be the same as those indicated in the list (case sensitive).

The follow code will copy:

- MonsterTruck.obj inside resources.zip (Assets) to models/obj/Cars/ inside ProjectFolder
- Birds.wav inside resources.zip (Assets) to sounds/Animals/ inside ProjectFolder
- wood1.png inside resources.zip (Assets) to textures/woods/ inside ProjectFolder

&lt;code&gt;
Dim files As List
files.Initialize
files.AddAll(Array As String("models/obj/Cars/MonsterTruck.obj", _
	                           "sounds/Animals/Birds.wav", _
	                           "textures/woods/wood1.png"))

Wait For (gl.CopyResourcesFromZipFile(files, "resources.zip", 8192)) Complete (Success As Boolean)
If Success Then
   Log("All resources copied")
Else
   Log("Error occoured")
End If
&lt;/code&gt;
</comment>
      <returntype>anywheresoftware.b4a.keywords.Common.ResumableSubWrapper</returntype>
      <parameter>
        <name>ResourcesList</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
      <parameter>
        <name>ZipFileName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>BufferSize</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="CopyResourcesFromZipFileToSingleFolder">_copyresourcesfromzipfiletosinglefolder</name>
      <comment>Helper to asynchronously copy all resources from zip file (Assets) to a single folder inside ProjectFolder.

Destination folder will be created if not exist.

DestFolder:  Should contain all full path where files will be unzipped (without the ProjectFolder prefix)
ZipFileName:  Zip file should be in Assets folder
BufferSize:  The size of buffer used while unzip files (2048, 4096, 8192, 16384 and more)

Example:

This will copy all models inside mymodels.zip (Assets) to models/Animals/Rabbit/ inside ProjectFolder:
&lt;code&gt;
Wait For (gl.CopyResourcesFromZipFileToSingleFolder("models/Animals/Rabbit", "mymodels.zip")) Complete (Success As Boolean)
If Success Then
   Log("Resources copied")
Else
   Log("Error occoured")
End If
&lt;/code&gt;
</comment>
      <returntype>anywheresoftware.b4a.keywords.Common.ResumableSubWrapper</returntype>
      <parameter>
        <name>DestFolder</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>ZipFileName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>BufferSize</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Create">_create</name>
      <comment>A low level helper method to create a generic object.

NOTE: this do not create a JS Object, but any object, primitives and complex types.
This only construct a JS declaration statement.

Use New command instead if you want to create a new instance of an object.

Prefix:    var, let, const keywords
ObjectName:    The name of object to create
Value:     The initial value of created object. Pass Null if you don't want to assign a value, or "null" as string if you want the created object is null pointer.
                This is an Object type, you can pass any value, numbers, integers or floats or string.

Return a string with injected code.

     Some examples:
       - passing "null", "undefined" as string to set the value state.
         NOTE: do not confuse B4X Null with JS null where you pass "null" as string.
         If you pass B4X Null, it do not assign anything, but if you pass "null" as string,
         the variable or costant is initialized to null (null pointer).
         This even is true with "undefined", but here there is no confusion because there isn't a B4X counterpart of it.
       - passing single value
         &lt;code&gt;
         Dim Radius As Float = 42.8
         gl.Create("let", "Radius", Radius)  ' Will generate this JS code: let Radius = 42.8;  Note use of last argument, identifier Radius.
                                                                    ' You can do the same and assign Array from B4X List or Object from B4X Map. See conversion helpers.&lt;/code&gt;
         &lt;code&gt;gl.Create("var", "Width", 5.20)  ' Will generate this JS code: var Width = 5.20;&lt;/code&gt;
         &lt;code&gt;gl.Create("const", "Height", 48) ' Will generate this JS code: const Height = 48;&lt;/code&gt;
         &lt;code&gt;gl.Create("let", "Name", "Peter")  ' Will generate this JS code: let Name = 'Peter';&lt;/code&gt;
       - passing a string with surrounded [] brackets you can create arrays:
         &lt;code&gt;gl.Create ("let", "fruit", "[ 'banana', 'orange', 'lemon' ]")
         gl.Console("'I like ' + fruit[1]);")
         gl.Inject("fruit.push('melon');")
         gl.Console("'I like ' + fruit[3]);")&lt;/code&gt;
       - passing a string with surrounded {} brackets, and inside a key: value or a Map string, you can create
         Javascript Objects as key-value pairs elements and then access with dot notation.
         &lt;code&gt;gl.Create ("let", "Student", "{Name: 'John', Age: 20}")
         gl.Console("'Name: ' + Student.Name);")
         gl.Console("'Ages: ' + Student.Age);")
         gl.Inject("Student.Name = 'Marcel';")
         gl.Console("'Name: ' + Student.Name);")&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Prefix</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>ObjectName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Value</name>
        <type>Object</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="CreateMore">_createmore</name>
      <comment>A low level helper method to create a series of generic objects. See Create command description.
Here just you can create objects from a list of names, but you have no ability to set initial value.

NOTE: This do not create a JavaScript Object, but any object, primitives and complex types.
This only construct a JS declaration statement.

Prefix:      var, let, const keywords.
ObjectNames:     A list or array of strings with names of objects to create

Return a string with injected code.

Example:
&lt;code&gt;
gl.CreateMore("const", Array ("scene", "camera", "renderer"))  ' Note that you can pass identifiers created with gl.GetID command.&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Prefix</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>ObjectNames</name>
        <type>anywheresoftware.b4a.objects.collections.List</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Debug">_debug</name>
      <comment>Set True to enable library debug that will be printed to the log while use Inject command.
False to disable debug logs.

Disabled by default = False
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Enabled</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Dispose">_dispose</name>
      <comment>Stop the server and dispose all library resources.
</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="GetEngine">_getengine</name>
      <comment>Prepare the 3D engine.

Return True if 3D engine start successfully, False otherwise and fires _Error event if THEEJS distribution is not found.

The THREEJS distribution should be unzipped on the provided StaticFolder you passed in the Initialize command.
If not found you will get an error and this sub will return False indicating that you cannot start the 3D engine.
</comment>
      <returntype>anywheresoftware.b4a.keywords.Common.ResumableSubWrapper</returntype>
    </method>
    <method>
      <name DesignerName="GetID">_getid</name>
      <comment>Get an identifier for specified object.

Identifiers are nothing of special, they are just a string rappresentation of object.
This help manage objects on B4X IDE by it's string name.

Remember that any object in this library is managed as string.

Some examples:
&lt;code&gt;
Dim Scene As String = gl.GetID("Scene")
Dim Camera As String = gl.GetID("Camera")
Dim Renderer As String = gl.GetID("Renderer")
Dim Mesh As String = gl.GetID("Mesh")
Dim Texture As String = gl.GetID("Texture")
Dim Geometry As String = gl.GetID("Geometry")
Dim Material As String = gl.GetID("Material")&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>ObjectName</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="GetServer">_getserver</name>
      <comment>Return the server that serves static files.
</comment>
      <returntype>anywheresoftware.b4j.object.ServerWrapper</returntype>
    </method>
    <method>
      <name DesignerName="HtmlFileName">_htmlfilename</name>
      <comment>Return the HTML file name.
</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="HtmlString">_htmlstring</name>
      <comment>Return the HTML file string.
</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="HtmlStringDebug">_htmlstringdebug</name>
      <comment>Return the HTML file string in debug mode with line numbers.
This help to debug JavaScript code using console, alerts etc...
</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="Import">_import</name>
      <comment>Import a script module.

Some examples:
&lt;code&gt;gl.Import("* as THREE from 'three'")&lt;/code&gt;
&lt;code&gt;gl.Import("{ OrbitControls } from 'three/addons/controls/OrbitControls.js'")&lt;/code&gt;
&lt;code&gt;gl.Import("Stats from 'three/addons/libs/stats.module.js'")&lt;/code&gt;
&lt;code&gt;gl.Import("{ GUI } from 'three/addons/libs/lil-gui.module.min.js'")&lt;/code&gt;
&lt;code&gt;gl.Import("{ GLTFLoader } from 'three/addons/loaders/GLTFLoader.js'")&lt;/code&gt;
&lt;code&gt;gl.Import("{ OBJLoader } from 'three/addons/loaders/OBJLoader.js'")&lt;/code&gt;
&lt;code&gt;gl.Import("{ STLLoader } from 'three/addons/loaders/STLLoader.js'")&lt;/code&gt;

Helper for &lt;code&gt;gl.Inject($"import ${ImportString}"$)&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>ImportString</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Initialize">_initialize</name>
      <comment>Initialize WebGL library.

Module:            The module that receive events
EventName:      The name of subs that handle the events
ProjectName:   The name of current project.
                           This name will be used as page title in the browser and as file name for saved html file,
                           eg. if you pass MyProject1, the page title will be MyProject1 and html file name will be MyProject1.html.
                           It will be saved to ProjectFolder. You can use eg. &lt;code&gt;Wait For (File.ListFilesAsync(gl.ProjectFolder)) Complete (Success As Boolean, Files As List)&lt;/code&gt;
                           to view a list of saved projects.
TimeZone:  The server timezone string, eg. "GMT+0". This will be used to set the server timezone, for server logs timezone on log files and even for server log on B4X IDE.
StaticFolder:  The folder where threejs libary is placed and served from http server.
                        You should select a folder that is good to read and write files on your machine.
                        A good option is File.DirData that is suitable for any operating system.
Port:  The server port

NOTE: You can just use a threejs distribution where you removed any big and unused files, like models, textures etc.
Just make sure to retain the folder structure and library core (build, examples and jsm folders). You can copy next
addons to expand the core with external libraries and classes, and/or put any extra textures, models, fonts etc.
You can use a full threejs distribution, this way you can run in local all threejs provided examples (100 and more)
and even you have all textures, models and others to run all demos you will find on the threejs site examples section.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>ba</name>
        <type>anywheresoftware.b4a.BA</type>
      </parameter>
      <parameter>
        <name>Module</name>
        <type>Object</type>
      </parameter>
      <parameter>
        <name>EventName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>ProjectName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>TimeZone</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>StaticFolder</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Port</name>
        <type>int</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Inject">_inject</name>
      <comment>Inject JavaScript statement.

Return a string with injected code.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>js</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="JSArrayToB4XList">_jsarraytob4xlist</name>
      <comment>Convert a JavaScript Array string to a B4X List.

Return a List containing all Array elements.

Note that this for now only works with string containing
primitive types and that not include objects or other arrays.

The array string should be a conventional array, should start with [ and should end with ].

Example:
&lt;code&gt;
Dim ArrayString As String = "['Saab', 'Volvo', 'BMW', 'Fiat', Math.PI, 80, 160.12]"
gl.Create ("const", "myArray", ArrayString)
gl.Console ("JSON.stringify(myArray, null, 3)")
Dim List1 As List = JSArrayToB4XList(ArrayString)
For i = 0 To List1.Size-1
	Log($"[${i}] ${List1.Get(i)}"$)
Next
Log("List1.Size: " &amp; List1.Size &amp; " elements")
&lt;/code&gt;
</comment>
      <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
      <parameter>
        <name>ArrayString</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="JSObjectToB4XMap">_jsobjecttob4xmap</name>
      <comment>Convert a JavaScript Object string to a B4X Map.

Return a Map containing all Object key-pairs.

Note that this for now only works with string containing
primitive types and that not include objects or other arrays.

The object string should be a conventional object, should start with { and should end with }.

Example:
&lt;code&gt;
Dim ObjectString as String = "{firstName:'John', lastName:'Doe', eyeColor:'blue', age:50}"
gl.Create ("const", "person", ObjectString)
gl.Console ("JSON.stringify(person, null, 3)")
Dim Map1 As Map = JSObjectToB4XMap(ObjectString)
For i = 0 To Map1.Size - 1
   Log($"[${i}] ${Map1.GetKeyAt(i)}: ${Map1.GetValueAt(i)}"$)
Next
Log("Map1.Size: " &amp; Map1.Size &amp; " elements")
&lt;/code&gt;
</comment>
      <returntype>anywheresoftware.b4a.objects.collections.Map</returntype>
      <parameter>
        <name>ObjectString</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="MainFolder">_mainfolder</name>
      <comment>Return the library main folder.
</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="New">_new</name>
      <comment>A low level more generic call to create a new instance of a generic object.
It is even used to just assign an already created variable. In this case pass a void string "" or Null to Prefix.

Object in the constructor can be any class, eg. a Scene, Group, Cameras, Materials, Geometry and so ... even non threejs class.
or any JavaScript class instance.

Prefix:     var, let, const keywords. Pass a void string or Null if already declared and just need to assign value with constructor.
ObjectName:    The name of object to create
Constructor:   The constructor string. Note that you can use literal strings to put any value in the middle as you need.

Return a string with injected code.

Example code:
&lt;code&gt;
gl.New("var", "Camera1", "THREE.PerspectiveCamera(35, window.innerWidth / window.innerHeight, 0.01, 1000)")
gl.Position("Camera1", 20, 33, 15)&lt;/code&gt;

In this case, the example will end up with this JavaScript code:
&lt;code&gt;
var Camera1 = new THREE.PerspectiveCamera(35, window.innerWidth / window.innerHeight, 0.01, 1000);
Camera1.position.set(20, 33, 15);&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Prefix</name>
        <type>Object</type>
      </parameter>
      <parameter>
        <name>ObjectName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Constructor</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="PageURL">_pageurl</name>
      <comment>Return the page URL. You can access the scene over HTTP from external browsers at this URL. Multiple clients are supported.
NOTE: This is only accessible after StartEngine commands.
</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="Position">_position</name>
      <comment>Set position of an object on XYZ axes.

Return a string with injected code.

Usage:
&lt;code&gt;gl.Position(myObject, 50, 40, 10)&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>ObjectName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>x</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>y</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>z</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="PositionX">_positionx</name>
      <comment>Set position X of an object on XYZ axes.

Return a string with injected code.

Usage:
&lt;code&gt;gl.PositionX(myObject, 50)&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>ObjectName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>x</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="PositionY">_positiony</name>
      <comment>Set position Y of an object on XYZ axes.

Return a string with injected code.

Usage:
&lt;code&gt;gl.PositionY(myObject, 40)&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>ObjectName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>y</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="PositionZ">_positionz</name>
      <comment>Set position Z of an object on XYZ axes.

Return a string with injected code.

Usage:
&lt;code&gt;gl.PositionZ(myObject, 10)&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>ObjectName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>z</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ProjectFolder">_projectfolder</name>
      <comment>Return the library project folder.
</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="Prompt">_prompt</name>
      <comment>Show a prompt box.

Return a string with injected code.

Can be used without default value, in this case pass a void string "" to Default argument.
&lt;b&gt;Always remember to use single quotes inside a double quote in Message and Default arguments
if you want to prompt a string. You can also use triple double quotes """, see example below.&lt;/b&gt;

Helper for &lt;code&gt;gl.Inject($"${Prefix} ${ObjectName} = prompt(${Message},${Default});"$)&lt;/code&gt;

Prefix:                 var, let, const keywords
ObjectName:    The name of object to refer as prompt result
Message:           The prompt message
Default               The default result. It will be printed on the prompt text field.
                            Pass a void string "" if default is not required.

See Console or Alert description for important notes.

Examples:
&lt;code&gt;gl.Prompt("let", "name", "'Please enter your name'", "'Harry Potter'")  ' Show a prompt box
gl.Inject($"
if (name) {
   console.log("Hello " + name + "! How are you today?");
   document.getElementById("demo").innerHTML = "Hello " + name + "! How are you today?";
} else {
   console.log("You cancelled the prompt");
}"$)&lt;/code&gt;

Usage of triple double quotes """
&lt;code&gt;gl.Prompt("let", "name", """Please enter your name""", """Harry Potter""")  ' Show a prompt box&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Prefix</name>
        <type>Object</type>
      </parameter>
      <parameter>
        <name>ObjectName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Message</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Default</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Rotate">_rotate</name>
      <comment>Rotate an object around XYZ axes. Values are expressed in degrees (0 - 360).

Return a string with injected code.

Usage:
&lt;code&gt;gl.Rotate(myObject, 40, 30, 20)&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>ObjectName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>degreeX</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>degreeY</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>degreeZ</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="RotateX">_rotatex</name>
      <comment>Rotate an object around X axis. Value is expressed in degrees (0 - 360).

Return a string with injected code.

Usage:
&lt;code&gt;gl.RotateX (myObject, 90)&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>ObjectName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Degrees</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="RotateY">_rotatey</name>
      <comment>Rotate an object around Y axis. Value is expressed in degrees (0 - 360).

Return a string with injected code.

Usage:
&lt;code&gt;gl.RotateY(myObject, 45)&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>ObjectName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Degrees</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="RotateZ">_rotatez</name>
      <comment>Rotate an object around Z axis. Value is expressed in degrees (0 - 360).

Return a string with injected code.

Usage:
&lt;code&gt;gl.RotateZ(myObject, 180)&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>ObjectName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Degrees</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Scale">_scale</name>
      <comment>Scale an object on XYZ axes.

Return a string with injected code.

Usage:
&lt;code&gt;gl.Scale(myObject, 2, 2, 3)&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>ObjectName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>x</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>y</name>
        <type>double</type>
      </parameter>
      <parameter>
        <name>z</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ScaleX">_scalex</name>
      <comment>Scale an object on X axis. Value is expressed in units.

Return a string with injected code.

Usage:
&lt;code&gt;gl.ScaleX(myObject, 2)&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>ObjectName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Val</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ScaleY">_scaley</name>
      <comment>Scale an object on Y axis. Value is expressed in units.

Return a string with injected code.

Usage:
&lt;code&gt;gl.ScaleY(myObject, 4)&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>ObjectName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Val</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ScaleZ">_scalez</name>
      <comment>Scale an object on Z axis. Value is expressed in units.

Return a string with injected code.

Usage:
&lt;code&gt;gl.ScaleZ(myObject, 10)&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>ObjectName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Val</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ServerLog">_serverlog</name>
      <comment>Set True to get detailed server requests printed out to
the log, or False to disable server request logs.

Enabled by default = True
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Enabled</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ServerMainPage">_servermainpage</name>
      <comment>Return the server library main page. ( http://IP:PORT/MainPage )
</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="ServerMainPath">_servermainpath</name>
      <comment>Return the server main path. ( http://IP:PORT/ )
</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="ServerProjectPath">_serverprojectpath</name>
      <comment>Return the server project path. ( http://IP:PORT/examples/ )
</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="SetLocalServer">_setlocalserver</name>
      <comment>Set the server to be local. This must be called before use of StartEngine command.

This just replace the IP Address with 'localhost' string in the URL. ( http://localhost:PORT/etcetera... )
Use this only if you access the local server or to test on local machine. This is only to prevent client warnings.
This can be useful expecially for developers that just need to test things locally
Using 'localhost' or 127.0.0.1 instead of IP Address, help to prevent warnings from JavaScript when Secure Context is required.

ENSURE TO NOT SET IT AFTER DEVELOPMENT IF YOUR FINAL PROJECT NEED TO BE PUBLIC ON THE WEB.
</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="SetValue">_setvalue</name>
      <comment>Set a value with '=' operator.

Return a string with injected code.

ObjectName: The name of object
Value:  This is an Object type, you can pass any value, numbers, integers or floats or strings.
       - "null", "undefined" can be passed as string
       - by passing a string with surrounded {} brackets, and inside a key: value or a Map string, you can create
         Javascript Objects as key: value pairs elements and then access with dot notation.
         &lt;code&gt;gl.Create ("let", "Student", "{Name: 'John', Age: 20}")
         gl.Console("Name: " + Student.Name)
         gl.Console("Ages: " + Student.Age)
         gl.SetValue("Student.Name", "Larry")
         gl.SetValue("Student.Age", 44)
         gl.Console("Name: " + Student.Name)
         gl.Alert("Ages: " + Student.Age)&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>ObjectName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Value</name>
        <type>Object</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="StartEngine">_startengine</name>
      <comment>Start the 3D engine with default HTML template.

Return True if 3D engine start successfully, False otherwise and fires the event _ReadyToCode where you can write the scene code.
</comment>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="StartEngine2">_startengine2</name>
      <comment>Same as StartEngine, but accept custom HTML string template instead of library default HTML template.
This is useful eg. if you want to add (by hand) more HTML elements to the page, without use
of JavaScript (but you can refer after on it's code) or to change the page style and more.

Return True if 3D engine start successfully, False otherwise and fires _Error event if error occours.

Note that is mandatory that custom HTML string template have [IMPORT] and [CODE] place holders inside a script tag of type module, for ES6 compatibility.
These will be replaced internally with imports and code when Update command is called, just once after you wrote your scene code to render in
the ReadyToCode sub.

Note that html should follow some semantics, eg. you will have to use an import map, you even should put script tag to type="module".
Refer to THREEJS documentation for more detailed infos, you will find any information about this in the beginner section.

As reference we put here the default HTML template file used on GetEngine command:
&lt;code&gt;
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
    &lt;head&gt;
        &lt;title&gt;YourProjectName&lt;/title&gt;
        &lt;meta charset="utf-8"&gt;
        &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
        &lt;style&gt;
            body {
                background-color:black;
                font-family: Helvetica, Arial, sans-serif;
                font-size: 14px;
                margin: 0;
                overflow: hidden;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;script type="importmap"&gt;
            {
                "imports": {
                    "three": "../build/three.module.min.js",
                    "three/addons/": "./jsm/"
                }
            }
        &lt;/script&gt;
        &lt;script type="module"&gt;
            [IMPORT]
            [CODE]
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;&lt;/code&gt;
</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>HTML</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="StartEngine3">_startengine3</name>
      <comment>Same as StartEngine and StartEngine2, but accept the full page HTML string.

Return True if 3D engine started successfully, False otherwise and fires _Error event indicating the error.
</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>FullHTML</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="TranslateX">_translatex</name>
      <comment>Translate an object on X axis.

Return a string with injected code.

Usage:
&lt;code&gt;gl.TranslateX(myObject, 20)&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>ObjectName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Pos</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="TranslateY">_translatey</name>
      <comment>Translate an object on Y axis.

Return a string with injected code.

Usage:
&lt;code&gt;gl.TranslateY(myObject, 40)&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>ObjectName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Pos</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="TranslateZ">_translatez</name>
      <comment>Translate an object on Z axis.

Return a string with injected code.

Usage:
&lt;code&gt;gl.TranslateZ(myObject, 100)&lt;/code&gt;
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>ObjectName</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Pos</name>
        <type>double</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Update">_update</name>
      <comment>Update the 3D engine and create the final HTML file you can then access on external browser.

Use this once after you write your scene code. Without this your scene will not be rendered.

Fires the event _Updated with the current URL you can copy/paste on the browser to render your scene.

NOTE: You can access not only from a development machine, but from any local device with browser that support
            WebGL, so eventually will support Android, iOS, Win, Mac and Linux computers, Raspberry, all SBCs in general.
            With use of port forwarding you can access outside local network. You can even eg. run your app (UI or NONUI)
            on Raspberry, it will create the HTML file and serve it so you can access from other devices.
            The same is valid for Android where you use B4A WebGL library, it create your HTML file and Android
            device will be turned to a server that serve it and all request files over http protocol using really fast
            Async XmlHttpRequests that internally use ajax and are capable to change the full page (or just a part)
            without reload and without blocking it and current rendering execution.

            Always remember that (unless you change it) any browser save data to internal cache, and if the file is already there,
            the next time you request it, the browser do not start a request to get a file from server, instead load it from the cache.
            For developing purposes you can disable the cache on your browser, you can do it even not permanently on the
            DevTools with an useful checkbox you can check/uncheck based on your needs.
</comment>
      <returntype>String</returntype>
    </method>
  </class>
  <version>1.24</version>
  <author>Massimo Meli</author>
</root>