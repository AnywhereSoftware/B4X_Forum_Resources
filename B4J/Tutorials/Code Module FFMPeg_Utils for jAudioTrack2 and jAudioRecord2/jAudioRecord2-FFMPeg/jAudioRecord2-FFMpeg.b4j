AppType=JavaFX
Build1=Default,b4j.example
File1=1.bjl
FileGroup1=Default Group
Group=Default Group
Library1=jaudiorecord2-b4xlib
Library2=jcore
Library3=jfx
Library4=jxui
Library5=xui views
Library6=jshell
Module1=FFMPeg_Utils
NumberOfFiles=1
NumberOfLibraries=6
NumberOfModules=1
Version=9.8
@EndOfDesignText@
#Region Project Attributes 
	#MainFormWidth: 600
	#MainFormHeight: 600 
#End Region

#If Version
	v0.10
		Initial release
	V0.11
		Tidied Error messages
		Updated to allow capture of non wav files using the FILE method as well as the RAW method
#End If

Sub Process_Globals
	
	Private fx As JFX
	Private Xui As XUI
	Private MainForm As Form
	Private TDL As TargetDataLineWrapper
	Private lblAmplitude As B4XView
	Private lblFfmpeg As B4XView

	Private MP As MediaPlayer
	Private lblRec As Label
	
	Private btnStart As Button
	Private btnStop As Button
	Private btnFile As Button
	Private btnPlay As B4XView
	
	Private lblFileName As Label
	Private InitialFilePath,FileName As String
	Private cbInputs As B4XComboBox
	
	Private Devices As List
	Private InDevice As JavaObject
	
	
	Private SampleRateHz As Float = 44100
	Private SampleSizeInBits As Int = 16
	Private ChannelConfig As Int = 2
	
	Private AudioFormat As JavaObject
	
	'Parent Class for CaptureRaw and CaptureToFile.
	'If you only want to use one method, you can access it directly.
	Private CaptureMethod1 As CaptureMethod

	Private SelectedMethod As String
	Private SwMethod As B4XSwitch
	
	Private Dialog As B4XDialog
	
	Private TempPath As String
	Private TempFile As String
	
	Private Options As Map
End Sub

Sub AppStart (Form1 As Form, Args() As String)
	Xui.SetDataFolder("jAdudioRecord2-Ffmpeg")
	
	MainForm = Form1
	MainForm.RootPane.LoadLayout("1") 'Load the layout file.
	MainForm.Show
	
	MainForm.Title = "jAudioRecord2 - Demo"

	Options.Initialize
	
	If File.Exists(Xui.DefaultFolder,"jat.opts") Then Options = File.ReadMap(Xui.DefaultFolder,"jat.opts")
	lblFfmpeg.Text = Options.GetDefault("PathToFFMPeg","")

	'Get the Users Home directory for use in file dialog
	InitialFilePath = Options.GetDefault("InitialFilePath", GetSystemProperty("user.home",""))
	
	'Setup Device names in a B$XCombobox and MixerInfo objects in a list
	Dim MixerInfos As List = jAudioRecord2_Utils.GetDevices(jAudioRecord2_Utils.DEVICETYPE_INPUT,"")
	
	Dim L As List
	L.Initialize
	Devices.Initialize
	For Each MI As JavaObject In MixerInfos
		'Add the name to the list for the B4xCombobox
		L.add(MI.RunMethod("getName",Null))
		'Add the MixerInfo to the corresponding Devices List
		Devices.Add(MI)
	Next
	
	'Set the list for the B4xCombobox
	cbInputs.SetItems(L)
	cbInputs_SelectedIndexChanged (0)

	SelectedMethod = Capture_Static.CAPTURE_FILE
	SwMethod_ValueChanged(False)
	
	Dialog.Initialize(MainForm.RootPane)
	
End Sub

Private Sub MainForm_CloseRequest (EventData As Event)
	'Check if targetDataLine is initialized and  is Running and stop and/or close as required
	If TDL.IsReady Then
		If TDL.IsRunning Then
			TDL.Stop
			'Give Recordfile time to stop and finish writing the file
			Sleep(500)
		End If
		TDL.Close
	End If
	File.Delete(File.DirTemp,"temp.wav")
	File.WriteMap(Xui.DefaultFolder,"jat.opts",Options)
End Sub

'Return true to allow the default exceptions handler to handle the uncaught exception.
Sub Application_Error (Error As Exception, StackTrace As String) As Boolean
	Return True
End Sub

#Region Gui

'Change CaptureMethod
Private Sub SwMethod_ValueChanged (Value As Boolean)
	If CaptureMethod1.IsInitialized Then
		If CaptureMethod1.IsRecording Then
			Dialog.Title = "Switch Methods"
			Wait For(Dialog.Show("Please stop the recording first","","","Cancel")) Complete (Resp As Int)
			SwMethod.Value = Not(Value)
			Return
		End If
	End If
	
	If Value = False Then
		SelectedMethod = CaptureMethod_Static.CAPTUREMETHOD_FILE
	Else
		SelectedMethod = CaptureMethod_Static.CAPTUREMETHOD_RAW
	End If
	
	'Initialize the required capture method
	Dim CaptureMethod1 As CaptureMethod

	CaptureMethod1.Initialize(SelectedMethod,Me,"CaptureMethod")
	
	'Add an amplitude listener so we can get the calculated amplitude from the recording sub (Optional)
	CaptureMethod1.AddAmplitudeListener(Me,"CaptureMethod")
End Sub


Sub BtnFile_Click
	TempFile = ""
	TempPath = ""
	
	'Get a file to save from the user
	Dim FC As FileChooser
	
	FC.Initialize
	FC.Title="Save an Audio file"
	FC.SetExtensionFilter("Audio files",Array As String("*.wav","*.mp3","*.flac","*.ogg"))
	FC.InitialDirectory = InitialFilePath
	Dim response As String = FC.ShowSave(MainForm)
	If response = "" Then Return
	InitialFilePath = File.GetFileParent(response)
	FileName =  File.GetName(response)
	lblFileName.Text=File.Combine(InitialFilePath,FileName)
	
	Options.Put("InitialFilePath",InitialFilePath)
	
	If FileName.ToLowerCase.EndsWith(".wav") = False Then
		If lblFfmpeg.Text = "" Then
			Dialog.Title = "Path to FFMPeg"
			Wait for (Dialog.Show("Please set path to converter to record this file","","","OK")) Complete (Resp As Int)
			Return
		End If
		TempFile = "temp.wav"
		TempPath = File.DirTemp
	End If
	
End Sub


Sub btnPlay_Click
	If FileName = "" Or Not(File.Exists(InitialFilePath, FileName)) Then
		Dialog.Title = "Play File"
		Dim Msg As String
		If FileName = "" Then
			Msg = "File not recorded"
		Else
			Msg = "File not found"
		End If
		Wait For(Dialog.Show(Msg,"","","Cancel")) Complete (Resp As Int)
		Return
	End If
	
	Try
		'Play the file with MediaPlayer if it exists
		Log(File.GetUri(InitialFilePath,FileName))
		MP.Initialize("MP",File.GetUri(InitialFilePath,FileName))
		MP.Play
	Catch
		Dialog.Title = "Play Audio"
		Wait For(Dialog.Show(FileName & " is not a supported format in javafx media player.  Try with external default?","Play","","Cancel")) Complete (Resp As Int)
		
		If Resp = Xui.DialogResponse_Positive Then
			fx.ShowExternalDocument(File.GetUri(InitialFilePath,FileName))
		End If
	End Try
	
End Sub

Sub btnStop_Click
	'Stop the CaptureMethod if it is initialized and recording
	If CaptureMethod1.IsInitialized And CaptureMethod1.IsRecording Then CaptureMethod1.Stop
End Sub

Sub btnStart_Click
	If FileName = "" Then
		Dialog.Title = "Record File"
		Wait For(Dialog.Show("Please select a file first","","","Cancel")) Complete (Resp As Int)
		Return
	End If
	'Check if Capture method is currently recording and stop it.
	If CaptureMethod1.IsInitialized Then
		If CaptureMethod1.IsRecording Then
			CaptureMethod1.Stop
		End If
	End If
	
	btnPlay.Enabled = False
	'Start recording
	'If recording is Raw, then filename is not used.
	
	If TempFile = "" Then
		CaptureMethod1.Start(TDL, File.Combine(InitialFilePath, FileName))
	Else
		CaptureMethod1.Start(TDL, File.Combine(TempPath, TempFile))
	End If
End Sub

Private Sub cbInputs_SelectedIndexChanged (Index As Int)
	
	'Stop and close the TargetDataLine if needed
	If TDL.IsInitialized And TDL.IsReady Then
		If TDL.IsRunning Then
			TDL.Stop
		End If
		TDL.Close
	End If
	
	'Create an Audioformat Instance
	AudioFormat = jAudioRecord2_Utils.NewAudioFormat(SampleRateHz,SampleSizeInBits,ChannelConfig, True, False)
	
	'Get the selected Mixer Object from the Devices List
	Dim MI As JavaObject = Devices.Get(Index)
	
	'Close the existing inDevice if required
	If InDevice.IsInitialized Then InDevice.RunMethod("close",Null)
	'Getthe new inDevice TargetDataLine from the audioSystem with the appropriate Audioformat and specified mixer
	InDevice = jAudioRecord2_Utils.GetTargetDataLine2(AudioFormat, MI)
	
	'Get a wrapped instance of the targetDataLine
	Dim TDL As TargetDataLineWrapper
	TDL.Initialize(InDevice)
	
	'Add a Listener to the TargetDataLine so we can get events for Start, Stop etc. (Optional)
	TDL.AddLineListener(Me,"DataLine")
	
	Log("Changed " & cbInputs.GetItem(Index))
	
End Sub

Private Sub btnFfmpeg_Click
	Dim FC As FileChooser
	
	FC.Initialize
	FC.Title="Path to FFMpeg.exe"
	FC.SetExtensionFilter("Exe Files",Array As String("*.exe"))
	FC.InitialDirectory = InitialFilePath
	Dim response As String = FC.ShowOpen(MainForm)
	If response = "" Then Return
	If File.GetName(response).ToLowerCase <> "ffmpeg.exe" Then
		Dialog.Title = "Path error"
		Wait For(Dialog.Show("File must be ffnpeg.exe","","","OK")) Complete (Resp As Int)
		Return
	End If
	
	lblFfmpeg.Text = response
	Options.Put("PathToFFMPeg",response)
End Sub

#End Region gui

#Region Callbacks
'Recording has finished
Private Sub CaptureMethod_Complete
	Log("Recording Finished " & CaptureMethod1.CaptureType)
	'If the CaptureRaw method is selected then save the data in the Buffer as a wav file.  Adds an appropriate file header
	If CaptureMethod1.CaptureType = Capture_Static.CAPTURE_RAW Then
		If TempFile = "" Then
			WaveFile.Save(CaptureMethod1.GetBuffer,AudioFormat,InitialFilePath,FileName)
		Else
			WaveFile.Save(CaptureMethod1.GetBuffer,AudioFormat,TempPath,TempFile)
			FFMPeg_Utils.Convert(lblFfmpeg.Text,TempPath,TempFile,InitialFilePath,FileName)
					
		End If
	Else If TempFile <> "" Then
		FFMPeg_Utils.Convert(lblFfmpeg.Text,TempPath,TempFile,InitialFilePath,FileName)
	End If
	btnPlay.Enabled = True
End Sub

'Callback for the TargetDataLine Listener
Public Sub DataLine_Event(Name As String)
	'Manage the gui for start and stop events
	Select True
		Case Name.StartsWith("Start")
			CSSUtils.SetBackgroundColor(lblRec,fx.Colors.Red)
			
		Case Name.StartsWith("Stop")
			CSSUtils.SetBackgroundColor(lblRec,fx.Colors.From32Bit(0xFFB8B8B8))
	End Select
End Sub

'Callback for the Amplitude notification
Public Sub CaptureMethod_Amplitude(AmplitudeVal As Int)
	lblAmplitude.Text = AmplitudeVal
End Sub

#End Region Callbacks




