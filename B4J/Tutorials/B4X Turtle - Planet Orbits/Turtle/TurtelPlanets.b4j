AppType=JavaFX
Build1=Default,b4j.example
File1=earth.jpg
File10=sun.jpg
File11=uranus.jpg
File12=venus.jpg
File2=jupiter.jpg
File3=main.bjl
File4=mars.jpg
File5=mercury.jpg
File6=neptune.jpg
File7=pluto.jpg
File8=saturn.jpg
File9=smiley.png
FileGroup1=Default Group
FileGroup10=Default Group
FileGroup11=Default Group
FileGroup12=Default Group
FileGroup2=Default Group
FileGroup3=Default Group
FileGroup4=Default Group
FileGroup5=Default Group
FileGroup6=Default Group
FileGroup7=Default Group
FileGroup8=Default Group
FileGroup9=Default Group
Group=Default Group
Library1=jcore
Library2=jfx
Library3=b4xturtle
Library4=jxui
NumberOfFiles=12
NumberOfLibraries=4
NumberOfModules=0
Version=8.31
@EndOfDesignText@
#Region Project Attributes 
	#MainFormWidth: 800
	#MainFormHeight: 800
#End Region

Sub Process_Globals
	Private fx As JFX
	Private MainForm As Form
	Private turtle, turtle2, turtle3, turtle4, turtle5, turtle6, turtle7, turtle8, turtle9 As B4XTurtle
	
	Dim xui As XUI
	
	Dim t As Timer
	Dim sun As B4XBitmap
	Dim earth As B4XBitmap
	Dim mars As B4XBitmap
	Dim mercury As B4XBitmap
	Dim venus As B4XBitmap
	Dim jupiter As B4XBitmap
	Dim saturn As B4XBitmap
	Dim uranus As B4XBitmap
	Dim neptune As B4XBitmap
	Dim pluto As B4XBitmap
	
	Dim radiusmercury As Float = 70
	Dim radiusvenus As Float = 110
	Dim radiusearth As Float = 150
	Dim radiusmars As Float = 190
	Dim radiusjupiter As Float = 230
	Dim radiussaturn As Float = 270
	Dim radiusuranus As Float = 310
	Dim radiusneptune As Float = 350
	Dim radiuspluto As Float = 390
	
End Sub

Sub AppStart (Form1 As Form, Args() As String)
	MainForm = Form1
	MainForm.RootPane.LoadLayout("main") 'Load the layout file.
	MainForm.Show
	
	t.Initialize("t", 200)
	
	sun = xui.LoadBitmapResize(File.DirAssets, "sun.jpg", 75, 75, True)
	earth = xui.LoadBitmapResize(File.DirAssets, "earth.jpg", 50, 50, True)
	mars  = xui.LoadBitmapResize(File.DirAssets, "mars.jpg", 40, 40, True)
	mercury  = xui.LoadBitmapResize(File.DirAssets, "mercury.jpg", 20, 20, True)
	venus  = xui.LoadBitmapResize(File.DirAssets, "venus.jpg", 30, 30, True)
	jupiter  = xui.LoadBitmapResize(File.DirAssets, "jupiter.jpg", 40, 40, True)
	saturn  = xui.LoadBitmapResize(File.DirAssets, "saturn.jpg", 40, 40, True)
	uranus  = xui.LoadBitmapResize(File.DirAssets, "uranus.jpg", 40, 40, True)
	neptune  = xui.LoadBitmapResize(File.DirAssets, "neptune.jpg", 40, 40, True)
	pluto  = xui.LoadBitmapResize(File.DirAssets, "pluto.jpg", 40, 40, True)
	
	
	turtle.SetTurtleVisible(False)
	turtle2.SetTurtleVisible(False)
	turtle3.SetTurtleVisible(False)
	turtle4.SetTurtleVisible(False)
	turtle5.SetTurtleVisible(False)
	turtle6.SetTurtleVisible(False)
	turtle7.SetTurtleVisible(False)
	turtle8.SetTurtleVisible(False)
	turtle9.SetTurtleVisible(False)
	
	turtle.SetNumberOfLayers(3)
	turtle.SetCurrentLayer(0)
	turtle.SetX(turtle.Width/2)
	turtle.SetY(turtle.Height/2)
	turtle.DrawBitmap(sun)
	
	turtle.RabbitMode
	turtle.SetPenColor(xui.Color_Red)
    


	turtle.SetX(turtle.Width/2)
	turtle.SetY((turtle.Height/2 + radiusearth))

	Circle(radiusearth)
	

	turtle.SetX(turtle.Width/2)
	turtle.SetY((turtle.Height/2 + radiusmars))

	Circle(radiusmars)
	
	turtle.SetX(turtle.Width/2)
	turtle.SetY((turtle.Height/2 + radiusmercury))

	Circle(radiusmercury)
	
	
	turtle.SetX(turtle.Width/2)
	turtle.SetY((turtle.Height/2 + radiusvenus))

	Circle(radiusvenus)
	
	turtle.SetX(turtle.Width/2)
	turtle.SetY((turtle.Height/2 + radiusjupiter))

	Circle(radiusjupiter)
	
	turtle.SetX(turtle.Width/2)
	turtle.SetY((turtle.Height/2 + radiussaturn))

	Circle(radiussaturn)
	
	turtle.SetX(turtle.Width/2)
	turtle.SetY((turtle.Height/2 + radiusuranus))

	Circle(radiusuranus)
	
	turtle.SetX(turtle.Width/2)
	turtle.SetY((turtle.Height/2 + radiusneptune))

	Circle(radiusneptune)
	
	turtle.SetX(turtle.Width/2)
	turtle.SetY((turtle.Height/2 + radiuspluto))

	Circle(radiuspluto)


	turtle.SetCurrentLayer(1)
	turtle.SetX(turtle.Width/2)
	turtle.SetY((turtle.Height/2 + radiusearth))
	turtle.DrawBitmap(earth)
	
	turtle2.SetX(turtle2.Width/2)
	turtle2.SetY((turtle2.Height/2 + radiusmars))
	turtle2.DrawBitmap(mars)

	
	turtle3.SetX(turtle3.Width/2)
	turtle3.SetY((turtle3.Height/2 + radiusmercury))
	turtle3.DrawBitmap(mercury)

	turtle4.SetX(turtle4.Width/2)
	turtle4.SetY((turtle4.Height/2 + radiusvenus))
	turtle4.DrawBitmap(venus)
	
	turtle5.SetX(turtle5.Width/2)
	turtle5.SetY((turtle5.Height/2 + radiusjupiter))
	turtle5.DrawBitmap(jupiter)
	
	turtle6.SetX(turtle6.Width/2)
	turtle6.SetY((turtle6.Height/2 + radiussaturn))
	turtle6.DrawBitmap(saturn)
	
	turtle7.SetX(turtle7.Width/2)
	turtle7.SetY((turtle7.Height/2 + radiusuranus))
	turtle7.DrawBitmap(uranus)
	
	turtle8.SetX(turtle8.Width/2)
	turtle8.SetY((turtle8.Height/2 + radiusneptune))
	turtle8.DrawBitmap(neptune)
	
	turtle9.SetX(turtle9.Width/2)
	turtle9.SetY((turtle9.Height/2 + radiuspluto))
	turtle9.DrawBitmap(pluto)

	Sleep(1000)

	drawearth(radiusearth)
	drawmars(radiusmars)	
	drawmercury(radiusmercury)
	drawvenus(radiusvenus)
	drawjupiter(radiusjupiter)
	drawsaturn(radiussaturn)
	drawuranus(radiusuranus)
	drawneptune(radiusneptune)
	drawpluto(radiuspluto)
	
	t.Enabled = True



	
End Sub
	
Sub Circle (r As Float)
    For i = 1 To 360
        turtle.MoveForward(((r*2)*cPI)/360).TurnLeft(1)
		'If i Mod 60 = 0 Then turtle.DrawBitmap(earth)
    Next

End Sub

Sub drawearth(r As Float)
    turtle.SetCurrentLayer(1)
	turtle.ClearScreen
	turtle.SetX(turtle.Width/2)
	turtle.SetY((turtle.Height/2 + r))
	turtle.DrawBitmap(earth)

End Sub

Sub drawmars(r As Float)

	turtle2.ClearScreen
	turtle2.SetX(turtle2.Width/2)
	turtle2.SetY((turtle2.Height/2 + r))
	turtle2.DrawBitmap(mars)

End Sub

Sub drawmercury(r As Float)

	turtle3.ClearScreen
	turtle3.SetX(turtle3.Width/2)
	turtle3.SetY((turtle3.Height/2 + r))
	turtle3.DrawBitmap(mercury)

End Sub

Sub drawvenus(r As Float)

	turtle4.ClearScreen
	turtle4.SetX(turtle4.Width/2)
	turtle4.SetY((turtle4.Height/2 + r))
	turtle4.DrawBitmap(venus)

End Sub

Sub drawjupiter(r As Float)

	turtle5.ClearScreen
	turtle5.SetX(turtle5.Width/2)
	turtle5.SetY((turtle5.Height/2 + r))
	turtle5.DrawBitmap(jupiter)

End Sub

Sub drawsaturn(r As Float)

	turtle6.ClearScreen
	turtle6.SetX(turtle6.Width/2)
	turtle6.SetY((turtle6.Height/2 + r))
	turtle6.DrawBitmap(saturn)

End Sub

Sub drawuranus(r As Float)

	turtle7.ClearScreen
	turtle7.SetX(turtle7.Width/2)
	turtle7.SetY((turtle7.Height/2 + r))
	turtle7.DrawBitmap(uranus)

End Sub

Sub drawneptune(r As Float)

	turtle8.ClearScreen
	turtle8.SetX(turtle8.Width/2)
	turtle8.SetY((turtle8.Height/2 + r))
	turtle8.DrawBitmap(neptune)

End Sub

Sub drawpluto(r As Float)

	turtle9.ClearScreen
	turtle9.SetX(turtle9.Width/2)
	turtle9.SetY((turtle9.Height/2 + r))
	turtle9.DrawBitmap(pluto)

End Sub

Sub t_tick
	

	turtle.ClearScreen
	turtle.MoveForward(((radiusearth*2*cPI)/360)*360/365.25).TurnLeft(360/365.25)
	turtle.DrawBitmap(earth)
'	Log("Earth = " & turtle.GetAngle)

	turtle2.ClearScreen
	turtle2.MoveForward(((radiusmars*2*cPI)/360)*360/687).TurnLeft(360/687)
	turtle2.DrawBitmap(mars)
'	Log("Mars = " & turtle2.GetAngle)
	
	turtle3.ClearScreen
	turtle3.MoveForward(((radiusmercury*2*cPI)/360)*360/88).TurnLeft(360/88)
	turtle3.DrawBitmap(mercury)
'	Log("Mercury = " & turtle3.GetAngle)
	
	turtle4.ClearScreen
	turtle4.MoveForward(((radiusvenus*2*cPI)/360)*360/225).TurnLeft(360/225)
	turtle4.DrawBitmap(venus)
'	Log("Venus = " & turtle4.GetAngle)
	
	turtle5.ClearScreen
	turtle5.MoveForward(((radiusjupiter*2*cPI)/360)*360/4333).TurnLeft(360/4333)
	turtle5.DrawBitmap(jupiter)
'	Log("Jupiter = " & turtle5.GetAngle)
	
	turtle6.ClearScreen
	turtle6.MoveForward(((radiussaturn*2*cPI)/360)*360/10759).TurnLeft(360/10759)
	turtle6.DrawBitmap(saturn)
'	Log("Saturn = " & turtle6.GetAngle)
	
	turtle7.ClearScreen
	turtle7.MoveForward(((radiusuranus*2*cPI)/360)*360/30687).TurnLeft(360/30687)
	turtle7.DrawBitmap(uranus)
'	Log("Uranus = " & turtle7.GetAngle)
	
	turtle8.ClearScreen
	turtle8.MoveForward(((radiusneptune*2*cPI)/360)*360/60190).TurnLeft(360/60190)
	turtle8.DrawBitmap(neptune)
'	Log("Neptune = " & turtle8.GetAngle)
	
	turtle9.ClearScreen
	turtle9.MoveForward(((radiuspluto*2*cPI)/360)*360/90560).TurnLeft(360/90560)
	turtle9.DrawBitmap(pluto)
'	Log("Pluto = " & turtle9.GetAngle)
	
End Sub
	
	


'Return true to allow the default exceptions handler to handle the uncaught exception.
Sub Application_Error (Error As Exception, StackTrace As String) As Boolean
	Return True
End Sub

Sub turtle_Start
	
End Sub

Sub turtle_Done
	
End Sub

Sub turtle_Touch (Args As TurtleTouchArgs)
	
End Sub