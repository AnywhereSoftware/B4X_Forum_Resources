B4J=true
Group=Default Group
ModulesStructureVersion=1
Type=Class
Version=5.9
@EndOfDesignText@
'Class Module
Sub Class_Globals
	'Private fx As JFX ' Uncomment if required. For B4j only
	Private TJO As JavaObject

End Sub
'Initializes the object. You can add parameters to this method if needed.
Public Sub Initialize
	'This is an autogenerated constructor, there may not be a matching constructor in the class, you will then have to remove the next line of code
	TJO.InitializeStatic("javax.sound.midi.Synthesizer")
End Sub

'Obtains a list of instruments that come with the synthesizer.
Public Sub GetAvailableInstruments As MidiInstrument()
	Dim Temp() As Object = TJO.RunMethod("getAvailableInstruments",Null)
	Dim Wrapper(Temp.length) As MidiInstrument
	For i = 0 To Temp.Length - 1
		Wrapper(i).Initialize
		Wrapper(i).SetObject(Temp(i))
	Next
	Return Wrapper
End Sub
'Obtains the set of MIDI channels controlled by this synthesizer.
Public Sub GetChannels As MidiChannel()
	Dim arr() As Object = TJO.RunMethod("getChannels",Null)
	Dim Wrapper(arr.Length) As MidiChannel
	For i = 0 To arr.Length -1
		Wrapper(i).Initialize
		Wrapper(i).SetObject(arr(i))
	Next
	Return Wrapper
End Sub
'Obtains the default soundbank for the synthesizer, if one exists.
Public Sub GetDefaultSoundbank As MidiSoundbank
	Return TJO.RunMethod("getDefaultSoundbank",Null)
End Sub
'Obtains the processing latency incurred by this synthesizer, expressed in microseconds.
Public Sub GetLatency As Long
	Return TJO.RunMethod("getLatency",Null)
End Sub
'Obtains a list of the instruments that are currently loaded onto this Synthesizer.
Public Sub GetLoadedInstruments As MidiInstrument()
	Dim Temp() As Object = TJO.RunMethod("getLoadedInstruments",Null)
	Dim Wrapper(Temp.length) As MidiInstrument
	For i = 0 To Temp.Length - 1
		Wrapper(i).Initialize
		Wrapper(i).SetObject(Temp(i))
	Next
	Return Wrapper
End Sub
'Obtains the maximum number of notes that this synthesizer can sound simultaneously.
Public Sub GetMaxPolyphony As Int
	Return TJO.RunMethod("getMaxPolyphony",Null)
End Sub
'Obtains the current status of the voices produced by this synthesizer.
Public Sub GetVoiceStatus As JavaObject
	Return TJO.RunMethod("getVoiceStatus",Null)
End Sub
'Informs the caller whether this synthesizer is capable of loading instruments from the specified soundbank.
Public Sub IsSoundbankSupported(TSoundbank As MidiSoundbank) As Boolean
	Return TJO.RunMethod("isSoundbankSupported",Array As Object(TSoundbank.GetObject))
End Sub
'Loads onto the Synthesizer all instruments contained in the specified Soundbank.
Public Sub LoadAllInstruments(TSoundbank As MidiSoundbank) As Boolean
	Return TJO.RunMethod("loadAllInstruments",Array As Object(TSoundbank.GetObject))
End Sub
'Makes a particular instrument available for synthesis.
Public Sub LoadInstrument(TInstrument As MidiInstrument) As Boolean
	Return TJO.RunMethod("loadInstrument",Array As Object(TInstrument.GetObject))
End Sub
'Loads the instruments referenced by the specified patches, from the specified Soundbank.
Public Sub LoadInstruments(TSoundbank As MidiSoundbank, PatchList() As Object) As Boolean
	Return TJO.RunMethod("loadInstruments",Array As Object(TSoundbank.GetObject,  UnWrapTypedArray(PatchList)))
End Sub
'Remaps an instrument.
Public Sub RemapInstrument(From As MidiInstrument, Target As MidiInstrument) As Boolean
	Return TJO.RunMethod("remapInstrument",Array As Object(From.GetObject, Target.GetObject))
End Sub
'Unloads all instruments contained in the specified Soundbank.
Public Sub UnloadAllInstruments(TSoundbank As MidiSoundbank)
	TJO.RunMethod("unloadAllInstruments",Array As Object(TSoundbank.GetObject))
End Sub
'Unloads a particular instrument.
Public Sub UnloadInstrument(TInstrument As MidiInstrument)
	TJO.RunMethod("unloadInstrument",Array As Object(TInstrument.GetObject))
End Sub
'Unloads the instruments referenced by the specified patches, from the MIDI sound bank specified.
Public Sub UnloadInstruments(TSoundbank As MidiSoundbank, PatchList() As MidiPatch)
	Dim Arr(PatchList.Length) As Object
	For i = 0 To PatchList.Length - 1
		Arr(i) = PatchList(i).GetObject
	Next
	TJO.RunMethod("unloadInstruments",Array As Object(TSoundbank.GetObject, Arr ))
End Sub

'From MidiDevice
'Closes the device, indicating that the device should now release any system resources it is using.
Public Sub Close
	TJO.RunMethod("close",Null)
End Sub
'Obtains information about the device, including its Java class and Strings containing its name, vendor, and description.
Public Sub GetDeviceInfo As MidiDeviceInfo
	Dim Wrapper As MidiDeviceInfo
	Wrapper.Initialize
	Wrapper.SetObject(TJO.RunMethod("getDeviceInfo",Null))
	Return Wrapper
End Sub
'Obtains the maximum number of MIDI IN connections available on this MIDI device for receiving MIDI data.
Public Sub GetMaxReceivers As Int
	Return TJO.RunMethod("getMaxReceivers",Null)
End Sub
'Obtains the maximum number of MIDI OUT connections available on this MIDI device for transmitting MIDI data.
Public Sub GetMaxTransmitters As Int
	Return TJO.RunMethod("getMaxTransmitters",Null)
End Sub
'Obtains the current time-stamp of the device, in microseconds.
Public Sub GetMicrosecondPosition As Long
	Return TJO.RunMethod("getMicrosecondPosition",Null)
End Sub
'Obtains a MIDI IN receiver through which the MIDI device may receive MIDI data.
Public Sub GetReceiver As MidiReceiver
	Dim Wrapper As MidiReceiver
	Wrapper.Initialize
	Wrapper.SetObject(TJO.RunMethod("getReceiver",Null))
	Return Wrapper
End Sub
'Returns all currently active, non-closed receivers connected with this MidiDevice.
Public Sub GetReceivers As List
	Dim Wrapper As List
	Dim Arr() As Object = TJO.RunMethod("getReceivers",Null)
	For i = 0 To Arr.Length
		Dim R As MidiReceiver
		R.Initialize
		R.SetObject(Arr(i))
		Wrapper.Add(R)
	Next
	Return Wrapper
End Sub
'Obtains a MIDI OUT connection from which the MIDI device will transmit MIDI data The returned transmitter must be closed when the application has finished using it.
Public Sub GetTransmitter As MidiTransmitter
	Dim Wrapper As MidiTransmitter
	Wrapper.Initialize
	Wrapper.SetObject(TJO.RunMethod("getTransmitter",Null))
	Return Wrapper
End Sub
'Returns all currently active, non-closed transmitters connected with this MidiDevice.
Public Sub GetTransmitters As List
	Dim Wrapper As List
	Dim Arr() As Object = TJO.RunMethod("getTransmitters",Null)
	For i = 0 To Arr.Length
		Dim R As MidiTransmitter
		R.Initialize
		R.SetObject(Arr(i))
		Wrapper.Add(R)
	Next
	Return Wrapper
End Sub
'Reports whether the device is open.
Public Sub IsOpen As Boolean
	Return TJO.RunMethod("isOpen",Null)
End Sub
'Opens the device, indicating that it should now acquire any system resources it requires and become operational.
Public Sub Open
	TJO.RunMethod("open",Null)
End Sub

'Get the unwrapped object
Public Sub GetObject As Object
	Return TJO
End Sub

'Get the unwrapped object As a JavaObject
Public Sub GetObjectJO As JavaObject
	Return TJO
End Sub
'Comment if not needed

'Set the underlying Object, must be of correct type
Public Sub SetObject(Obj As Object)
	TJO = Obj
End Sub

'Wrap an array in a type defined by the first unwrapped element in the array. 
'Arr is an array of wrapped objects
Sub UnWrapTypedArray(Arr As Object) As Object
	Dim P1 As JavaObject
	Dim ObjArr() As Object = Arr
	Dim ResultArr(ObjArr.Length) As Object
	For i = 0 To ObjArr.Length - 1
		ResultArr(i) = GetWrappedObject(ObjArr(i))
	Next
	P1.InitializeArray(GetType(ResultArr(0)),ResultArr)
	Return P1
End Sub
'Gets a wrapped object from any wrapper class that has a GetObject Sub 
'without knowing it's type
Sub GetWrappedObject(jObj As JavaObject) As JavaObject
	Try
    #if Debug
    Return jObj.RunMethod("_getobject",Array(jObj))
    #end if
    #if Release
		Return jObj.RunMethod("_getobject",Null)
    #End if
	Catch
		Log("Invalid type passed to Sub " & GetType(jObj))
		Return Null
	End Try
End Sub