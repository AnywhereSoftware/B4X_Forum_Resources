B4J=true
Group=Default Group
ModulesStructureVersion=1
Type=Class
Version=5.9
@EndOfDesignText@
'Class Module
Sub Class_Globals
	'Private fx As JFX ' Uncomment if required. For B4j only
	Private TJO As JavaObject

End Sub
'Initializes the object. You can add parameters to this method if needed.
Public Sub Initialize
	'This is an autogenerated constructor, there may not be a matching constructor in the class, you will then have to remove the next line of code
	TJO.InitializeStatic("javax.sound.midi.MidiDevice")
End Sub

Public Sub AsSynthesizer As MidiSoundbank
	Dim Syn As MidiSoundbank
	Syn.Initialize
	Syn.SetObject(TJO)
	Return Syn
End Sub

Public Sub Run
	TJO.RunMethod("run",Null)
End Sub

'Closes the device, indicating that the device should now release any system resources it is using.
Public Sub Close
	Dim MEJO As JavaObject = Me
	MEJO.RunMethod("close",Array(TJO))
End Sub
'Obtains information about the device, including its Java class and Strings containing its name, vendor, and description.
Public Sub GetDeviceInfo As MidiDeviceInfo
	Dim Wrapper As MidiDeviceInfo
	Wrapper.Initialize
	Wrapper.SetObject(TJO.RunMethod("getDeviceInfo",Null))
	Return Wrapper
End Sub
'Obtains the maximum number of MIDI IN connections available on this MIDI device for receiving MIDI data.
Public Sub GetMaxReceivers As Int
	Dim MEJO As JavaObject = Me
	Return MEJO.RunMethod("getMaxReceivers",Array(TJO))
End Sub
'Obtains the maximum number of MIDI OUT connections available on this MIDI device for transmitting MIDI data.
Public Sub GetMaxTransmitters As Int
	Dim MEJO As JavaObject = Me
	Return MEJO.RunMethod("getMaxTransmitters",Array(TJO))
End Sub
'Obtains the current time-stamp of the device, in microseconds.
Public Sub GetMicrosecondPosition As Long
	Return TJO.RunMethod("getMicrosecondPosition",Null)
End Sub
'Obtains a MIDI IN receiver through which the MIDI device may receive MIDI data.
Public Sub GetReceiver As MidiReceiver
	
	Dim MEJO As JavaObject = Me
	Dim Wrapper As MidiReceiver
	Wrapper.Initialize
	Wrapper.SetObject(MEJO.RunMethod("getReceiver",Array(TJO)))
	Return Wrapper
End Sub
'Returns all currently active, non-closed receivers connected with this MidiDevice.
Public Sub GetReceivers As List
	Dim MEJO As JavaObject = Me
	Dim L As List
	L.Initialize2(MEJO.RunMethod("getReceivers",Array(TJO)))
	Dim RecList As List
	RecList.Initialize
	For Each Rec As Object In L
		Dim Wrapper As MidiReceiver
		Wrapper.Initialize
		Wrapper.SetObject(Rec)
		RecList.Add(Wrapper)
	Next
	Return RecList
End Sub
'Obtains a MIDI OUT connection from which the MIDI device will transmit MIDI data The returned transmitter must be closed when the application has finished using it.
Public Sub GetTransmitter As MidiTransmitter
	Dim MEJO As JavaObject = Me
	Dim Wrapper As MidiTransmitter
	Wrapper.Initialize
	Wrapper.SetObject(MEJO.RunMethod("getTransmitter",Array(TJO)))
	Return Wrapper
End Sub
'Returns all currently active, non-closed transmitters connected with this MidiDevice.
Public Sub GetTransmitters As List
	Dim MEJO As JavaObject = Me
	
	Dim L As List
	L.Initialize2(MEJO.RunMethod("getTransmitters",Array(TJO)))
	Dim T As List
	T.Initialize
	For Each Tra As Object In L
		Dim Wrapper As MidiTransmitter
		Wrapper.Initialize
		Wrapper.SetObject(Tra)
		T.Add(Wrapper)
	Next
	Return T
End Sub
'Reports whether the device is open.
Public Sub IsOpen As Boolean
	Dim MEJo As JavaObject = Me
	Return MEJo.RunMethod("isOpen",Array(TJO))
End Sub
'Opens the device, indicating that it should now acquire any system resources it requires and become operational.
Public Sub Open
	Dim MEJO As JavaObject = Me
	MEJO.RunMethod("open",Array(TJO))
End Sub

'Get the unwrapped object
Public Sub GetObject As Object
	Return TJO
End Sub

'Get the unwrapped object As a JavaObject
Public Sub GetObjectJO As JavaObject
	Return TJO
End Sub
'Comment if not needed

'Set the underlying Object, must be of correct type
Public Sub SetObject(Obj As Object)
	TJO = Obj
End Sub


Public Sub IsSynthesizer As Boolean
	Dim MEJO As JavaObject = Me
	Return MEJO.RunMethod("isSynthesizer",Array(GetObject))
End Sub

Public Sub IsSequencer As Boolean
	Dim MEJO As JavaObject = Me
	Return MEJO.RunMethod("isSequencer",Array(GetObject))
End Sub
Public Sub IsTransmitter As Boolean
	Dim MEJO As JavaObject = Me
	Return MEJO.RunMethod("isTransmitter",Array(GetObject))
End Sub
Public Sub IsReceiver As Boolean
	Dim MEJO As JavaObject = Me
	Return MEJO.RunMethod("isReceiver",Array(GetObject))
End Sub

Public Sub IsMidiIn As Boolean
	Return GetType(TJO) = "com.sun.media.sound.MidiInDevice"
End Sub

Public Sub IsMidiOut As Boolean
	Return GetType(TJO) = "com.sun.media.sound.MidiOutDevice"
End Sub

#If Java
import javax.sound.midi.MidiDevice;
import javax.sound.midi.Synthesizer;
import javax.sound.midi.Sequencer;
import javax.sound.midi.Transmitter;
import javax.sound.midi.Receiver;
import java.util.List;

public boolean isSynthesizer(MidiDevice d){
	return d instanceof Synthesizer;
}
public boolean isSequencer(MidiDevice d){
	return d instanceof Sequencer;
}
public boolean isTransmitter(MidiDevice d){
	return d instanceof Transmitter;
}
public boolean isReceiver(MidiDevice d){
	return d instanceof Receiver;
}

public void close(MidiDevice md) {
	md.close();
}

public int getMaxReceivers(MidiDevice md) {
	return md.getMaxReceivers();
}

public int getMaxTransmitters(MidiDevice md) {
	return md.getMaxTransmitters();
}

public Transmitter getTransmitter(MidiDevice md) throws javax.sound.midi.MidiUnavailableException {
	return md.getTransmitter();
}

public Receiver getReceiver(MidiDevice md) throws javax.sound.midi.MidiUnavailableException {
	return md.getReceiver();
}

public List<Receiver> getReceivers(MidiDevice md) throws javax.sound.midi.MidiUnavailableException {
	return md.getReceivers();
}

public List<Transmitter> getTransmitters(MidiDevice md) throws javax.sound.midi.MidiUnavailableException {
	return md.getTransmitters();
}

public boolean isOpen(MidiDevice md){
	return md.isOpen();
}

public void open(MidiDevice md) throws javax.sound.midi.MidiUnavailableException {
	md.open();
}
#End If