<?xml version="1.0" encoding="UTF-8"?>
<root>
    <doclet-version-NOT-library-version>1.07</doclet-version-NOT-library-version>
    <class>
        <name>com.tummosoft.App</name>
        <comment>Hello world!</comment>
        <owner>process</owner>
        <method>
            <name>main</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>args</name>
                <type>java.lang.String[]</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>com.tummosoft.muix.HtmlHelper</name>
        <shortname>HtmlHelper</shortname>
        <owner>process</owner>
        <method>
            <name>addBody</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>html</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>AddScript</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>script</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>builder</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>_viewbag</name>
                <type>com.tummosoft.muix.ViewBag</type>
            </parameter>
        </method>
        <method>
            <name>TopScript</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>script</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>event</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>ws</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>com.tummosoft.muix.jDateTime</name>
        <shortname>jDateTime</shortname>
        <owner>process</owner>
        <method>
            <name>StringToTimestamp</name>
            <comment></comment>
            <returntype>long</returntype>
            <parameter>
                <name>sDate</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Now</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>format</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>sDate</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>Month</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>DayOfWeek</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Year</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Minute</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Second</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Hour</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Day</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>com.tummosoft.muix.jFileSupport</name>
        <shortname>jFileSupport</shortname>
        <owner>process</owner>
        <method>
            <name>Delete</name>
            <comment>Deletes the specified file. If the file name is a directory then it must be empty in order to be deleted.
Returns true if the file was successfully deleted.
Files in the assets folder cannot be deleted.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetFileParent</name>
            <comment>Returns the path of the file or folder parent.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsDirectory</name>
            <comment>Tests whether the specified file is a directory.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Size</name>
            <comment>Returns the size in bytes of the specified file.
This method does not support files in the assets folder.</comment>
            <returntype>long</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Combine</name>
            <comment>Returns the full path to the given file.
This methods does not support files in the assets folder.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>MakeDir</name>
            <comment>Creates the given folder (creates all folders as needed).
Example:&lt;code&gt;
File.MakeDir(File.DirApp, "music/90")&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Parent</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>DirData</name>
            <comment>Returns the path to a folder that is suitable for writing files.
On Windows, folders under Program Files are read-only. Therefore File.DirApp will be read-only as well.
On Windows it returns the path to the user data folder. For example:
C:\Users\[user name]\AppData\Roaming\[AppName]
On Mac it returns ~/Library/Application Support/[AppName]
On Linux it returns the same path as File.DirApp.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>AppName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ReadMap2</name>
            <comment>Similar to ReadMap. ReadMap2 adds the items to the given Map.
By using ReadMap2 with a populated map you can force the items order as needed.
Example:&lt;code&gt;
Dim m As Map
m.Initialize
m.Put("Item #1", "")
m.Put("Item #2", "")
m = File.ReadMap2(File.DirApp, "settings.txt", m)&lt;/code&gt;</comment>
            <returntype>anywheresoftware.b4a.objects.collections.Map</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Map</name>
                <type>anywheresoftware.b4a.objects.collections.Map</type>
            </parameter>
        </method>
        <method>
            <name>ListFiles</name>
            <comment>Returns a read only list with all the files and directories which are stored in the specified path.
 An uninitialized list will be returned if the folder is not accessible.
This method does not support the assets folder.</comment>
            <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>LastModified</name>
            <comment>Returns the last modified date of the specified file.
This method does not support files in the assets folder.
Example:&lt;code&gt;
Dim d As Long
d = File.LastModified(File.DirApp, "1.txt")
Msgbox(DateTime.Date(d), "Last modified")&lt;/code&gt;</comment>
            <returntype>long</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ReadList</name>
            <comment>Reads the entire file and returns a List with all lines (as strings).
Example:&lt;code&gt;
Dim List1 As List
List1 = File.ReadList(File.DirApp, "1.txt")
For i = 0 to List1.Size - 1
	Log(List1.Get(i))
Next &lt;/code&gt;</comment>
            <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>WriteMap</name>
            <comment>Creates a new file and writes the given map. Each key value pair is written as a single line.
All values are converted to strings.
See this link for more information about the actual format: &lt;link&gt;Properties format|http://en.wikipedia.org/wiki/.properties&lt;/link&gt;.
You can use File.ReadMap to read this file.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Map</name>
                <type>anywheresoftware.b4a.objects.collections.Map</type>
            </parameter>
        </method>
        <method>
            <name>Copy2</name>
            <comment>Copies all the available data from the input stream into the output stream.
The input stream is automatically closed at the end.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>In</name>
                <type>java.io.InputStream</type>
            </parameter>
            <parameter>
                <name>Out</name>
                <type>java.io.OutputStream</type>
            </parameter>
        </method>
        <method>
            <name>GetName</name>
            <comment>Returns the file name from the full path (or the directory name in case of a directory).</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>FilePath</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ReadMap</name>
            <comment>Reads the file and parses each line as a key-value pair (of strings).
See this link for more information about the actual format: &lt;link&gt;Properties format|http://en.wikipedia.org/wiki/.properties&lt;/link&gt;.
You can use File.WriteMap to write a map to a file.
Note that the order of items in the map may not be the same as the order in the file.</comment>
            <returntype>anywheresoftware.b4a.objects.collections.Map</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>OpenOutput</name>
            <comment>Opens (or creates) the specified file which is located in the Dir folder for writing.
If Append is true then the new data will be written at the end of the existing file.
This method does not support files in the assets folder.</comment>
            <returntype>com.tummosoft.muix.jFileSupport.OutputStreamWrapper</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Append</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>OpenInput</name>
            <comment>Opens the specified file name which is located in the Dir folder for reading.
Note that the file names are case sensitive.</comment>
            <returntype>com.tummosoft.muix.jFileSupport.InputStreamWrapper</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>rennameFile</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>pathname</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>pathname2</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>WriteList</name>
            <comment>Writes each item in the list as a single line.
Note that a value containing CRLF will be saved as two lines (which will return two item when read with ReadList).
All values will be converted to strings.
Example:&lt;code&gt;
File.WriteList (File.DirApp, "mylist.txt", List1)&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>List</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>WriteString</name>
            <comment>Writes the given text to a new file.
Example:&lt;code&gt;
File.WriteString(File.DirApp, "1.txt", "Some text")&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Text</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ReadString</name>
            <comment>Reads the file and returns its content as a string.
Example:&lt;code&gt;
Dim text As String
text = File.ReadString(File.DirApp, "1.txt")&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ListFilesAsync</name>
            <comment>Asynchronous version of ListFiles. Should be used with Wait For.
Example:&lt;code&gt;
Wait For (File.ListFilesAsync(Dir)) Complete (Success As Boolean, Files As List)&lt;/code&gt;</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Copy2Async</name>
            <comment>Asynchronously copies all the available data from the input stream into the output stream.
The input stream is automatically closed at the end.
Returns an object that should be used as the sender filter.
Example:&lt;code&gt;
Wait For (File.Copy2Async(in, out)) Complete (Success As Boolean)
Log("Success: " &amp; Success)&lt;/code&gt;</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>In</name>
                <type>java.io.InputStream</type>
            </parameter>
            <parameter>
                <name>Out</name>
                <type>java.io.OutputStream</type>
            </parameter>
        </method>
        <method>
            <name>ReadBytes</name>
            <comment>Reads the data from the given file.</comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>CopyAsync</name>
            <comment>Asynchronously copies the source file to the target path.
Note that it is not possible to copy files to the Assets folder.
Returns an object that should be used as the sender filter.
Example: &lt;code&gt;
Wait For (File.CopyAsync(File.DirAssets, "1.txt", File.DirTemp, "1.txt")) Complete (Success As Boolean)
Log("Success: " &amp; Success)&lt;/code&gt;</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>DirSource</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileSource</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>DirTarget</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileTarget</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Copy</name>
            <comment>Copies the specified source file to the target path.
Note that it is not possible to copy files to the Assets folder.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DirSource</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileSource</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>DirTarget</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileTarget</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Exists</name>
            <comment>Returns true if the specified FileName exists (file or folder) in the specified Dir.
Note that the file system is case sensitive.
This method does not support File.DirAssets.

Example:&lt;code&gt;
If File.Exists(File.DirApp, "MyFile.txt") Then ...&lt;/code&gt;</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetUri</name>
            <comment>Returns a Uri string ("file://...") that points to the given file.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>WriteBytes</name>
            <comment>Writes the data to the given file.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Data</name>
                <type>byte[]</type>
            </parameter>
        </method>
        <property>
            <name>DirApp</name>
            <returntype>java.lang.String</returntype>
            <comment>Returns the application folder.</comment>
        </property>
        <property>
            <name>DirTemp</name>
            <returntype>java.lang.String</returntype>
            <comment>Returns the temporary folder.</comment>
        </property>
        <property>
            <name>DirAssets</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>com.tummosoft.muix.jFileSupport.InputStreamWrapper</name>
        <shortname>InputStream</shortname>
        <comment>A stream that you can read from. Usually you will pass the stream to a "higher level" object like TextReader that will handle the reading.
You can use File.OpenInput to get a file input stream.</comment>
        <objectwrapper>java.io.InputStream</objectwrapper>
        <owner>process</owner>
        <method>
            <name>BytesAvailable</name>
            <comment>Returns an estimation of the number of bytes available without blocking.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>Close</name>
            <comment>Closes the stream.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>ReadBytes</name>
            <comment>Reads up to MaxCount bytes from the stream and writes it to the given Buffer.
The first byte will be written at StartOffset.
Returns the number of bytes actually read.
Returns -1 if there are no more bytes to read.
Otherwise returns at least one byte.
Example:&lt;code&gt;
Dim buffer(1024) As byte
count = InputStream1.ReadBytes(buffer, 0, buffer.length)&lt;/code&gt;</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Buffer</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>StartOffset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>MaxCount</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>InitializeFromBytesArray</name>
            <comment>Use File.OpenInput to get a file input stream.
This method should be used to read data from a bytes array.
Initializes the input stream and sets it to read from the specified bytes array.
StartOffset - The first byte that will be read.
MaxCount - Maximum number of bytes to read.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Buffer</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>StartOffset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>MaxCount</name>
                <type>int</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>com.tummosoft.muix.jFileSupport.OutputStreamWrapper</name>
        <shortname>OutputStream</shortname>
        <comment>A stream that you can write to. Usually you will pass the stream to a "higher level" object like TextWriter which will handle the writing.
Use File.OpenOutput to get a file output stream.</comment>
        <objectwrapper>java.io.OutputStream</objectwrapper>
        <owner>process</owner>
        <method>
            <name>Flush</name>
            <comment>Flushes any buffered data.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>InitializeToBytesArray</name>
            <comment>Use File.OpenOutput to get a file output stream.
This method should be used to write data to a bytes array.
StartSize - The starting size of the internal bytes array. The size will increase if needed.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>StartSize</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>ToBytesArray</name>
            <comment>Returns a copy of the internal bytes array. Can only be used when the output stream was initialized with InitializeToBytesArray.</comment>
            <returntype>byte[]</returntype>
        </method>
        <method>
            <name>Close</name>
            <comment>Closes the stream.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>WriteBytes</name>
            <comment>Writes the buffer to the stream. The first byte to be written is Buffer(StartOffset), 
and the last is Buffer(StartOffset + Length - 1).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Buffer</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>StartOffset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Length</name>
                <type>int</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>com.tummosoft.muix.jFileSupport.TextWriterWrapper</name>
        <shortname>TextWriter</shortname>
        <comment>Writes text to the underlying stream.&lt;br/&gt;

Example:&lt;code&gt;
Dim Writer As TextWriter
Writer.Initialize(File.OpenOutput(File.DirDefaultExternal, "1.txt", False))
Writer.WriteLine("This is the first line.")
Writer.WriteLine("This is the second line.")
Writer.Close&lt;/code&gt;</comment>
        <objectwrapper>java.io.BufferedWriter</objectwrapper>
        <owner>process</owner>
        <method>
            <name>Write</name>
            <comment>Writes the given Text to the stream.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Text</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>WriteList</name>
            <comment>Writes each item in the list as a single line.
Note that a value containing CRLF will be saved as two lines (which will return two item when read with ReadList).
All values will be converted to strings.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>List</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>WriteLine</name>
            <comment>Writes the given Text to the stream followed by a new line character.
 Example:&lt;code&gt;
 	Dim Writer As TextWriter
	Writer.Initialize(File.OpenOutput(File.DirDefaultExternal, "1.txt", False))
	Writer.WriteLine("This is the first line.")
	Writer.WriteLine("This is the second line.")
	Writer.Close &lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Text</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Flush</name>
            <comment>Flushes any buffered data.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes this object by wrapping the given OutputStream using the UTF8 encoding.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>OutputStream</name>
                <type>java.io.OutputStream</type>
            </parameter>
        </method>
        <method>
            <name>Initialize2</name>
            <comment>Initializes this object by wrapping the given OutputStream using the specified encoding.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>OutputStream</name>
                <type>java.io.OutputStream</type>
            </parameter>
            <parameter>
                <name>Encoding</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Close</name>
            <comment>Closes the stream.</comment>
            <returntype>void</returntype>
        </method>
    </class>
    <class>
        <name>com.tummosoft.muix.jFileSupport.TextReaderWrapper</name>
        <shortname>TextReader</shortname>
        <comment>Reads text from the underlying stream.</comment>
        <objectwrapper>java.io.BufferedReader</objectwrapper>
        <owner>process</owner>
        <method>
            <name>ReadLine</name>
            <comment>Reads the next line from the stream. The new line characters are not returned.
Returns Null if there are no more characters to read.

Example:&lt;code&gt;
	Dim Reader As TextReader
	Reader.Initialize(File.OpenInput(File.InternalDir, "1.txt"))
	Dim line As String
 	line = Reader.ReadLine
 	Do While line &lt;&gt; Null
		Log(line)
		line = Reader.ReadLine
	Loop
	Reader.Close&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes this object by wrapping the given InputStream using the UTF8 encoding.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>InputStream</name>
                <type>java.io.InputStream</type>
            </parameter>
        </method>
        <method>
            <name>Read</name>
            <comment>Reads characters from the stream and into the Buffer.
Reads up to Length characters and puts them in the Buffer starting as StartOffset.
Returns the actual number of characters read from the stream.
Returns -1 if there are no more characters available.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Buffer</name>
                <type>char[]</type>
            </parameter>
            <parameter>
                <name>StartOffset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Length</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Ready</name>
            <comment>Tests whether there is at least one character ready for reading without blocking.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize2</name>
            <comment>Initializes this object by wrapping the given InputStream using the specified encoding.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>InputStream</name>
                <type>java.io.InputStream</type>
            </parameter>
            <parameter>
                <name>Encoding</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ReadList</name>
            <comment>Reads the remaining text and returns a List object filled with the lines.
Closes the stream when done.</comment>
            <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
        </method>
        <method>
            <name>ReadAll</name>
            <comment>Reads all of the remaining text and closes the stream.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>Skip</name>
            <comment>Skips the specified number of characters.
Returns the actual number of characters that were skipped (which may be less than the specified value).</comment>
            <returntype>int</returntype>
            <parameter>
                <name>NumberOfCharaceters</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Close</name>
            <comment>Closes the stream.</comment>
            <returntype>void</returntype>
        </method>
    </class>
    <class>
        <name>com.tummosoft.muix.jFirebaseAuthWrapper</name>
        <shortname>jFirebaseAuthWrapper</shortname>
        <owner>process</owner>
        <event>TokenVerified (firebaseToken as Map)</event>
        <method>
            <name>verifyIdToken</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>s</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>KeyPath</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>com.tummosoft.muix.jFirebaseMessages</name>
        <shortname>jFirebaseMessages</shortname>
        <owner>process</owner>
        <event>ResponseBody (Json As String)</event>
        <event>RequestFailed()</event>
        <method>
            <name>createTopic</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>topic</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>subscribeToTopic</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>topic</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>KeyPath</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>token</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>API</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>com.tummosoft.muix.jFireDatabaseWrapper</name>
        <shortname>jFireDatabaseWrapper</shortname>
        <owner>process</owner>
        <method>
            <name>Updates</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>path</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>DataUrl</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>com.tummosoft.muix.jHikariWrapper</name>
        <shortname>jHikariWrapper</shortname>
        <owner>process</owner>
        <method>
            <name>InitializeSQLite</name>
            <comment></comment>
            <returntype>java.sql.Connection</returntype>
            <parameter>
                <name>JdbcUrl</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>DriverClassName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>com.tummosoft.muix.jImageSupport</name>
        <owner>process</owner>
        <method>
            <name>resizeImage</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>pathname</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>pathname2</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>n</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>n2</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>cropImage</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>pathname</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>pathname2</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>n</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>n2</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>n3</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>n4</name>
                <type>int</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>com.tummosoft.muix.JSPsupport</name>
        <shortname>JSPsupport</shortname>
        <owner>process</owner>
        <method>
            <name>toHTML</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>jsp</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>template</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setVariable</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>variable</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>classname</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>setVariableAsList</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>variable</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>_list</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>Variables</name>
            <parameter>
                <name>variable</name>
                <type>anywheresoftware.b4a.objects.collections.Map</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>CacheTTLMs</name>
            <parameter>
                <name>value</name>
                <type>long</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Cacheable</name>
            <parameter>
                <name>value</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Prefix</name>
            <parameter>
                <name>path</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>com.tummosoft.muix.jSQL</name>
        <shortname>jSQL</shortname>
        <owner CheckForReinitialize="true">process</owner>
        <event>QueryComplete (Success As Boolean, Crsr As ResultSet)</event>
        <event>NonQueryComplete (Success As Boolean)</event>
        <event>Ready (Success As Boolean)</event>
        <method>
            <name>ExecQuery2</name>
            <comment>Executes the query and returns a cursor which is used to go over the results.
The query can include question marks which will be replaced with the values in the array.
Example:&lt;code&gt;
Dim Cursor As ResultSet
Cursor = sql1.ExecQuery2("SELECT col1 FROM table1 WHERE col3 = ?", Array As String(22))&lt;/code&gt;
SQLite will try to convert the string values based on the columns types.</comment>
            <returntype>com.tummosoft.muix.jSQL.ResultSetWrapper</returntype>
            <parameter>
                <name>Query</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Args</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>ExecCall</name>
            <comment>Executes a call statement previously created with CreateCallStatement.</comment>
            <returntype>com.tummosoft.muix.jSQL.ResultSetWrapper</returntype>
            <parameter>
                <name>CallStatement</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>ExecQuery</name>
            <comment>Executes the query and returns a cursor which is used to go over the results.
Example:&lt;code&gt;
Dim Cursor As ResultSet
Cursor = SQL1.ExecQuery("SELECT col1, col2 FROM table1")
Do While Cursor.NextRow
	Log(Cursor.GetString("col1"))
	Log(Cursor.GetInt("col2"))
Loop&lt;/code&gt;</comment>
            <returntype>com.tummosoft.muix.jSQL.ResultSetWrapper</returntype>
            <parameter>
                <name>Query</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ExecQuerySingleResult2</name>
            <comment>Executes the query and returns the value in the first column and the first row (in the result set).
Returns Null if no results were found.
Example:&lt;code&gt;
Dim NumberOfMatches As Int
NumberOfMatches = SQL1.ExecQuerySingleResult2("SELECT count(*) FROM table1 WHERE col2 &gt; ?", Array As String(300))&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Query</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Args</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>CreateCallStatement</name>
            <comment>Create a statement object which you can use with ExecCall to call stored procedures.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>Query</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Args</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment>Tests whether the database is initialized and opened.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes the SQL object. You also need to add the JDBC driver jar to your project with the #AdditionalJar attribute.
DriverClass - The matching JDBC driver. For example (MySQL): com.mysql.jdbc.Driver
JdbcUrl - The connection url. For example (MySQL): jdbc:mysql://localhost/test?characterEncoding=utf8</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DriverClass</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>JdbcUrl</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ExecNonQueryBatch</name>
            <comment>Asynchronously executes a batch of non-query statements (such as INSERT).
The NonQueryComplete event is raised after the statements are completed.
You should call AddNonQueryToBatch one or more times before calling this method to add statements to the batch.
Note that this method internally begins and ends a transaction.
Returns an object that can be used as the sender filter for Wait For calls.
Example:&lt;code&gt;
For i = 1 To 1000
	sql.AddNonQueryToBatch("INSERT INTO table1 VALUES (?)", Array(Rnd(0, 100000)))
Next
Dim SenderFilter As Object = sql.ExecNonQueryBatch("SQL")
Wait For (SenderFilter) SQL_NonQueryComplete (Success As Boolean)
Log("NonQuery: " &amp; Success)&lt;/code&gt;</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>checkNull</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>BeginTransaction</name>
            <comment>Begins a transaction. A transaction is a set of multiple "writing" statements that are atomically committed,
hence all changes will be made or no changes will be made.
As a side effect those statements will be executed significantly faster (in the default case a transaction is implicitly created for
each statement).
It is very important to handle transaction carefully and close them.
The transaction is considered successful only if TransactionSuccessful is called. Otherwise no changes will be made.
Typical usage:&lt;code&gt;
SQL1.BeginTransaction
Try
	'block of statements like:
	For i = 1 to 1000
		SQL1.ExecNonQuery("INSERT INTO table1 VALUES(...)
	Next
	SQL1.TransactionSuccessful
Catch
	Log(LastException.Message) 
  SQL1.RollBack 'no changes will be made
End Try
&lt;/code&gt;</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>AddNonQueryToBatch</name>
            <comment>Adds a non-query statement to the batch of statements.
The statements are (asynchronously) executed when you call ExecNonQueryBatch.
Args parameter can be Null if it is not needed.
Example:&lt;code&gt;
For i = 1 To 1000
	sql.AddNonQueryToBatch("INSERT INTO table1 VALUES (?)", Array(Rnd(0, 100000)))
Next
Dim SenderFilter As Object = sql.ExecNonQueryBatch("SQL")
Wait For (SenderFilter) SQL_NonQueryComplete (Success As Boolean)
Log("NonQuery: " &amp; Success)&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Statement</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Args</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>InitializeSQLite</name>
            <comment>Opens the SQLite database file. A new database will be created if it does not exist and CreateIfNecessary is true.
Note that you should add the following attribute to the main module:
&lt;code&gt;#AdditionalJar: sqlite-jdbc-3.7.2&lt;/code&gt;
Example:&lt;code&gt;
Dim SQL1 As SQL
SQL1.InitializeSQLite(File.DirApp, "MyDb.db", True)&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>CreateIfNecessary</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>Initialize2</name>
            <comment>Similar to Initialize method. Passes the given UserName and Password to the database.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DriverClass</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>JdbcUrl</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>UserName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Password</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ExecQuerySingleResult</name>
            <comment>Executes the query and returns the value in the first column and the first row (in the result set).
Returns Null if no results were found.
Example:&lt;code&gt;
Dim NumberOfMatches As Int
NumberOfMatches = SQL1.ExecQuerySingleResult("SELECT count(*) FROM table1 WHERE col2 &gt; 300")&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Query</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>TransactionSuccessful</name>
            <comment>Commits the statements and ends the transaction.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>ExecNonQuery</name>
            <comment>Executes a single non query SQL statement.
Example:&lt;code&gt;
SQL1.ExecNonQuery("CREATE TABLE table1 (col1 TEXT , col2 INTEGER, col3 INTEGER)")&lt;/code&gt;
It will be significantly faster to explicitly start a transaction before applying any changes to the database.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Statement</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Close</name>
            <comment>Closes the database.
Does not do anything if the database is not opened or was closed before.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>ExecQueryAsync</name>
            <comment>Asynchronously executes the given query. The QueryComplete event will be raised when the results are ready.
Returns an object that can be used as the sender filter for Wait For calls.
Example:&lt;code&gt;
Dim SenderFilter As Object = sql.ExecQueryAsync("SQL", "SELECT * FROM table1", Null)
Wait For (SenderFilter) SQL_QueryComplete (Success As Boolean, rs As ResultSet)
If Success Then
	Do While rs.NextRow
		Log(rs.GetInt2(0))
	Loop
	rs.Close
Else
	Log(LastException)
End If&lt;/code&gt;</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Query</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Args</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>Rollback</name>
            <comment>Rollbacks the changes from the current transaction and closes the transaction.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>ExecNonQuery2</name>
            <comment>Executes a single non query SQL statement.
The statement can include question marks which will be replaced by the items in the given list.
Note that B4J converts arrays to lists implicitly.
The values in the list should be strings, numbers or bytes arrays.
Example:&lt;code&gt;
SQL1.ExecNonQuery2("INSERT INTO table1 VALUES (?, ?, 0)", Array As Object("some text", 2))&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Statement</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Args</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>InitializeAsync</name>
            <comment>Asynchronously initializes the SQL connection. The Ready event will be raised when the connection is ready or if an error has occurred.
The EventName parameter sets the sub that will handle the Ready event.
Example:&lt;code&gt;
Sub Process_Globals
	Dim sql1 As SQL
End Sub

Sub AppStart (Args() As String)
	sql1.InitializeAsync("sql1", "com.mysql.jdbc.Driver", _
		"jdbc:mysql://localhost/example", "username", "password")
	StartMessageLoop 'only required in a console app
End Sub

Sub sql1_Ready (Success As Boolean)
	Log(Success)
	If Success = False Then
		Log(LastException)
		Return
	End If
	Dim rs As ResultSet = sql1.ExecQuery("SELECT table_name FROM information_schema.tables")
	Do While rs.NextRow
		Log(rs.GetString2(0))
	Loop
	rs.Close
End Sub&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>DriverClass</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>JdbcUrl</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>UserName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Password</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>com.tummosoft.muix.jSQL.ResultSetWrapper</name>
        <shortname>ResultSet</shortname>
        <objectwrapper>java.sql.ResultSet</objectwrapper>
        <owner>process</owner>
        <method>
            <name>GetInt2</name>
            <comment>Returns the Int value stored in the column at the given ordinal.
The value will be converted to Int if it is of different type.
Example:&lt;code&gt;
Log(Cursor.GetInt2(0))&lt;/code&gt;</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetBlob</name>
            <comment>Returns the blob stored in the given column.
Example:&lt;code&gt;
Dim Buffer() As Byte
Buffer = Cursor.GetBlob("col1")&lt;/code&gt;</comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>ColumnName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetDouble</name>
            <comment>Returns the Double value stored in the given column.
The value will be converted to Double if it is of different type.
Example:&lt;code&gt;
Log(Cursor.GetDouble("col2"))&lt;/code&gt;</comment>
            <returntype>java.lang.Double</returntype>
            <parameter>
                <name>ColumnName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetLong</name>
            <comment>Returns the Long value stored in the given column.
The value will be converted to Long if it is of different type.
Example:&lt;code&gt;
Log(Cursor.GetLong("col2"))&lt;/code&gt;</comment>
            <returntype>java.lang.Long</returntype>
            <parameter>
                <name>ColumnName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetColumnName</name>
            <comment>Returns the name of the column at the specified index.
The first column index is 0.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetBlob2</name>
            <comment>Returns the blob stored in the column at the given ordinal.
Example:&lt;code&gt;
Dim Buffer() As Byte
Buffer = Cursor.GetBlob2(0)&lt;/code&gt;</comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetInt</name>
            <comment>Returns the Int value stored in the given column.
The value will be converted to Int if it is of different type.
Example:&lt;code&gt;
Log(Cursor.GetInt("col2"))&lt;/code&gt;</comment>
            <returntype>int</returntype>
            <parameter>
                <name>ColumnName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>NextRow</name>
            <comment>Moves the cursor to the next result. Returns false when the cursor reaches the end.
Example:&lt;code&gt;
Do While ResultSet1.NextRow
 'Work with Row
Loop&lt;/code&gt;</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetString</name>
            <comment>Returns the String value stored in the given column.
The value will be converted to String if it is of different type.
Example:&lt;code&gt;
Log(Cursor.GetString("col2"))&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>ColumnName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Close</name>
            <comment>Closes the cursor and frees resources.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>GetDouble2</name>
            <comment>Returns the Double value stored in the column at the given ordinal.
The value will be converted to Double if it is of different type.
Example:&lt;code&gt;
Log(Cursor.GetDouble2(0))&lt;/code&gt;</comment>
            <returntype>java.lang.Double</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetString2</name>
            <comment>Returns the String value stored in the column at the given ordinal.
The value will be converted to String if it is of different type.
Example:&lt;code&gt;
Log(Cursor.GetString2(0))&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetLong2</name>
            <comment>Returns the Long value stored in the column at the given ordinal.
The value will be converted to Long if it is of different type.
Example:&lt;code&gt;
Log(Cursor.GetLong2(0))&lt;/code&gt;</comment>
            <returntype>java.lang.Long</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <property>
            <name>ColumnCount</name>
            <returntype>int</returntype>
            <comment>Gets the number of columns available in the result set.</comment>
        </property>
    </class>
    <class>
        <name>com.tummosoft.muix.jYoutube</name>
        <shortname>jYoutube</shortname>
        <owner>process</owner>
        <event>ResponseBody (Json As String)</event>
        <event>RequestFailed()</event>
        <method>
            <name>Builder</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>apiKey</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>channelId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>com.tummosoft.muix.ViewBag</name>
        <shortname>ViewBag</shortname>
        <owner>process</owner>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <field>
            <name>viewPort</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>Category</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>SiteName</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>pubTime</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>MetaKeywords</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>CustomTag</name>
            <comment></comment>
            <returntype>java.lang.String[]</returntype>
        </field>
        <field>
            <name>Url</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>Copyright</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>Language</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>CustomText</name>
            <comment></comment>
            <returntype>java.lang.String[]</returntype>
        </field>
        <field>
            <name>GeoRegion</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>MetaDescription</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>Script</name>
            <comment></comment>
            <returntype>java.lang.String[]</returntype>
        </field>
        <field>
            <name>RootDomain</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>Title</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>ImageURL</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>fbProfileID</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>TypeInfo</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>Stylesheet</name>
            <comment></comment>
            <returntype>java.lang.String[]</returntype>
        </field>
        <field>
            <name>ShortcutIcon</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>hasOpenGraph</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </field>
        <field>
            <name>modTime</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>hasTwitterTag</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </field>
        <field>
            <name>Author</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>GeoPosition</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>Robot</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
    </class>
    <version>2.1</version>
    <comment>The SQL library allows you to create and manage SQL databases.
Using this library you can connect to any type of SQL database.
See this &lt;link&gt;link|http://www.basic4ppc.com/android/forum/threads/sql-tutorial.35185/&lt;/link&gt; for more information.</comment>
</root>
