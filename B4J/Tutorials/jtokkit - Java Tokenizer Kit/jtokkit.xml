<?xml version="1.0" encoding="UTF-8"?>
<root>
    <doclet-version-NOT-library-version>1.07</doclet-version-NOT-library-version>
    <class>
        <name>de.donmanfred.EncodingRegistrywrapper</name>
        <shortname>EncodingRegistry</shortname>
        <owner>process</owner>
        <method>
            <name>encode</name>
            <comment>Encodes the given text into a list of token ids.
 Special tokens are artificial tokens used to unlock capabilities from a model,
 such as fill-in-the-middle. There is no support for parsing special tokens
 in a text, so if the text contains special tokens, this method will throw an
 If you want to encode special tokens as ordinary text, use {@link #encodeOrdinary(String)}.
text: the text to encode
Return type: @return:the list of token ids</comment>
            <returntype>int[]</returntype>
            <parameter>
                <name>text</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>countTokens</name>
            <comment>Encodes the given text into a list of token ids and returns the amount of tokens.
 It is more performant than {@link #encode(String)}.
 Special tokens are artificial tokens used to unlock capabilities from a model,
 such as fill-in-the-middle. There is no support for parsing special tokens
 in a text, so if the text contains special tokens, this method will throw an
 UnsupportedOperationException
text: the text to count tokens for
Return type: @return:the amount of tokens</comment>
            <returntype>int</returntype>
            <parameter>
                <name>text</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>encodeOrdinary2</name>
            <comment>Encodes the given text into a list of token ids, ignoring special tokens.
 This method does not throw an exception if the text contains special tokens, but instead
 encodes them as if they were ordinary text.
 It will truncate the list of token ids if the number of tokens exceeds the
 given maxTokens parameter. Note that it will try to keep characters together, that are encoded into
 multiple tokens. For example, if the text contains a character which is encoded into 3 tokens,
 and due to the maxTokens parameter the last token of the character is truncated, the first two
 tokens of the character will also be truncated. Therefore, the actual number of tokens may be
 less than the given maxTokens parameter.
text: the text to encode
maxTokens: the maximum number of tokens to encode
Return type: @return:the {@link EncodingResult} containing a list of token ids and whether the tokens were truncated due to the maxTokens parameter</comment>
            <returntype>com.knuddels.jtokkit.api.EncodingResult</returntype>
            <parameter>
                <name>text</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>maxTokens</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>decodeBytes</name>
            <comment>Decodes the given list of token ids into a byte array.
tokens: the list of token ids
Return type: @return:the decoded byte array</comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>tokens</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>encodeOrdinary</name>
            <comment>Encodes the given text into a list of token ids, ignoring special tokens.
 This method does not throw an exception if the text contains special tokens, but instead
 encodes them as if they were ordinary text.
text: the text to encode
Return type: @return:the list of token ids</comment>
            <returntype>int[]</returntype>
            <parameter>
                <name>text</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SetModelEncoding</name>
            <comment>Set the Encoder for this Instance of the Registry
 You can use this method or SetEncoding(String encodingType)
model: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>model</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>countTokensOrdinary</name>
            <comment>Encodes the given text into a list of token ids and returns the amount of tokens.
 It is more performant than {@link #encodeOrdinary(String)}.
 This method does not throw an exception if the text contains special tokens, but instead
 encodes them as if they were ordinary text.
text: the text to count tokens for
Return type: @return:the amount of tokens</comment>
            <returntype>int</returntype>
            <parameter>
                <name>text</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>decode</name>
            <comment>Decodes the given list of token ids into a text.
tokens: the list of token ids
Return type: @return:the decoded text</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>tokens</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>encode2</name>
            <comment>Encodes the given text into a list of token ids.
 Special tokens are artificial tokens used to unlock capabilities from a model,
 such as fill-in-the-middle. There is no support for parsing special tokens
 in a text, so if the text contains special tokens, this method will throw an
 UnsupportedOperationException
 If you want to encode special tokens as ordinary text, use {@link #encodeOrdinary(String, int)}.
 This method will truncate the list of token ids if the number of tokens exceeds the
 given maxTokens parameter. Note that it will try to keep characters together, that are encoded into
 multiple tokens. For example, if the text contains a character which is encoded into 3 tokens,
 and due to the maxTokens parameter the last token of the character is truncated, the first two
 tokens of the character will also be truncated. Therefore, the actual number of tokens may be
 less than the given maxTokens parameter.
text: the text to encode
maxTokens: the maximum number of tokens to encode
Return type: @return:the EncodingResult containing a list of token ids and whether the tokens were truncated due to the maxTokens parameter</comment>
            <returntype>com.knuddels.jtokkit.api.EncodingResult</returntype>
            <parameter>
                <name>text</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>maxTokens</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SetEncoding</name>
            <comment>Set the Encoder for this Instance of the Registry
 You can use this method or SetModelEncoding(String model)
encodingType: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>encodingType</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment>Returns the name of this encoding. This is the name which is used to identify
 the encoding and must be unique for registration in the {@link EncodingRegistry}.</comment>
        </property>
    </class>
    <version>0.02</version>
    <comment>&lt;link&gt;jtokkit|https://github.com/knuddelsgmbh/jtokkit&lt;/link&gt;</comment>
    <author>DonManfred</author>
    <dependsOn>jtokkit-1.1.0</dependsOn>
</root>
