AppType=JavaFX
Build1=Default,b4j.example
File1=Layout1.bjl
FileGroup1=Default Group
Group=Default Group
Library1=jcore
Library10=javaobject
Library2=jfx
Library3=json
Library4=jb4xencryption
Library5=encryption
Library6=jshell
Library7=jstringutils
Library8=byteconverter
Library9=jmqtt
NumberOfFiles=1
NumberOfLibraries=10
NumberOfModules=0
Version=8
@EndOfDesignText@
#Region Project Attributes 
	#MainFormWidth: 600
	#MainFormHeight: 600 
#End Region

Sub Process_Globals
	Private fx As JFX
	Private MainForm As Form
	Dim client As MqttClient
	Dim mo As MqttConnectOptions
	Private Button_connect As Button
	Private Button_disconnect As Button
	Private ListView1 As ListView
End Sub

Sub AppStart (Form1 As Form, Args() As String)
	MainForm = Form1
	MainForm.RootPane.LoadLayout("Layout1") 'Load the layout file.
	MainForm.Show
	

	Dim cafile As String = File.GetUri (File.DirAssets, "root_ca_auth.cer").SubString(6)
	Dim certfile As String = File.GetUri(File.DirAssets, "sensor_auth.crt").SubString(6)
	Dim keyfile  As String = File.GetUri(File.DirAssets, "sensor_auth.key").SubString(6)

	Dim url As String ="ssl://mybroker.xyz.xy:8883"
	Dim ClientId As String = "clientName"
	Dim user As String = "user"
	Dim password As String = "password"
	
	Dim keyFilePassword As String = Null
	
	
	'Initial cmqtt client
	client.Initialize("client", url, ClientId)
	
	'setup Paho MqttCallbackExtended
	Dim Mjo As JavaObject = client
	Dim event As Object = Mjo.CreateEventFromUI("org.eclipse.paho.client.mqttv3.MqttCallback", "MqttCallback", Null)
	Mjo.GetFieldJO("client").RunMethod("setCallback", Array(event))
	
	'set Paho Options
	mo.Initialize(user,password)
	Dim result As String
	Dim MqttConnectOptions1 As JavaObject = mo
	result = MqttConnectOptions1.RunMethod("setMqttVersion",Array(3))
	result = MqttConnectOptions1.RunMethod("setKeepAliveInterval",Array(60))
	result = MqttConnectOptions1.RunMethod("setConnectionTimeout",Array(60))

	'setup SocketFactory => does not work
	Dim jo As JavaObject = Me
	jo.InitializeNewInstance("b4j.example.main.SslUtil", Array(Null))
	MqttConnectOptions1.RunMethod("setSocketFactory",Array(jo.RunMethod("getSocketFactory", Array As String (cafile, certfile, keyfile, keyFilePassword))))
	ListView1.Items.add(mo)


	
End Sub

Private Sub client_Connected (Success As Boolean)
	
	ListView1.Items.Add("Connected")
	client.Subscribe("#",0)
	
End Sub

Private Sub client_Disconnected
	
	ListView1.Items.Add("Disconnected")
	
End Sub

private Sub MqttCallback_Event (MethodName As String, Args() As Object ) As Object

 
	If MethodName = "messageArrived" Then
		'Log("Message Arrived!")
		handleMessageArrived(Args)
		Return Null
	else If MethodName = "deliveryComplete" Then
		Log("Delivery Complete!")
		Return Null
	else If MethodName = "connectionLost" Then
		Log("Connection lost!")
		Return Null
	End If
	 
End Sub


Sub handleMessageArrived(args() As Object)
	
	Dim topic As String = args(0)
	Dim mA As JavaObject = args(1)
	Dim payload() As Byte = mA.RunMethod("getPayload", Null)

	ListView1.Items.add(topic.Trim)

	If payload.Length > 0 Then
		ListView1.Items.add(BytesToString(payload, 0, payload.Length, "utf8").Trim)
	End If
	
End Sub


Sub Button_Connect_Click
	
	client.Connect2(mo)
	
End Sub
Sub Button_disconnect_Click
	
	client.Close
	
End Sub
'Return true to allow the default exceptions handler to handle the uncaught exception.
Sub Application_Error (Error As Exception, StackTrace As String) As Boolean
	
	Return True
	
End Sub

#If JAVA
import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.FileReader;
import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManagerFactory;
import java.io.FileReader;
import java.security.KeyPair;
import java.security.KeyStore;
import java.security.Security;
import java.security.cert.Certificate;
import java.security.cert.X509Certificate;
import org.bouncycastle.cert.X509CertificateHolder;
import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.openssl.PEMDecryptorProvider;
import org.bouncycastle.openssl.PEMEncryptedKeyPair;
import org.bouncycastle.openssl.PEMKeyPair;
import org.bouncycastle.openssl.PEMParser;
import org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;
import org.bouncycastle.openssl.jcajce.JcePEMDecryptorProviderBuilder;

public class SslUtil
{
    public  SSLSocketFactory getSocketFactory(final String caCrtFile, final String crtFile, final String keyFile,
                                                    final String password) {
        try {

            /**
             * Add BouncyCastle as a Security Provider
             */
            Security.addProvider(new BouncyCastleProvider());

            JcaX509CertificateConverter certificateConverter = new JcaX509CertificateConverter().setProvider("BC");

            /**
             * Load Certificate Authority (CA) certificate
             */
            PEMParser reader = new PEMParser(new FileReader(caCrtFile));
            X509CertificateHolder caCertHolder = (X509CertificateHolder) reader.readObject();
            reader.close();

            X509Certificate caCert = certificateConverter.getCertificate(caCertHolder);

            /**
             * Load client certificate
             */
            reader = new PEMParser(new FileReader(crtFile));
            X509CertificateHolder certHolder = (X509CertificateHolder) reader.readObject();
            reader.close();

            X509Certificate cert = certificateConverter.getCertificate(certHolder);

            /**
             * Load client private key
             */
            reader = new PEMParser(new FileReader(keyFile));
            Object keyObject = reader.readObject();
            reader.close();

            PEMDecryptorProvider provider = new JcePEMDecryptorProviderBuilder().build(password.toCharArray());
            JcaPEMKeyConverter keyConverter = new JcaPEMKeyConverter().setProvider("BC");

            KeyPair key;

            if (keyObject instanceof PEMEncryptedKeyPair) {
                key = keyConverter.getKeyPair(((PEMEncryptedKeyPair) keyObject).decryptKeyPair(provider));
            } else {
                key = keyConverter.getKeyPair((PEMKeyPair) keyObject);
            }

            /**
             * CA certificate is used to authenticate server
             */
            KeyStore caKeyStore = KeyStore.getInstance(KeyStore.getDefaultType());
            caKeyStore.load(null, null);
            caKeyStore.setCertificateEntry("ca-certificate", caCert);

            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(
                    TrustManagerFactory.getDefaultAlgorithm());
            trustManagerFactory.init(caKeyStore);

            /**
             * Client key and certificates are sent to server so it can authenticate the client
             */
            KeyStore clientKeyStore = KeyStore.getInstance(KeyStore.getDefaultType());
            clientKeyStore.load(null, null);
            clientKeyStore.setCertificateEntry("certificate", cert);
            clientKeyStore.setKeyEntry("private-key", key.getPrivate(), password.toCharArray(),
                    new Certificate[]{cert});

            KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(
                    KeyManagerFactory.getDefaultAlgorithm());
            keyManagerFactory.init(clientKeyStore, password.toCharArray());

            /**
             * Create SSL socket factory
             */
            SSLContext context = SSLContext.getInstance("TLSv1.2");
            context.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), null);

            /**
             * Return the newly created socket factory object
             */
            return context.getSocketFactory();

        } catch (Exception e) {
            e.printStackTrace();
        }

        return null;
    }

}
#End If

