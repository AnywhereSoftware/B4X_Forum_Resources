AppType=JavaFX
Build1=Default,b4j.example
File1=1.bjl
File2=colors.txt
File3=ListOfColors.bjl
FileGroup1=Default Group
FileGroup2=Default Group
FileGroup3=Default Group
Group=Default Group
Library1=jcore
Library2=jfx
Library3=xui views
NumberOfFiles=3
NumberOfLibraries=3
NumberOfModules=0
Version=9.3
@EndOfDesignText@
#Region Project Attributes 
	#MainFormWidth: 600
	#MainFormHeight: 600 
#End Region

Sub Process_Globals
	Private MainForm As Form
	Private Dialog As B4XDialog
	Private XUI As XUI
	Private B4XComboBox1 As B4XComboBox
	Private btnDate As SwiftButton
	Private DateTemplate As B4XDateTemplate
	Private LongTextTemplate As B4XLongTextTemplate
	Private ColorTemplate As B4XColorTemplate
	Private Base As B4XView
	Private InputTemplate As B4XInputTemplate
	Private btnTime As SwiftButton
	Private AnimatedCounter1 As AnimatedCounter
	Private ImageView1 As B4XView
	Private SignatureTemplate As B4XSignatureTemplate
	Private B4XFloatTextField1 As B4XFloatTextField
	Private B4XFloatTextField2 As B4XFloatTextField
	Private btnListOfColors As SwiftButton
	Private ColorLabel As B4XView
	Private ColorPanel As B4XView
	Private CustomListView1 As CustomListView 'loaded from ListTemplate
	Private ListOfColorsPanel As B4XView
	Private btnSearch As SwiftButton
	Private SearchTemplate As B4XSearchTemplate
	Private AnotherProgressBar1 As AnotherProgressBar
	Private options As B4XListTemplate
	Private B4XBreadCrumb1 As B4XBreadCrumb
	
	'need for dragging + resizing form and text size
	Public multiplyform As Int = 1
	Dim ox As Double, oy As Double
	Dim alltextsizes(1000) As Int, alltextcount As Int =0 
End Sub

Sub AppStart (Form1 As Form, Args() As String)

	'greek guys will need that
	SetDefaultLocale("el",  "GR")
	DateTime.DateFormat = "dd/MM/yyyy"



	MainForm = Form1
	MainForm.RootPane.LoadLayout("1") 'Load the layout file.
	MainForm.Show

	
	Base = MainForm.RootPane
	Dialog.Initialize (Base)
	Dialog.Title = "XUI Views"
	Dialog.BlurBackground=True
	
	Dim Items As List
	Items.Initialize
	For i = 1 To 10
		Items.Add($"Item #${i}"$)
	Next
	B4XComboBox1.SetItems(Items)
	DateTemplate.Initialize
	
	DateTemplate.MinYear = 2016
	DateTemplate.MaxYear = 2030
	LongTextTemplate.Initialize
	ColorTemplate.Initialize
	InputTemplate.Initialize
	SignatureTemplate.Initialize
	B4XFloatTextField1.Text = "Abcde"
	B4XComboBox1.DelayBeforeChangeEvent = 0
	'set the search items
	SearchTemplate.Initialize
	Dim Items As List
	Items.Initialize
	For Each line As String In File.ReadList(File.DirAssets, "colors.txt")
		Dim s() As String = Regex.Split(":", line)
		Dim Name As String = s(0)
		Items.Add(Name)
	Next
	SearchTemplate.SetItems(Items)
	B4XFloatTextField1.NextField = B4XFloatTextField2
	options.Initialize
	options.Options = Array("Cat", "Dog", "Fish", "Crocodile")
	options.AllowMultiSelection = True
	options.MultiSelectionMinimum = 1
	options.CustomListView1.DefaultTextColor = XUI.Color_Red
	
	
	'need for scrolling and zooming/scaling controls
	Dim jo As JavaObject = MainForm.RootPane
	Dim e As Object = jo.CreateEventFromUI("javafx.event.EventHandler", "scroll", Null)
	jo.RunMethod("setOnScroll", Array(e))
End Sub


Sub MainForm_Resize (Width As Double, Height As Double)
	If Dialog.Visible Then Dialog.Resize(Width, Height)
	SizeControls(MainForm, 600, 600, Width, Height)
End Sub

Sub B4XComboBox1_SelectedIndexChanged (Index As Int)
	Dialog.Show($"Selected item: ${B4XComboBox1.GetItem(Index)}"$, "OK", "", "")
End Sub

Sub RoundSlider1_ValueChanged (Value As Int)
	Log("RoundSlider value: " & Value)
End Sub

Sub btnDate_Click
	'only CANCEL needed
	Wait For (Dialog.ShowTemplate(DateTemplate, "", "", "CANCEL")) Complete (Result As Int)
	If Result = XUI.DialogResponse_Positive Then
		btnDate.xLBL.Text = DateTime.Date(DateTemplate.Date)
	End If
End Sub

Sub btnColors_Click
	'example of changing the buttons order and position
	Dim rs As ResumableSub = Dialog.ShowTemplate(ColorTemplate, "OK", "", "CANCEL")
	Dim ok As B4XView = Dialog.GetButton(XUI.DialogResponse_Positive)
	Dim cancel As B4XView = Dialog.GetButton(XUI.DialogResponse_Cancel)
	cancel.SetLayoutAnimated(0, 2dip, cancel.Top, cancel.Parent.Width / 2 - 4dip, cancel.Height)
	ok.SetLayoutAnimated(0, ok.Parent.Width / 2 + 2dip, ok.Top, ok.Parent.Width / 2 - 4dip, ok.Height)
	Wait For (rs) Complete (Result As Int)
	If Result = XUI.DialogResponse_Positive Then
		Base.Color = ColorTemplate.SelectedColor
	End If
End Sub

Sub btnTerms_Click
	LongTextTemplate.Text = $"Lorem ipsum dolor sit amet,
consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
Enim blandit volutpat maecenas volutpat blandit aliquam. In egestas erat imperdiet sed euismod nisi porta.
Arcu ac tortor dignissim convallis aenean et tortor. Elit pellentesque habitant morbi tristique senectus et netus et malesuada.
Ut tristique et egestas quis ipsum suspendisse ultrices. Mauris a diam maecenas sed enim ut sem viverra.
Mauris rhoncus aenean vel elit scelerisque. Volutpat consequat mauris nunc congue nisi vitae suscipit.
Tempor orci eu lobortis elementum nibh tellus molestie. Eleifend quam adipiscing vitae proin sagittis nisl rhoncus.
Faucibus turpis in eu mi bibendum neque egestas congue quisque. Vel eros donec ac odio tempor orci dapibus ultrices in.
Velit egestas dui id ornare arcu. Eget nunc lobortis mattis aliquam faucibus purus in massa. Arcu non sodales neque sodales.
Elementum nisi quis eleifend quam. Elementum nisi quis eleifend quam."$
	Dialog.ShowTemplate(LongTextTemplate, "OK", "", "")
End Sub

Sub btnOptions_Click
	'wrap it with a timed template
	Dim TimedTemplate As B4XTimedTemplate
	TimedTemplate.Initialize(options)
	TimedTemplate.TimeoutMilliseconds = 10000 'close after 10 seconds (this is the default value)
	Wait For (Dialog.ShowTemplate(TimedTemplate, "OK", "", "CANCEL")) Complete (Result As Int)
	If Result = XUI.DialogResponse_Positive Then
		Dialog.Show($"You selected: ${options.SelectedItems}"$, "OK", "", "")
	End If
End Sub

Sub btnTime_Click
	InputTemplate.lblTitle.Text = "Enter time (HH:MM)"
	InputTemplate.RegexPattern = "\d\d:\d\d" '<---optional. Remove if not needed
	Wait For (Dialog.ShowTemplate(InputTemplate, "OK", "", "CANCEL")) Complete (Result As Int)
	If Result = XUI.DialogResponse_Positive Then
		btnTime.xLBL.Text = InputTemplate.Text
	End If
End Sub

Sub btnCounter_Click
	AnimatedCounter1.Value = Rnd(0, 99999)
	AnotherProgressBar1.Value = Rnd(0, 101)

End Sub

Sub btnSignature_Click
	Dialog.ButtonsFont = XUI.CreateFontAwesome(20)
	Dim rs As ResumableSub = Dialog.ShowTemplate(SignatureTemplate, Chr(0xF00C), "", Chr(0xF00D))
	Dialog.GetButton(XUI.DialogResponse_Positive).TextColor = XUI.Color_Green
	Dialog.GetButton(XUI.DialogResponse_Cancel).TextColor = XUI.Color_Red
	Dialog.ButtonsFont = XUI.CreateDefaultBoldFont(15) 'return it to the default font. It will no longer affect the current dialog
	Wait For (rs) Complete (Result As Int)
	If Result = XUI.DialogResponse_Positive Then
		ImageView1.SetBitmap(SignatureTemplate.Bitmap.Resize(ImageView1.Width, ImageView1.Height, True))
		Dim out As OutputStream = File.OpenOutput(File.DirApp, "signature.png", False) 'don't use File.DirApp in real applications
		SignatureTemplate.Bitmap.WriteToStream(out, 100, "PNG")
		out.Close
	End If
End Sub

Sub B4XFloatTextField1_EnterPressed
	Log("enter pressed")
End Sub

Sub B4XFloatTextField1_TextChanged (Old As String, New As String)
	MainForm.Title = New
End Sub

Sub btnSearch_Click
	Wait For (Dialog.ShowTemplate(SearchTemplate, "", "", "CANCEL")) Complete (Result As Int)
	If Result = XUI.DialogResponse_Positive Then
		btnSearch.xLBL.Text = SearchTemplate.SelectedItem
	End If
End Sub

#Region List Of Colors custom Dialog
Sub CreateListOfColorsLayout
	ListOfColorsPanel = XUI.CreatePanel("")
	ListOfColorsPanel.SetLayoutAnimated(0, 0, 0, 300dip, 300dip)
	ListOfColorsPanel.LoadLayout("ListTemplate") 'ListTemplate is part of XUI Views library.
	CustomListView1.sv.SetColorAndBorder(XUI.Color_Transparent, 0, 0, 0)
	For Each line As String In File.ReadList(File.DirAssets, "colors.txt")
		Dim s() As String = Regex.Split(":", line)
		Dim Name As String = s(0)
		Dim Color As Int = Bit.Or(0xff000000, Bit.ParseInt(s(1), 16))
		Dim item As B4XView = XUI.CreatePanel("")
		item.SetLayoutAnimated(0, 0, 0, ListOfColorsPanel.Width, 50dip)
		CustomListView1.Add(item, Array(Name,Color))
	Next
End Sub

'lazy creation of the items.
Sub CustomListView1_VisibleRangeChanged (FirstIndex As Int, LastIndex As Int)
	For i = Max(0, FirstIndex - 5) To Min(CustomListView1.Size - 1, LastIndex + 5)
		Dim p As B4XView = CustomListView1.GetPanel(i)
		If p.NumberOfViews = 0 Then
			p.LoadLayout("ListOfColors")
			Dim NameAndValue() As Object = CustomListView1.GetValue(i)
			ColorLabel.Text = NameAndValue(0)
			ColorPanel.Color = NameAndValue(1)
		End If
	Next
End Sub


Sub btnListOfColors_Click
	If ListOfColorsPanel.IsInitialized = False Then CreateListOfColorsLayout
	Wait For (Dialog.ShowCustom(ListOfColorsPanel, "", "", "CANCEL")) Complete (Result As Int)
	If Result = XUI.DialogResponse_Positive Then
		Base.Color = ListOfColorsPanel.Tag
	End If
End Sub

Sub CustomListView1_ItemClick (Index As Int, Value As Object)
	Dialog.Close(XUI.DialogResponse_Positive)
	Dim NameAndValue() As Object = Value
	ListOfColorsPanel.Tag = NameAndValue(1)
End Sub
#End Region


Sub B4XSwitch_ValueChanged (Value As Boolean)
	'Example of finding all B4XSwitch instances based on the base view tag property. The designer tag goes to B4XSwitch.Tag.
	For Each v As B4XView In Base.GetAllViewsRecursive
		If v.Tag Is B4XSwitch Then
			Dim s As B4XSwitch = v.Tag
			s.Value = Value
		End If
	Next
End Sub

Sub B4XBreadCrumb1_CrumbClick (Crumbs As List)
	If Crumbs.Size = 1 Then
		For i = 1 To 3
			Crumbs.Add("Item " & i)
		Next
	End If
	B4XBreadCrumb1.Items = Crumbs
End Sub


'greek guys for locale
Private Sub SetDefaultLocale(Language As String, Country As String)
	Dim loc As JavaObject
	loc.InitializeNewInstance("java.util.Locale", Array(Language, Country))
	Dim jo As JavaObject
	jo.InitializeStatic("java.util.Locale").RunMethod("setDefault", Array(loc))
End Sub



'For sizing controls and nodes... panes/b4xviews
Sub SizeControls(t As Form, width1 As Double, height1 As Double, width2 As Double, height2 As Double)
	alltextcount=0
	Dim praxi1 As String, praxi2 As String
	Dim mp1 As Double, mp2 As Double
	Dim ss As Int
	If width2 > width1 Then praxi1="*" Else praxi1=":"
	If height2 > height1 Then praxi2="*" Else praxi2=":"
	If praxi1="*" Then
		mp1=width2/width1
		Else
		mp1=width1/width2
	End If
	If praxi2="*" Then
		mp2=height2/height1
	Else
		mp2=height1/height2
	End If

		For a = 0 To t.RootPane.NumberOfNodes -1
			Dim N As Node = t.RootPane.GetNode(a)

			SizeNode(N,praxi1,praxi2,mp1,mp2)

		Next
End Sub


'For sizing controls and nodes... panes/b4xviews
Private Sub SizeNode(N As Node, praxi1 As String, praxi2 As String, mp1 As Double, mp2 As Double)
	
	Dim SS As Double
	
	If praxi1="*" Then n.Left=n.left * mp1 Else n.Left=n.left / mp1
	If praxi2="*" Then n.Top=n.Top*mp2 Else n.Top=n.Top/mp2
	If praxi1="*" Then n.PrefWidth=n.PrefWidth*mp1 Else n.PrefWidth=n.PrefWidth/mp1
	If praxi2="*" Then n.PrefHeight=n.PrefHeight*mp2 Else n.PrefHeight=n.PrefHeight/mp2
	
	
	If n Is Pane  And n.Tag = "" Then
			For a = 0 To N.As(Pane).NumberOfNodes -1
				Dim NN As Node = N.As(Pane).GetNode(a)
			SizeNode(NN,praxi1,praxi2,mp1,mp2)
			SS=NN.As(B4XView).TextSize
			If SS>0 Then
				alltextcount=alltextcount+1
				If alltextsizes(alltextcount)=0 Then alltextsizes(alltextcount)=SS

				If praxi2="*" Then
					SS=alltextsizes(alltextcount) + (multiplyform/30)
					If SS<7 Then SS=7
					If SS>32 Then SS=32
					NN.As(B4XView).TextSize=SS
				Else
					SS=alltextsizes(alltextcount) + (multiplyform/30)
					If SS<7 Then SS=7
					If SS>32 Then SS=32
					NN.As(B4XView).TextSize=SS
				End If
			End If

				NN.As(B4XView).TextSize=SS
			Next
	Else
		If N Is Pane Then
			For Each N1 As B4XView In N.As(B4XView).GetAllViewsRecursive
				
				SS=N1.TextSize
				If SS>0 Then
					alltextcount=alltextcount+1
					If alltextsizes(alltextcount)=0 Then alltextsizes(alltextcount)=SS

				If praxi2="*" Then
						SS=alltextsizes(alltextcount) + (multiplyform/30)
					If SS<7 Then SS=7
					If SS>32 Then SS=32
					N1.TextSize=SS
				Else
						SS=alltextsizes(alltextcount) + (multiplyform/30)
					If SS<7 Then SS=7
					If SS>32 Then SS=32
					N1.TextSize=SS
				End If
				End If

			Next
		End If
	End If
End Sub


'use scroll to scale form
Sub Scroll_Event (MethodName As String, Args() As Object) As Object
	Dim scrollevent As JavaObject = Args(0)
	Dim how As Int = scrollevent.RunMethod("getDeltaY", Null)

	If how > 0 Then
		If multiplyform<300 Then 
		multiplyform=multiplyform+10
		MainForm.WindowLeft=MainForm.WindowLeft-10
		MainForm.Windowtop=MainForm.Windowtop-10
		MainForm.WindowWidth=MainForm.Windowwidth+20
		MainForm.Windowheight=MainForm.Windowheight+20
		End If
		Else
		If multiplyform>0 Then 
		multiplyform=multiplyform-10
		MainForm.WindowLeft=MainForm.WindowLeft+10
		MainForm.Windowtop=MainForm.Windowtop+10
		MainForm.WindowWidth=MainForm.Windowwidth-20
		MainForm.Windowheight=MainForm.Windowheight-20
		End If
	End If

	Return Null
End Sub

'drag form
Private Sub MainForm_MouseDragged (EventData As MouseEvent)
	Dim jo As JavaObject = EventData
	MainForm.WindowLeft = jo.RunMethod("getScreenX", Null) - ox
	MainForm.WindowTop = jo.RunMethod("getScreenY", Null) - oy
End Sub

Private Sub MainForm_MousePressed (EventData As MouseEvent)
	ox = EventData.X
	oy = EventData.Y
End Sub