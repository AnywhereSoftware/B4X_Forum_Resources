<?xml version="1.0" encoding="UTF-8"?>
<root>
    <doclet-version-NOT-library-version>1.07</doclet-version-NOT-library-version>
    <class>
        <name>uk.co.martinpearman.b4aextras.threadextras.AsyncTask</name>
        <shortname>AsyncTask</shortname>
        <objectwrapper>uk.co.martinpearman.b4aextras.threadextras.AsyncTask.AsyncTaskImpl</objectwrapper>
        <owner>process</owner>
        <event>Cancelled(Result As Object)</event>
        <event>DoInBackground(Params() As Object) As Object</event>
        <event>PostExecute(Result As Object)</event>
        <event>PreExecute</event>
        <event>ProgressUpdate(Progress() As Object)</event>
        <method>
            <name>Execute</name>
            <comment>Executes the task with the specified parameters.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Params</name>
                <type>java.lang.Object[]</type>
            </parameter>
        </method>
        <method>
            <name>Cancel</name>
            <comment>Attempts to cancel execution of this task.
 This attempt will fail if the task has already completed, already been cancelled, or could not be cancelled for some other reason.
 If successful, and this task has not started when cancel is called, this task should never run.
 If the task has already started, then the MayInterruptIfRunning parameter determines whether the thread executing this task should be interrupted in an attempt to stop the task.

 Calling this method will result in the 'Cancelled' event being raised once your 'DoInBackground' callback has completed.
 Your 'DoInBackground' callback can call the IsCancelled method to determine if the task has been cancelled whilst in progress.
 Calling this method ensures that the 'PostExecute' event is never raised.

 Cancel returns True if the task was cancelled, otherwise False.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>MayInterruptIfRunning</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>IsCancelled</name>
            <comment>Returns True if the task was cancelled before it completed normally.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetThread</name>
            <comment>Provides access to the java Thread.</comment>
            <returntype>uk.co.martinpearman.b4aextras.threadextras.AsyncTask.Thread</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initialize the AsyncTask.
 A MissingCallbackException will be raised if no callback sub is found for the 'DoInBackground' event.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>PublishProgress</name>
            <comment>This method can be invoked from the 'DoInBackground' callback to publish updates on the UI thread while the background computation is still running.
 The 'ProgressUpdate' callback will be called on the UI thread and passed the Progress array.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Progress</name>
                <type>java.lang.Object[]</type>
            </parameter>
        </method>
        <method>
            <name>Get</name>
            <comment>Waits if necessary for the computation to complete, and then retrieves its result.</comment>
            <returntype>java.lang.Object</returntype>
        </method>
        <method>
            <name>SetSynchronizedObject</name>
            <comment>Sets an Object to synchronize the background thread to.
 Default value is Null.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>SynchronizedObject</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>Get2</name>
            <comment>Waits if necessary for at most the given time for the computation to complete, and then retrieves its result.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>TimeoutMillis</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>GetStatus</name>
            <comment>Returns the current status of this task.</comment>
            <returntype EnumType="true">android.os.AsyncTask.Status</returntype>
        </method>
        <field>
            <name>STATUS_PENDING</name>
            <comment>Indicates that the task has not been executed yet.</comment>
            <returntype EnumType="true">android.os.AsyncTask.Status</returntype>
        </field>
        <field>
            <name>STATUS_FINISHED</name>
            <comment>Indicates that event 'PostExecute' has been raised and has completed execution.</comment>
            <returntype EnumType="true">android.os.AsyncTask.Status</returntype>
        </field>
        <field>
            <name>STATUS_RUNNING</name>
            <comment>Indicates that the task is running.</comment>
            <returntype EnumType="true">android.os.AsyncTask.Status</returntype>
        </field>
    </class>
    <class>
        <name>uk.co.martinpearman.b4aextras.threadextras.AsyncTask.Thread</name>
        <shortname>Thread</shortname>
        <owner>process</owner>
        <method>
            <name>Sleep</name>
            <comment>Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds, subject to the precision and accuracy of system timers and schedulers.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Millis</name>
                <type>long</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>uk.co.martinpearman.b4aextras.threadextras.ProcessWrapper</name>
        <shortname>Process</shortname>
        <owner>process</owner>
        <method>
            <name>SetThreadPriority</name>
            <comment>Set the priority of the calling thread.
 Priority - A Linux priority level, from -20 for highest scheduling priority to 19 for lowest scheduling priority.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Priority</name>
                <type>int</type>
            </parameter>
        </method>
        <field>
            <name>THREAD_PRIORITY_LESS_FAVORABLE</name>
            <comment>Minimum increment to make a priority less favorable.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>THREAD_PRIORITY_FOREGROUND</name>
            <comment>Standard priority of threads that are currently running a user interface that the user is interacting with.
 Applications can not normally change to this priority; the system will automatically
 adjust your application threads as the user moves through the UI.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>THREAD_PRIORITY_URGENT_AUDIO</name>
            <comment>Standard priority of the most important audio threads. Applications can not normally change to this priority.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>THREAD_PRIORITY_DEFAULT</name>
            <comment>Standard priority of application threads.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>THREAD_PRIORITY_DISPLAY</name>
            <comment>Standard priority of system display threads, involved in updating the user interface.
 Applications can not normally change to this priority.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>THREAD_PRIORITY_MORE_FAVORABLE</name>
            <comment>Minimum increment to make a priority more favorable.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>THREAD_PRIORITY_AUDIO</name>
            <comment>Standard priority of audio threads. Applications can not normally change to this priority.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>THREAD_PRIORITY_LOWEST</name>
            <comment>Lowest available thread priority. Only for those who really, really don't want to run if anything else is happening.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>THREAD_PRIORITY_URGENT_DISPLAY</name>
            <comment>Standard priority of the most important display threads, for compositing the screen and retrieving input events.
 Applications can not normally change to this priority.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>THREAD_PRIORITY_BACKGROUND</name>
            <comment>Standard priority background threads. This gives your thread a slightly lower than normal priority,
 so that it will have less chance of impacting the responsiveness of the user interface.</comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>uk.co.martinpearman.b4aextras.threadextras.Runnable</name>
        <shortname>Runnable</shortname>
        <objectwrapper>uk.co.martinpearman.b4aextras.threadextras.Runnable.RunnableImpl</objectwrapper>
        <owner>process</owner>
        <event>Complete(Result As Object)</event>
        <method>
            <name>IsInterrupted</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Start</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>ClassInstance</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>SubName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Args</name>
                <type>java.lang.Object[]</type>
            </parameter>
        </method>
        <method>
            <name>Interrupt</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>StopFlag</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>StopFlag</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
    </class>
    <version>1.0</version>
    <author>Martin Pearman</author>
</root>
