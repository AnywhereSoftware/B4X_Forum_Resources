<?xml version="1.0" encoding="UTF-8"?>
<root>
    <doclet-version-NOT-library-version>1.07</doclet-version-NOT-library-version>
    <class>
        <name>igolub.gpsgnss.b4a.NETPOS</name>
        <shortname>NETPOS</shortname>
        <owner CheckForReinitialize="true">process</owner>
        <event>LocationChanged (Location1 As ALocation)</event>
        <event>LocationChanged2 (Locations() As ALocation) 'Works on SDK31 and up</event>
        <event>UserEnabled (Enabled As Boolean)</event>
        <event>Started</event>
        <event>Stopped</event>
        <event>CurrentLocationResult (Location1 As ALocation)</event>
        <permission>android.permission.ACCESS_COARSE_LOCATION</permission>
        <permission>android.permission.ACCESS_FINE_LOCATION</permission>
        <method>
            <name RaisesSynchronousEvents="true">Start</name>
            <comment>Starts listening for events.
MinimumTime: the shortest period (measured in milliseconds) between events. Pass 0 for highest frequency.
MinimumDistance: the shortest change in distance (measured in meters) for which to raise events. Pass 0 for highest frequency.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>MinimumTime</name>
                <type>long</type>
            </parameter>
            <parameter>
                <name>MinimumDistance</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name RaisesSynchronousEvents="true">Stop</name>
            <comment>Stops listening events. You will usually want to call Stop inside Sub Activity_Pause.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes NETPOS (NetworkPositioning) instance.
EventName: the name of events to be fired.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetCurrentLocation</name>
            <comment>Asynchronously returns a single current location fix.
Event "CurrentLocationResult (Location1 As Location)" will be fired in the current thread.
You can use "Wait For [EventName]_CurrentLocationResult (Location1 As Location)" for synchronized result.
This method also works without starting the event listener (GPS.Start).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <property>
            <name>LocationSettingsIntent</name>
            <returntype>anywheresoftware.b4a.objects.IntentWrapper</returntype>
            <comment>Returns the intent that is used to show the global locations settings.</comment>
        </property>
        <property>
            <name>IsStarted</name>
            <returntype>boolean</returntype>
            <comment>Returns True if events are listening.</comment>
        </property>
        <property>
            <name>LastKnownLocation</name>
            <returntype>igolub.alocation.b4a.ALocationWrapper</returntype>
            <comment>Gets the last known location from the given provider, or null if there is no last known location. The returned location may be quite old in some circumstances, so the age of the location should always be checked.
This will never activate sensors to compute a new location, and will only ever return a cached location.</comment>
        </property>
        <property>
            <name>IsLocationEnabledInSettings</name>
            <returntype>boolean</returntype>
            <comment>Check if Location is enabled in device's settings.</comment>
        </property>
    </class>
    <class>
        <name>igolub.gpsgnss.b4a.GPSGNSS</name>
        <shortname>GPSGNSS</shortname>
        <owner CheckForReinitialize="true">process</owner>
        <event>LocationChanged (Location1 As ALocation)</event>
        <event>LocationChanged2 (Locations() As ALocation) 'Works on SDK31 and up</event>
        <event>UserEnabled (Enabled As Boolean)</event>
        <event>GpsStatus (Satellites As List)</event>
        <event>NMEA (TimeStamp As Long, Sentence As String)</event>
        <event>Started</event>
        <event>Stopped</event>
        <event>CurrentLocationResult (Location1 As ALocation)</event>
        <permission>android.permission.ACCESS_COARSE_LOCATION</permission>
        <permission>android.permission.ACCESS_FINE_LOCATION</permission>
        <method>
            <name RaisesSynchronousEvents="true">Start</name>
            <comment>Starts listening for events.
MinimumTime: the shortest period (measured in milliseconds) between events. Pass 0 for highest frequency.
MinimumDistance: the shortest change in distance (measured in meters) for which to raise events. Pass 0 for highest frequency.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>MinimumTime</name>
                <type>long</type>
            </parameter>
            <parameter>
                <name>MinimumDistance</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name RaisesSynchronousEvents="true">Stop</name>
            <comment>Stops listening events. You will usually want to call Stop inside Sub Activity_Pause.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes GPSGNSS instance.
EventName: the name of events to be fired.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetCurrentLocation</name>
            <comment>Asynchronously returns a single current location fix.
Event "CurrentLocationResult (Location1 As Location)" will be fired in the current thread.
You can use "Wait For [EventName]_CurrentLocationResult (Location1 As Location)" for synchronized result.
This method also works without starting the event listener (GPS.Start).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <property>
            <name>LocationSettingsIntent</name>
            <returntype>anywheresoftware.b4a.objects.IntentWrapper</returntype>
            <comment>Returns the intent that is used to show the global locations settings.</comment>
        </property>
        <property>
            <name>IsStarted</name>
            <returntype>boolean</returntype>
            <comment>Returns True if events are listening.</comment>
        </property>
        <property>
            <name>LastKnownLocation</name>
            <returntype>igolub.alocation.b4a.ALocationWrapper</returntype>
            <comment>Gets the last known location from the given provider, or null if there is no last known location. The returned location may be quite old in some circumstances, so the age of the location should always be checked.
This will never activate sensors to compute a new location, and will only ever return a cached location.</comment>
        </property>
        <property>
            <name>IsLocationEnabledInSettings</name>
            <returntype>boolean</returntype>
            <comment>Check if Location is enabled in device's settings.</comment>
        </property>
    </class>
    <class>
        <name>igolub.gpsgnss.b4a.android.location.GPSSatelliteAbstract</name>
        <shortname>GPSSatellite</shortname>
        <owner>process</owner>
        <property>
            <name>HasEphemeris</name>
            <returntype>boolean</returntype>
            <comment>Returns true if the GPS or GNSS engine has ephemeris data for the satellite.</comment>
        </property>
        <property>
            <name>Elevation</name>
            <returntype>float</returntype>
            <comment>Returns the elevation of the satellite in degrees. The elevation can vary between 0 and 90.</comment>
        </property>
        <property>
            <name>UsedInFix</name>
            <returntype>boolean</returntype>
            <comment>Returns true if the satellite was used by the GPS or GNSS engine when calculating the most recent GPS or GNSS fix.</comment>
        </property>
        <property>
            <name>Azimuth</name>
            <returntype>float</returntype>
            <comment>Returns the azimuth of the satellite in degrees. The azimuth can vary between 0 and 360.</comment>
        </property>
        <property>
            <name>Snr</name>
            <returntype>float</returntype>
            <comment>Returns the signal to noise ratio for the satellite.</comment>
        </property>
        <property>
            <name>HasAlmanac</name>
            <returntype>boolean</returntype>
            <comment>Returns true if the GPS or GNSS engine has almanac data for the satellite.</comment>
        </property>
        <property>
            <name>Prn</name>
            <returntype>int</returntype>
            <comment>Returns the PRN (pseudo-random number) for the satellite.</comment>
        </property>
    </class>
    <version>1.0</version>
    <author>Ivica Golubovic</author>
    <dependsOn>ALocation</dependsOn>
</root>
