<?xml version="1.0" encoding="UTF-8"?>
<root>
    <doclet-version-NOT-library-version>1.07</doclet-version-NOT-library-version>
    <class>
        <name>db2000.B4A.eXtrafunctions.fCONVERSION</name>
        <shortname>fCONVERSION</shortname>
        <owner>process</owner>
        <method>
            <name>Asc</name>
            <comment>returns a numeric code (ASCII) equivalent to the character specified
xCharacter: the character</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xCharacter</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>BinaryToInteger</name>
            <comment>converts an binary string to a integer
xBinary: the binary string to be converted</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xBinary</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>BinaryToHex</name>
            <comment>converts an binary string to a hex string
xBinary: the binary string to be converted</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xBinary</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Chr</name>
            <comment>returns a character equivalent to the numeric code specified (ASCII)
xNumber: the numeric code</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xNumber</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>HexToBinary</name>
            <comment>converts an hex string to a binary string
xHexValue: the hex string to be converted</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xHexValue</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>CLng</name>
            <comment>returns a value converted to a long
xValue: the value to be converted</comment>
            <returntype>long</returntype>
            <parameter>
                <name>xValue</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>CDbl</name>
            <comment>returns a value converted to a double
xValue: the value to be converted</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xValue</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>IntegerToHex</name>
            <comment>converts an integer value to a hex string
xValue: the number to be converted</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xValue</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>BinaryStringADJ</name>
            <comment>returns a binary string adjustment (normalized format)
xBinary: the binary string to be adjusted</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xBinary</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>CInt</name>
            <comment>returns a value converted to a integer
xValue: the value to be converted</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xValue</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>DegreesToRadians</name>
            <comment>returns the value in radians from degrees</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xDegrees</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>CBool</name>
            <comment>returns an expression converted to a boolean
xExpression: the expression to be converted</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>xExpression</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>CChar</name>
            <comment>returns an expression converted to a char
xExpression: the expression to be converted</comment>
            <returntype>char</returntype>
            <parameter>
                <name>xExpression</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>CDate</name>
            <comment>returns an expression converted to a date in the format determined
xDate: the expression that contains the date
xDateFormat: the date format (if Null or = "" the default is "dd/MM/yyyy")</comment>
            <returntype>java.util.Date</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>xDateFormat</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>LongToHex</name>
            <comment>converts an long value to a hex string
xValue: the number to be converted</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xValue</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>HexToLong</name>
            <comment>converts an hex string to a long value
xHexValue: the hex string to be converted</comment>
            <returntype>java.lang.Long</returntype>
            <parameter>
                <name>xHexValue</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>HexToInteger</name>
            <comment>converts an hex string to a integer value
xHexValue: the hex string to be converted</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xHexValue</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>CStr</name>
            <comment>returns a value converted to a string
xValue: the value to be converted</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xValue</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>CByte</name>
            <comment>returns an expression converted to a byte
xExpression: the expression to be converted</comment>
            <returntype>byte</returntype>
            <parameter>
                <name>xExpression</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>BinaryToLong</name>
            <comment>converts an binary string to a long
xBinary: the binary string to be converted</comment>
            <returntype>java.lang.Long</returntype>
            <parameter>
                <name>xBinary</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Val</name>
            <comment>returns a numeric value
xExpression: a numeric expression</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>xExpression</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>RadiansToDegrees</name>
            <comment>returns the value in degrees from radians
xRadians: the radians to be converted</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xRadians</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>Int</name>
            <comment>returns an expression converted to a integer
xExpression: the expression to be converted</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xExpression</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>db2000.B4A.eXtrafunctions.fDATE</name>
        <shortname>fDATE</shortname>
        <owner>process</owner>
        <method>
            <name>SkipDateIfHolidaysOrWeekend</name>
            <comment>returns the first date after the holidays and/or weekend</comment>
            <returntype>java.util.Date</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
            <parameter>
                <name>xForward</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>WeekdayName</name>
            <comment>returns the day name of the weekday</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
            <parameter>
                <name>xShortname</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>PreviousWeekdayName</name>
            <comment>returns the day name of the previous weekday</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
            <parameter>
                <name>xShortname</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>NthWeekday</name>
            <comment>returns the date subsequent to the weekday setted for the number of recurrences specified
xDate: the start date
xNth: the number of recurrences
xWeekday: the weekday (1 = sunday, 2 = monday, ..., 7 = saturday)
xMode: [false] = starts from the day specified in the date, [true] = starts from the first day of the month shown in the date</comment>
            <returntype>java.util.Date</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
            <parameter>
                <name>xNth</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>xWeekday</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>xMode</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>FindDateNextWeekday</name>
            <comment>returns the date found of the next weekday
xWeekday: the day of week (1 = sunday, 2 = monday, ..., 7 = saturday)
xDate: the date from which to search</comment>
            <returntype>java.util.Date</returntype>
            <parameter>
                <name>xWeekday</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
        </method>
        <method>
            <name>PreviousDay</name>
            <comment>returns the previous day</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
        </method>
        <method>
            <name>NextMonthName</name>
            <comment>returns the next month name</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
            <parameter>
                <name>xShortname</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>SkipDateIfWeekend</name>
            <comment>returns the first date after the weekend</comment>
            <returntype>java.util.Date</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
            <parameter>
                <name>xForward</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>Month</name>
            <comment>returns the month of the date</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
        </method>
        <method>
            <name>NextMonth</name>
            <comment>returns the next month</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
        </method>
        <method>
            <name>CountHolidaysFromDates</name>
            <comment>returns the number of holidays between two dates
xStartDate: the start date
xEndDate: the end date</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xStartDate</name>
                <type>java.util.Date</type>
            </parameter>
            <parameter>
                <name>xEndDate</name>
                <type>java.util.Date</type>
            </parameter>
        </method>
        <method>
            <name>PreviousWorkdayName</name>
            <comment>returns the name of the previous workday
xDate: the start date
xMode: = 0 skip holidays, = 1 skip weekends, = 2 skip holidays and weekends</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
            <parameter>
                <name>xMode</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Shortname</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>GetDateFormat</name>
            <comment>returns the date format in use (default is "dd/MM/yyyy")</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>DateFromYMD</name>
            <comment>returns the date corresponding to the settings of the year, month and day</comment>
            <returntype>java.util.Date</returntype>
            <parameter>
                <name>year</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>month</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>day</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>FirstDateOfQuarter</name>
            <comment>returns the date corresponding to the first day of a quarter</comment>
            <returntype>java.util.Date</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
        </method>
        <method>
            <name>FirstDateOfWeek</name>
            <comment>returns the date of the first day of the week</comment>
            <returntype>java.util.Date</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
        </method>
        <method>
            <name>PreviousMonth</name>
            <comment>returns the previous month</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
        </method>
        <method>
            <name>IsWeekend</name>
            <comment>returns [true] if the date is a weekend, otherwise it returns [false]</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
        </method>
        <method>
            <name>NextAnniversary</name>
            <comment>returns the date of the next anniversary</comment>
            <returntype>java.util.Date</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
        </method>
        <method>
            <name>LastWorkdayNameOfMonth</name>
            <comment>returns the name of the last workday of the month
xDate: the start date
xMode: = 0 skip holidays, = 1 skip weekends, = 2 skip holidays and weekends</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
            <parameter>
                <name>xMode</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Shortname</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>NextYear</name>
            <comment>returns the next year</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
        </method>
        <method>
            <name>IsDatestring</name>
            <comment>returns [true] if the datestring is valid, otherwise [false]
xDateString: the datestring to be checked</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>FirstWorkdayNameOfMonth</name>
            <comment>returns the name of the first workday of the month
xDate: the start date
xMode: = 0 skip holidays, = 1 skip weekends, = 2 skip holidays and weekends</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
            <parameter>
                <name>xMode</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Shortname</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>DateDiff</name>
            <comment>returns a value corresponding to the number of time intervals between two dates
xDate1: the date 1
xDate2: the date 2
xInterval: "y" = years, "m" = months, "d" days, "h" = hours, "n" = minutes, "s" = seconds, "!" = milliseconds
xAbsoluteValue: 'true' = absolute value, 'false' = none</comment>
            <returntype>long</returntype>
            <parameter>
                <name>xDate1</name>
                <type>java.util.Date</type>
            </parameter>
            <parameter>
                <name>xDate2</name>
                <type>java.util.Date</type>
            </parameter>
            <parameter>
                <name>xInterval</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xAbsoluteValue</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>FirstWorkdayOfMonth</name>
            <comment>returns the date of the first workday of the month
xDate: the start date
xMode: = 0 skip holidays, = 1 skip weekends, = 2 skip holidays and weekends</comment>
            <returntype>java.util.Date</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
            <parameter>
                <name>xMode</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>FirstDateOfCurrentWeek</name>
            <comment>returns the date of the first day of the current week</comment>
            <returntype>java.util.Date</returntype>
        </method>
        <method>
            <name>InsertNewHolidayInMemory</name>
            <comment>inserts a new holiday in memory (item format = "MMDD")
 WARNING: not historicizes in external file
 returns [true] if the insert was successful, otherwise [false]</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>xMonth</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>xDay</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Age</name>
            <comment>returns the age (years) from the birthdate</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xBirthDate</name>
                <type>java.util.Date</type>
            </parameter>
        </method>
        <method>
            <name>SkipDateIfHolidays</name>
            <comment>returns the first date after the holidays</comment>
            <returntype>java.util.Date</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
            <parameter>
                <name>xForward</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>NextWorkdayName</name>
            <comment>returns the name of the next workday
xDate: the start date
xMode: = 0 skip holidays, = 1 skip weekends, = 2 skip holidays and weekends</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
            <parameter>
                <name>xMode</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Shortname</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>GetHolidays</name>
            <comment>returns an string array containing all holidays allocated in memory (item format = "MMDD")</comment>
            <returntype>java.lang.String[]</returntype>
        </method>
        <method>
            <name>LastWorkdayOfMonth</name>
            <comment>returns the date of the last workday of the month
xDate: the start date
xMode: = 0 skip holidays, = 1 skip weekends, = 2 skip holidays and weekends</comment>
            <returntype>java.util.Date</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
            <parameter>
                <name>xMode</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsDate</name>
            <comment>returns [true] if the date is valid, otherwise [false]
xDate: the date to be checked</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
        </method>
        <method>
            <name>Weekday</name>
            <comment>returns the the weekday (1 = sunday, 2 = monday, ..., 7 = saturday)</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
        </method>
        <method>
            <name>NextWeekdayName</name>
            <comment>returns the day name of the next weekday</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
            <parameter>
                <name>xShortname</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>DaysInMonth</name>
            <comment>returns the days number of the month</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xYear</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>xMonth</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>LastDateOfMonth</name>
            <comment>returns the date of the last day of the month</comment>
            <returntype>java.util.Date</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
        </method>
        <method>
            <name>Day</name>
            <comment>returns the day of the month</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
        </method>
        <method>
            <name>FirstDateOfYearWeek</name>
            <comment>returns the date on the first day of the 'n' year week (0-51)</comment>
            <returntype>java.util.Date</returntype>
            <parameter>
                <name>xWeek</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>xYear</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>LastDateOfQuarter</name>
            <comment>returns the date corresponding to the last day of a quarter</comment>
            <returntype>java.util.Date</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
        </method>
        <method>
            <name>NextDay</name>
            <comment>returns the next day</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
        </method>
        <method>
            <name>Year</name>
            <comment>returns the year</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
        </method>
        <method>
            <name>SetFirstWeekday</name>
            <comment>sets the first weekday
xWeekday: the weekday (1 = sunday , 2 = monday, ..., 7 = saturday)</comment>
            <returntype>void</returntype>
            <parameter>
                <name>xWeekday</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>PreviousYear</name>
            <comment>returns the previous year</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
        </method>
        <method>
            <name>CountWorkdaysFromDates</name>
            <comment>returns the number of working days between two dates
xStartDate: the start date
xEndDate: the end date
xMode: 0 = normal, 1 = keep holidays, 2 = keep weekends, 3 = keep holidays and weekends</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xStartDate</name>
                <type>java.util.Date</type>
            </parameter>
            <parameter>
                <name>xEndDate</name>
                <type>java.util.Date</type>
            </parameter>
            <parameter>
                <name>xMode</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>LastDateOfWeek</name>
            <comment>returns the date corresponding to the last day of the week</comment>
            <returntype>java.util.Date</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
        </method>
        <method>
            <name>NextDate</name>
            <comment>returns the next date (24 hours later), 'Null' is date not valid or error</comment>
            <returntype>java.util.Date</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
        </method>
        <method>
            <name>AddDaysToDate</name>
            <comment>returns the date on which have added days
xDate: the date to which should be added the days
xDays: the number of days to add to the date</comment>
            <returntype>java.util.Date</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
            <parameter>
                <name>xDays</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>PreviousMonthName</name>
            <comment>returns the previous month name</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
            <parameter>
                <name>xShortname</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>IsHoliday</name>
            <comment>returns [true] if the date is a holiday, otherwise [false]</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
        </method>
        <method>
            <name>GetFirstWeekday</name>
            <comment>returns the first weekday (1 = sunday *default*, 2 = monday, ..., 7 = saturday)</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>MonthName</name>
            <comment>returns the month name of the date</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
            <parameter>
                <name>xShortname</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>NextWorkday</name>
            <comment>returns the date of the next workday
xDate: the start date
xMode: = 0 skip holidays, = 1 skip weekends, = 2 skip holidays and weekends</comment>
            <returntype>java.util.Date</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
            <parameter>
                <name>xMode</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>AddEasterDayInHolidays</name>
            <comment>inserts easter days in holidays
 returns [true] if the upload was successful, otherwise [false]</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>xYear</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>xAddEasterMonday</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>PreviousWorkday</name>
            <comment>returns the date of the previous workday
xDate: the start date
xMode: = 0 skip holidays, = 1 skip weekends, = 2 skip holidays and weekends</comment>
            <returntype>java.util.Date</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
            <parameter>
                <name>xMode</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>LastDayOfMonth</name>
            <comment>returns the last day of the month</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
        </method>
        <method>
            <name>Now</name>
            <comment>returns the current date</comment>
            <returntype>java.util.Date</returntype>
        </method>
        <method>
            <name>FindDatePreviousWeekday</name>
            <comment>returns the date found of the previous weekday
xWeekday: the day of week (1 = sunday, 2 = monday, ..., 7 = saturday)
xDate: the date from which to search</comment>
            <returntype>java.util.Date</returntype>
            <parameter>
                <name>xWeekday</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
        </method>
        <method>
            <name>DateFromYMDHMS</name>
            <comment>returns the date corresponding to the settings of the year, month, day, hour, minute and second</comment>
            <returntype>java.util.Date</returntype>
            <parameter>
                <name>year</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>month</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>day</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>hour</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>minute</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>second</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>EasterDate</name>
            <comment>returns the easter date</comment>
            <returntype>java.util.Date</returntype>
            <parameter>
                <name>xYear</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>PreviousWeekday</name>
            <comment>returns the previous weekday (1 = sunday, 2 = monday, ..., 7 = saturday)</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
        </method>
        <method>
            <name>DateToDatestring</name>
            <comment>converts a date to a datestring
xDate: the date to be converted
 returns the date in string format, 'Null' is date not valid or error</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
        </method>
        <method>
            <name>CountWeekdayInMonth</name>
            <comment>returns the number of times the weekday of the month
xWeekday: 1 = sunday, 2 = monday, ..., 7 = saturday
xDate: an date of the month</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xWeekday</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
        </method>
        <method>
            <name>LoadHolidaysFromFile</name>
            <comment>loads the text file that contains the holidays, each line of text is a single holiday (use "MMDD" format)
 returns [true] if the upload was successful, otherwise [false]</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>xFileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>AddMonthsToDate</name>
            <comment>returns the date on which have added months
xDate: the date to which should be added the months
xMonths: the number of months to add to the date</comment>
            <returntype>java.util.Date</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
            <parameter>
                <name>xMonths</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>AddYearsToDate</name>
            <comment>returns the date on which have added years
xDate: the date to which should be added the years
xYears: the number of years to add to the date</comment>
            <returntype>java.util.Date</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
            <parameter>
                <name>xYears</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SetDateFormat</name>
            <comment>sets the date format
xDateFormat: the date format</comment>
            <returntype>void</returntype>
            <parameter>
                <name>xDateFormat</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>FirstDateOfMonth</name>
            <comment>returns the date of the first day of the month</comment>
            <returntype>java.util.Date</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
        </method>
        <method>
            <name>PreviousDate</name>
            <comment>returns the previous date (24 hours before), 'Null' is date not valid or error</comment>
            <returntype>java.util.Date</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
        </method>
        <method>
            <name>DatestringToDate</name>
            <comment>converts a datestring to a date
xDateString: the datestring to be converted
 returns the date, 'Null' is date not valid or error</comment>
            <returntype>java.util.Date</returntype>
            <parameter>
                <name>xDateString</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>NextWeekday</name>
            <comment>returns the next weekday (1 = sunday, 2 = monday, ..., 7 = saturday)</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>db2000.B4A.eXtrafunctions.fDATESTRING</name>
        <shortname>fDATESTRING</shortname>
        <owner>process</owner>
        <method>
            <name>SkipDateIfHolidaysOrWeekend</name>
            <comment>returns the first datestring after the holidays and/or weekend</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xForward</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>WeekdayName</name>
            <comment>returns the day name of the week</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xShortname</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>PreviousWeekdayName</name>
            <comment>returns the day name of the previous weekday</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xShortname</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>NthWeekday</name>
            <comment>returns the datestring subsequent to the weekday setted for the number of recurrences specified
xDatestring: the start datestring
xNth: the number of recurrences
xWeekday: the weekday (1 = sunday, 2 = monday, ..., 7 = saturday)
xMode: [false] = starts from the day specified in the datestring, [true] = starts from the first day of the month shown in the datestring</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xNth</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>xWeekday</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>xMode</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>FindDateNextWeekday</name>
            <comment>returns the datestring found of the next weekday
xWeekday: the day of week (1 = sunday, 2 = monday, ..., 7 = saturday)
xDatestring: the datestring from which to search</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xWeekday</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>PreviousDay</name>
            <comment>returns the previous day</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>NextMonthName</name>
            <comment>returns the next month name</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xShortname</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>SkipDateIfWeekend</name>
            <comment>returns the first datestring after the weekend</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xForward</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>Month</name>
            <comment>returns the month</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>NextMonth</name>
            <comment>returns the next month</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>CountHolidaysFromDates</name>
            <comment>returns the number of holidays between two datestring
xStartDatestring: the start datestring
xEndDatestring: the end datestring</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xStartDatestring</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xEndDatestring</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>PreviousWorkdayName</name>
            <comment>returns the name of the previous workday
xDatestring: the start datestring
xMode: = 0 skip holidays, = 1 skip weekends, = 2 skip holidays and weekends</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xMode</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Shortname</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>GetDateFormat</name>
            <comment>returns the datestring format in use (default is "dd/MM/yyyy")</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>DateFromYMD</name>
            <comment>returns the datestring corresponding to the settings of the year, month and day</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>year</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>month</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>day</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>FirstDateOfQuarter</name>
            <comment>returns the datestring corresponding to the first day of a quarter</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>FirstDateOfWeek</name>
            <comment>returns the datestring of the first day of the week</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>PreviousMonth</name>
            <comment>returns the previous month</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsWeekend</name>
            <comment>returns [true] if the datestring is a weekend, otherwise it returns [false]</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>NextAnniversary</name>
            <comment>returns the datestring of the next anniversary</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>LastWorkdayNameOfMonth</name>
            <comment>returns the name of the last workday of the month
xDatestring: the start datestring
xMode: = 0 skip holidays, = 1 skip weekends, = 2 skip holidays and weekends</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xMode</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Shortname</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>NextYear</name>
            <comment>returns the next year</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsDatestring</name>
            <comment>returns [true] if the datestring is valid, otherwise [false]
xDateString: the datestring to be checked</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>FirstWorkdayNameOfMonth</name>
            <comment>returns the name of the first workday of the month
xDatestring: the start datestring
xMode: = 0 skip holidays, = 1 skip weekends, = 2 skip holidays and weekends</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xMode</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Shortname</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>DateDiff</name>
            <comment>returns a value corresponding to the number of time intervals between two datestring
xDatestring1: the datestring 1
xDatestring2: the datestring 2
xInterval: "y" = years, "m" = months, "d" days, "h" = hours, "n" = minutes, "s" = seconds, "!" = milliseconds
xAbsoluteValue: 'true' = absolute value, 'false' = none</comment>
            <returntype>long</returntype>
            <parameter>
                <name>xDatestring1</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xDatestring2</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xInterval</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xAbsoluteValue</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>FirstWorkdayOfMonth</name>
            <comment>returns the datestring of the first workday of the month
xDatestring: the start datestring
xMode: = 0 skip holidays, = 1 skip weekends, = 2 skip holidays and weekends</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xMode</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>FirstDateOfCurrentWeek</name>
            <comment>returns the datestring of the first day of the current week</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>InsertNewHolidayInMemory</name>
            <comment>inserts a new holiday in memory (RAM)
 WARNING: not historicizes in external file
 returns [true] if the insert was successful, otherwise [false]</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>xMonth</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>xDay</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Age</name>
            <comment>returns the age (years) from the birthdate</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xBirthDatestring</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SkipDateIfHolidays</name>
            <comment>returns the first datestring after the holidays</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xForward</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>NextWorkdayName</name>
            <comment>returns the name of the next workday
xDatestring: the start datestring
xMode: = 0 skip holidays, = 1 skip weekends, = 2 skip holidays and weekends</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xMode</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Shortname</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>GetHolidays</name>
            <comment>returns an string array containing all holidays allocated in memory</comment>
            <returntype>java.lang.String[]</returntype>
        </method>
        <method>
            <name>LastWorkdayOfMonth</name>
            <comment>returns the datestring of the last workday of the month
xDatestring: the start datestring
xMode: = 0 skip holidays, = 1 skip weekends, = 2 skip holidays and weekends</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xMode</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsDate</name>
            <comment>returns [true] if the datestring is valid, otherwise [false]
xDatestring: the datestring to be checked</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Weekday</name>
            <comment>returns the weekday (1 = sunday, 2 = monday, ..., 7 = saturday)</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>NextWeekdayName</name>
            <comment>returns the day name of the next weekday</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xShortname</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>DaysInMonth</name>
            <comment>returns the days number of the month</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xYear</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>xMonth</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>LastDateOfMonth</name>
            <comment>returns the datestring of the last day of the month</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Day</name>
            <comment>returns the day of the month</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>FirstDateOfYearWeek</name>
            <comment>returns the datestring on the first day of the 'n' year week (0-51)</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xWeek</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>xYear</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>LastDateOfQuarter</name>
            <comment>returns the datestring corresponding to the last day of a quarter</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>NextDay</name>
            <comment>returns the day next</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Year</name>
            <comment>returns the year</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SetFirstWeekday</name>
            <comment>sets the first weekday
xWeekday: the weekday (1 = sunday , 2 = monday, ..., 7 = saturday)</comment>
            <returntype>void</returntype>
            <parameter>
                <name>xWeekday</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>PreviousYear</name>
            <comment>returns the previous year</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>CountWorkdaysFromDates</name>
            <comment>returns the number of working days between two datestring
xStartDatestring: the start datestring
xEndDatestring: the end datestring
xMode: 0 = normal, 1 = keep holidays, 2 = keep weekends, 3 = keep holidays and weekends</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xStartDatestring</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xEndDatestring</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xMode</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>LastDateOfWeek</name>
            <comment>returns the datestring corresponding to the last day of the week</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>NextDate</name>
            <comment>returns the next datestring (24 hours later), 'Null' is datestring not valid or error</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>AddDaysToDate</name>
            <comment>returns the datestring on which have added days
xDatestring: the datestring to which should be added the days
xDays: the number of days to add to the datestring</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xDays</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>PreviousMonthName</name>
            <comment>returns the previous month name</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xShortname</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>IsHoliday</name>
            <comment>returns [true] if the datestring is a holiday, otherwise [false]</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetFirstWeekday</name>
            <comment>returns the first weekday (1 = sunday *default*, 2 = monday, ..., 7 = saturday)</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>MonthName</name>
            <comment>returns the month name</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xShortname</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>NextWorkday</name>
            <comment>returns the datestring of the next workday
xDatestring: the start datestring
xMode: = 0 skip holidays, = 1 skip weekends, = 2 skip holidays and weekends</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xMode</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>AddEasterDayInHolidays</name>
            <comment>inserts easter days in holidays
 returns [true] if the upload was successful, otherwise [false]</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>xYear</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>xAddEasterMonday</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>PreviousWorkday</name>
            <comment>returns the datestring of the previous workday
xDatestring: the start datestring
xMode: = 0 skip holidays, = 1 skip weekends, = 2 skip holidays and weekends</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xMode</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>LastDayOfMonth</name>
            <comment>returns the last day of the month</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Now</name>
            <comment>returns the current date</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>DateConversion</name>
            <comment>returns a datestring converted as required
xDatastring: the datestring to be converted
xDateInputType: the datestring format input
xDateOutputType: the datestring format output
xSeparator: the separator to be applied to the converted datestring
 the date format in input or output can be:
 1 = "DD/MM/YYYY"
 2 = "MM/DD/YYYY"
 3 = "YYYY/MM/DD")
 4 = "YYYY/DD/MM")
 5 = "DD/YYYY/MM")
 6 = "MM/YYYY/DD")
 7 = "DDMMYYYY"
 8 = "MMDDYYYY"
 9 = "YYYYMMDD")
 10 = "YYYYDDMM")
 11 = "DDYYYYMM")
 12 = "MMYYYYDD")
 returns the converted datestring</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDateString</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xDateInputType</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>xDateOutputType</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>xSeparator</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>FindDatePreviousWeekday</name>
            <comment>returns the datestring found of the previous weekday
xWeekday: the day of week (1 = sunday, 2 = monday, ..., 7 = saturday)
xDatestring: the datestring from which to search</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xWeekday</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>DateFromYMDHMS</name>
            <comment>returns the datestring corresponding to the settings of the year, month, day, hour, minute and second</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>year</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>month</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>day</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>hour</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>minute</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>second</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>EasterDate</name>
            <comment>returns the easter datestring</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xYear</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>PreviousWeekday</name>
            <comment>returns the previous weekday (1 = sunday, 2 = monday, ..., 7 = saturday)</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>DateToDatestring</name>
            <comment>converts a date to a datestring
xDate: the date to be converted
 returns the date in string format, 'Null' is date not valid or error</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDate</name>
                <type>java.util.Date</type>
            </parameter>
        </method>
        <method>
            <name>CountWeekdayInMonth</name>
            <comment>returns the number of times the weekday of the month
xWeekday: 1 = sunday, 2 = monday, ..., 7 = saturday
xDatestring: an datestring of the month</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xWeekday</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>LoadHolidaysFromFile</name>
            <comment>loads the text file that contains the holidays, each line of text is a single holiday (use "MMDD" format)
 returns [true] if the upload was successful, otherwise [false]</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>xFileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>AddMonthsToDate</name>
            <comment>returns the datestring on which have added months
xDatestring: the datestring to which should be added the months
xMonths: the number of months to add to the datestring</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xMonths</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>AddYearsToDate</name>
            <comment>returns the datestring on which have added years
xDatestring: the datestring to which should be added the years
xYears: the number of years to add to the datestring</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xYears</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SetDateFormat</name>
            <comment>sets the datestring format
xDateFormat: the datestring format</comment>
            <returntype>void</returntype>
            <parameter>
                <name>xDateFormat</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>FirstDateOfMonth</name>
            <comment>returns the datestring of the first day of the month</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>PreviousDate</name>
            <comment>returns the previous datestring (24 hours before), 'Null' is datestring not valid or error</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>NextWeekday</name>
            <comment>returns the next weekday (1 = sunday, 2 = monday, ..., 7 = saturday)</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xDatestring</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>DatestringToDate</name>
            <comment>converts a datestring to a date
xDateString: the datestring to be converted
 returns the date, 'Null' is datestring not valid or error</comment>
            <returntype>java.util.Date</returntype>
            <parameter>
                <name>xDateString</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>db2000.B4A.eXtrafunctions.fFILETOOLS</name>
        <shortname>fFILETOOLS</shortname>
        <owner>process</owner>
        <method>
            <name>Exist</name>
            <comment>check if a file exists
 returns [true] = exist, [false] = not exist</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>xFilename</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Kill</name>
            <comment>delete a file
 returns [true] = success, [false] = failed</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>xFilename</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetLastModified</name>
            <comment>returns the last date of modified</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xFile</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xDateFormat</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>CopyDirectory</name>
            <comment>copy a directory
 returns [true] = success, [false] = failed</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>xDirSource</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xDirDestination</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>MKDir</name>
            <comment>create a directory
 returns [true] = success, [false] = failed</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>xDirectoryname</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>MKDirs</name>
            <comment>create a directory and subdirectories
 returns [true] = success, [false] = failed</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>xDirectorynames</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Copy</name>
            <comment>copy a file
 returns [true] = success, [false] = failed</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>xSourceFilename</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xDestinationFilename</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>FolderListing</name>
            <comment>returns an array string containing the names of folders in the directory</comment>
            <returntype>java.lang.String[]</returntype>
            <parameter>
                <name>xDirectory</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Rename</name>
            <comment>rename a file
 returns [true] = success, [false] = failed</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>xOldFilename</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xNewFilename</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsDirectory</name>
            <comment>check if a path represents a folder</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>xPathname</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ExtractPartFromFileName</name>
            <comment>returns a portion of the file name 
 xPart = 1 file name excluding extension, 2 = extension, 3 = filename, 4 = pathname</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xFilename</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xPart</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>FileListing2</name>
            <comment>returns an array string containing the names of files in the directory
xDirectory: the directory path name
xExtension: the filter for search</comment>
            <returntype>java.lang.String[]</returntype>
            <parameter>
                <name>xDirectory</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xExtention</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>FileSeparator</name>
            <comment>returns the file separator (e.g. "\" for Windows, "/" for Linux)</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>SetLastModified</name>
            <comment>sets the date of modified
 returns [true] = success, [false] = failed</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>xFile</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xDateFormat</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xNewDateString</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>RMDir</name>
            <comment>remove a directory
 WARNING: all files in the directory will be deleted!
 returns [true] = success, [false] = failed</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>xDirectoryname</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>FileListing</name>
            <comment>returns an array string containing the names of files and folders in the directory</comment>
            <returntype>java.lang.String[]</returntype>
            <parameter>
                <name>xDirectory</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsFile</name>
            <comment>check if a path represents a file</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>xPathname</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Size</name>
            <comment>returns the size of file in bytes</comment>
            <returntype>long</returntype>
            <parameter>
                <name>xFilename</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>db2000.B4A.eXtrafunctions.fGEOMETRY</name>
        <shortname>fGEOMETRY</shortname>
        <owner>process</owner>
        <method>
            <name>TrapeziumPerimeter2</name>
            <comment>returns the perimeter of a trapezium (second method)</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xMajorBase</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>xMinorBase</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>xSide</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>RhombusSurfaceArea</name>
            <comment>returns the surface area of a rhombus</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xLongDiagonal</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>xShortDiagonal</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>CylinderVolume</name>
            <comment>returns the volume of a cylinder</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xRadius</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>xHeight</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>PyramidSurfaceArea</name>
            <comment>returns the surface area of a pyramid</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xBase</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>xHeight</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>TrianglePerimeter</name>
            <comment>returns the perimeter of triangle</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xSide1</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>xSide2</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>xSide3</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>ConeVolume</name>
            <comment>returns the volume of a cone</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xRadius</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>xHeight</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>TrapeziumSurfaceArea</name>
            <comment>returns the surface area of a trapezium</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xMajorBase</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>xMinorBase</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>xHeight</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>CylinderSurfaceArea</name>
            <comment>returns the surface area of a cylinder</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xRadius</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>xHeight</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>RectangularPrismSurfaceArea</name>
            <comment>returns the surface area of a rectangular prism</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xLength</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>xWidth</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>xHeight</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>RectanglePerimeter</name>
            <comment>returns the perimeter of a rectangle</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xLength</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>xWidth</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>TriangleSurfaceArea</name>
            <comment>returns the surface area of a triangle</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xBase</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>xHeight</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>CircleSurfaceArea</name>
            <comment>returns the surface area of a circle</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xRadius</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>SphereSurfaceArea</name>
            <comment>returns the surface area of a sphere</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xRadius</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>Circumference</name>
            <comment>returns the circumference of a circle</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xRadius</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>TrapeziumPerimeter</name>
            <comment>returns the perimeter of a trapezium (first method)</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xMajorBase</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>xMinorBase</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>xLeftSide</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>xRightSide</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>ConeSurfaceArea</name>
            <comment>returns the surface area of a cone</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xRadius</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>xHeight</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>CubeVolume</name>
            <comment>returns the volume of a cube</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xSide</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>RectangleSurfaceArea</name>
            <comment>returns the surface area of a rectangle</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xLength</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>xWidth</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>RectangularPrismVolume</name>
            <comment>returns the volume of a rectangular prism</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xLength</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>xWidth</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>xHeight</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>PyramidVolume</name>
            <comment>returns the volume of a pyramid</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xBase</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>xHeight</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>SquareSurfaceArea</name>
            <comment>returns the surface area of a square</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xSide</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>SphereVolume</name>
            <comment>returns the volume of a sphere</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xRadius</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>SquarePerimeter</name>
            <comment>returns the perimeter of a square</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xSide</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>CubeSurfaceArea</name>
            <comment>returns the surface area of a cube</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xSide</name>
                <type>double</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>db2000.B4A.eXtrafunctions.fINFO</name>
        <shortname>fINFO</shortname>
        <owner>process</owner>
        <permission>android.permission.WRITE_EXTERNAL_STORAGE</permission>
        <permission>android.permission.READ_EXTERNAL_STORAGE</permission>
        <method>
            <name>GetInfo</name>
            <comment>get the info of this package
 returns the info of this package into a string array:
 0 [name]
 1 [version]
 2 [version date]
 3 [author]
 4 [e-mail author]
 5 [copyright]</comment>
            <returntype>java.lang.String[]</returntype>
        </method>
    </class>
    <class>
        <name>db2000.B4A.eXtrafunctions.fINI</name>
        <shortname>fINI</shortname>
        <owner>process</owner>
        <method>
            <name>SetKeysToUpperCase</name>
            <comment>set key names to uppercase
UpperCase: = 'True' (default) sets key names to uppercase, = 'False' no changes</comment>
            <returntype>void</returntype>
            <parameter>
                <name>UpperCase</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>rdInteger</name>
            <comment>returns the integer value assigned to the specific section and key
SectionName: the section name
KeyName: the key name
DefaultValue: the default value assigned is returned if the parameters are missing or not to find the key</comment>
            <returntype>int</returntype>
            <parameter>
                <name>SectionName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>KeyName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>DefaultValue</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SetFileName</name>
            <comment>set the INI file to use
FileName: the full path and name of the INI file</comment>
            <returntype>void</returntype>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>rdSection</name>
            <comment>returns the named section or null if named section does not exists
SectionName: the section name to be searched</comment>
            <returntype>db2000.B4A.eXtrafunctions.fINI.INISection</returntype>
            <parameter>
                <name>SectionName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>rdNumberSections</name>
            <comment>returns the number of sections in INI file</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>rmSection</name>
            <comment>remove the specified section
SectionName: the section name</comment>
            <returntype>void</returntype>
            <parameter>
                <name>SectionName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>UpDate</name>
            <comment>update the INI file, if the INI file does not exist it is created</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetTimestampFormat</name>
            <comment>get the timestamp format
 returns the TimestampFormat value</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>GetFileName</name>
            <comment>get the INI file name being used
 returns the INI file name</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>GetDateFormat</name>
            <comment>get the date format
 returns the DateFormat value</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>GetKeysToUpperCase</name>
            <comment>get the uppercase status assigned to key names
 returns uppercase status</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>rdKeys</name>
            <comment>returns a map containing all the keys under specified section
SectionName: the name of the section for which properties are to be retrieved</comment>
            <returntype>java.util.Map</returntype>
            <parameter>
                <name>SectionName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>rdKeyNames</name>
            <comment>returns a string array containing the names of all the keys under specified section
SectionName: the name of the section for which names of properties is to be retrieved</comment>
            <returntype>java.lang.String[]</returntype>
            <parameter>
                <name>SectionName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>rmKey</name>
            <comment>remove the specified key from the specified section
SectionName: the section name
KeyName: the key name</comment>
            <returntype>void</returntype>
            <parameter>
                <name>SectionName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>KeyName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SetCommentStartMarker</name>
            <comment>set the row start-marker character for comments
xStartMarker: = "#" (default) or ";", other characters are not allowed!</comment>
            <returntype>void</returntype>
            <parameter>
                <name>xStartMarker</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SetLineSeparator</name>
            <comment>set line separator
xLineSeparator: = "\r", "\n", "\r\n\", Chr(13), Chr(10), Chr(13) + Chr(10), or other...
 (default will be the line separator used by the operating system)</comment>
            <returntype>void</returntype>
            <parameter>
                <name>xLineSeparator</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>wrDate</name>
            <comment>write the date value to the specific section and key
SectionName: the section name
KeyName: the key name
DateValue: the date value
Comments: the comments</comment>
            <returntype>void</returntype>
            <parameter>
                <name>SectionName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>KeyName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>DateValue</name>
                <type>java.util.Date</type>
            </parameter>
            <parameter>
                <name>Comments</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>rdDate</name>
            <comment>returns the date value assigned to the specific section and key
SectionName: the section name
KeyName: the key name
DefaultValue: the default value assigned is returned if the parameters are missing or not to find the key</comment>
            <returntype>java.util.Date</returntype>
            <parameter>
                <name>SectionName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>KeyName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>DefaultValue</name>
                <type>java.util.Date</type>
            </parameter>
        </method>
        <method>
            <name>rdDouble</name>
            <comment>returns the double value assigned to the specific section and key
SectionName: the section name
KeyName: the key name
DefaultValue: the default value assigned is returned if the parameters are missing or not to find the key</comment>
            <returntype>java.lang.Double</returntype>
            <parameter>
                <name>SectionName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>KeyName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>DefaultValue</name>
                <type>java.lang.Double</type>
            </parameter>
        </method>
        <method>
            <name>wrNewSection</name>
            <comment>writes a new section
SectionName: the section name
Comments: the comments</comment>
            <returntype>void</returntype>
            <parameter>
                <name>SectionName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Comments</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SetTimestampFormat</name>
            <comment>set the timestamp format
TimestampFormat: the format string, if timestamp format is not valid assumes by default "yyyy-MM-dd"</comment>
            <returntype>void</returntype>
            <parameter>
                <name>TimestampFormat</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetLineSeparator</name>
            <comment>returns the line separator currently in use</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>rdLong</name>
            <comment>returns the long value assigned to the specific section and key
SectionName: the section name
KeyName: the key name
DefaultValue: the default value assigned is returned if the parameters are missing or not to find the key</comment>
            <returntype>java.lang.Long</returntype>
            <parameter>
                <name>SectionName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>KeyName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>DefaultValue</name>
                <type>java.lang.Long</type>
            </parameter>
        </method>
        <method>
            <name>wrDouble</name>
            <comment>write the double value to the specific section and key
SectionName: the section name
KeyName: the key name
DoubleValue: the double value
Comments: the comments</comment>
            <returntype>void</returntype>
            <parameter>
                <name>SectionName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>KeyName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>DoubleValue</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>Comments</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetCommentStartMarker</name>
            <comment>returns the start-marker character used in comments</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>rdTimestamp</name>
            <comment>returns the timestamp value assigned to the specific section and key
SectionName: the section name
KeyName: the key name
DefaultValue: the default value assigned is returned if the parameters are missing or not to find the key</comment>
            <returntype>java.util.Date</returntype>
            <parameter>
                <name>SectionName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>KeyName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>DefaultValue</name>
                <type>java.util.Date</type>
            </parameter>
        </method>
        <method>
            <name>wrBoolean</name>
            <comment>write the boolean value to the specific section and key
SectionName: the section name
KeyName: the key name
booleanValue: the boolean value
Comments: the comments</comment>
            <returntype>void</returntype>
            <parameter>
                <name>SectionName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>KeyName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>BooleanValue</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>Comments</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>wrLong</name>
            <comment>write the long value to the specific section and key
SectionName: the section name
KeyName: the key name
LongValue: the long value
Comments: the comments</comment>
            <returntype>void</returntype>
            <parameter>
                <name>SectionName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>KeyName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>LongValue</name>
                <type>long</type>
            </parameter>
            <parameter>
                <name>Comments</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>wrTimestamp</name>
            <comment>write the timestamp value to the specific section and key
SectionName: the section name
KeyName: the key name
TimestampValue: the timestamp value
Comments: the comments</comment>
            <returntype>void</returntype>
            <parameter>
                <name>SectionName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>KeyName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>TimestampValue</name>
                <type>java.sql.Timestamp</type>
            </parameter>
            <parameter>
                <name>Comments</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>rdString</name>
            <comment>returns the string value assigned to the specific section and key
SectionName: the section name
KeyName: the key name
DefaultValue: the default value assigned is returned if the parameters are missing or not to find the key</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>SectionName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>KeyName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>DefaultValue</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>wrSection</name>
            <comment>write/update a comments associated with a section (if the section does not exist will be created)
SectionName: the section name
Comments: the comments</comment>
            <returntype>void</returntype>
            <parameter>
                <name>SectionName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Comments</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>rdBoolean</name>
            <comment>returns the boolean value assigned to the specific section and key
SectionName: the section name
KeyName: the key name
DefaultValue: the default value assigned is returned if the parameters are missing or not to find the key</comment>
            <returntype>java.lang.Boolean</returntype>
            <parameter>
                <name>SectionName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>KeyName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>DefaultValue</name>
                <type>java.lang.Boolean</type>
            </parameter>
        </method>
        <method>
            <name>wrInteger</name>
            <comment>write the integer value to the specific section and key
SectionName: the section name
KeyName: the key name
IntegerValue: the integer value
Comments: the comments</comment>
            <returntype>void</returntype>
            <parameter>
                <name>SectionName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>KeyName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>IntegerValue</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Comments</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>rdSectionNames</name>
            <comment>returns a string array containing the names of all sections in INI file</comment>
            <returntype>java.lang.String[]</returntype>
        </method>
        <method>
            <name>wrString</name>
            <comment>write the string value to the specific section and key
SectionName: the section name
KeyName: the key name
StringValue: the string value
Comments: the comments</comment>
            <returntype>void</returntype>
            <parameter>
                <name>SectionName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>KeyName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>StringValue</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Comments</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SetDateFormat</name>
            <comment>set the date format
DateFormat: the format string, if date format is not valid assumes by default "yyyy-MM-dd"</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DateFormat</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <field>
            <name>m_KeysToUpperCase</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </field>
        <field>
            <name>m_CommentStartMarker</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>m_LineSeparator</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>m_FileName</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
    </class>
    <class>
        <name>db2000.B4A.eXtrafunctions.fITALIANFISCALTOOLS</name>
        <shortname>fITALIANFISCALTOOLS</shortname>
        <owner>process</owner>
        <method>
            <name>CheckItalianFiscalCode</name>
            <comment>check the italian fiscal code (codice fiscale italiano)
xItalianFiscalCode: the italian fiscal code to be verified
 returns 0 = OK, 1 = length 0, 2 = incorrect length, 3 = illegal character, 4 = control code not match</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xItalianFiscalCode</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>CheckItalianVATID</name>
            <comment>check the italian VAT ID (partita IVA italiana)
xVATID: the VAT ID to be verified
 returns 0 = OK, 1 = length 0, 2 = incorrect length, 3 = illegal character, 4 = control code not match</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xVATID</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>CalculateItalianFiscalCode</name>
            <comment>returns the italian fiscal code (codice fiscale italiano)
xFirstName: the firs tname
xLastName: the last name
xBirthDate: the birth date ("dd/mm/yyyy")
xBirthTownCode: the birth town code (locality code or country code for italian fiscal agency)
xSex: the sex (F = female, M = male)</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xFirstName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xLastName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xBirthDate</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xBirthTownCode</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xSex</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>db2000.B4A.eXtrafunctions.fMATH</name>
        <shortname>fMATH</shortname>
        <owner>process</owner>
        <method>
            <name>Asin</name>
            <comment>returns the arcsine of a numeric value
xValue: the numeric expression</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xValue</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>Rnd2</name>
            <comment>returns a random double value with a positive sign
xValue: the numeric value that represents the "base"</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xValue</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>Mod</name>
            <comment>returns returns the remainder of a division
xValue1: the number value to be divided
xValue2: the number value of the divisor</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xValue1</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>xValue2</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>Atan</name>
            <comment>returns the arctangent of a numeric value
xValue: the numeric expression</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xValue</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>Acsc</name>
            <comment>returns the cosecantarc of the a number value (Y)
xValue: the numeric expression</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xValue</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>Atan2</name>
            <comment>returns the arctangent of the cartesian coordinate values
X: the cartesian coordinate x
Y: the cartesian coordinate y</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Y</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>X</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>Rnd</name>
            <comment>returns a random double value with a positive sign</comment>
            <returntype>double</returntype>
        </method>
        <method>
            <name>Abs</name>
            <comment>returns the absolute value of a numeric value
xValue: the numeric expression</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xValue</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>Factorial</name>
            <comment>returns the factorial for the numeric value (xMode = 0 or 1)</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xNumber</name>
                <type>long</type>
            </parameter>
            <parameter>
                <name>xMode</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Asinh</name>
            <comment>returns the area hyperbolicsine of a numeric value
xValue: the numeric expression</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xValue</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>Acos</name>
            <comment>returns the arc cosine of a numeric value
xValue: the numeric expression</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xValue</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>Acot</name>
            <comment>returns the arccotangent of a numeric value
xValue: the numeric expression</comment>
            <returntype>double</returntype>
            <parameter>
                <name>t</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>ShLlng</name>
            <comment>shifts the bits of value shift-bits to the left
xValue: the value to be shifted
xShift: the amount of bits to shift the bits of value</comment>
            <returntype>long</returntype>
            <parameter>
                <name>xValue</name>
                <type>long</type>
            </parameter>
            <parameter>
                <name>xShift</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Asec</name>
            <comment>returns the arcsecant of a numeric value (X)
xValue: the numeric expression</comment>
            <returntype>double</returntype>
            <parameter>
                <name>x</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>Exp</name>
            <comment>returns the base of natural logarithms raised to a power (e)
xValue: the numeric expression</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xValue</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>SinC</name>
            <comment>returns the sine cardinale of a numeric value
xValue: the numeric expression</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xValue</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>ShRlng</name>
            <comment>shifts the bits of value shift-bits to the right and keeps the MSB
xValue: the value to be shifted
xShift: the amount of bits to shift the bits of value</comment>
            <returntype>long</returntype>
            <parameter>
                <name>xValue</name>
                <type>long</type>
            </parameter>
            <parameter>
                <name>xShift</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Log</name>
            <comment>returns the natural logarithm of a numeric value
xValue: the numeric expression</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xValue</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>Atanh</name>
            <comment>returns the area hyperbolictangent of a numeric value
xValue: the numeric expression</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xValue</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>Cscs</name>
            <comment>returns the cosecans of a numeric value
xValue: the numeric expression</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xValue</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>ShRZlng</name>
            <comment>shifts the bits of value shift-bits to the right and shifts also the MSB
xValue: the value to be shifted
xShift: the amount of bits to shift the bits of value</comment>
            <returntype>long</returntype>
            <parameter>
                <name>xValue</name>
                <type>long</type>
            </parameter>
            <parameter>
                <name>xShift</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Acsch</name>
            <comment>returns the area hyperboliccosecant of a numeric value
xValue: the numeric expression</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xValue</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>ShLint</name>
            <comment>shifts the bits of value shift-bits to the left
xValue: the value to be shifted
xShift: the amount of bits to shift the bits of value</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xValue</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>xShift</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>ShRint</name>
            <comment>shifts the bits of value shift-bits to the right and keeps the MSB
xValue: the value to be shifted
xShift: the amount of bits to shift the bits of value</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xValue</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>xShift</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Acosh</name>
            <comment>returns the area hyperboliccosine of a numeric value
xValue: the numeric expression</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xValue</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>GeoDistance</name>
            <comment>returns the distance between two points identified by geographic coordinates
xLatitude1: the latitude of point 1
xLongitude1: the longitude of point 1
xLatitude2: the latitude of point 2
xLongitude2: the longitude of point 2
xMeasureUnit: the unit measure (0 = Km, 1 = Miles)
xAlgorithmType: the type of algorithm used for the distance calculation (1 = haversine, 2 = spherical law of cosines, 3 = spherical earth projection)</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xLatitude1</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>xLongitude1</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>xLatitude2</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>xLongitude2</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>xMeasureUnit</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>xAlgorithmType</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Tanh</name>
            <comment>returns the hyperbolictangent of a numeric value
xValue: the numeric expression</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xValue</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>Sgn</name>
            <comment>checks the sign of a numeric value
xValue: the numeric expression
 returns -1 = less than zero (negative sign), 0 = equal to zero, 1 = greater than zero (positive sign)</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xValue</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>MCM</name>
            <comment>returns the least common multiple relative to two numeric values</comment>
            <returntype>long</returntype>
            <parameter>
                <name>x</name>
                <type>long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>Tan</name>
            <comment>returns the tangent of an angle
xValue: the numeric expression that expresses an angle in radians</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xValue</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>Sech</name>
            <comment>returns the hyperbolicsecant of a numeric value
xValue: the numeric expression</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xValue</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>Cota</name>
            <comment>returns the cotangent of a numeric value
xValue: the numeric expression</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xValue</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>Round</name>
            <comment>returns a number rounded
xValue: the numeric expression being rounded</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xValue</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>Sinh</name>
            <comment>returns the hyperbolicsine of a numeric value
xValue: the numeric expression</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xValue</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>Coth</name>
            <comment>returns the hyperboliccotangent of a numeric value
xValue: the numeric expression</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xValue</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>Sin</name>
            <comment>returns the sine of an angle
xValue: the value that expresses an angle in radian</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xValue</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>Sec</name>
            <comment>returns the secant of a numeric value
xValue: the numeric expression</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xValue</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>Sqr</name>
            <comment>returns the square root of a numeric value
xValue: the numeric expression</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xValue</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>Cos</name>
            <comment>returns the cosine of an angle
xValue: the value that expresses an angle in radian</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xValue</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>ShRZint</name>
            <comment>shifts the bits of value shift-bits to the right and shifts also the MSB
xValue: the value to be shifted
xShift: the amount of bits to shift the bits of value</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xValue</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>xShift</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>MCD</name>
            <comment>returns the greatest common divisor relative to two numeric values</comment>
            <returntype>long</returntype>
            <parameter>
                <name>x</name>
                <type>long</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>Acoth</name>
            <comment>returns the area hyperboliccotangent of a numeric value
xValue: the numeric expression</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xValue</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>IsPrime</name>
            <comment>returns [true] if the value if it is a prime number, otherwise [false]</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>xNumber</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>Cosh</name>
            <comment>returns the hyperboliccosine of a numeric value
xValue: the numeric expression</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xValue</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>Fix</name>
            <comment>returns the integer part of a number
xValue: the number in input</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xValue</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>Csch</name>
            <comment>returns the hyperboliccosecant of a numeric value
xValue: the numeric expression</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xValue</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>Round2</name>
            <comment>returns a number rounded to decimals specified
xValue: the numeric expression being rounded
xDigitsAfterDecimal: the digits to the right of the decimal are included in the rounding</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xValue</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>xDigitsAfterDecimal</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Asech</name>
            <comment>returns the area hyperbolicsecant of a numeric value
xValue: the numeric expression</comment>
            <returntype>double</returntype>
            <parameter>
                <name>xValue</name>
                <type>double</type>
            </parameter>
        </method>
        <field>
            <name>PI</name>
            <comment>PI constant</comment>
            <returntype>double</returntype>
        </field>
    </class>
    <class>
        <name>db2000.B4A.eXtrafunctions.fSTRING</name>
        <shortname>fSTRING</shortname>
        <owner>process</owner>
        <method>
            <name>StringToByteArray</name>
            <comment>returns a array of bytes from a string
xString: the string in input</comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>xString</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>StrReverse</name>
            <comment>returns a string in which the character order of the specified string is reversed
xString: the string in input</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xString</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>StrComp</name>
            <comment>compares two strings
xString1: the string to be compared
xString2: the string used for comparison
xMethod: the comparison type (0 = binary, 1 = text)
 returns -1 = xString1 greater than xString2, 0 = the two strings are equal, 1 = xString1 less than xString2</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xString1</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xString2</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xMethod</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Mid</name>
            <comment>returns a portion of a string
xString: the string in input
xStart: the position where to start to take the characters
the: number of characters to be taken</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xString</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xStart</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>xLength</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Trim</name>
            <comment>removes leading and trailing whitespace
xString: the string to be trimmed
 returns the trimmed result</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xString</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>UCase</name>
            <comment>returns a string converted to upper case
xString: the string to be converted</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xString</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>InStrRev</name>
            <comment>returns the position of an occurrence of a string included in another from the end of the string (0 = not found)
xString1: the string where to search
xString2: the string to find</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xString1</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xString2</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>CalculateCheckSum</name>
            <comment>returns the calculation of checksum of a string (eg. xModule = 256, 512, 1024, ect.)</comment>
            <returntype>long</returntype>
            <parameter>
                <name>xString</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xModule</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>LTrim</name>
            <comment>removes whitespace to left
xString: the string to be trimmed
 returns the trimmed result</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xString</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ReformattingTextRows</name>
            <comment>returns a text reformatted
xText: the input text (alphanumeric strings even with carriage return)
xMaxRowLenght: the maximum length of each row of the output text
xCarriageReturnChar: the character(s) to be used as carriage return in each row the output text</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xText</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xMaxRowLenght</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>xCarriageReturnChar</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>InStr2</name>
            <comment>returns the position of the first occurrence of a string within another, starting from a predetermined position (0 = not found)
xStart: the starting position within the string search
xString1: the string where to search
xString2: the string to find</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xStart</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>xString1</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xString2</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>InStr3</name>
            <comment>returns the position of the first occurrence of a string within another, starting from a predetermined position and with comparison method (0 = not found)
xStart: the starting position within the string search
xString1: the string where to search
xString2: the string to find
xCompareMethod: the comparison method (0 = binary, 1 = text)</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xStart</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>xString1</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xString2</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xCompareMethod</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Replicate</name>
            <comment>returns a string of the same character repeated 'n' times
xNumber: the number of times to repeat
xCharacter: the character to repeat</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xNumber</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>xCharacter</name>
                <type>char</type>
            </parameter>
        </method>
        <method>
            <name>IsWhitespace</name>
            <comment>checks if a character at a given position is a whitespace
xString: the string to verify
xIndex: the character position within the string
 returns [true] is a whitespace, [false] is not a whitespace</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>xString</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xIndex</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SHA1</name>
            <comment>returns a string processed with SHA1 algorithm
xString: the string in input</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xString</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>EqualsIgnoreCase</name>
            <comment>checks the equality between two strings ignoring upper and lower case
xString1: the string to verify
xString2: the verification string
 returns [true] is equals, [false] not equals</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>xString1</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xString2</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Space</name>
            <comment>returns a string of whitespace repeated 'n' times
xNumber: the number of whitespace to repeat</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xNumber</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Right</name>
            <comment>returns a specified number of characters in a string from the right
xString: string from which the characters located at the far right are returned
xLength: integer that indicates how many characters are to be returned</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xString</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xLength</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>EncodeBase64</name>
            <comment>encrypts a string with Base64 algorithm
xString: the string to be encrypted
 returns the encoded string</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xString</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>RemoveElementsFromStringArray</name>
            <comment>removes from a string array all the items that match the search string</comment>
            <returntype>java.lang.String[]</returntype>
            <parameter>
                <name>xArray</name>
                <type>java.lang.String[]</type>
            </parameter>
            <parameter>
                <name>xStringSearch</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>MD5</name>
            <comment>returns the MD5 hash of a string
xString: the string in input
 returns the string processed</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xString</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Len</name>
            <comment>returns the length of a string
xString: the string</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xString</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsNotEmpty</name>
            <comment>checks if a string is not empty
xString: the string to verify
 returns [true] is not empty, [false] is empty</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>xString</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsEmpty</name>
            <comment>checks if a string is empty
xString: the string to verify
 returns [true] is empty, [false] is not empty</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>xString</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Left</name>
            <comment>returns a specified number of characters in a string from the left
xString: string from which the characters located at the far left are returned
xLength: integer that indicates how many characters are to be returned</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xString</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xLength</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Replace</name>
            <comment>returns a string in which a specified substring has been replaced with another substring
xString: the string in input
xFind: the substring to find
xReplacement: the replacement substring</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xString</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xFind</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xReplacement</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>DecodeBase64</name>
            <comment>decodes an encrypted string with Base64 algorithm
xString: the string to decode
 returns the decoded string</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xString</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>InStrRev2</name>
            <comment>returns the position of an occurrence of a string included in another from the end of the string, starting from a predetermined position (0 = not found)
xString1: the string where to search
xString2: the string to find
xStart: the starting position within the string search</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xString1</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xString2</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xStart</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>StringAdjustment</name>
            <comment>returns a string adjusted as required
xString: the string in input
xOutputLength: the length of string in output
xAdjustmentType: the type of adjustment (0 = left, 1 = right, 2 = middle, 3 = all trim, &gt;3 = none)
xFillCharacter: the fill character</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xString</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xOutputLength</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>xAdjustmentType</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>xFillCharacter</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Split</name>
            <comment>returns an array of substrings extracted from a string where the data were separated by a delimiter
xString: the string containing delimited data
xDelimiter: the delimiter</comment>
            <returntype>java.lang.String[]</returntype>
            <parameter>
                <name>xString</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xDelimiter</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>RTrim</name>
            <comment>removes whitespace to right
xString: the string to be trimmed
 returns the trimmed result</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xString</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>InStrRev3</name>
            <comment>returns the position of an occurrence of a string included in another from the end of the string, starting from a predetermined position and with comparison method (0 = not found)
xString1: the string where to search
xString2: the string to find
xStart: the starting position within the string search
xCompareMethod: the comparison method (0 = binary, 1 = text)</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xString1</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xString2</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xStart</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>xCompareMethod</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>String</name>
            <comment>returns a string of the same character repeated 'n' times
xNumber: the number of times to repeat
xCharacter: the character to repeat</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xNumber</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>xCharacter</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>InStr</name>
            <comment>returns the position of the first occurrence of a string within another (0 = not found)
xString1: the string where to search
xString2: the string to find</comment>
            <returntype>int</returntype>
            <parameter>
                <name>xString1</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xString2</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Equals</name>
            <comment>checks the equality between two strings (case sensitive)
xString1: the string to verify
xString2: the verification string
 returns [true] is equals, [false] not equals</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>xString1</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xString2</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ByteArrayToString</name>
            <comment>returns a string from a array of bytes
xStringArray: the array of bytes</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xStringArray</name>
                <type>byte[]</type>
            </parameter>
        </method>
        <method>
            <name>IsBlank</name>
            <comment>checks if a string is blank
xString: the string to verify
 returns [true] is blank, [false] is not blank</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>xString</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>StripAccents</name>
            <comment>returns a string without accent chars
xString: the string in input</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xString</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>FormatNumber</name>
            <comment>returns a string containing a number formatted according to the required format
xNumber: the number (double) to be formatted
xFormat: the required format</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xNumber</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>xFormat</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsNotBlank</name>
            <comment>checks if a string is not blank
xString: the string to verify
 returns [true] is not blank, [false] is blank</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>xString</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Mid2</name>
            <comment>returns a portion of a string
xString: the string in input
xStart: the position where to start to take the characters until to reach the end of the string</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>String1</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Start</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>LCase</name>
            <comment>returns a string converted to lower case
xString: the string to be converted</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xString</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>db2000.B4A.eXtrafunctions.fTIMESTRING</name>
        <shortname>fTIMESTRING</shortname>
        <owner>process</owner>
        <method>
            <name>GetTimestringSeparator</name>
            <comment>returns the timestring separator for output</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>DateTimestringDiff</name>
            <comment>returns a value corresponding to the number of time intervals between two datetimestring
xDateTimestring1: the datatimestring 1
xDateTimestring2: the datatimestring 2
xInterval: "y" = years, "m" = months, "d" days, "h" = hours, "n" = minutes, "s" = seconds, "!" = milliseconds
xAbsoluteValue: 'true' = absolute value, 'false' = none</comment>
            <returntype>long</returntype>
            <parameter>
                <name>xDateTimestring1</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xDateTimestring2</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xInterval</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xAbsoluteValue</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>HoursToTimestring</name>
            <comment>returns a timestring of the specified hours
xHours: the hours to be converted
xNrDigitsHour: the number of digits for displaying the hours field
xDigitsMinutes: = [true] the minutes field is included, otherwise nothing
xDigitsSeconds: = [true] the seconds field is included, otherwise nothing</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xHours</name>
                <type>long</type>
            </parameter>
            <parameter>
                <name>xNrDigitsHour</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>xDigitsMinutes</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>xDigitsSeconds</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>TimestringToMinutes</name>
            <comment>returns the minutes from a timestring
xTimestring1: "xHH:MM:SS" (eg. "08:25:43")
xRoundSeconds: increment of one minute if &gt;= of the timestring seconds, the seconds are set to 0</comment>
            <returntype>long</returntype>
            <parameter>
                <name>xTimestring</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xRoundSeconds</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>GetSystemTime</name>
            <comment>returns the system time ("hh:mm:ss")</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>SetTimestampFormat</name>
            <comment>sets the timestamp format
xTimestampFormat: the timestamp format (eg. "dd/MM/yyyy hh:mm:ss")</comment>
            <returntype>void</returntype>
            <parameter>
                <name>xTimestampFormat</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>TimestringToSeconds</name>
            <comment>returns the seconds from a timestring</comment>
            <returntype>long</returntype>
            <parameter>
                <name>xTimestring</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SetTimestringSeparator</name>
            <comment>sets the timestring separator for output</comment>
            <returntype>void</returntype>
            <parameter>
                <name>xTimeSeparator</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>TimestringToHours</name>
            <comment>returns the hours from a timestring
xTimestring1: "xHH:MM:SS" (eg. "13:31:27")
xRoundMinutes: increment of one hour if &gt;= of the timestring minutes, the minutes are set to 0
xRoundSeconds: increment of one minute if &gt;= of the timestring seconds, the seconds are set to 0</comment>
            <returntype>long</returntype>
            <parameter>
                <name>xTimestring</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xRoundMinutes</name>
                <type>long</type>
            </parameter>
            <parameter>
                <name>xRoundSeconds</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>GetTimestampFormat</name>
            <comment>returns the timestamp format in use (default is "dd/MM/yyyy hh:mm:ss")</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>SubTimestring</name>
            <comment>returns a timestring which is the difference (subtraction) between two timestring
xTimestring1: "xHH:MM:SS" (eg. "256:00:00")
xTimestring2: "xHH:MM:SS" (eg. "252:03:08")
xNrDigitsHour: the number of digits for displaying the hours field</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Timestring1</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Timestring2</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xNrDigitsHour</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>AddTimestring</name>
            <comment>returns a timestring which is the sum of two timestring
xTimestring1: "xHH:MM:SS" (eg. "252:03:08")
xTimestring2: "xHH:MM:SS" (eg.  "03:06:52")
xNrDigitsHour: the number of digits for displaying the hours field</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xTimestring1</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xTimestring2</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xNrDigitsHour</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SecondsToTimestring</name>
            <comment>returns a timestring of the specified seconds
xSeconds: the seconds to be converted
xNrDigitsHour: the number of digits for displaying the hours field</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xSeconds</name>
                <type>long</type>
            </parameter>
            <parameter>
                <name>xNrDigitsHour</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>MinutesToTimestring</name>
            <comment>returns a timestring of the specified minutes
xMinutes: the minutes to be converted
xNrDigitsHour: the number of digits for displaying the hours field
xDigitsSeconds: = [true] the seconds field is included, otherwise nothing</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xMinutes</name>
                <type>long</type>
            </parameter>
            <parameter>
                <name>xNrDigitsHour</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>xDigitsSeconds</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>NormalizeTimestring</name>
            <comment>returns the timestring normalized ("xHH:MM:SS")
xTimestring: the timestring to be normalized
xNrDigitsHour: the number of digits for displaying the hours field</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>xTimestring</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xNrDigitsHour</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SecondsToMinutes</name>
            <comment>returns an array of two elements (minutes and the rest of seconds)</comment>
            <returntype>long[]</returntype>
            <parameter>
                <name>xSeconds</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>IsTimestring</name>
            <comment>returns [true] if the timestring is valid, otherwise [false]</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>xTimestring</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>xCheckDigitsHour</name>
                <type>boolean</type>
            </parameter>
        </method>
    </class>
    <version>3.3</version>
    <author>Massimo Mascalchi</author>
</root>
