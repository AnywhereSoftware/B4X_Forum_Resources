Build1=Default,b4i.FFTDemo
File1=Main.bil
FileGroup1=Default Group
Group=Default Group
Library1=icore
Library2=xfft
NumberOfFiles=1
NumberOfLibraries=2
NumberOfModules=0
Version=6.47
@EndOfDesignText@
'Code module
#Region  Project Attributes 
	#ApplicationLabel: FFTDemo
	#Version: 1.0.0 
	'Orientation possible values: Portrait, LandscapeLeft, LandscapeRight and PortraitUpsideDown
	#iPhoneOrientations: LandscapeLeft, LandscapeRight
	#iPadOrientations: LandscapeLeft, LandscapeRight
	#Target: iPhone, iPad
	#ATSEnabled: True
	#MinVersion: 8
#End Region

Sub Process_Globals
	'These global variables will be declared once when the application starts.
	'Public variables can be accessed from all modules.
	Public App As Application
	Public NavControl As NavigationController
	Private Page1 As Page

	Private btnWindow As Button
'	Private cbxNbSamples As ComboBox
	
	Private FFT1 As xFFT
	Private N, N_21 As Int
	Private TimeReal(), TimeRealINV(), FFTMagnitude(), FFTPhase(), FFTReal(), FFTImag() As Double
	Private TimeSignalIndex = 2 As Int
	Private TimeSignalText(6) As String
	TimeSignalText(0) = "pure sine 20 periods"
	TimeSignalText(1) = "pure cosine 20 periods"
	TimeSignalText(2) = "4 sines	10, 20, 30, 100 periods"
	TimeSignalText(3) = "sine 20.5 periods"
	TimeSignalText(4) = "sine 20 periods damped"
	TimeSignalText(5) = "sine 50 periods modulated 10 periods"
	
	'variables Graph
	Private pnlToolBox As Panel
	Private pnlGraph As Panel
	Private cvsGraph As Canvas
	Private rectGraphT, rectGraphF As Rect
	Private btnSamples As Button
	
	Private GraphX0, GraphTX1, GraphFX1, GraphdX, Graph2dX, GraphTW, GraphFW, GraphY0, GraphBottom, GraphTop, GraphH, GraphLineWidth As Int
	Private GraphMin, GraphMax, GraphMaxMin, GraphScale As Double
	Private FontTitle, FontScale As Font
End Sub

Private Sub Application_Start (Nav As NavigationController)
	NavControl = Nav
	Page1.Initialize("Page1")
	Page1.Title = "xFFT Demo"
	Page1.RootPanel.LoadLayout("Main")
	Page1.RootPanel.Color = Colors.White
	NavControl.ShowPage(Page1)

	FFT1.Initialize
	FFT1.ModeDegrees = True
End Sub

Private Sub Page1_Resize(Width As Int, Height As Int)
	If Width >= 1040 Then
		pnlGraph.Width = 1040
	End If
	cvsGraph.Initialize(pnlGraph)

	InitNbSamples
	cbxNbSamples_SelectedIndexChanged(0, 512)
	
	GraphInit
	
	DrawTime(TimeReal, "Time")
	
	'	Private t1 = DateTime.Now As Long
	FFTCalc
	'	Log((DateTime.Now - t1))
	FFTCalcINV
End Sub

Private Sub Application_Background
	
End Sub

Private Sub FFTCalc
	FFTMagnitude = FFT1.Forward(TimeReal)
	FFTPhase = FFT1.Phase
	FFTReal = FFT1.Real
	FFTImag = FFT1.Imag
End Sub

Private Sub FFTCalcINV
	TimeRealINV = FFT1.Inverse(FFTReal, FFTImag)
	DrawTime(TimeRealINV, "Time inverse")
End Sub

Private Sub InitNbSamples
'	cbxNbSamples.Items.AddAll(Array As Int(1024, 512, 256))
'	cbxNbSamples.SelectedIndex = 0
End Sub

Private Sub TimeInit(Index As Int)
	Private i As Int
	Private w1, w2, w3, w4 As Double

	'	N = 512
	N_21 = N / 2 + 1
	
	Private TimeReal(N) As Double
	
	TimeSignalIndex = Index

	Select Index
		Case 0	' pure sine 20 periods
			w1 = 7200 / N
			For i = 0 To N - 1
				TimeReal(i) = 10 * SinD(w1 * i)
			Next
		Case 1	'pure cosine 20 periods
			w1 = 7200 / N
			For i = 0 To N - 1
				TimeReal(i) = 10 * CosD(w1 * i)
			Next
		Case 2	'4 sines	10, 20, 50, 100 periods
			w1 = 3600 / N
			w2 = 7200 / N
			w3 = 10800 / N
			w4 = 36000 / N
			For i = 0 To N - 1
				TimeReal(i) = 5 + 10 * SinD(w1 * i + 60) + 5 * SinD(w2 * i) + 7 * SinD(w3 * i) + 3 * SinD(w4 * i)
			Next
		Case 3	'sine 20.5 periods
			w1 = 7380 / N
			For i = 0 To N - 1
				TimeReal(i) = 10 * SinD(w1 * i)
			Next
		Case 4	'sine 20 periods damped
			w1 = 7200 / N
			For i = 0 To N - 1
				TimeReal(i) = 10 * SinD(w1 * i) * Power(cE, - 0.003 * i)
			Next
		Case 5	'sine 50 periods modulated 10 periods
			w1 = 36000 / N
			w2 = 3600 / N
			For i = 0 To N - 1
				TimeReal(i) = 10 * SinD(w1 * i) * (1 - 0.8 * (1 - SinD(w2 * i)))' * Power(cE, -0.005 * i)
			Next
	End Select
End Sub

Private Sub GraphInit
	If GetDeviceLayoutValues.DeviceApproximateScreenSize < 6 Then
		FontTitle = Font.CreateNew2("Arial", 16)
		FontScale = Font.CreateNew2("Arial", 11)
	Else
		FontTitle = Font.CreateNew2("Arial", 18)
		FontScale = Font.CreateNew2("Arial", 14)
	End If
	
	GraphLineWidth = 1
	GraphX0 = 40dip
	GraphdX = Floor((pnlGraph.Width - GraphX0 - 30dip)	/ N)
	Graph2dX = 2 * GraphdX
	GraphTW = GraphdX * N
	GraphTX1 = GraphX0 + GraphTW
	GraphFW = Graph2dX * N_21
	GraphFX1 = GraphX0 + GraphFW
	
	GraphTop = 35
	GraphH = pnlGraph.Height - GraphTop - 20
	GraphBottom = GraphTop + GraphH
	rectGraphT.Initialize(GraphX0, GraphTop, GraphTX1, GraphBottom)
	rectGraphF.Initialize(GraphX0, GraphTop, GraphFX1, GraphBottom)
End Sub

Private Sub DrawTime(TimeSignal() As Double, Title As String)
	Private i As Int
	Private x0, x1, y0, y1, y2 As Int
	
	cvsGraph.DrawColor(Colors.White)
	cvsGraph.DrawRect(rectGraphT, Colors.Black, False, GraphLineWidth)
	
	GraphMin = TimeSignal(0)
	GraphMax = TimeSignal(0)
	For i = 1 To N - 1
		GraphMin = Min(GraphMin, TimeSignal(i))
		GraphMax = Max(GraphMax, TimeSignal(i))
	Next
	
	GraphMaxMin = GraphMax - GraphMin
	GraphScale = GraphH / GraphMaxMin
	GraphY0 = GraphTop + GraphScale * GraphMax

	x0 = GraphX0
	y0 = GraphY0 - GraphScale * TimeSignal(0)
	For i = 1 To N - 1
		x1 = x0 + GraphdX
		y1 = GraphY0 - GraphScale * TimeSignal(i)
		cvsGraph.DrawLine(x0, y0, x1, y1, Colors.Blue, GraphLineWidth)
		x0 = x1
		y0 = y1
	Next
	
	cvsGraph.DrawLine(GraphX0, GraphY0, GraphTX1, GraphY0, Colors.Blue, GraphLineWidth)
	
	'Draw title
	cvsGraph.DrawText(Title, GraphX0, GraphTop - 8dip, FontTitle, Colors.Black, "LEFT")
	cvsGraph.DrawText(TimeSignalText(TimeSignalIndex), GraphTX1, GraphTop - 8dip, FontScale, Colors.Black, "RIGHT")

	'Draw scales
	cvsGraph.DrawText(NumberFormat2(GraphMax, 1, 2, 0, False), GraphX0 - 4, GraphTop + 5, FontScale, Colors.Black, "RIGHT")
	cvsGraph.DrawText(NumberFormat2(GraphMin, 1, 2, 0, False), GraphX0 - 4, GraphBottom + 5, FontScale, Colors.Black, "RIGHT")
	If GraphY0 < GraphBottom - 5dip And GraphY0 > GraphTop + 5dip Then
		cvsGraph.DrawText("0", GraphX0 - 4, GraphY0 + 5, FontScale, Colors.Black, "RIGHT")
	End If

	y0 = GraphBottom
	y1 = y0 + 4
	y2 = y0 + 7
	For i = 0 To N - 1 Step 10
		x0 = GraphX0 + i * GraphdX
		cvsGraph.DrawLine(x0, y0, x0, y1, Colors.Black, GraphLineWidth)
		If i Mod 50 = 0 Then
			cvsGraph.DrawLine(x0, y0, x0, y2, Colors.Black, GraphLineWidth)
			If i Mod 100 = 0 Then
				cvsGraph.DrawText(i, x0, y2 + 15, FontScale, Colors.Black, "CENTER")
			End If
		End If
	Next
	
	cvsGraph.Refresh
	
	If GetDeviceLayoutValues.DeviceApproximateScreenSize < 6 Then
		pnlToolBox.Visible = False
	End If
End Sub

Private Sub DrawFFT(FFTSignal() As Double, Title As String)
	Private i As Int
	Private x0, y0, y1, y2 As Int

	cvsGraph.DrawColor(Colors.White)
	cvsGraph.DrawRect(rectGraphF, Colors.Black, False, GraphLineWidth)
	
	GraphMin = FFTSignal(0)
	GraphMax = FFTSignal(0)
	For i = 1 To N_21 - 1
		GraphMin = Min(GraphMin, FFTSignal(i))
		GraphMax = Max(GraphMax, FFTSignal(i))
	Next
	
	If Abs(GraphMin) < 1e-12 And Abs(GraphMax) < 1e-12 Then
		GraphMax = 1
		GraphMin = -1
	End If
	
	GraphMaxMin = GraphMax - GraphMin
	If GraphMaxMin = 0 Then
		GraphMaxMin = 1
	End If
	GraphScale = GraphH / GraphMaxMin
	GraphY0 = GraphTop + GraphScale * GraphMax

	x0 = GraphX0
	If GraphMin = 0 Then
		GraphY0 = GraphBottom
	Else
		GraphY0 = GraphTop + GraphScale * GraphMax
	End If
	For i = 0 To N_21 - 1
		x0 = GraphX0 + i * Graph2dX
		y0 = GraphY0
		y1 = GraphY0 - GraphScale * FFTSignal(i)
		If y1 < GraphY0 Then
			y0 = y1
			y1 = GraphY0
		End If
		Private rectSample As Rect
		rectSample.Initialize(x0, y0, x0 + Graph2dX, y1)
		cvsGraph.DrawRect(rectSample, Colors.Blue, True, 1)
	Next
	
	cvsGraph.DrawLine(GraphX0, GraphY0, GraphFX1, GraphY0, Colors.Blue, GraphLineWidth)
	
	'Draw title
	cvsGraph.DrawText(Title, GraphX0, GraphTop - 8, FontTitle, Colors.Black, "LEFT")
	cvsGraph.DrawText(TimeSignalText(TimeSignalIndex), GraphFX1, GraphTop - 8dip, FontScale, Colors.Black, "RIGHT")

	'Draw scales
	cvsGraph.DrawText(NumberFormat2(GraphMax, 1, 2, 0, False), GraphX0 - 4, GraphTop + 5, FontScale, Colors.Black, "RIGHT")
	cvsGraph.DrawText(NumberFormat2(GraphMin, 1, 2, 0, False), GraphX0 - 4, GraphBottom + 5, FontScale, Colors.Black, "RIGHT")
	If GraphY0 < GraphBottom - 5dip And GraphY0 > GraphTop + 5dip Then
		cvsGraph.DrawText("0", GraphX0 - 4, GraphY0 + 5, FontScale, Colors.Black, "RIGHT")
	End If

	y0 = GraphBottom
	y1 = y0 + 4
	y2 = y0 + 7
	For i = 0 To N_21 - 1 Step 10
		x0 = GraphX0 + GraphdX + i * Graph2dX
		cvsGraph.DrawLine(x0, y0, x0, y1, Colors.Black, GraphLineWidth)
		If i Mod 50 = 0 Then
			cvsGraph.DrawLine(x0, y0, x0, y2, Colors.Black, GraphLineWidth)
			If i Mod 100 = 0 Then
				cvsGraph.DrawText(i, x0, y2 + 15, FontScale, Colors.Black, "CENTER")
			End If
		End If
	Next

	cvsGraph.Refresh

	If GetDeviceLayoutValues.DeviceApproximateScreenSize < 6 Then
		pnlToolBox.Visible = False
	End If
End Sub

Private Sub btnDrawTime_Click
	DrawTime(TimeReal, "Time")
End Sub

Private Sub btnDrawTimeINV_Click
	DrawTime(TimeRealINV, "Time inverse")
End Sub

Private Sub btnDrawFFTMag_Click
	DrawFFT(FFTMagnitude, "FFT Magnitude")
End Sub

Private Sub btnDrawFFTPhase_Click
	DrawFFT(FFTPhase, "FFT Phase")
End Sub

Private Sub btnDrawFFTReal_Click
	DrawFFT(FFTReal, "FFT Real")
End Sub

Private Sub btnDrawFFTImag_Click
	DrawFFT(FFTImag, "FFT Imaginary")
End Sub

Private Sub btnCalcFFTForward_Click
	FFTCalc
	btnDrawFFTMag_Click
End Sub

Private Sub btnCalcFFTInverse_Click
	FFTCalcINV
	btnDrawTimeINV_Click
End Sub

Private Sub btnWindow_Click
	If FFT1.Window = "NONE" Then
		FFT1.Window = "Hann"
		btnWindow.Text = "Hann"
	Else
		FFT1.Window = "NONE"
		btnWindow.Text = "NONE"
	End If
	FFTCalc
	DrawFFT(FFTMagnitude, "FFT Magnitude")
End Sub

Private Sub btnTimeSignal_Click
	Private btn As Button
	Private Tag As Int
	
	btn = Sender
	Tag = btn.Tag
	
	TimeInit(Tag)
	FFTCalc
	DrawTime(TimeReal, "Time")
End Sub

Private Sub pnlGraph_Click
	If GetDeviceLayoutValues.DeviceApproximateScreenSize < 6 Then
		pnlToolBox.Visible = Not(pnlToolBox.Visible)
	End If
End Sub

Sub cbxNbSamples_SelectedIndexChanged(Index As Int, Value As Object)
	N = Value
	TimeInit(TimeSignalIndex)
	GraphInit
	FFTCalc
	DrawTime(TimeReal, "Time")
End Sub

Private Sub btnSamples_Click
	If btnSamples.Text = "512" Then
		N = 256
		btnSamples.Text = "256"	
	Else
		N = 512
		btnSamples.Text = "512"
	End If
	TimeInit(TimeSignalIndex)
	GraphInit
	FFTCalc
	DrawTime(TimeReal, "Time")
End Sub