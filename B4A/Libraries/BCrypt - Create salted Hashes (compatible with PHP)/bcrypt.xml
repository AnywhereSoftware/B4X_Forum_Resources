<?xml version="1.0" encoding="UTF-8"?>
<root>
    <doclet-version-NOT-library-version>1.07</doclet-version-NOT-library-version>
    <class>
        <name>de.donmanfred.BCryptwrapper</name>
        <shortname>BCrypt</shortname>
        <owner>process</owner>
        <method>
            <name>checkpw</name>
            <comment>Check that a plaintext password matches a previously hashed
 one
plaintext: the plaintext password to verify
hashed: the previously-hashed password
Return type: @return:true if the passwords match, false otherwise</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>plaintext</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>hashed</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>hashpw</name>
            <comment>Hash a password using the OpenBSD bcrypt scheme
 password	the password to hash
 salt	the salt to hash with (perhaps generated
 using BCrypt.gensalt)
 returns the hashed password</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>password</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>salt</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>gensalt3</name>
            <comment>Generate a salt for use with the BCrypt.hashpw() method
 log_rounds	the log2 of the number of rounds of
 hashing to apply - the work factor therefore increases as
 2**log_rounds.
 random		an instance of SecureRandom to use
 returns	an encoded salt value</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>log_rounds</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>random</name>
                <type>java.security.SecureRandom</type>
            </parameter>
        </method>
        <method>
            <name>gensalt</name>
            <comment>Generate a salt for use with the BCrypt.hashpw() method,
 selecting a reasonable default for the number of hashing
 rounds to apply
 returns	an encoded salt value</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>gensalt2</name>
            <comment>Generate a salt for use with the BCrypt.hashpw() method
 log_rounds	the log2 of the number of rounds of
 hashing to apply - the work factor therefore increases as
 2**log_rounds.
 returns	an encoded salt value</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>log_rounds</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
    </class>
    <version>0.01</version>
    <comment>/**
 BCrypt implements OpenBSD-style Blowfish password hashing using
 the scheme described in "A Future-Adaptable Password Scheme" by
 Niels Provos and David Mazieres.
 
 This password hashing system tries to thwart off-line password
 cracking using a computationally-intensive hashing algorithm,
 based on Bruce Schneier's Blowfish cipher. The work factor of
 the algorithm is parameterised, so it can be increased as
 computers get faster.
 
 Usage is really simple. To hash a password for the first time,
 call the hashpw method with a random salt</comment>
    <author>DonManfred</author>
    <dependsOn>jbcrypt-0.4</dependsOn>
</root>
