B4J=true
Group=Default Group
ModulesStructureVersion=1
Type=Class
Version=6.51
@EndOfDesignText@
Sub Class_Globals
	'Private fx As JFX
	Private isInitialized As Boolean
	Private bc As ByteConverter
	Private modeObj As Object
End Sub

'Notes:
'Requirements:
'	Extra Forum Libraries:
'		Encrytion 1.1
'		Source: https://www.b4x.com/android/forum/threads/base64-and-encryption-library.6839/
'		ByteConverter 1.1
'		Source: https://www.b4x.com/android/forum/threads/b4x-bytesbuilder-simplifies-working-with-arrays-of-bytes.89008/#content
'	B4J:
'		Standard Libraries:
'			jStringUtils
'			JavaObject
'			B4XCollections
'		External Libraries:
'	 		#AdditionalJar: bcprov-jdk15on-160
'			Library can be found here: https://www.bouncycastle.org/download/bcprov-jdk15on-160.jar
'	B4A:
'		Standard Libraries:
'			StringUtils
'			JavaObject
'		External Libraries: Only if transformations are not supported by the version Android you
'			are targeting. Otherwise, should not be necessary.
'			#AdditionalJar: core-1.58.0.0
'			#AdditionalJar: prov-1.58.0.0
'			Libaries can be found here: https://rtyley.github.io/spongycastle/

'For modes and paddings see https://www.bouncycastle.org/specifications.html and scroll to section 6.2 Algorithms

'https://stackoverflow.com/a/10870220
'I tried to follow the specs given in that link, including:
'	Zero length messages are encrypted to zero length ciphertext.
'	ECB mode uses ISO/IEC 9797-1 method 2 padding (https://en.wikipedia.org/wiki/Padding_(cryptography)#ISO/IEC_7816-4).
'	CBC mode uses CTS (https://en.wikipedia.org/wiki/Ciphertext_stealing).
'	If using CBC, if cipherText/plainText are < 16 bytes, CFB-8 is used instead.
'	If using CBC, autogenerated nonce is used to populate IV. This nonce is prepended to the ciphertext.

'
Public Sub Initialize(keySize As Int, password As String, mode As String)
	isInitialized = False
	'https://people.eecs.berkeley.edu/~jonah/bc/org/bouncycastle/jce/provider/BouncyCastleProvider.html
	'Add Bouncy Castle as a Security Provider
	'https://rtyley.github.io/spongycastle/
	'How to add Spongy Castle
	'https://docs.oracle.com/javase/8/docs/api/java/security/Security.html#addProvider-java.security.Provider-
	'the addProvider method can be called multiple times without ill effects
	'https://developer.android.com/reference/java/security/Security#insertProviderAt(java.security.Provider,%20int)
	'same for insertProviderAt
	Dim joSecurity As JavaObject
	joSecurity.InitializeStatic("java.security.Security")
#if B4J
	Dim jo As JavaObject
	jo.InitializeNewInstance("org.bouncycastle.jce.provider.BouncyCastleProvider", Null)
	joSecurity.RunMethod("addProvider", Array As Object (jo))
#else if B4A
' Seems to just work as of Android 5.1 (oldest version I have)
'	Dim jo As JavaObject
'	jo.InitializeNewInstance("org.spongycastle.jce.provider.BouncyCastleProvider", Null)
'	joSecurity.RunMethod("insertProviderAt", Array As Object (jo, 1))
#else
	LOG("ERROR: UNSUPPORTED PLATFORM")
	Return
#End If

	Dim keyBytes() As Byte
	If keySize = 128 Or keySize = 192 Or keySize = 256 Then
		keyBytes = MakeKeyBytes(keySize, password)
	Else
		Log($"ERROR: Unsupported keysize: ${keySize}"$)
		Return		
	End If
	If mode.EqualsIgnoreCase("ECB") Then
		Dim ECBInstance As LB3AESECB
		ECBInstance.Initialize(keyBytes)
		modeObj = ECBInstance
	Else if mode.EqualsIgnoreCase("CBC") Then
		Dim CBCInstance As LB3AESCBC
		CBCInstance.Initialize(keyBytes)
		modeObj = CBCInstance
	Else
		Log($"ERROR: Unsupported chain mode: ${mode.ToUpperCase}"$)
		Return
	End If
	isInitialized = True
End Sub

Sub DecryptString(cipherText As String) As String
	Dim plainText As String = ""
	If isInitialized Then
		plainText = CallSub2(modeObj, "DecryptString", cipherText)
	Else
		Log("ERROR: Not initialized!")
	End If
	Return plainText
End Sub

Sub EncryptString(plainText As String) As String
	Dim cipherText As String = ""
	If isInitialized Then
		cipherText = CallSub2(modeObj, "EncryptString", plainText)
	Else
		Log("$ERROR: Not initialized!")
	End If
	Return cipherText
End Sub

'Private sub that should be called with a correct key size. No check is performed here
Private Sub MakeKeyBytes(keySize As Int, password As String) As Byte()
	'If the password is keySize / 8 bytes or greater in length, just truncuate password to proper byte size
	'If password is less than keySize /8 bytes in length, create a SHA1 digest of the password
	' (20 bytes), and concatenate the digest and truncuate to proper byte size.
	Dim keyBytes(keySize / 8) As Byte
	Dim passwordBytes() As Byte = password.GetBytes("UTF8")
	If passwordBytes.Length >= keyBytes.Length Then
		bc.ArrayCopy(passwordBytes, 0, keyBytes, 0, keyBytes.Length)
	Else
		Dim md As MessageDigest
		Dim hash() As Byte = md.GetMessageDigest(passwordBytes, "SHA1")
		Dim offset As Int = 0
		Do While offset < keyBytes.Length
			If offset + hash.Length < keyBytes.Length Then
				bc.ArrayCopy(hash, 0, keyBytes, offset, hash.Length)
			Else
				bc.ArrayCopy(hash, 0, keyBytes, offset, keyBytes.Length - offset)
			End If
			offset = offset + hash.Length
		Loop
	End If
	
	Return keyBytes
End Sub