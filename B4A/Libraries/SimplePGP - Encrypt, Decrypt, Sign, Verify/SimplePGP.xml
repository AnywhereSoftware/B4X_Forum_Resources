<?xml version="1.0" encoding="UTF-8"?>
<root>
    <doclet-version-NOT-library-version>1.05</doclet-version-NOT-library-version>
    <class>
        <name>de.donmanfred.PGPKeyPairGeneratorwrapper</name>
        <shortname>PGPKeyPairGenerator</shortname>
        <owner>process</owner>
        <method>
            <name>generateKeyPair2</name>
            <comment>
userId: the user id for the PGP key pair
password: the password used to secure the secret (private) key
keySize: the custom key size
publicKey: the target stream for the public key
secrectKey: the target stream for the secret (private) key
Return type: @return:</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>userId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>password</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>keySize</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>publicKey</name>
                <type>java.io.OutputStream</type>
            </parameter>
            <parameter>
                <name>secrectKey</name>
                <type>java.io.OutputStream</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>generateKeyPair</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>userId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>password</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>publicKey</name>
                <type>java.io.OutputStream</type>
            </parameter>
            <parameter>
                <name>secrectKey</name>
                <type>java.io.OutputStream</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>de.donmanfred.PGPMessageEncryptorwrapper</name>
        <shortname>PGPMessageEncryptor</shortname>
        <owner>process</owner>
        <method>
            <name>init</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>params</name>
                <type>org.spongycastle.crypto.CipherParameters</type>
            </parameter>
        </method>
        <method>
            <name>messageDecrypt</name>
            <comment></comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>arg0</name>
                <type>byte[]</type>
            </parameter>
        </method>
        <method>
            <name>encrypt</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>publicKeyOfRecipient</name>
                <type>java.io.InputStream</type>
            </parameter>
            <parameter>
                <name>inputDataName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>plainInputData</name>
                <type>java.io.InputStream</type>
            </parameter>
            <parameter>
                <name>target</name>
                <type>java.io.OutputStream</type>
            </parameter>
        </method>
        <method>
            <name>messageEncrypt</name>
            <comment></comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>arg0</name>
                <type>byte[]</type>
            </parameter>
        </method>
        <method>
            <name>decrypt</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>passwordOfReceiversPrivateKey</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>privateKeyOfReceiver</name>
                <type>java.io.InputStream</type>
            </parameter>
            <parameter>
                <name>encryptedData</name>
                <type>java.io.InputStream</type>
            </parameter>
            <parameter>
                <name>target</name>
                <type>java.io.OutputStream</type>
            </parameter>
        </method>
        <method>
            <name>decrypt2</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>passwordOfReceiversPrivateKey</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>privateKeyOfReceiver</name>
                <type>java.io.InputStream</type>
            </parameter>
            <parameter>
                <name>publicKeyOfSender</name>
                <type>java.io.InputStream</type>
            </parameter>
            <parameter>
                <name>encryptedData</name>
                <type>java.io.InputStream</type>
            </parameter>
            <parameter>
                <name>target</name>
                <type>java.io.OutputStream</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>encrypt2</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>publicKeyOfRecipient</name>
                <type>java.io.InputStream</type>
            </parameter>
            <parameter>
                <name>privateKeyOfSender</name>
                <type>java.io.InputStream</type>
            </parameter>
            <parameter>
                <name>userIdOfSender</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>passwordOfSendersPrivateKey</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>plainInputData</name>
                <type>java.io.InputStream</type>
            </parameter>
            <parameter>
                <name>inputDataName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>target</name>
                <type>java.io.OutputStream</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>de.donmanfred.PGPMessageSignerwrapper</name>
        <shortname>PGPMessageSigner</shortname>
        <owner>process</owner>
        <method>
            <name>signMessage</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>privateKeyOfSender</name>
                <type>java.io.InputStream</type>
            </parameter>
            <parameter>
                <name>userIdForPrivateKey</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>passwordOfPrivateKey</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>message</name>
                <type>java.io.InputStream</type>
            </parameter>
            <parameter>
                <name>signature</name>
                <type>java.io.OutputStream</type>
            </parameter>
        </method>
        <method>
            <name>verifyMessage</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>publicKeyOfSender</name>
                <type>java.io.InputStream</type>
            </parameter>
            <parameter>
                <name>message</name>
                <type>java.io.InputStream</type>
            </parameter>
            <parameter>
                <name>signatureStream</name>
                <type>java.io.InputStream</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>UnlimitedEncryptionStrength</name>
            <parameter>
                <name>unlimitedEncryptionStrength</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>CompressionAlgorithm</name>
            <parameter>
                <name>compressionAlgorithm</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
    </class>
    <version>1.0</version>
    <comment>&lt;link&gt;...|http://www.b4x.com&lt;/link&gt;</comment>
    <author>DonManfred (wrapper)</author>
</root>
