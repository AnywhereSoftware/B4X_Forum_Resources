Build1=Default,b4a.example.mediaprojectionscreenshot
Group=Default Group
IconFile=
Library1=core
Library2=mediaprojectionscreenshot
Library3=javaobject
Library4=runtimepermissions
Library5=phone
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: https://www.b4x.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="21" android:targetSdkVersion="26"/>~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~CreateResourceFromFile(Macro, Themes.DarkTheme)~\n~'End of default text.~\n~
Module1=Starter
Module2=others
NumberOfFiles=0
NumberOfLibraries=5
NumberOfModules=2
Version=9.5
@EndOfDesignText@
#Region  Project Attributes 
	#ApplicationLabel: MediaProjectionScreenshot
	#VersionCode: 1
	#VersionName: 0.14
	'SupportedOrientations possible values: unspecified, landscape or portrait.
	#SupportedOrientations: unspecified
	#CanInstallToExternalStorage: False
#End Region

#Region  Activity Attributes 
	#FullScreen: true
	#IncludeTitle: false
#End Region

Sub Process_Globals
	'These global variables will be declared once when the application starts.
	'These variables can be accessed from all modules.	
End Sub

Sub Globals
	'These global variables will be redeclared each time the activity is created.
	'These variables can only be accessed from this module.
	
End Sub

Sub Activity_Create(FirstTime As Boolean)
	'Do not forget to load the layout file created with the visual designer. For example:
	'Activity.LoadLayout("Layout1")
'	others.RealWidth = GetRealWidth
'	others.RealHeight = GetRealHeight
'	others.SoftButtonsBarHeight = GetSoftButtonsBarHeight
	
	Dim rp As RuntimePermissions
	rp.CheckAndRequest(rp.PERMISSION_WRITE_EXTERNAL_STORAGE)
	Wait for Activity_PermissionResult (Permission As String, Result As Boolean)
	If Result = False Then
		Msgbox("No permission !", "Stop:")
		Return
	End If
	Get_Permission
	Msgbox("Start app again to see", "See result:")
End Sub

Sub Activity_Resume
If Starter.bmp.IsInitialized Then
	Activity.SetBackgroundImage(Starter.bmp)
End If
End Sub

Sub Get_Permission
	Starter.mp.AskforPermission	'manual permission from an user to make the screen shot
End Sub

Sub mp_permissiongranted
	Log("permissiongranted")
	Dim jo As JavaObject
	jo.InitializeContext
	jo.RunMethod("moveTaskToBack", Array(True)) 'hide activity
	CallSub(Starter, "Start_Working")
End Sub

'optional, not required
Sub GetRealWidth As Int
	Dim p As Phone
	If p.SdkVersion >= 17 Then
		Dim jo As JavaObject
		jo = jo.InitializeContext.RunMethodJO("getWindowManager", Null).RunMethod("getDefaultDisplay", Null)
		Dim metrics As JavaObject
		metrics.InitializeNewInstance("android.util.DisplayMetrics", Null)
		jo.RunMethod("getRealMetrics", Array(metrics))
		Return metrics.GetField("widthPixels")
	Else
		Return GetDeviceLayoutValues.Width
	End If
End Sub
'optional, not required
Sub GetRealHeight As Int
	Dim p As Phone
	If p.SdkVersion >= 17 Then
		Dim jo As JavaObject
		jo = jo.InitializeContext.RunMethodJO("getWindowManager", Null).RunMethod("getDefaultDisplay", Null)
		Dim metrics As JavaObject
		metrics.InitializeNewInstance("android.util.DisplayMetrics", Null)
		jo.RunMethod("getRealMetrics", Array(metrics))
		Return metrics.GetField("heightPixels")
	Else
		Return GetDeviceLayoutValues.Height
	End If
End Sub
'optional, not required
Sub GetSoftButtonsBarHeight As Int
	Dim p As Phone
	If p.SdkVersion >= 17 Then
		Dim jo As JavaObject
		jo = jo.InitializeContext.RunMethodJO("getWindowManager", Null).RunMethod("getDefaultDisplay", Null)
		Dim metrics As JavaObject
		metrics.InitializeNewInstance("android.util.DisplayMetrics", Null)
		jo.RunMethod("getRealMetrics", Array(metrics))
		Dim realHeight As Int = metrics.GetField("heightPixels")
		jo.RunMethod("getMetrics", Array(metrics))
		Dim usableHeight As Int = metrics.GetField("heightPixels")
		If realHeight > usableHeight Then
			Return (realHeight - usableHeight)
		Else
			Return 0
		End If
	Else
		Return 0
	End If
End Sub