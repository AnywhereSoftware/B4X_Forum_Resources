<?xml version="1.0" encoding="UTF-8"?>
<root>
    <doclet-version-NOT-library-version>1.07</doclet-version-NOT-library-version>
    <class>
        <name>anywheresoftware.b4a.gnss.GNSS</name>
        <shortname>GNSS</shortname>
        <comment>The main object that raises the GPS and GNSS events.</comment>
        <owner CheckForReinitialize="true">process</owner>
        <event>LocationChanged (Location1 As Location)</event>
        <event>UserEnabled (Enabled As Boolean)</event>
        <event>GpsStatus (Satellites As List)</event>
        <event>GnssStatus (SatelliteInfo As GnssStatus) ' Only raised for API 24 and later devices.</event>
        <event>NMEA (TimeStamp As Long, Sentence As String)</event>
        <permission>android.permission.ACCESS_FINE_LOCATION</permission>
        <method>
            <name RaisesSynchronousEvents="true">Start</name>
            <comment>Starts listening for events.
MinimumTime - The shortest period (measured in milliseconds) between events. Pass 0 for highest frequency.
MinimumDistance - The shortest change in distance (measured in meters) for which to raise events. Pass 0 for highest frequency.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>MinimumTime</name>
                <type>long</type>
            </parameter>
            <parameter>
                <name>MinimumDistance</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>Stop</name>
            <comment>Stops listening to the GNSS. You will usually want to call Stop inside Sub Activity_Pause.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>LocationSettingsIntent</name>
            <returntype>android.content.Intent</returntype>
            <comment>Returns the intent that is used to show the global locations settings.
Example:&lt;code&gt;
   If GNSS1.GNSSEnabled = False Then StartActivity(GNSS1.LocationSettingsIntent)&lt;/code&gt;</comment>
        </property>
        <property>
            <name>GNSSEnabled</name>
            <returntype>boolean</returntype>
            <comment>Tests whether the user has enabled GNSS.
This is identical to GPSEnabled and provided to match the new GNSS class name.</comment>
        </property>
        <property>
            <name>GPSEnabled</name>
            <returntype>boolean</returntype>
            <comment>Tests whether the user has enabled GNSS.
This is identical to GNSSEnabled which is provided to match the new GNSS class name.
This property is retained for backward compatibility with the original GPS library.</comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.b4a.gnss.GnssStatusWrapper</name>
        <shortname>GnssStatus</shortname>
        <comment>The GnssStatus object holds the information for all the available GNSS satellites.
A single GnssStatus object is passed to the GnssStatus event.
GnssStatus holds information on all the visible satellites of all constallations.
Presenting the information in this way is more efficient than entirely parsing every satelllite into
   a separate object as there can be many satellites available from several constellations.
This way only the information needed by the application needs to to be accessed when it is required

This is different to the GPSSatellite object which holds only the information for a single satellite.
A List of GPSSatellite objects for each available satellite is passed to the GpsStatus event.
Each GPSSatellite holds information for one satellite which can be from any available constellation.</comment>
        <objectwrapper>android.location.GnssStatus</objectwrapper>
        <owner>process</owner>
        <method>
            <name>UsedInFix</name>
            <comment>Tests whether the satellite at the specified index was used to calculate the most recent fix.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>satIndex</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>ConstellationType</name>
            <comment>Retrieves the constellation type of the satellite at the specified index. 
Compare this with one of the CONSTELLATION constants to identify the constellation.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>satIndex</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Cn0DbHz</name>
            <comment>Retrieves the carrier-to-noise density in dB-Hz at the antenna of the satellite at the specified index.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>satIndex</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Elevation</name>
            <comment>Returns the satellite elevation in degrees (0 - 90).</comment>
            <returntype>float</returntype>
            <parameter>
                <name>satIndex</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Azimuth</name>
            <comment>Returns the satellite azimuth in degrees (0 - 360).</comment>
            <returntype>float</returntype>
            <parameter>
                <name>satIndex</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>HasEphemerisData</name>
            <comment>Reports whether the satellite at the specified index has ephemeris data.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>satIndex</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SatelliteCount</name>
            <comment>Gets the total number of satellites in the satellite list.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>Svid</name>
            <comment>Gets the identification number for the satellite at the specific index.
This svid is the pseudo-random number for most constellations. It is FCN and OSN number for Glonass.
The distinction is made by looking at ConstellationType. Expected values are in the range of:
GPS: 1-32
SBAS: 120-151, 183-192
GLONASS: One of: OSN or FCN+100
   1-24 as the orbital slot number (OSN) (preferred, if known)
   93-106 as the frequency channel number (FCN) (-7 to +6) plus 100. i.e FCN of -7 is 93, 0 is 100, and +6 is 106
QZSS: 193-200
Galileo: 1-36
Beidou: 1-37</comment>
            <returntype>int</returntype>
            <parameter>
                <name>satIndex</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>HasCarrierFrequencyHz</name>
            <comment>Reports whether a valid CarrierFrequency is available for the satellite at the specified index.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>satIndex</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>CarrierFrequencyHz</name>
            <comment>Gets the carrier frequency of the signal tracked. 
For example it can be the GPS central frequency
   L1 = 1575.45 MHz, L2 = 1227.60 MHz, L5 = 1176.45 MHz, varying GLO channels, etc.
   If the field is not set, it is the primary common use central frequency, e.g. L1 = 1575.45 MHz for GPS.
For an L1, L5 receiver tracking a satellite on L1 and L5 at the same time, two measurements will be reported for this same satellite,
   in one all the values related to L1 will be filled, and in the other all of the values related to L5 will be filled.
The value is only available if hasCarrierFrequencyHz(int) is true.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>satIndex</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>HasAlmanacData</name>
            <comment>Reports whether the satellite at the specified index has almanac data.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>satIndex</name>
                <type>int</type>
            </parameter>
        </method>
        <property>
            <name>CONSTELLATION_BEIDOU</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>CONSTELLATION_SBAS</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>CONSTELLATION_GPS</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>CONSTELLATION_GALILEO</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>CONSTELLATION_GLONASS</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>CONSTELLATION_QZSS</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>CONSTELLATION_UNKNOWN</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.b4a.gnss.GpsSatelliteWrapper</name>
        <shortname>GPSSatellite</shortname>
        <comment>The GPSSatellite object holds various information about a satellite.
A List with the available satellites is passed to the GpsStatus event.
All visible satellites from all the available constellations are in this list.
Only limited information for each satellite is available in GPSSatellite.
Additional information on each satellite is available in the GnssStatus event.</comment>
        <objectwrapper>android.location.GpsSatellite</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>UsedInFix</name>
            <returntype>boolean</returntype>
            <comment>Tests whether this satellite was used to calculate the most recent fix.</comment>
        </property>
        <property>
            <name>Elevation</name>
            <returntype>float</returntype>
            <comment>Returns the satellite elevation in degrees (0 - 90).</comment>
        </property>
        <property>
            <name>Azimuth</name>
            <returntype>float</returntype>
            <comment>Returns the satellite azimuth in degrees (0 - 360).</comment>
        </property>
        <property>
            <name>Snr</name>
            <returntype>float</returntype>
            <comment>Returns the signal to noise ratio for the satellite.</comment>
        </property>
        <property>
            <name>Prn</name>
            <returntype>int</returntype>
            <comment>Returns the PRN (pseudo-random number) for the satellite.
This number is the pseudo-random number for most constellations. It is FCN and OSN number for Glonass.
To avoid duplication the actual values has a constant added to indicate the satellite constellation.
The base values for each contellation are as returned by GnssStatus.Svid().
GPS PRNs are unadjusted and are in the range 1 to 32
Glonass FCNs/OSNs have 64 added and are in the range 65 to 88 or possibly 157 to 172.
Beidou PRNs have 200 added and are in the range 201 to 237.
Galileo PRNs have 300 added and are in the range 301 to 326.</comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.b4a.gnss.LocationWrapper</name>
        <shortname>Location</shortname>
        <comment>A Location object holds various information about a specific GNSS fix.
In most cases you will work with locations that are passed to the GNSS LocationChanged event.
The location object can also be used to calculate distance and bearing to other locations.</comment>
        <objectwrapper>android.location.Location</objectwrapper>
        <owner>process</owner>
        <method>
            <name>DistanceTo</name>
            <comment>Returns the distance to the given location measured in meters.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>TargetLocation</name>
                <type>android.location.Location</type>
            </parameter>
        </method>
        <method>
            <name>ConvertToSeconds</name>
            <comment>Converts the given coordinate to a string formatted with the following format:
   [+-]DDD:MM:SS.SSSSS (Minute = 1/60 of a degree, Second = 1/3600 of a degree)</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Coordinate</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes an empty location object.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>ConvertToMinutes</name>
            <comment>Converts the given coordinate to a string formatted with the following format:
   [+-]DDD:MM.MMMMM (Minute = 1/60 of a degree)</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Coordinate</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>BearingTo</name>
            <comment>Returns the bearing to the given location.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>TargetLocation</name>
                <type>android.location.Location</type>
            </parameter>
        </method>
        <method>
            <name>Initialize2</name>
            <comment>Initializes the location object with the given Latitude and Longitude.
Values can be formatted in any of the three formats:
   Degrees: [+-]DDD.DDDDD
   Minutes: [+-]DDD:MM.MMMMM (Minute = 1 / 60 of a degree)
   Seconds: [+-]DDD:MM:SS.SSSSS (Second = 1 / 3600 of a degree)
Example:&lt;code&gt;
   Dim L1 As Location
   L1.Initialize2("45:30:30", "45:20:15")&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Latitude</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Longitude</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>Speed</name>
            <returntype>float</returntype>
            <parameter>
                <name>value</name>
                <type>float</type>
            </parameter>
            <comment>Gets or sets the fix speed (meters/second).</comment>
        </property>
        <property>
            <name>BearingValid</name>
            <returntype>boolean</returntype>
            <comment>Returns true if the fix includes a bearing value.</comment>
        </property>
        <property>
            <name>Latitude</name>
            <returntype>double</returntype>
            <parameter>
                <name>value</name>
                <type>double</type>
            </parameter>
            <comment>Gets or sets the fix latitude (degrees from -90 (South) to 90 (North)).</comment>
        </property>
        <property>
            <name>Time</name>
            <returntype>long</returntype>
            <parameter>
                <name>value</name>
                <type>long</type>
            </parameter>
            <comment>Gets or sets the UTC time of this fix, in milliseconds since January 1, 1970.</comment>
        </property>
        <property>
            <name>Longitude</name>
            <returntype>double</returntype>
            <parameter>
                <name>value</name>
                <type>double</type>
            </parameter>
            <comment>Gets or sets the fix longitude (degrees from -180 to 180, positive values represent the eastern hemisphere).</comment>
        </property>
        <property>
            <name>AltitudeValid</name>
            <returntype>boolean</returntype>
            <comment>Returns true if the fix includes altitude value.</comment>
        </property>
        <property>
            <name>SpeedValid</name>
            <returntype>boolean</returntype>
            <comment>Returns true if the fix includes speed value.</comment>
        </property>
        <property>
            <name>Bearing</name>
            <returntype>float</returntype>
            <parameter>
                <name>value</name>
                <type>float</type>
            </parameter>
            <comment>Gets or sets the fix bearing East of true North.</comment>
        </property>
        <property>
            <name>Accuracy</name>
            <returntype>float</returntype>
            <parameter>
                <name>value</name>
                <type>float</type>
            </parameter>
            <comment>Gets or sets the fix accuracy (meters).</comment>
        </property>
        <property>
            <name>AccuracyValid</name>
            <returntype>boolean</returntype>
            <comment>Returns true if the fix includes an accuracy value.</comment>
        </property>
        <property>
            <name>Altitude</name>
            <returntype>double</returntype>
            <parameter>
                <name>value</name>
                <type>double</type>
            </parameter>
            <comment>Gets or sets the fix altitude (meters).</comment>
        </property>
    </class>
    <version>1.0</version>
    <comment>The GNSSS library allows you to get information from the phone's GNSSS device.
This library can be used as a drop-in replacement for the GPS library merely by changing the GPS type to GNSS.
Android devices, if capable, will report location information using all available constellations.
However only limited satellite information is available in the GpsStatus event.
   
This library is a strict superset of the original GPS library.  
To access additional data on the satellites a new GnssStatus event is available in Android API 24 and later.
The GnssStatus event passes a single GnssStatus object as its only parameter.
The GnssStatus object contains information for the visible satellites of all the constellations available.   
The GnssStatus event is only available on Android 7 devices and later that implement API 24 or higher.
The library can be used without problem on earlier devices but on these the GnssStatus event will never be raised.
The GNSS receivers in devices will vary in which constellations that they will recognize depending on when they were designed.
Devices from 2019 and later will probably recognise all four of GPS, GALILEO, GLONASS and BEIDOU.</comment>
</root>
