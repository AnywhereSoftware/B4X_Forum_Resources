Version=3.82
IconFile=
NumberOfModules=2
Module1=Setup
Module2=Help
Build1=Default,FFTdemo.FFTdemo
DoNotOverwriteManifest=False
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: http://www.basic4ppc.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="4" />~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~'End of default text.~\n~
NumberOfFiles=4
File1=FFTdemo.bal
File2=Help.bal
File3=Input.bal
File4=Setup.bal
NumberOfLibraries=5
Library1=core
Library2=fft
Library3=stringutils
Library4=javaobject
Library5=reflection
@EndOfDesignText@
#Region  Project Attributes 
	#ApplicationLabel: FFTdemo
	#VersionCode: 1
	#VersionName: 
	'SupportedOrientations possible values: unspecified, landscape or portrait.
	#SupportedOrientations: landscape
	#CanInstallToExternalStorage: False
#End Region

#Region  Activity Attributes 
	#FullScreen: False
	#IncludeTitle: True
#End Region

' The FFT library is based on a port of the FFT from the SciMark2a Java Benchmark To C#
' by Chris Re (cmr28@cornell.edu) AND Werner Vogels (vogels@cs.cornell.edu)
' For details on the original authors see http: /  / math.nist.gov / scimark2

' Library adapted for B4PPC by Andrew Graham
' Program written by Klaus Christl

' The program uses following functions from the FFT.dll
' Fft.Version				in DisplayHelp
' Fft.ToAmplitude		in CalcFFT
' Fft.ToPhase				in CalcFFT

' Fft.Transform			in CalcFFT							with the variable Transform = 0
' Fft.Inverse				in CalcFFTInv						with the variable Transform = 0
' Fft.CopyArray			in CalcFFT / CalcFFTInv		with the variable Transform = 0
' Fft.Transform2		in CalcFFT							with the variable Transform = 2
' Fft.Inverse2			in CalcFFTInv						with the variable Transform = 2

Sub Process_Globals
	Dim ProgName = "FFTdemo" As String
	Dim ProgVersion = "V 1.2" As String
	Dim ProgAuthor = "Klaus CHRISTL" As String
	Dim ProgDate = "august 2014" As String

	Dim FFT1 As FFT

	Dim Transform As Int						
'	Transform = 0		' used with Transform  and Inverse
	Transform = 2		' used with Transform2 and Inverse2

' sine definition variables
	Dim SineNbMax = 10 As Int
	Dim SineNb = 6 As Int
	Dim SineI = 0 As Int
	Dim SineOffset = 1 As Double
	Dim SineDampingCoef = 0.5 As Double
	Dim SineDamping As Double	
	Dim SineW0(SineNbMax) As Double
	Dim SinePhase(SineNbMax) As Double
	Dim SineNbPeriods(SineNbMax) As Double
	SineNbPeriods(0) = 20
	SineNbPeriods(1) = 45
	SineNbPeriods(2) = 60
	SineNbPeriods(3) = 80
	SineNbPeriods(4) = 100
	SineNbPeriods(5) = 120
	Dim SineAmpl(SineNbMax) As Double
	SineAmpl(0) = 1
	SineAmpl(1) = .8
	SineAmpl(2) = .6
	SineAmpl(3) = 1
	SineAmpl(4) = .5
	SineAmpl(5) = .25
	Dim SineModPeriod = 5 As Double
	Dim SineModPercent = 0.50 As Double
	Dim SineModW0 As Double
	
	' caluclation variables
	Dim NN = 256 As Int						' total number of data samples
	Dim NN_1 = NN - 1 As Int			' total number of data samples - 1
	Dim ND2 = NN / 2 As Int				' half number of data samples
	Dim ND21 = ND2 + 1 As Int			' half number of data samples + 1
	Dim ND2_1 = ND2 As Int				' half number of data samples - 1
	
' time data
	Dim DataReal(NN) As Double		' real time data
	Dim DataImag(NN) As Double		' imaginary time data
	Dim DataRealMax As Double			' max real time value
	Dim DataRealMean As Double		'	mean real time value
	Dim DataRealMin As Double			' min real time value
	Dim DataImagMax As Double			' max imaginary time value
	Dim DataImagMean As Double		' mean imaginary time value
	Dim DataImagMin As Double			' min imaginary time value

' FFT data
	Dim FFTReal(0) As Double			' real 			 FFT data
	Dim FFTImag(0) As Double			' imaginary  FFT data
	Dim FFTAmpl(0) As Double			' amplitude  FFT data
	Dim FFTPhase(0) As Double			' phase 		 FFT data
	Dim FFTRealMax As Double			' max  real	 FFT value
	Dim FFTRealMean As Double			' mean real  FFT value
	Dim FFTRealMin As Double			' mix  real	 FFT value
	Dim FFTImagMax As Double			' max  imag	 FFT value
	Dim FFTImagMean As Double			' mean imag	 FFT value
	Dim FFTImagMin As Double			' min  imag	 FFT value
	Dim FFTAmplMax As Double			' max  ampl	 FFT value
	Dim FFTAmplMean As Double			' mean ampl	 FFT value
	Dim FFTAmplMin As Double			' min  ampl	 FFT value
	Dim FFTPhaseMax As Double			' max  phase FFT value
	Dim FFTPhaseMean As Double		' mean phase FFT value
	Dim FFTPhaseMin As Double			' min  phase FFT value

' flags for program functions
	Dim flgDisp = "DispDraw" As String
	Dim flgDispList = "ListReal" As String	
	Dim flgDispType = "DispFFT" As String
	Dim flgDispFFTType = "FftAP" As String
	Dim flgCalcSines = "3sin" As String
	Dim flgDeleteSamples = False As Boolean
	Dim flgFFTInverse = False As Boolean
	Dim flgOffset = False As Boolean
	Dim flgSineModulation = False As Boolean
	Dim flgDamping = False As Boolean
	Dim flgRound = True As Boolean
	Dim flgSetupChanged = False As Boolean
	
' graph colors
	Dim colGraphBackground = Colors.White As Int
	Dim colLine = Colors.Blue As Int
'	Dim colZeroLine = Colors.Red As Int
	Dim colZeroLine = Colors.RGB(204, 0, 0) As Int
	Dim colCursorLine = Colors.Red As Int
	Dim colCursor = Colors.Green As Int	
	
	Dim TimerShort, TimerLong As Timer 
End Sub

Sub Globals
	Dim lblDisplay, lblTitle1, lblTitle2, lblAbscissa1, lblAbscissa2, lblValue1, lblValue2 As Label
	Dim lsvDisplay As ListView
	Dim pnlDiagram1, pnlDiagram2 As Panel
	Dim cvsDiagram1, cvsDiagram2 As Canvas
	Dim rectDiagram, rectScreen, rectCursor As Rect
	Dim pnlList, pnlDrawDisp1, pnlDrawDisp2, pnlFFTType, pnlDispFunc, pnlCursorTools As Panel
	Dim pnlCursorTools, pnlFFTInverse, pnlToolBox, pnlDisp, pnlDispTools As Panel
	Dim btnListAmpl, btnListPhase, btnFFTInverse, btnFFTAP, btnFFTRI As Button
	Dim btnListReal, btnListImag, btnListAmpl, btnListPhase As Button
	Dim btnCalcSines1, btnCalcSines3, btnCalcCosines3, btnCalcSinesN, btnNSinesSetup, btnHelp As Button
	Dim btnDispList, btnDispDraw As Button
	Dim btnCursorRight, btnCursorLeft, btnDispTime, btnDispFFT, btnFFTDelete As Button
	
' definition of button colors
	Dim gd1 As GradientDrawable
	Dim gd2 As GradientDrawable
	Dim colsList1(2) As Int
	Dim colsList2(2) As Int
	Dim sdList1, sdList2 As StateListDrawable
	Dim colsSine1(2) As Int
	Dim colsSine2(2) As Int
	Dim sdSine1, sdSine2 As StateListDrawable
	Dim colsDisp1(2) As Int
	Dim colsDisp2(2) As Int
	Dim sdDisp1, sdDisp2 As StateListDrawable
	Dim colsFFT1(2) As Int
	Dim colsFFT2(2) As Int
	Dim sdFFT1, sdFFT2 As StateListDrawable
	Dim colsTime1(2) As Int
	Dim colsTime2(2) As Int
	Dim sdTime1, sdTime2 As StateListDrawable

' variables for the drawing areas	
	Dim GraphW As Int
	Dim GraphW1 As Int
	Dim GraphH As Int
	Dim CursorX = 9 As Int
	Dim Vref(2) As Int
	Dim Vals(2,256) As Int
	
' constants for display type
	Dim cDataReal = 0 As Int
	Dim cDataimag = 1 As Int
	Dim cFFTReal = 2 As Int
	Dim cFFTImag = 3 As Int
	Dim cFFTAmpl = 4 As Int
	Dim cFFTPhase = 5 As Int
	
	Dim LineWidth As Int				' line width for drawing
	Dim LineWidth2 As Int				' half line width for drawing
	
	Dim Scale As Double					' used for ListView scaling

' variables used in btnCursor_Touch for timing	
	Dim Time1 As Long						
	Dim CursorSign = 1 As Int
End Sub

Sub Activity_Create(FirstTime As Boolean)
	Activity.LoadLayout("FFTdemo")
	Activity.Title = "FFTdemo V1.1"

	cvsDiagram1.Initialize(pnlDiagram1)
		cvsDiagram2.Initialize(pnlDiagram2)
		If FirstTime = True Then
			TimerShort.Initialize("TimerShort", 30)
			TimerLong.Initialize("TimerLong", 500)
		End If
	Redim

	InitScale
	
	SetPaddings
	InitlsvDisplay
	InitButtonColors
	
	InitSineValues
	CalcSines(flgCalcSines)
	CalcFFT
	
	DisplayPanelManagement
	Display
	
	Dim r As Reflector
	r.Target = btnCursorLeft
	r.SetOnTouchListener("btnCursor_Touch")

	r.Target = btnCursorRight
	r.SetOnTouchListener("btnCursor_Touch")
End Sub

Sub Activity_Resume
	If flgSetupChanged = True Then
		Redim
		CalcSines(flgCalcSines)
		CalcFFT
		Display
	End If
End Sub

Sub Activity_Pause (UserClosed As Boolean)
	If UserClosed Then
		TimerLong.Enabled = False
		TimerShort.Enabled = False
	End If
End Sub

Sub Activity_KeyPress (KeyCode As Int) As Boolean 'Return True to consume the event
	Dim Answ As Int
	
	If KeyCode = KeyCodes.KEYCODE_BACK Then
		Answ = Msgbox2("Do you really want to quit the program", "Q U I T", "Yes", "", "No", Null)
		If Answ = DialogResponse.POSITIVE Then
			Activity.Finish
			Return False
		Else
			Return True
		End If
	Else
		Return False
	End If
End Sub

Sub InitScale
	Dim DeviceLayout As LayoutValues
	DeviceLayout = GetDeviceLayoutValues

	LineWidth = Floor(pnlFFTType.Left / 256)
	LineWidth2 = LineWidth / 2	' half line width, used for dispaly
	
	GraphW = 256 * DeviceLayout.Scale
	GraphW1 = 256 * DeviceLayout.Scale
	pnlDiagram1.Width = GraphW
	pnlDiagram2.Width = GraphW
	GraphH = pnlDiagram1.Height
	rectDiagram.Initialize(0, 0, pnlDiagram1.Width, pnlDiagram1.Height)			' used for screen updates
	rectScreen.Initialize(0, 0, GraphW, GraphH)
	rectCursor.Initialize(0, 0, 1, GraphH)
	
	pnlList.Top = 0
	pnlList.Left = 0
	
	Scale = 1 + 0.5 * ((100%x + 100%y) / (320dip + 430dip) - 1)
End Sub

Sub InitSineValues
	For i = 0 To SineNb - 1
		SineW0(i) = cPI / ND2 * SineNbPeriods(i)
	Next
	SineModW0 = cPI / ND2 * SineModPeriod
End Sub

Sub btnHelp_Click
	StartActivity(Help)
End Sub

Sub SetPaddings
	setPadding(lblValue1)
	setPadding(lblValue2)
End Sub

Sub InitlsvDisplay
' initilisation of the ListView for diplaying the values of the samples

	Dim gd As GradientDrawable
	Dim colsDisp(2) As Int
	
	colsDisp(0) = Colors.RGB(255, 255, 255)
	colsDisp(1) = Colors.RGB(200, 200, 200)
	gd.Initialize("TOP_BOTTOM", colsDisp)

	lsvDisplay.SingleLineLayout.ItemHeight = 25dip * Scale
	lsvDisplay.SingleLineLayout.Label.Height = lsvDisplay.SingleLineLayout.ItemHeight
	lsvDisplay.SingleLineLayout.Label.TextColor = Colors.Black
	lsvDisplay.SingleLineLayout.Label.TextSize = 12 * Scale
	lsvDisplay.SingleLineLayout.Background = gd
End Sub

Public Sub Redim
' redim depending on the transformation type
	If Transform = 0 Then	
	' used with  FFT1.Transform and FFT1.Inverse
		ND2 = NN
		ND21 = NN
		ND2_1 = ND2 - 1
	Else If Transform = 2 Then	
	' used with  FFT1.Transform2 and FFT1.Inverse2
		ND2 = NN / 2
		ND21 = ND2 + 1
		ND2_1 = ND2
	End If

	Dim FFTReal(ND21) As Double
	Dim FFTImag(ND21) As Double
	Dim FFTAmpl(ND21) As Double
	Dim FFTPhase(ND21) As Double
End Sub

Sub InitButtonColors
' button color initialization
	colsSine1(0) = Colors.RGB(220, 10, 10)				' red buttons  sines buttons
	colsSine1(1) = Colors.RGB(255, 120, 120)
	gd1.Initialize("TOP_BOTTOM", colsSine1)
	gd1.CornerRadius = 5dip
	colsSine2(0) = Colors.RGB(252, 202, 202)
	colsSine2(1) = Colors.RGB(255, 128, 128)
	gd2.Initialize("TOP_BOTTOM", colsSine2)
	gd2.CornerRadius = 5dip
	
	sdSine1.Initialize
	Dim states(2) As Int
	states(0) = sdSine1.state_enabled
	states(1) =  - sdSine1.state_pressed
	sdSine1.addState2(states, gd1)
	Dim states(1) As Int
	states(0) = sdSine1.state_pressed
	sdSine1.addState2(states, gd2)
	
	gd1.Initialize("TOP_BOTTOM", colsSine2)
	gd1.CornerRadius = 5dip
	gd2.Initialize("TOP_BOTTOM", colsSine1)
	gd2.CornerRadius = 5dip
	
	sdSine2.Initialize
	Dim states(2) As Int
	states(0) = sdSine2.state_enabled
	states(1) =  - sdSine2.state_pressed
	sdSine2.addState2(states, gd1)
	Dim states(1) As Int
	states(0) = sdSine2.state_pressed
	sdSine2.addState2(states, gd2)
	
	colsList1(0) = Colors.RGB(11, 17, 183)			' blue buttons   list display
	colsList1(1) = Colors.RGB(117, 215, 253)
	gd1.Initialize("TOP_BOTTOM", colsList1)
	gd1.CornerRadius = 5dip
	colsList2(0) = Colors.RGB(192, 194, 248)
	colsList2(1) = Colors.RGB(111, 172, 234)
	gd2.Initialize("TOP_BOTTOM", colsList2)
	gd2.CornerRadius = 5dip
	
	sdList1.Initialize
	Dim states(2) As Int
	states(0) = sdList1.state_enabled
	states(1) =  - sdList1.state_pressed
	sdList1.addState2(states, gd1)
	Dim states(1) As Int
	states(0) = sdList1.state_pressed
	sdList1.addState2(states, gd2)
	
	gd1.Initialize("TOP_BOTTOM", colsList2)
	gd1.CornerRadius = 5dip
	gd2.Initialize("TOP_BOTTOM", colsList1)
	gd2.CornerRadius = 5dip
	
	sdList2.Initialize
	Dim states(2) As Int
	states(0) = sdList2.state_enabled
	states(1) =  - sdList2.state_pressed
	sdList2.addState2(states, gd1)
	Dim states(1) As Int
	states(0) = sdList2.state_pressed
	sdList2.addState2(states, gd2)
	
	colsDisp1(0) = Colors.RGB(190, 99, 1)			' orange buttons    List / Draw  buttons		
	colsDisp1(1) = Colors.RGB(255, 222, 124)
	gd1.Initialize("TOP_BOTTOM", colsDisp1)
	gd1.CornerRadius = 5dip
	colsDisp2(0) = Colors.RGB(253, 242, 212)
	colsDisp2(1) = Colors.RGB(238, 202, 145)
	gd2.Initialize("TOP_BOTTOM", colsDisp2)
	gd2.CornerRadius = 5dip
	
	sdDisp1.Initialize
	Dim states(2) As Int
	states(0) = sdDisp1.state_enabled
	states(1) =  - sdDisp1.state_pressed
	sdDisp1.addState2(states, gd1)
	Dim states(1) As Int
	states(0) = sdDisp1.state_pressed
	sdDisp1.addState2(states, gd2)
	
	gd1.Initialize("TOP_BOTTOM", colsDisp2)
	gd1.CornerRadius = 5dip
	gd2.Initialize("TOP_BOTTOM", colsDisp1)
	gd2.CornerRadius = 5dip
	
	sdDisp2.Initialize
	Dim states(2) As Int
	states(0) = sdDisp2.state_enabled
	states(1) =  - sdDisp2.state_pressed
	sdDisp2.addState2(states, gd1)
	Dim states(1) As Int
	states(0) = sdDisp2.state_pressed
	sdDisp2.addState2(states, gd2)

	colsTime1(0) = Colors.RGB(3, 131, 3)				' green buttons   Time / FFT
	colsTime1(1) = Colors.RGB(88, 255, 65)
	gd1.Initialize("TOP_BOTTOM", colsTime1)
	gd1.CornerRadius = 5dip
	colsTime2(0) = Colors.RGB(189, 255, 205)
	colsTime2(1) = Colors.RGB(113, 255, 102)
	gd2.Initialize("TOP_BOTTOM", colsTime2)
	gd2.CornerRadius = 5dip
	
	sdTime1.Initialize
	Dim states(2) As Int
	states(0) = sdTime1.state_enabled
	states(1) =  - sdTime1.state_pressed
	sdTime1.addState2(states, gd1)
	Dim states(1) As Int
	states(0) = sdTime1.state_pressed
	sdTime1.addState2(states, gd2)
	
	gd1.Initialize("TOP_BOTTOM", colsTime2)
	gd1.CornerRadius = 5dip
	gd2.Initialize("TOP_BOTTOM", colsTime1)
	gd2.CornerRadius = 5dip
	
	sdTime2.Initialize
	Dim states(2) As Int
	states(0) = sdTime2.state_enabled
	states(1) =  - sdTime2.state_pressed
	sdTime2.addState2(states, gd1)
	Dim states(1) As Int
	states(0) = sdTime2.state_pressed
	sdTime2.addState2(states, gd2)
	
	colsFFT1(0) = Colors.RGB(82, 7, 163)				' violet buttons   FFT type
	colsFFT1(1) = Colors.RGB(223, 176, 252)
	gd1.Initialize("TOP_BOTTOM", colsFFT1)
	gd1.CornerRadius = 5dip
	colsFFT2(0) = Colors.RGB(234, 217, 248)
	colsFFT2(1) = Colors.RGB(203, 148, 252)
	gd2.Initialize("TOP_BOTTOM", colsFFT2)
	gd2.CornerRadius = 5dip
	
	sdFFT1.Initialize
	Dim states(2) As Int
	states(0) = sdFFT1.state_enabled
	states(1) =  - sdFFT1.state_pressed
	sdFFT1.addState2(states, gd1)
	Dim states(1) As Int
	states(0) = sdFFT1.state_pressed
	sdFFT1.addState2(states, gd2)
	
	gd1.Initialize("TOP_BOTTOM", colsFFT2)
	gd1.CornerRadius = 5dip
	gd2.Initialize("TOP_BOTTOM", colsFFT1)
	gd2.CornerRadius = 5dip
	
	sdFFT2.Initialize
	Dim states(2) As Int
	states(0) = sdFFT2.state_enabled
	states(1) =  - sdFFT2.state_pressed
	sdFFT2.addState2(states, gd1)
	Dim states(1) As Int
	states(0) = sdFFT2.state_pressed
	sdFFT2.addState2(states, gd2)
End Sub

Sub btnCalcSines_Click
	Dim Send As View

	Send = Sender
	FuncCalcSines(Send.Tag)
End Sub

Sub FuncCalcSines(ctrl As String)
' sine calculation buttons management

	If flgCalcSines = "1sin" Then
		btnCalcSines1.Background = sdSine1
		btnCalcSines1.TextColor = Colors.White
	Else If flgCalcSines = "3sin" Then
		btnCalcSines3.Background = sdSine1
		btnCalcSines3.TextColor = Colors.White
	Else If flgCalcSines = "3cos" Then
		btnCalcCosines3.Background = sdSine1
		btnCalcCosines3.TextColor = Colors.White
	Else If flgCalcSines = "nsin" Then
		btnCalcSinesN.Background = sdSine1
		btnCalcSinesN.TextColor = Colors.White
	End If
	
	flgCalcSines = ctrl

	If flgCalcSines = "1sin" Then
		btnCalcSines1.Background = sdSine2
		btnCalcSines1.TextColor = Colors.Black
	Else If flgCalcSines = "3sin" Then
		btnCalcSines3.Background = sdSine2
		btnCalcSines3.TextColor = Colors.Black
	Else If flgCalcSines = "3cos" Then
		btnCalcCosines3.Background = sdSine2
		btnCalcCosines3.TextColor = Colors.Black
	Else If flgCalcSines = "nsin" Then
		btnCalcSinesN.Background = sdSine2
		btnCalcSinesN.TextColor = Colors.Black
	End If
	DoEvents
	
	CalcSines(flgCalcSines)
	CalcFFT
	
	flgFFTInverse = False

	Display
End Sub

Sub btnDispFFTType_Click
	Dim Send As View

	Send = Sender
	DisplayFFTType(Send.Tag)
End Sub

Sub btnList_Click
	Dim Send As View

	Send = Sender
	DisplayList(Send.Tag)
End Sub

Sub btnDispType_Click
	Dim Send As View

	Send = Sender
	DisplayType(Send.Tag)
End Sub

Sub DisplayType(ctrl As String)
	If flgDispType = "DispTime" Then
		btnDispTime.Background = sdTime1
		btnDispTime.TextColor = Colors.White
	Else
		btnDispFFT.Background = sdTime1
		btnDispFFT.TextColor = Colors.White
	End If

	flgDispType = ctrl

	If flgDispType = "DispTime" Then
		btnDispTime.Background = sdTime2
		btnDispTime.TextColor = Colors.Black
		pnlFFTInverse.Visible = False
		pnlFFTType.Visible = False
	Else
		btnDispFFT.Background = sdTime2
		btnDispFFT.TextColor = Colors.Black
		pnlFFTInverse.Visible = True
		pnlFFTType.Visible = True
	End If
	
	Display

End Sub

Sub btnDisp_Click
	Dim Send As View
	
	If flgDisp = "DispList" Then
		btnDispList.Background = sdDisp1
		btnDispList.TextColor = Colors.White
	Else
		btnDispDraw.Background = sdDisp1
		btnDispDraw.TextColor = Colors.White
	End If

	Send = Sender
	flgDisp = Send.Tag
	
	If flgDisp = "DispList" Then
		btnDispList.Background = sdDisp2
		btnDispList.TextColor = Colors.Black
		pnlFFTType.Visible = False
		pnlCursorTools.Visible = False
	Else
		btnDispDraw.Background = sdDisp2
		btnDispDraw.TextColor = Colors.Black
		pnlFFTType.Visible = True
		pnlCursorTools.Visible = True
	End If
	DisplayPanelManagement
End Sub

Sub btnNSinesSetup_Click
	StartActivity(Setup)
End Sub

Sub DisplayPanelManagement
	If flgDisp = "DispList" Then
		pnlList.Visible = True
		pnlDrawDisp1.Visible = False
		pnlDrawDisp2.Visible = False
		pnlDiagram1.Visible = False
		pnlDiagram2.Visible = False
	Else
		pnlList.Visible = False
		pnlDrawDisp1.Visible = True
		pnlDrawDisp2.Visible = True
		pnlDiagram1.Visible = True
		pnlDiagram2.Visible = True
	End If
End Sub

Sub DisplayFFTType(Ctrl As String)
	If flgDispFFTType = "FftRI" Then
		btnFFTRI.Background = sdFFT1
		btnFFTRI.TextColor = Colors.White
	Else If flgDispFFTType = "FftAP" Then
		btnFFTAP.Background = sdFFT1
		btnFFTAP.TextColor = Colors.White
	End If	
	
	flgDispFFTType = Ctrl

	If flgDispFFTType = "FftRI" Then
		btnFFTRI.Background = sdFFT2
		btnFFTRI.TextColor = Colors.Black
	Else If flgDispFFTType = "FftAP" Then
		btnFFTAP.Background = sdFFT2
		btnFFTAP.TextColor = Colors.Black
	End If	

	Display
End Sub

Sub CalcSines(SineType As String)
	Dim i As Int, N As Int
	Dim j As Int
	Dim w1 As Double, w2 As Double, w3 As Double
	Dim a1 As Double, a2 As Double, a3 As Double

	If Transform = 0 Then
		N = NN / 2
	Else
		N = ND2
	End If
	
	a1 = 1
	a2 = .8
	a3 = .5
	w1 = cPI / N
	w2 = cPI / N * 25
	w3 = cPI / N * 100
	
	DataRealMin = 1.0e12
	DataRealMax =  - 1.0e12
	DataImagMin = 1.0e12
	DataImagMax =  - 1.0e12
	
	For i = 0 To NN_1
		If flgOffset = True Then
			DataReal(i) = SineOffset
		Else
			DataReal(i) = 0
		End If
		If SineType = "1sin" Then
			DataReal(i) = DataReal(i) + Sin(w1 * i) * a1
		Else If SineType = "3sin" Then
			DataReal(i) = DataReal(i) + Sin(w1 * i) * a1
			DataReal(i) = DataReal(i) + Sin(w2 * i) * a2
			DataReal(i) = DataReal(i) + Sin(w3 * i) * a3
		Else If SineType = "3cos" Then
			DataReal(i) = DataReal(i) + Cos(w1 * i) * a1
			DataReal(i) = DataReal(i) + Cos(w2 * i) * a2
			DataReal(i) = DataReal(i) + Cos(w3 * i) * a3
		Else
			For j = 0 To SineNb - 1
				DataReal(i) = DataReal(i) + Sin(SineW0(j) * i + SinePhase(j)) * SineAmpl(j)
			Next
		End If
		If flgSineModulation = True Then
			DataReal(i) = DataReal(i) * (1 - SineModPercent * (1 - Sin(SineModW0 * i)))
		End If

		If flgDamping = True Then
			DataReal(i) = DataReal(i) * Power(cE, - i * SineDamping)
		End If
		DataImag(i) = 0
		DataRealMin = Min(DataRealMin, DataReal(i))
		DataRealMax = Max(DataRealMax, DataReal(i))
		DataImagMin = Min(DataImagMin, DataImag(i))
		DataImagMax = Max(DataImagMax, DataImag(i))
	Next
	DataRealMean = (DataRealMax + DataRealMin) / 2
	DataImagMean = (DataImagMax + DataImagMin) / 2

End Sub

Sub CalcFFT
	Dim i As Int

	If Transform = 0 Then
		FFTReal = FFT1.CopyArray(DataReal)
		FFTImag = FFT1.CopyArray(DataImag)
		FFT1.Transform(FFTReal, FFTImag)
	Else
		FFT1.Transform2(DataReal, FFTReal, FFTImag)
	End If
	
	FFTAmpl = FFT1.ToAmplitude(FFTReal, FFTImag)
	FFTPhase = FFT1.ToPhase(FFTReal, FFTImag)

	FFTRealMax =  - 1.0e12
	FFTRealMin = 1.0e12
	FFTImagMax =  - 1.0e12
	FFTImagMin = 1.0e12
	FFTAmplMax =  - 1.0e12
	FFTAmplMin = 1.0e12
	FFTPhaseMax =  - 1.0e12
	FFTPhaseMin = 1.0e12

	For i = 0 To ND21 - 1

		FFTRealMin = Min(FFTRealMin, FFTReal(i))
		FFTRealMax = Max(FFTRealMax, FFTReal(i))
		FFTImagMin = Min(FFTImagMin, FFTImag(i))
		FFTImagMax = Max(FFTImagMax, FFTImag(i))
		FFTAmplMin = Min(FFTAmplMin, FFTAmpl(i))
		FFTAmplMax = Max(FFTAmplMax, FFTAmpl(i))
		FFTPhaseMin = Min(FFTPhaseMin, FFTPhase(i))
		FFTPhaseMax = Max(FFTPhaseMax, FFTPhase(i))
	Next
	FFTRealMean = (FFTRealMax + FFTRealMin) / 2
	FFTImagMean = (FFTImagMax + FFTImagMin) / 2
	FFTAmplMean = (FFTAmplMax + FFTAmplMin) / 2
	FFTPhaseMean = (FFTPhaseMax + FFTPhaseMin) / 2
End Sub

Sub CalcFFTInverse
	Dim i As Int
	
	If Transform = 0 Then
		DataReal = FFT1.CopyArray(FFTReal)
		DataImag = FFT1.CopyArray(FFTImag)
		FFT1.Inverse(DataReal, DataImag)
	Else
		FFT1.Inverse2(FFTReal, FFTImag, DataReal)
	End If
	
	DataRealMin = 1.0e12
	DataRealMax =  - 1.0e12
	DataImagMin = 1.0e12
	DataImagMax =  - 1.0e12
	For i = 0 To NN_1
		DataRealMin = Min(DataRealMin, DataReal(i))
		DataRealMax = Max(DataRealMax, DataReal(i))
		DataImagMin = Min(DataImagMin, DataImag(i))
		DataImagMax = Max(DataImagMax, DataImag(i))
	Next
End Sub

Sub Display
'	cvsDiagram1.DrawRect(rectScreen, Colors.Black, True, 1)

	If flgDispType = "DispTime" Then
		btnListAmpl.Visible = False
		btnListPhase.Visible = False
		DisplayList("ListReal")
		DrawGraphic(cvsDiagram1, cDataReal)
		DrawGraphic(cvsDiagram2, cDataimag)
	Else
		btnListAmpl.Visible = True
		btnListPhase.Visible = True
		If flgDispFFTType = "FftRI" Then
			DisplayList("ListReal")
			DrawGraphic(cvsDiagram1, cFFTReal)
			DrawGraphic(cvsDiagram2, cFFTImag)
		Else
			DisplayList("ListAmpl")
			DrawGraphic(cvsDiagram1, cFFTAmpl)
			DrawGraphic(cvsDiagram2, cFFTPhase)
		End If
	End If
	CursorX = GraphW1 / 2
	DrawCursor(0)
	DisplayCursor(CursorX, 0)
End Sub

Sub ckbRound_CheckedChange(Checked As Boolean)
	flgRound = Checked
	DisplayList(flgDispList)
End Sub

Sub DisplayList(Ctrl As String)
	If flgDispList = "ListReal" Then
		btnListReal.Background = sdList1
		btnListReal.TextColor = Colors.White
	Else If flgDispList = "ListImag" Then
		btnListImag.Background = sdList1
		btnListImag.TextColor = Colors.White
	Else If flgDispList = "ListAmpl" Then
		btnListAmpl.Background  =  sdList1
		btnListAmpl.TextColor = Colors.White
	Else If flgDispList = "ListPhase" Then
		btnListPhase.Background = sdList1
		btnListPhase.TextColor = Colors.White
	End If

	flgDispList = Ctrl
	If flgDispList = "ListReal" Then
		btnListReal.Background = sdList2
		btnListReal.TextColor = Colors.Black
		If flgDispType = "DispTime" Then
			If flgFFTInverse = False Then
				FillList(0, NN_1, "Time Real")
			Else
				FillList(0, NN_1, "Inverse FFT Real")
			End If
		Else
			FillList(2, ND2_1, "FFT Real")
		End If
	Else If flgDispList = "ListImag" Then
		btnListImag.Background = sdList2
		btnListImag.TextColor = Colors.Black
		If flgDispType = "DispTime" Then
			If flgFFTInverse = False Then
				FillList(1, NN_1, "Time Imaginary")
			Else
				FillList(1, NN_1, "Inverse FFT Imaginary")
			End If
		Else
			FillList(3, ND2_1, "FFT Imaginary")
		End If
	Else If flgDispList = "ListAmpl" Then
		btnListAmpl.Background = sdList2
		btnListAmpl.TextColor = Colors.Black
		FillList(4, ND2_1, "FFT Amplitude")
	Else If flgDispList = "ListPhase" Then
		btnListPhase.Background = sdList2
		btnListPhase.TextColor = Colors.Black
		FillList(5, ND2_1, "FFT Phase")
	End If
End Sub

Sub FillList(Mode As Int, Nb As Int, title As String)
	Dim Val As Double, i As Int
	
	lblDisplay.Text = title
	lsvDisplay.Clear

	For i = 0 To Nb
		If Mode = cDataReal Then
			Val = DataReal(i)
		Else If Mode = cDataimag Then
			Val = DataImag(i)
		Else If Mode = cFFTReal Then
			Val = FFTReal(i)
		Else If Mode = cFFTImag Then
			Val = FFTImag(i)
		Else If Mode = cFFTAmpl Then
			Val = FFTAmpl(i)
		Else If Mode = cFFTPhase Then
			Val = FFTPhase(i)
		End If
		If flgRound = True Then
			Val = Round2(Val, 6)
		End If
		lsvDisplay.AddSingleLine(i & " : " & Val)
	Next
End Sub

Sub DrawGraphic(cvs As Canvas, Mode As Int)
	Dim i As Int, j As Int, Scale As Double, N, N1 As Int
	Dim x1 As Float, y1 As Float, y2 As Float
	Dim vmax, vmin, vmean As Float
	
	N = NN

	If Mode =  cDataReal Then
		vmax = DataRealMax
		vmin = DataRealMin
		vmean = DataRealMean
		j = 0
		If flgFFTInverse = False Then
			lblTitle1.Text = "Time  real"
		Else
			lblTitle1.Text = "Inverse FFT  real"
		End If
	Else If Mode = cDataimag Then
		vmax = DataImagMax
		vmin = DataImagMin
		vmean = DataImagMean
		j = 1
		If flgFFTInverse = False Then
			lblTitle2.Text = "Time  Imaginary"
		Else
			lblTitle2.Text = "Inverse FFT  Imaginary"
		End If
	Else If Mode = cFFTReal Then
		vmax = FFTRealMax
		vmin = FFTRealMin
		vmean = FFTRealMean
		j = 0
		lblTitle1.Text = "FFT  Real"
		If Transform = 2 Then
			N = ND21
		End If
	Else If Mode = cFFTImag Then
		vmax = FFTImagMax
		vmin = FFTImagMin
		vmean = FFTImagMean
		j = 1
		lblTitle2.Text = "FFT  Imaginary"
		If Transform = 2 Then
			N = ND21
		End If
	Else If Mode = cFFTAmpl Then
		vmax = FFTAmplMax
		vmin = FFTAmplMin
		vmean = FFTAmplMean
		lblTitle1.Text = "FFT  Amplitude"
		j = 0
		If Transform = 2 Then
			N = ND21
		End If
	Else If Mode = cFFTPhase Then
		vmax = FFTPhaseMax
		vmin = FFTPhaseMin
		vmean = FFTPhaseMean
		lblTitle2.Text = "FFT  Phase"
		j = 1
		If Transform = 2 Then
			N = ND21
		End If
	End If
	N1 = N - 1
	If Abs(vmax - vmin) > 1e-8 Then
		If vmax > 0 AND vmin >=0 Then
			vmin = 0
		Else If vmax <= 0 AND vmin < 0 Then
			vmax = 0
		End If
		Scale = (GraphH - 4) / (vmax - vmin)
		If vmax / vmin < 0 OR Abs(vmin) < 1e-2 OR Abs(vmax) < 1e-2 Then
			vmean = 0
		End If
		y1 = (vmax - vmean) * Scale + 2
	Else
		Scale = (GraphH - 4) / 2
		y1 = GraphH / 2
	End If
	Vref(j) = y1
	GraphW1 = N * LineWidth
	pnlDiagram1.Width = GraphW1
	pnlDiagram2.Width = GraphW1
	cvsDiagram1.Initialize(pnlDiagram1)
	cvsDiagram2.Initialize(pnlDiagram2)
	rectDiagram.Right = GraphW1
	
	cvs.DrawRect(rectDiagram, colGraphBackground, True, 1)
	For i = 0 To N1
		x1 = i * LineWidth + LineWidth2
		If Mode = cDataReal Then
			y2 = y1 - DataReal(i) * Scale
		Else If Mode = cDataimag Then
			y2 = y1 - DataImag(i) * Scale
		Else If Mode = cFFTReal Then
			y2 = y1 - FFTReal(i) * Scale
		Else If Mode = cFFTImag Then
			y2 = y1 - FFTImag(i) * Scale
		Else If Mode = cFFTAmpl Then
			y2 = y1 - FFTAmpl(i) * Scale
		Else If Mode = cFFTPhase Then
			y2 = y1 - FFTPhase(i) * Scale
		End If
		
		cvs.DrawLine(x1, y1, x1, y2, colLine, LineWidth)
		Vals(j, i) = y2
	Next
	cvs.DrawLine(0, y1, N * LineWidth + LineWidth, y1, colZeroLine, LineWidth)
	pnlDiagram1.Invalidate2(rectDiagram)
	pnlDiagram2.Invalidate2(rectDiagram)
End Sub

Sub pnlDiagram_Touch (Action As Int, X As Float, Y As Float)
	Dim x1 As Float, i As Int
	
	If X >= 0 AND X <= GraphW1 Then
		If Action = 0 OR Action = 2 Then
			i = X / LineWidth
			x1 = i * LineWidth + LineWidth2
			If x1 <> CursorX Then
				DisplayCursor(x1, 0)
			End If
		End If
	End If
End Sub

'Displays the cursor
'Mode 0 = redraw value, 1 = remove value
Sub DisplayCursor(X As Float, Mode As Int)
	Dim ind As Int
	Dim Val1, Val2 As Double
	
	If Mode = 0 Then
		DrawCursor(1)
		CursorX = X
		ind = (CursorX - LineWidth2) / LineWidth
		If flgDeleteSamples = True AND flgDispType = "DispFFT" Then
			FFTAmpl(ind) = 0
			FFTPhase(ind) = 0
			FFTReal(ind) = 0
			FFTImag(ind) = 0
			Vals(0, ind) = Vref(0)
			Vals(1, ind) = Vref(1)
		End If
		DrawCursor(0)
		lblAbscissa1.Text = ind
		lblAbscissa2.Text = ind
		If flgDispType = "DispTime" Then
			Val1 = DataReal(ind)
			Val2 = DataImag(ind)
		Else
			If flgDispFFTType = "FftRI" Then
				Val1 = FFTReal(ind)
				Val2 = FFTImag(ind)
			Else
				Val1 = FFTAmpl(ind)
				Val2 = FFTPhase(ind)
			End If
		End If
		If flgRound = True Then
			Val1 = Round2(Val1, 6)
			Val2 = Round2(Val2, 6)
		End If
		lblValue1.Text = Val1
		lblValue2.Text = Val2
	Else
		lblAbscissa1.Text = ""
		lblAbscissa2.Text = ""
		lblValue1.Text = ""
		lblValue2.Text = ""
		DrawCursor(1)
	End If
End Sub

'Draws the cursor
'Mode 0 = redraw value, 1 = remove value
Sub DrawCursor(Mode As Int)
	Dim ind As Int
	
	ind = (CursorX - LineWidth2) / LineWidth
	If Mode = 0 Then
		cvsDiagram1.DrawLine(CursorX, 0, CursorX, GraphH, colCursor, LineWidth)
		cvsDiagram1.DrawLine(CursorX, Vref(0), CursorX, Vals(0, ind), colCursorLine, LineWidth)
		cvsDiagram2.DrawLine(CursorX, 0, CursorX, GraphH, colCursor, LineWidth)
		cvsDiagram2.DrawLine(CursorX, Vref(1), CursorX, Vals(1, ind), colCursorLine, LineWidth)
	Else 
		cvsDiagram1.DrawLine(CursorX, 0, CursorX, GraphH, colGraphBackground, LineWidth)
		cvsDiagram1.DrawLine(CursorX, Vref(0), CursorX, Vals(0, ind), colLine, LineWidth)
		cvsDiagram1.DrawPoint(CursorX, Vref(0), colLine)
		cvsDiagram2.DrawLine(CursorX, 0, CursorX, GraphH, colGraphBackground, LineWidth)
		cvsDiagram2.DrawLine(CursorX, Vref(1), CursorX, Vals(1, ind), colLine, LineWidth)
		cvsDiagram2.DrawPoint(CursorX, Vref(1), colLine)
	End If
	cvsDiagram1.DrawLine(CursorX - LineWidth, Vref(0), CursorX + LineWidth, Vref(0), colZeroLine, LineWidth)
	cvsDiagram2.DrawLine(CursorX - LineWidth, Vref(1), CursorX + LineWidth, Vref(1), colZeroLine, LineWidth)
	rectCursor.Left = CursorX - LineWidth
	rectCursor.Right = CursorX + LineWidth + 1
	pnlDiagram1.Invalidate2(rectCursor)
	pnlDiagram2.Invalidate2(rectCursor)
End Sub

Sub btnCursor_Touch(ViewTag As Object, Action As Int, X As Float, Y As Float, MotionEvent As Object) As Boolean
	Dim btn As Button
	
	btn = Sender

	Select Action
	Case Activity.ACTION_DOWN
		Time1 = DateTime.Now
		TimerLong.Enabled = True
		If btn.Tag = ">" Then
			CursorSign = 1
		Else
			CursorSign = -1
		End If
	Case Activity.ACTION_MOVE
	Case Activity.ACTION_UP
		Time1 = DateTime.Now - Time1
		If Time1 <= TimerLong.Interval AND ((CursorSign = -1 AND CursorX >= LineWidth) OR (CursorSign = 1 AND CursorX <= GraphW1 - 3 * LineWidth2)) Then
			DisplayCursor(CursorX + CursorSign * LineWidth, 0)
		End If
		TimerShort.Enabled = False
		TimerLong.Enabled = False
	End Select
	Return True
End Sub

Sub TimerLong_Tick
	TimerLong.Enabled = False
	TimerShort.Enabled = True
End Sub

Sub TimerShort_Tick
	If (CursorSign = -1 AND CursorX >= LineWidth) OR (CursorSign = 1 AND CursorX <= GraphW1 - 3 * LineWidth2) Then
		DisplayCursor(CursorX + CursorSign * LineWidth, 0)
	End If
End Sub

Sub btnFFTDelete_Click
	If flgDeleteSamples = False Then
		flgDeleteSamples = True
		btnFFTDelete.Background = sdTime2
		DisplayCursor(CursorX, 0)
	Else 
		flgDeleteSamples = False
		btnFFTDelete.Background = sdTime1
	End If
End Sub

Sub btnFFTInverse_Click
	CalcFFTInverse
	DisplayType("DispTime")
	flgFFTInverse = True
	btnFFTDelete_Click
End Sub

Sub setPadding(lbl As Label)
	Dim lp As Int
	lp = DipToCurrent(lbl.TextSize * .5)
	Dim jo = lbl As JavaObject
	jo.RunMethod("setPadding", Array As Object(lp, 1dip, lp, 1dip))
End Sub
