<?xml version="1.0" encoding="UTF-8"?>
<root>
    <doclet-version-NOT-library-version>1.07</doclet-version-NOT-library-version>
    <class>
        <name>rubikcubewrapper.rubikCubeWrapper</name>
        <shortname>RubikCube</shortname>
        <objectwrapper>com.catalinjurjiu.animcubeandroid.AnimCube</objectwrapper>
        <owner>activity</owner>
        <event>animation_finished</event>
        <event>cube_model(model As String)</event>
        <method>
            <name>DesignerCreateView</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>base</name>
                <type>anywheresoftware.b4a.objects.PanelWrapper</type>
            </parameter>
            <parameter>
                <name>lw</name>
                <type>anywheresoftware.b4a.objects.LabelWrapper</type>
            </parameter>
            <parameter>
                <name>props</name>
                <type>anywheresoftware.b4a.objects.collections.Map</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>AnimateMoveSequenceReversed</name>
            <comment>Animates all the moves in the currently set move sequence one move at a time, in reverse (i.e. from end to start with opposite twisting direction). When a move has
 completed, the next one is automatically started.
 
 The animation stops when the first move in the move sequence is reached and animated.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>applyMoveSequenceReversed</name>
            <comment>Instantly applies the whole move sequence in reverse, on the cube, without animation.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>BringToFront</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayout</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>arg3</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>animateMoveReversed</name>
            <comment>Animates in reverse (i.e. with opposite twisting direction) only the previous move from the move sequence. When it has completed, the next one is not automatically started.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>animateMove</name>
            <comment>Animates only the next move from the move sequence. When it has completed, the next one is not automatically started.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SendToBack</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>AnimateMoveSequence</name>
            <comment>Animates all the moves in the currently set move sequence one move at a time. When a move has completed, the next one is automatically started.
 
 The animation stops when the last move in the move sequence is reached and animated.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>applyMove</name>
            <comment>Instantly applies the next move on the cube, without animation.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetVisibleAnimated</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>stopAnimation</name>
            <comment>Stops an in-progress animation. No-op if an animation is not in progress.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>RemoveView</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Invalidate3</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg3</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>applyMoveSequence</name>
            <comment>Instantly applies the whole move sequence on the cube, without animation.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Invalidate2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>SetColorAnimated</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBackgroundImage">SetBackgroundImageNew</name>
            <comment></comment>
            <returntype>anywheresoftware.b4a.objects.drawable.BitmapDrawable</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
        </method>
        <method>
            <name>ResetToInitialState</name>
            <comment>Resets the cube to its initial state. This includes:
 
 stopping any running animation
 resetting the facelets colors to their initial state
 resetting the move counter to the start of the currently defined move sequence.

 see setMoveSequence(String)
 see setCubeModel(String)</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>applyMoveReversed</name>
            <comment>Instantly applies the previous move on reverse, on the cube, without animation.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Invalidate</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayoutAnimated</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>arg3</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>arg4</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>RequestFocus</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Left</name>
            <returntype>int</returntype>
            <parameter>
                <name>left</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Background</name>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Parent</name>
            <returntype>java.lang.Object</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Color</name>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Enabled</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>CubeModel</name>
            <parameter>
                <name>colorValues</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Sets the cube in the specified state. This method expects a String with exactly 54 characters (i.e. 9 facelets on each cube face * 6 cube faces). If the string
 is of different length, nothing will happen.

 The string needs to be a sequence of integers specified in CubeColors. Each integer specifies the color of one cube facelet. Additionally, the
 order in which faces are specified is not relevant, since AnimCube doesn't care about the cube model that much. The specified model doesn't even have to be a
 valid Rubik's cube.

 For example:
    "000000000111111111222222222333333333444444444555555555"
 Represents a solved cube.

 Note: after this is set, resetToInitialState() will reset the cube to the state set here, not to the cube state previous to calling setCubeModel(String)


 colorValues a String of integers in the format described above.</comment>
        </property>
        <property>
            <name>BackFaceDistance</name>
            <parameter>
                <name>bfd</name>
                <type>int</type>
            </parameter>
            <comment>set the backface distance from the cube</comment>
        </property>
        <property>
            <name>MoveSequence</name>
            <parameter>
                <name>moveSequence</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>SingleRotationSpeed</name>
            <parameter>
                <name>singleRotationSpeed</name>
                <type>int</type>
            </parameter>
            <comment>Sets the rotation speed of a single rotation. This parameter allows to customize the speed of quarter turn separately from face turns.
 

 The value should consist only of decimal digits.
 

 The higher value the slower is the animation. The default value is 10, which corresponds to approximately 1 second for face turn and approximately 2/3
 seconds for quarter turn if not specified differently.
 

 The face turn speed can be adjusted separately by setDoubleRotationSpeed(int).
 

 If this is called while the cube is animating a move, its effects will only be applied starting with the next move.
 

 singleRotationSpeed =&gt; the desired rotation speed.</comment>
        </property>
        <property>
            <name>Top</name>
            <returntype>int</returntype>
            <parameter>
                <name>top</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>DoubleRotationSpeed</name>
            <parameter>
                <name>doubleRotationSpeed</name>
                <type>int</type>
            </parameter>
            <comment>Sets the rotation speed of a double rotation. This parameter allows to customize the speed of face turns separately from quarter turns.

 
 The value should consist only of decimal digits.
 
 The higher value the slower is the animation. The default value is 10, which corresponds to approximately 1 second
 for the face turn.

 The default is set to the 150% of the value of speed.
 
 
 The quarter turn speed can be adjusted by setSingleRotationSpeed(int).
 
 
 If this is called while the cube is animating a move, its effects will only be applied starting with the next move.
 

 doubleRotationSpeed =&gt; the desired rotation speed.</comment>
        </property>
        <property>
            <name>Visible</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Editable</name>
            <parameter>
                <name>isEditable</name>
                <type>boolean</type>
            </parameter>
            <comment>Enables or disables individual face rotation through user touch event. If this is disabled, touch interactions will always turn the whole cube, not individual faces.

 isEditable = true if the user should be able to edit the cube</comment>
        </property>
        <property>
            <name>Padding</name>
            <returntype>int[]</returntype>
            <parameter>
                <name>arg0</name>
                <type>int[]</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Height</name>
            <returntype>int</returntype>
            <parameter>
                <name>height</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Tag</name>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.Object</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Width</name>
            <returntype>int</returntype>
            <parameter>
                <name>Width</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
    </class>
    <version>1.0</version>
</root>
