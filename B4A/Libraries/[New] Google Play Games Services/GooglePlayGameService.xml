<?xml version="1.0" encoding="UTF-8"?>
<root>
    <doclet-version-NOT-library-version>1.07</doclet-version-NOT-library-version>
    <class>
        <name>com.biswajit.gpgservicenew.AbstractDataBufferWrapper</name>
        <shortname>GPGSAbstractDataBuffer</shortname>
        <owner>process</owner>
        <method>
            <name>GetCount</name>
            <comment>Returns the item count of the buffer.
 If the buffer is not loaded yet it will return 0.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>Get</name>
            <comment>Get the item from the particular position.
 If the buffer is not loaded yet it will return null.
position: The index of the item.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>position</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetObject</name>
            <comment>Get the underlying native buffer object.
 If the buffer is not loaded yet it will return null.
position: The index of the item.</comment>
            <returntype>java.lang.Object</returntype>
        </method>
        <method>
            <name>Release</name>
            <comment>Release the buffer.</comment>
            <returntype>void</returntype>
        </method>
    </class>
    <class>
        <name>com.biswajit.gpgservicenew.AchievementsClientWrapper</name>
        <shortname>GPGSAchievementsClient</shortname>
        <owner>process</owner>
        <event>ReceivedAchievementsIntent(intent as Intent, statusCode as int)</event>
        <event>AchievementsLoaded(count as Int, statusCode as int)</event>
        <event>AchievementIncrementCompleted(achievementId as String, unlocked as Boolean, statusCode as int)</event>
        <event>AchievementRevealed(achievementId as String, statusCode as int)</event>
        <event>AchievementStepsChanged(achievementId as String, changed as Boolean, statusCode as int)</event>
        <event>AchievementUnlocked(achievementId as String, statusCode as int)</event>
        <method>
            <name>SetStepsImmediate</name>
            <comment>Asynchronously sets an achievement to have at least the given number of steps completed.
 Calling this method while the achievement already has more steps than the provided value is a no-op.
 Once the achievement reaches the maximum number of steps, the achievement will automatically be unlocked, and any further mutation operations will be ignored.
 &lt;b&gt;AchievementStepsChanged&lt;/b&gt; event will be raised.
achievementId: The ID of the achievement to modify.
numSteps: The number of steps to set the achievement to. Must be greater than 0.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>achievementId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>numSteps</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Load</name>
            <comment>Asynchronously loads a list of achievements for the currently signed-in player.
 &lt;b&gt;Note: You can't store the returned buffer to any list or array. Use GetAchievementFromBuffer to retrieve the items.&lt;/b&gt;
 &lt;b&gt;Important: Remember to close the buffer by calling Release after you finish working with the buffer data.&lt;/b&gt;
 &lt;b&gt;AchievementsLoaded&lt;/b&gt; event will be raised.
forceReload: If true, this call will clear any locally cached data and attempt to fetch the latest data from the server. This would commonly be used for something like a user-initiated refresh. Normally, this should be set to false to gain advantages of data caching.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>forceReload</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>UnlockImmediate</name>
            <comment>Asynchronously unlocks an achievement for the currently signed in player. If the achievement is hidden this will reveal it to the player.
 &lt;b&gt;AchievementUnlocked&lt;/b&gt; event will be raised.
achievementId: The achievement ID to unlock.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>achievementId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetAchievementsIntent</name>
            <comment>Asynchronously loads an Intent to show the list of achievements for a game.
 Note that the Intent returned from the Task must be invoked with GPGSGames.StartActivityForResult,
 so that the identity of the calling package can be established.
 &lt;b&gt;ReceivedAchievementsIntent&lt;/b&gt; event will be raised.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>Unlock</name>
            <comment>Unlocks an achievement for the currently signed in player. If the achievement is hidden this will reveal it to the player.
achievementId: The achievement ID to unlock.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>achievementId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetAchievementFromBuffer</name>
            <comment>Get the Achievement object from the buffer.
 If the buffer is not loaded yet it will return null. Call Load to populate the buffer.
position: Position of the item.</comment>
            <returntype>com.biswajit.gpgservicenew.AchievementWrapper</returntype>
            <parameter>
                <name>position</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetAchievementsBuffer</name>
            <comment>Returns the achievements buffer.
 If the buffer is not loaded yet it will return null. Call Load to populate the buffer.</comment>
            <returntype>com.biswajit.gpgservicenew.AbstractDataBufferWrapper</returntype>
        </method>
        <method>
            <name>SetSteps</name>
            <comment>Sets an achievement to have at least the given number of steps completed.
 Calling this method while the achievement already has more steps than the provided value is a no-op.
 Once the achievement reaches the maximum number of steps, the achievement will automatically be unlocked, and any further mutation operations will be ignored.
achievementId: The ID of the achievement to modify.
numSteps: The number of steps to set the achievement to. Must be greater than 0.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>achievementId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>numSteps</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Increment</name>
            <comment>Increments an achievement by the given number of steps.
 The achievement must be an incremental achievement. Once an achievement reaches at least the maximum number of steps,
 it will be unlocked automatically. Any further increments will be ignored.
achievementId: The ID of the achievement to increment.
numSteps: The number of steps to increment by. Must be greater than 0.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>achievementId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>numSteps</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IncrementImmediate</name>
            <comment>Asynchronously increments an achievement by the given number of steps.
 The achievement must be an incremental achievement. Once an achievement reaches at least the maximum number of steps,
 it will be unlocked automatically. Any further increments will be ignored.
 &lt;b&gt;AchievementIncrementCompleted&lt;/b&gt; event will be raised.
achievementId: The ID of the achievement to increment.
numSteps: The number of steps to increment by. Must be greater than 0.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>achievementId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>numSteps</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>RevealImmediate</name>
            <comment>Asynchronously reveals a hidden achievement to the currently signed in player. If the achievement is already visible, this will have no effect.
 &lt;b&gt;AchievementRevealed&lt;/b&gt; event will be raised.
achievementId: The achievement ID to reveal.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>achievementId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Reveal</name>
            <comment>Reveals a hidden achievement to the currently signed-in player. If the achievement has already been unlocked, this will have no effect.
achievementId: The achievement ID to reveal.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>achievementId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>com.biswajit.gpgservicenew.AchievementWrapper</name>
        <shortname>GPGSAchievement</shortname>
        <owner>process</owner>
        <event>RevealedImageLoaded(uri as String, isBitmap as Boolean)</event>
        <event>UnlockedImageLoaded(uri as String, isBitmap as Boolean)</event>
        <method>
            <name>GetFormattedCurrentSteps</name>
            <comment>Retrieves the number of steps this user has gone toward unlocking this achievement (formatted for the user's locale); only applicable for TYPE_INCREMENTAL achievement types.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>SetRevealedImage</name>
            <comment>Set the achievement's revealed image icon to the give image view.
 &lt;b&gt;RevealedImageLoaded&lt;/b&gt; event will be raised.
IV: ImageView on which you want to load the icon.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>IV</name>
                <type>anywheresoftware.b4a.objects.ImageViewWrapper</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetCurrentSteps</name>
            <comment>Retrieves the number of steps this user has gone toward unlocking this achievement; only applicable for TYPE_INCREMENTAL achievement types.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>GetFormattedTotalSteps</name>
            <comment>Retrieves the total number of steps necessary to unlock this achievement, formatted for the user's locale; only applicable for TYPE_INCREMENTAL achievement types.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>GetLastUpdatedTimestamp</name>
            <comment>Retrieves the timestamp (in milliseconds since epoch) at which this achievement was last updated. If the achievement has never been updated, this will return -1.</comment>
            <returntype>long</returntype>
        </method>
        <method>
            <name>GetType</name>
            <comment>Retrieves the type of this achievement.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>GetRevealedImageUri</name>
            <comment>Retrieves a URI that can be used to load the achievement's revealed image icon. Returns null if the achievement has no revealed image.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>GetPlayer</name>
            <comment>Retrieves the player information associated with this achievement.</comment>
            <returntype>com.biswajit.gpgservicenew.PlayerWrapper</returntype>
        </method>
        <method>
            <name>GetXpValue</name>
            <comment>Retrieves the XP value given to players for unlocking this achievement.</comment>
            <returntype>long</returntype>
        </method>
        <method>
            <name>GetUnlockedImageUri</name>
            <comment>Retrieves a URI that can be used to load the achievement's unlocked image icon. Returns null if the achievement has no unlocked image.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>GetTotalSteps</name>
            <comment>Retrieves the total number of steps necessary to unlock this achievement; only applicable for TYPE_INCREMENTAL achievement types.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>GetAchievementId</name>
            <comment>Retrieves the ID of this achievement.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>GetDescription</name>
            <comment>Retrieves the description for this achievement.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>GetState</name>
            <comment>Retrieves the state of the achievement.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>GetName</name>
            <comment>Retrieves the name of this achievement.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>SetUnlockedImage</name>
            <comment>Set the achievement's unlocked image icon to the give image view.
 &lt;b&gt;UnlockedImageLoaded&lt;/b&gt; event will be raised.
IV: ImageView on which you want to load the icon.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>IV</name>
                <type>anywheresoftware.b4a.objects.ImageViewWrapper</type>
            </parameter>
        </method>
        <field>
            <name>TYPE_INCREMENTAL</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>STATE_HIDDEN</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>STATE_REVEALED</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>STATE_UNLOCKED</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>TYPE_STANDARD</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>com.biswajit.gpgservicenew.EventsClientWrapper</name>
        <shortname>GPGSEventsClient</shortname>
        <owner>process</owner>
        <event>EventsLoaded(count as int, statusCode as int)</event>
        <method>
            <name>Load</name>
            <comment>Asynchronously load an annotated EventBuffer that represents the event data for the currently signed-in player.
 &lt;b&gt;Note: You can't store the returned buffer to any list or array. Use GetEventFromBuffer to retrieve the items.&lt;/b&gt;
 &lt;b&gt;Important: Remember to close the buffer by calling Release after you finish working with the buffer data.&lt;/b&gt;
 &lt;b&gt;EventsLoaded&lt;/b&gt; event will be raised.
forceReload: If true, this call will clear any locally cached data and attempt to fetch the latest data from the server. This would commonly be used for something like a user-initiated refresh. Normally, this should be set to false to gain advantages of data caching.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>forceReload</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>GetEventsBuffer</name>
            <comment>Returns the events buffer.
 If the buffer is not loaded yet it will return null. Call Load to populate the buffer.</comment>
            <returntype>com.biswajit.gpgservicenew.AbstractDataBufferWrapper</returntype>
        </method>
        <method>
            <name>LoadByIds</name>
            <comment>Asynchronously load an annotated EventBuffer that represents the event data for the specified event IDs.
 &lt;b&gt;EventsLoaded&lt;/b&gt; event will be raised.
forceReload: If true, this call will clear any locally cached data and attempt to fetch the latest data from the server. This would commonly be used for something like a user-initiated refresh. Normally, this should be set to false to gain advantages of data caching.
eventIds: The IDs of the events to load.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>forceReload</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>eventIds</name>
                <type>java.lang.String[]</type>
            </parameter>
        </method>
        <method>
            <name>Increment</name>
            <comment>Increments an event specified by eventId by the given number of steps.
 This is the fire-and-forget API. Event increments are cached locally and flushed to the server in batches.
eventId: The event ID to increment.
incrementAmount: The amount increment by. Must be greater than or equal to 0.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>eventId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>incrementAmount</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetEventFromBuffer</name>
            <comment>Get the event object from the buffer.
 If the buffer is not loaded yet it will return null. Call Load to populate the buffer.
position: Position of the item.</comment>
            <returntype>com.biswajit.gpgservicenew.EventWrapper</returntype>
            <parameter>
                <name>position</name>
                <type>int</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>com.biswajit.gpgservicenew.EventWrapper</name>
        <shortname>GPGSEvent</shortname>
        <owner>process</owner>
        <event>EventIconImageLoaded(uri as String, isBitmap as Boolean)</event>
        <method>
            <name>GetPlayer</name>
            <comment>Retrieves the player information associated with this event. Note that this object is a volatile representation, so it is not safe to cache the output of this directly.</comment>
            <returntype>com.biswajit.gpgservicenew.PlayerWrapper</returntype>
        </method>
        <method>
            <name>GetIconImageUri</name>
            <comment>Retrieves a URI that can be used to load the event's image icon. Returns null if the event has no image.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>SetIconImage</name>
            <comment>Set the event's icon image to the give image view.
 &lt;b&gt;EventIconImageLoaded&lt;/b&gt; event will be raised.
IV: ImageView on which you want to load the icon.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>IV</name>
                <type>anywheresoftware.b4a.objects.ImageViewWrapper</type>
            </parameter>
        </method>
        <method>
            <name>GetFormattedValue</name>
            <comment>Retrieves the sum of increments have been made to this event (formatted for the user's locale).</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>GetDescription</name>
            <comment>Retrieves the description for this event.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>GetName</name>
            <comment>Retrieves the name of this event.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetEventId</name>
            <comment>Retrieves the ID of this event.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>IsVisible</name>
            <comment>Retrieves whether the event should be displayed to the user in any event related UIs.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetValue</name>
            <comment>Retrieves the number of increments this user has made to this event.</comment>
            <returntype>long</returntype>
        </method>
    </class>
    <class>
        <name>com.biswajit.gpgservicenew.GamesClientWrapper</name>
        <shortname>GPGSGamesClient</shortname>
        <owner>process</owner>
        <event>ActivationHintReceived(snapshotMetadata as GPGSSnapshotMetadata, statusCode as int)</event>
        <event>AppIdReceived(appId as String, statusCode as int)</event>
        <event>AccountNameReceived(name as String, statusCode as int)</event>
        <event>SettingsIntentReceived(intent as Intent, statusCode as int)</event>
        <method>
            <name>SetGravityForPopups</name>
            <comment>Asynchronously sets the part of the screen at which games service pop-ups (for example, "welcome back" or "achievement unlocked" popups) will be displayed using gravity.
gravity: The gravity which controls the placement of games service pop-ups.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>gravity</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetActivationHint</name>
            <comment>Asynchronously loads a Bundle that may contain an information regarding to the previous user's action.
 The GPGSSnapshotMetadata returned from the Task may be null if it was already received or there is no related data found.
 Unless a new user action is performed all the subsequent calls will return a Task with a null GPGSSnapshotMetadata.
 &lt;b&gt;ActivationHintReceived&lt;/b&gt; event will be raised.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>GetAppId</name>
            <comment>Asynchronously loads the application ID linked to this client instance.
 &lt;b&gt;AppIdReceived&lt;/b&gt; event will be raised.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>GetSettingsIntent</name>
            <comment>Asynchronously loads an Intent to show the Settings screen that allows the user to configure Games-related features for the current game.
 Note that this must be invoked with GPGSGames.StartActivityForResult, so that the identity of the calling package can be established.
 &lt;b&gt;SettingsIntentReceived&lt;/b&gt; event will be raised.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>SetViewForPopups</name>
            <comment>Asynchronously sets the View to use as a content view for popups.
view: The view to use as a content view for popups. View cannot be null.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>view</name>
                <type>android.view.ViewGroup</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetCurrentAccountName</name>
            <comment>Asynchronously loads the name of the currently selected account. This is the account the user has chosen to use for Google Play Games.
 Note that your app must have android.permission.GET_ACCOUNTS declared in your manifest in order to use this method. Otherwise the Task will fail.
 &lt;b&gt;AccountNameReceived&lt;/b&gt; event will be raised.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>com.biswajit.gpgservicenew.GamesMetadataClientWrapper</name>
        <shortname>GPGSGamesMetadataClient</shortname>
        <owner>process</owner>
        <event>CurrentGameMetadataLoaded(game as GPGSGame, fromLocalCache as Boolean, statusCode as int)</event>
        <method>
            <name>GetCurrentGame</name>
            <comment>Asynchronously loads the GPGSGame for the current game from the local cache.
 The game returned from the Task may be null if the metadata is not available locally.
 &lt;b&gt;CurrentGameMetadataLoaded&lt;/b&gt; event will be raised.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>LoadGame</name>
            <comment>Asynchronously loads an annotated GPGSGame for the current game.
 &lt;b&gt;CurrentGameMetadataLoaded&lt;/b&gt; event will be raised.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>com.biswajit.gpgservicenew.GamesWrapper</name>
        <shortname>GPGSGames</shortname>
        <owner>process</owner>
        <event>OnGPGSActivityResult(RequestCode As String, ResultCode As Int, ResultIntent As Intent)</event>
        <method>
            <name>GetGamesMetadataClient</name>
            <comment>Returns a new instance of GamesMetadataClient for use in a Context.</comment>
            <returntype>com.biswajit.gpgservicenew.GamesMetadataClientWrapper</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>GetPlayerStatsClientWithConnectionPopup</name>
            <comment>Returns a new instance of PlayerStatsClient for use in a Context.</comment>
            <returntype>com.biswajit.gpgservicenew.PlayerStatsClientWrapper</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>showConnectingPopup</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>gravity</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetVideosClientWithConnectionPopup</name>
            <comment>Returns a new instance of VideosClient for use in a Context.</comment>
            <returntype>com.biswajit.gpgservicenew.VideosClientWrapper</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>showConnectingPopup</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>gravity</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetLeaderboardsClient</name>
            <comment>Returns a new instance of LeaderboardsClient for use in a Context.</comment>
            <returntype>com.biswajit.gpgservicenew.LeaderboardsClientWrapper</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>GetSnapshotsClientWithConnectionPopup</name>
            <comment>Returns a new instance of SnapshotsClient for use in a Context.</comment>
            <returntype>com.biswajit.gpgservicenew.SnapshotsClientWrapper</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>showConnectingPopup</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>gravity</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetGamesClient</name>
            <comment>Returns a new instance of GamesClient for use in a Context.</comment>
            <returntype>com.biswajit.gpgservicenew.GamesClientWrapper</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>StartActivityForResult</name>
            <comment>Launch an activity for which you would like a result when it finished.
 When this activity exits, your &lt;b&gt;OnGPGSActivityResult&lt;/b&gt; event will be raised with the given requestCode.
intent: The intent to start.
requestCode: This code will be returned in OnGPGSActivityResult when the activity exits. You can check this to verify which activity exited.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>intent</name>
                <type>anywheresoftware.b4a.objects.IntentWrapper</type>
            </parameter>
            <parameter>
                <name>requestCode</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetEventsClient</name>
            <comment>Returns a new instance of EventsClient for use in a Context.</comment>
            <returntype>com.biswajit.gpgservicenew.EventsClientWrapper</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>GetSnapshotsClient</name>
            <comment>Returns a new instance of SnapshotsClient for use in a Context.</comment>
            <returntype>com.biswajit.gpgservicenew.SnapshotsClientWrapper</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>GetPlayerStatsClient</name>
            <comment>Returns a new instance of PlayerStatsClient for use in a Context.</comment>
            <returntype>com.biswajit.gpgservicenew.PlayerStatsClientWrapper</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>GetVideosClient</name>
            <comment>Returns a new instance of VideosClient for use in a Context.</comment>
            <returntype>com.biswajit.gpgservicenew.VideosClientWrapper</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>GetEventsClientWithConnectionPopup</name>
            <comment>Returns a new instance of EventsClient for use in a Context.</comment>
            <returntype>com.biswajit.gpgservicenew.EventsClientWrapper</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>showConnectingPopup</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>gravity</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetGamesClientWithConnectionPopup</name>
            <comment>Returns a new instance of GamesClient for use in a Context.</comment>
            <returntype>com.biswajit.gpgservicenew.GamesClientWrapper</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>showConnectingPopup</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>gravity</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetAchievementsClientWithConnectionPopup</name>
            <comment>Returns a new instance of AchievementsClient for use in a Context.</comment>
            <returntype>com.biswajit.gpgservicenew.AchievementsClientWrapper</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>showConnectingPopup</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>gravity</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetPlayersClient</name>
            <comment>Returns a new instance of PlayersClient for use in a Context.</comment>
            <returntype>com.biswajit.gpgservicenew.PlayersClientWrapper</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>GetGamesMetadataClientWithConnectionPopup</name>
            <comment>Returns a new instance of GamesMetadataClient for use in a Context.</comment>
            <returntype>com.biswajit.gpgservicenew.GamesMetadataClientWrapper</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>showConnectingPopup</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>gravity</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetAchievementsClient</name>
            <comment>Returns a new instance of AchievementsClient for use in a Context.</comment>
            <returntype>com.biswajit.gpgservicenew.AchievementsClientWrapper</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>GetPlayersClientWithConnectionPopup</name>
            <comment>Returns a new instance of PlayersClient for use in a Context.</comment>
            <returntype>com.biswajit.gpgservicenew.PlayersClientWrapper</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>showConnectingPopup</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>gravity</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetLeaderboardsClientWithConnectionPopup</name>
            <comment>Returns a new instance of LeaderboardsClient for use in a Context.</comment>
            <returntype>com.biswajit.gpgservicenew.LeaderboardsClientWrapper</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>showConnectingPopup</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>gravity</name>
                <type>int</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>com.biswajit.gpgservicenew.GameWrapper</name>
        <shortname>GPGSGame</shortname>
        <owner>process</owner>
        <event>GameFeaturedImageLoaded(uri as String, isBitmap as Boolean)</event>
        <event>GameHiresImageLoaded(uri as String, isBitmap as Boolean)</event>
        <event>GameIconImageLoaded(uri as String, isBitmap as Boolean)</event>
        <method>
            <name>GetSecondaryCategory</name>
            <comment>Retrieves the secondary category of the game - this may be null.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>SetHiResImage</name>
            <comment>Set the game's hi-res image to the give image view.
 &lt;b&gt;GameHiresImageLoaded&lt;/b&gt; event will be raised.
IV: ImageView on which you want to load the icon.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>IV</name>
                <type>anywheresoftware.b4a.objects.ImageViewWrapper</type>
            </parameter>
        </method>
        <method>
            <name>AreSnapshotsEnabled</name>
            <comment>Indicates whether or not this game supports snapshots.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetFeaturedImageUri</name>
            <comment>Retrieves an image URI that can be used to load the game's featured (banner) image from Google Play. Returns null if game has no featured image.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>GetHiResImageUri</name>
            <comment>Retrieves an image URI that can be used to load the game's hi-res image. Returns null if game has no hi-res image.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>GetApplicationId</name>
            <comment>Retrieves the application ID for this game.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>GetAchievementTotalCount</name>
            <comment>Retrieves the number of achievements registered for this game.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>GetIconImageUri</name>
            <comment>Retrieves an image URI that can be used to load the game's icon image. Returns null if game has no icon image.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>GetPrimaryCategory</name>
            <comment>Retrieves the primary category of the game - this is may be null.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>SetIconImage</name>
            <comment>Set the game's icon image to the give image view.
 &lt;b&gt;GameIconImageLoaded&lt;/b&gt; event will be raised.
IV: ImageView on which you want to load the icon.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>IV</name>
                <type>anywheresoftware.b4a.objects.ImageViewWrapper</type>
            </parameter>
        </method>
        <method>
            <name>GetDeveloperName</name>
            <comment>Retrieves the name of the developer of this game.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>GetDescription</name>
            <comment>Retrieves the description of this game.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>SetFeaturedImage</name>
            <comment>Set the game's featured (banner) image from Google Play to the give image view.
 &lt;b&gt;GameFeaturedImageLoaded&lt;/b&gt; event will be raised.
IV: ImageView on which you want to load the icon.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>IV</name>
                <type>anywheresoftware.b4a.objects.ImageViewWrapper</type>
            </parameter>
        </method>
        <method>
            <name>HasGamepadSupport</name>
            <comment>Indicates whether or not this game is marked as supporting gamepads.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetDisplayName</name>
            <comment>Retrieves the display name for this game.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>GetLeaderboardCount</name>
            <comment>Gets the number of leaderboards registered for this game.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>GetThemeColor</name>
            <comment>Retrieves the theme color for this game. The theme color is used to configure the appearance of Play Games UIs.</comment>
            <returntype>java.lang.String</returntype>
        </method>
    </class>
    <class>
        <name>com.biswajit.gpgservicenew.GoogleSignInAccountWrapper</name>
        <shortname>GPGSUserAccount</shortname>
        <owner>process</owner>
        <method>
            <name>GetId</name>
            <comment>Returns the unique ID for the Google account</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>GetGivenName</name>
            <comment>Returns the given name of the signed in user</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetPhotoUrl</name>
            <comment>Returns the photo url of the signed in user if the user has a profile picture</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>GetFamilyName</name>
            <comment>Returns the family name of the signed in user</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>GetDisplayName</name>
            <comment>Returns the display name of the signed in user</comment>
            <returntype>java.lang.String</returntype>
        </method>
    </class>
    <class>
        <name>com.biswajit.gpgservicenew.LeaderboardsClientWrapper</name>
        <shortname>GPGSLeaderboardsClient</shortname>
        <owner>process</owner>
        <event>ReceivedAllLeaderboardsIntent(intent as Intent, statusCode as int)</event>
        <event>ReceivedLeaderboardsIntent(intent as Intent, statusCode as int)</event>
        <event>CurrentPlayerLeaderboardScoreLoaded(score as GPGSLeaderboardScore)</event>
        <event>CurrentPlayerLeaderboardScoreLoadFailed(showingConsent as Boolean, statusCode as int)</event>
        <event>FriendsAccessPermissionGranted(granted as Boolean)</event>
        <event>AllLeaderboardMetadataLoaded(count as int, statusCode as int)</event>
        <event>LeaderboardMetadataLoaded(leaderboard as GPGSLeaderboard, statusCode as int)</event>
        <event>PlayerCenteredScoresLoaded(count as int)</event>
        <event>PlayerCenteredScoresLoadFailed(showingConsent as Boolean, statusCode as int)</event>
        <event>TopScoresLoaded(count as int)</event>
        <event>TopScoresLoadFailed(showingConsent as Boolean, statusCode as int)</event>
        <event>ScoreSubmitted(submissionData as GPGSScoreSubmissionData, statusCode as int)</event>
        <method>
            <name>LoadLeaderboardMetadata2</name>
            <comment>Asynchronously loads a leaderboard metadata specified by leaderboardId.
 &lt;b&gt;LeaderboardMetadataLoaded&lt;/b&gt; event will be raised.
leaderboardId: ID of the leaderboard to load metadata for.
forceReload: If true, this call will clear any locally cached data and attempt to fetch the latest data from the server. This would commonly be used for something like a user-initiated refresh. Normally, this should be set to false to gain advantages of data caching.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>leaderboardId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>forceReload</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>GetLeaderboardIntent</name>
            <comment>Asynchronously loads an Intent to show a leaderboard for a game specified by a leaderboardId. Note that this must be invoked with GPGSGames.StartActivityForResult, so that the identity of the calling package can be established.
 &lt;b&gt;ReceivedLeaderboardsIntent&lt;/b&gt; event will be raised.
leaderboardId: The ID of the leaderboard to view.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>leaderboardId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>LoadPlayerCenteredScores</name>
            <comment>Asynchronously loads the player-centered page of scores for the leaderboard specified by leaderboardId. If the player does not have a score on this leaderboard, this call will return the top page instead.
 For COLLECTION_FRIENDS, this call will fail if the user has not granted the game access to their friends list.
 &lt;b&gt;Note: You can't store the returned buffer to any list or array. Use GetPlayerCenteredScoreFromBuffer to retrieve the items.&lt;/b&gt;
 &lt;b&gt;Important: Remember to close the buffer by calling Release after you finish working with the buffer data.&lt;/b&gt;
 &lt;b&gt;PlayerCenteredScoresLoaded&lt;/b&gt; event will be raised if the task completes successfully.
 &lt;b&gt;PlayerCenteredScoresLoadFailed&lt;/b&gt; event will be raised if the task failed.
 &lt;b&gt;FriendsAccessPermissionGranted&lt;/b&gt; event will be raised when user grant/deny from consent screen.
leaderboardId: ID of the leaderboard.
span: Time span to retrieve data for. Valid values are TIME_SPAN_DAILY, TIME_SPAN_WEEKLY, or TIME_SPAN_ALL_TIME.
leaderboardCollection: The leaderboard collection to retrieve scores for. Valid values are either COLLECTION_PUBLIC or COLLECTION_FRIENDS.
maxResults: The maximum number of scores to fetch per page. Must be between 1 and 25.
forceReload: If true, this call will clear any locally cached data and attempt to fetch the latest data from the server. This would commonly be used for something like a user-initiated refresh. Normally, this should be set to false to gain advantages of data caching.
askConsentIfFailed: If true, this will show a consent screen asking for permission to access the list.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>leaderboardId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>span</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>leaderboardCollection</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>maxResults</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>forceReload</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>askConsentIfFailed</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>LoadCurrentPlayerLeaderboardScore</name>
            <comment>Asynchronously loads an annotated LeaderboardScore that represents the signed-in player's score for the leaderboard specified by leaderboardId.
 For COLLECTION_FRIENDS, this call will fail if the user has not granted the game access to their friends list.
 &lt;b&gt;CurrentPlayerLeaderboardScoreLoaded&lt;/b&gt; event will be raised if the task completes successfully.
 &lt;b&gt;CurrentPlayerLeaderboardScoreLoadFailed&lt;/b&gt; event will be raised if the task failed.
 &lt;b&gt;FriendsAccessPermissionGranted&lt;/b&gt; event will be raised when user grant/deny from consent screen.
leaderboardId: ID of the leaderboard to load the score from.
span: Time span to retrieve data for. Valid values are TIME_SPAN_DAILY, TIME_SPAN_WEEKLY, or TIME_SPAN_ALL_TIME.
leaderboardCollection: The leaderboard collection to retrieve scores for. Valid values are either COLLECTION_PUBLIC or COLLECTION_FRIENDS.
askConsentIfFailed: If true, this will show a consent screen asking for permission to access the list.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>leaderboardId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>span</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>leaderboardCollection</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>askConsentIfFailed</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>LoadLeaderboardMetadata</name>
            <comment>Asynchronously loads a list of leaderboards metadata for this game.
 &lt;b&gt;Note: You can't store the returned buffer to any list or array. Use GetLeaderboardFromBuffer to retrieve the items.&lt;/b&gt;
 &lt;b&gt;Important: Remember to close the buffer by calling Release after you finish working with the buffer data.&lt;/b&gt;
 &lt;b&gt;AllLeaderboardMetadataLoaded&lt;/b&gt; event will be raised.
forceReload: If true, this call will clear any locally cached data and attempt to fetch the latest data from the server. This would commonly be used for something like a user-initiated refresh. Normally, this should be set to false to gain advantages of data caching.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>forceReload</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>SubmitScoreImmediate2</name>
            <comment>Asynchronously submits the score to the leaderboard for the currently signed-in player. The score is ignored if it is worse (as defined by the leaderboard configuration) than a previously submitted score for the same player.
 This form of the API will attempt to submit the score to the server immediately within the task, returning a GPGSScoreSubmissionData on success with information about the submission.
 The meaning of the score value depends on the formatting of the leaderboard established in the developer console. Leaderboards support the following score formats:
 &lt;b&gt;Fixed-point:&lt;/b&gt; score represents a raw value, and will be formatted based on the number of decimal places configured. A score of 1000 would be formatted as 1000, 100.0, or 10.00 for 0, 1, or 2 decimal places.
 &lt;b&gt;Time:&lt;/b&gt; score represents an elapsed time in milliseconds. The value will be formatted as an appropriate time value.
 &lt;b&gt;Currency:&lt;/b&gt; score represents a value in micro units. For example, in USD, a score of 100 would display as $0.0001, while a score of 1000000 would display as $1.00
 &lt;b&gt;ScoreSubmitted&lt;/b&gt; event will be raised.
leaderboardId: The leaderboard to submit the score to.
score: The raw score value.
scoreTag: Optional metadata about this score. The value may contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>leaderboardId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>score</name>
                <type>long</type>
            </parameter>
            <parameter>
                <name>scoreTag</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>LoadMoreScores</name>
            <comment>Asynchronously loads an additional page of score data for the given score buffer. A new score buffer will be delivered that replaces the given buffer.
 For COLLECTION_FRIENDS, this call will fail if the user has not granted the game access to their friends list.
 &lt;b&gt;Note: You can't store the returned buffer to any list or array. Use GetPlayerCenteredScoreFromBuffer / GetTopScoreFromBuffer to retrieve the items.&lt;/b&gt;
 &lt;b&gt;Important: Remember to close the buffer by calling Release after you finish working with the buffer data.&lt;/b&gt;
 &lt;b&gt;PlayerCenteredScoresLoaded / TopScoresLoaded&lt;/b&gt; event will be raised if the task completes successfully.
 &lt;b&gt;PlayerCenteredScoresLoadFailed / TopScoresLoadFailed&lt;/b&gt; event will be raised if the task failed.
 &lt;b&gt;FriendsAccessPermissionGranted&lt;/b&gt; event will be raised when user grant/deny from consent screen.
isTopScoreBuffer: The buffer type. False means PlayerCenteredScoreBuffer.
buffer: The existing buffer that will be expanded. The buffer is allowed to be closed prior to being passed in to this method.
maxResults: The maximum number of scores to fetch per page. Must be between 1 and 25. Note that the number of scores returned here may be greater than this value, depending on how much data is cached on the device.
pageDirection: The direction to expand the buffer. Valid values are PAGE_DIRECTION_NEXT, PAGE_DIRECTION_PREV.
askConsentIfFailed: If true, this will show a consent screen asking for permission to access the list.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>isTopScoreBuffer</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>buffer</name>
                <type>com.biswajit.gpgservicenew.AbstractDataBufferWrapper</type>
            </parameter>
            <parameter>
                <name>maxResults</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>pageDirection</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>askConsentIfFailed</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>GetLeaderboardFromBuffer</name>
            <comment>Get the leaderboard object from the buffer.
 If the buffer is not loaded yet it will return null. Call LoadLeaderboardMetadata to populate the buffer.
position: Position of the item.</comment>
            <returntype>com.biswajit.gpgservicenew.LeaderboardWrapper</returntype>
            <parameter>
                <name>position</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetTopScoreFromBuffer</name>
            <comment>Get the top score object from the buffer.
 If the buffer is not loaded yet it will return null. Call LoadTopScores to populate the buffer.
position: Position of the item.</comment>
            <returntype>com.biswajit.gpgservicenew.LeaderboardScoreWrapper</returntype>
            <parameter>
                <name>position</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetLeaderboardIntent3</name>
            <comment>Asynchronously loads an Intent to show a leaderboard for a game specified by a leaderboardId. Note that this must be invoked with GPGSGames.StartActivityForResult, so that the identity of the calling package can be established.
 &lt;b&gt;ReceivedLeaderboardsIntent&lt;/b&gt; event will be raised.
leaderboardId: The ID of the leaderboard to view.
timeSpan: Time span to retrieve data for. Valid values are TIME_SPAN_DAILY, TIME_SPAN_WEEKLY, or TIME_SPAN_ALL_TIME.
collection: The collection to show by default. Valid values are COLLECTION_PUBLIC or COLLECTION_FRIENDS.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>leaderboardId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>timeSpan</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>collection</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>LoadTopScores</name>
            <comment>Asynchronously loads the top page of scores for the leaderboard specified by leaderboardId.
 For COLLECTION_FRIENDS, this call will fail if the user has not granted the game access to their friends list.
 &lt;b&gt;Note: You can't store the returned buffer to any list or array. Use GetTopScoreFromBuffer to retrieve the items.&lt;/b&gt;
 &lt;b&gt;Important: Remember to close the buffer by calling Release after you finish working with the buffer data.&lt;/b&gt;
 &lt;b&gt;TopScoresLoaded&lt;/b&gt; event will be raised if the task completes successfully.
 &lt;b&gt;TopScoresLoadFailed&lt;/b&gt; event will be raised if the task failed.
 &lt;b&gt;FriendsAccessPermissionGranted&lt;/b&gt; event will be raised when user grant/deny from consent screen.
leaderboardId: ID of the leaderboard.
span: Time span to retrieve data for. Valid values are TIME_SPAN_DAILY, TIME_SPAN_WEEKLY, or TIME_SPAN_ALL_TIME.
leaderboardCollection: The leaderboard collection to retrieve scores for. Valid values are either COLLECTION_PUBLIC or COLLECTION_FRIENDS.
maxResults: The maximum number of scores to fetch per page. Must be between 1 and 25.
forceReload: If true, this call will clear any locally cached data and attempt to fetch the latest data from the server. This would commonly be used for something like a user-initiated refresh. Normally, this should be set to false to gain advantages of data caching.
askConsentIfFailed: If true, this will show a consent screen asking for permission to access the list.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>leaderboardId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>span</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>leaderboardCollection</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>maxResults</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>forceReload</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>askConsentIfFailed</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>SubmitScore2</name>
            <comment>Submit a score to a leaderboard for the currently signed-in player. The score is ignored if it is worse (as defined by the leaderboard configuration) than a previously submitted score for the same player.
 Use this if you do not need to be notified of the results of submitting the score, though note that the update may not be sent to the server until the next sync.
 The meaning of the score value depends on the formatting of the leaderboard established in the developer console. Leaderboards support the following score formats:
 &lt;b&gt;Fixed-point:&lt;/b&gt; score represents a raw value, and will be formatted based on the number of decimal places configured. A score of 1000 would be formatted as 1000, 100.0, or 10.00 for 0, 1, or 2 decimal places.
 &lt;b&gt;Time:&lt;/b&gt; score represents an elapsed time in milliseconds. The value will be formatted as an appropriate time value.
 &lt;b&gt;Currency:&lt;/b&gt; score represents a value in micro units. For example, in USD, a score of 100 would display as $0.0001, while a score of 1000000 would display as $1.00
leaderboardId: The leaderboard to submit the score to.
score: The raw score value.
scoreTag: Optional metadata about this score. The value may contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>leaderboardId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>score</name>
                <type>long</type>
            </parameter>
            <parameter>
                <name>scoreTag</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetTopScoresBuffer</name>
            <comment>Returns the top score buffer.
 If the buffer is not loaded yet it will return null. Call LoadTopScores to populate the buffer.</comment>
            <returntype>com.biswajit.gpgservicenew.AbstractDataBufferWrapper</returntype>
        </method>
        <method>
            <name>SubmitScore</name>
            <comment>Submit a score to a leaderboard for the currently signed-in player. The score is ignored if it is worse (as defined by the leaderboard configuration) than a previously submitted score for the same player.
 Use this if you do not need to be notified of the results of submitting the score, though note that the update may not be sent to the server until the next sync.
 The meaning of the score value depends on the formatting of the leaderboard established in the developer console. Leaderboards support the following score formats:
 &lt;b&gt;Fixed-point:&lt;/b&gt; score represents a raw value, and will be formatted based on the number of decimal places configured. A score of 1000 would be formatted as 1000, 100.0, or 10.00 for 0, 1, or 2 decimal places.
 &lt;b&gt;Time:&lt;/b&gt; score represents an elapsed time in milliseconds. The value will be formatted as an appropriate time value.
 &lt;b&gt;Currency:&lt;/b&gt; score represents a value in micro units. For example, in USD, a score of 100 would display as $0.0001, while a score of 1000000 would display as $1.00
leaderboardId: The leaderboard to submit the score to.
score: The raw score value.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>leaderboardId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>score</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>GetLeaderboardsBuffer</name>
            <comment>Returns the leaderboards buffer.
 If the buffer is not loaded yet it will return null. Call LoadLeaderboardMetadata to populate the buffer.</comment>
            <returntype>com.biswajit.gpgservicenew.AbstractDataBufferWrapper</returntype>
        </method>
        <method>
            <name>SubmitScoreImmediate</name>
            <comment>Asynchronously submits the score to the leaderboard for the currently signed-in player. The score is ignored if it is worse (as defined by the leaderboard configuration) than a previously submitted score for the same player.
 This form of the API will attempt to submit the score to the server immediately within the task, returning a GPGSScoreSubmissionData on success with information about the submission.
 The meaning of the score value depends on the formatting of the leaderboard established in the developer console. Leaderboards support the following score formats:
 &lt;b&gt;Fixed-point:&lt;/b&gt; score represents a raw value, and will be formatted based on the number of decimal places configured. A score of 1000 would be formatted as 1000, 100.0, or 10.00 for 0, 1, or 2 decimal places.
 &lt;b&gt;Time:&lt;/b&gt; score represents an elapsed time in milliseconds. The value will be formatted as an appropriate time value.
 &lt;b&gt;Currency:&lt;/b&gt; score represents a value in micro units. For example, in USD, a score of 100 would display as $0.0001, while a score of 1000000 would display as $1.00
 &lt;b&gt;ScoreSubmitted&lt;/b&gt; event will be raised.
leaderboardId: The leaderboard to submit the score to.
score: The raw score value.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>leaderboardId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>score</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>GetLeaderboardIntent2</name>
            <comment>Asynchronously loads an Intent to show a leaderboard for a game specified by a leaderboardId. Note that this must be invoked with GPGSGames.StartActivityForResult, so that the identity of the calling package can be established.
 &lt;b&gt;ReceivedLeaderboardsIntent&lt;/b&gt; event will be raised.
leaderboardId: The ID of the leaderboard to view.
timeSpan: Time span to retrieve data for. Valid values are TIME_SPAN_DAILY, TIME_SPAN_WEEKLY, or TIME_SPAN_ALL_TIME.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>leaderboardId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>timeSpan</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetAllLeaderboardsIntent</name>
            <comment>Asynchronously loads an Intent to show the list of leaderboards for a game. Note that this must be invoked with GPGSGames.StartActivityForResult, so that the identity of the calling package can be established.
 &lt;b&gt;ReceivedAllLeaderboardsIntent&lt;/b&gt; event will be raised.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>GetPlayerCenteredScoresBuffer</name>
            <comment>Returns the player centered score buffer.
 If the buffer is not loaded yet it will return null. Call LoadPlayerCenteredScores to populate the buffer.</comment>
            <returntype>com.biswajit.gpgservicenew.AbstractDataBufferWrapper</returntype>
        </method>
        <method>
            <name>GetPlayerCenteredScoreFromBuffer</name>
            <comment>Get the player centered score object from the buffer.
 If the buffer is not loaded yet it will return null. Call LoadPlayerCenteredScores to populate the buffer.
position: Position of the item.</comment>
            <returntype>com.biswajit.gpgservicenew.LeaderboardScoreWrapper</returntype>
            <parameter>
                <name>position</name>
                <type>int</type>
            </parameter>
        </method>
        <field>
            <name>TIME_SPAN_DAILY</name>
            <comment>Scores are reset every day. The reset occurs at 11:59PM PST.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>TIME_SPAN_ALL_TIME</name>
            <comment>Scores are never reset.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>COLLECTION_PUBLIC</name>
            <comment>Collection constant for public leaderboards. Public leaderboards contain the scores of players who are sharing their gameplay activity publicly.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>TIME_SPAN_WEEKLY</name>
            <comment>Scores are reset once per week. The reset occurs at 11:59PM PST on Sunday.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>COLLECTION_FRIENDS</name>
            <comment>Collection constant for friends leaderboards. These leaderboards contain the scores of players in the viewing player's friends list.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PAGE_DIRECTION_PREV</name>
            <comment>Direction previous</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PAGE_DIRECTION_NEXT</name>
            <comment>Direction next</comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>com.biswajit.gpgservicenew.LeaderboardScoreWrapper</name>
        <shortname>GPGSLeaderboardScore</shortname>
        <owner>process</owner>
        <event>PlayerProfileImageLoaded(uri as String, isBitmap as Boolean)</event>
        <method>
            <name>GetScoreHolderDisplayName</name>
            <comment>Retrieves the name to display for the player who scored this score. If the identity of the player is unknown, this will return an anonymous name to display.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>GetDisplayRank</name>
            <comment>Retrieves a formatted string to display for this rank. This handles appropriate localization and formatting.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>GetTimestampMillis</name>
            <comment>Retrieves the timestamp (in milliseconds from epoch) at which this score was achieved.</comment>
            <returntype>long</returntype>
        </method>
        <method>
            <name>GetRawScore</name>
            <comment>Retrieves the raw score value.</comment>
            <returntype>long</returntype>
        </method>
        <method>
            <name>SetScoreHolderImage</name>
            <comment>Set player's profile image to the give image view who scored this score.
 &lt;b&gt;PlayerProfileImageLoaded&lt;/b&gt; event will be raised.
hiRes: If true will load HD image else icon-size image.
IV: ImageView on which you want to load the image.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>hiRes</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>IV</name>
                <type>anywheresoftware.b4a.objects.ImageViewWrapper</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetScoreHolder</name>
            <comment>Retrieves the player that scored this particular score. The return value here may be null if the current player is not authorized to see information about the holder of this score. Note that this object is a volatile representation, so it is not safe to cache the output of this directly.</comment>
            <returntype>com.biswajit.gpgservicenew.PlayerWrapper</returntype>
        </method>
        <method>
            <name>GetScoreHolderImageUri</name>
            <comment>Retrieves the URI of the image to display for the player who scored this score. If the identity of the player is unknown, this will return null. It may also be null if the player simply has no image.
hiRes: If true will load HD image else icon-size image.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>hiRes</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>GetDisplayScore</name>
            <comment>Retrieves a formatted string to display for this score. The details of the formatting are specified by the developer in their dev console.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>GetScoreTag</name>
            <comment>Retrieve the optional score tag associated with this score, if any.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>GetRank</name>
            <comment>Retrieves the rank returned from the server for this score. Note that this may not be exact and that multiple scores can have identical ranks. Lower ranks indicate a better score, with rank 1 being the best score on the board. If the score holder's rank cannot be determined, this will return LEADERBOARD_RANK_UNKNOWN.</comment>
            <returntype>long</returntype>
        </method>
        <field>
            <name>LEADERBOARD_RANK_UNKNOWN</name>
            <comment>Constant indicating that the score holder's rank was not known.</comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>com.biswajit.gpgservicenew.LeaderboardVariantWrapper</name>
        <shortname>GPGSLeaderboardVariant</shortname>
        <owner>process</owner>
        <method>
            <name>hasPlayerInfo</name>
            <comment>Get whether or not this variant contains score information for the viewing player or not. There are several possible reasons why this might be false. If the scores for this variant have never been loaded, we won't know if the player has a score or not. Similarly, if the player has not submitted a score for this variant, this will return false. It is possible to have a score but no rank. For instance, on leaderboard variants of COLLECTION_PUBLIC, players who are not sharing their scores publicly will never have a rank.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>TimeSpan</name>
            <returntype>int</returntype>
            <comment>Retrieves the time span that the scores for this variant are drawn from. Possible values are TIME_SPAN_ALL_TIME, TIME_SPAN_WEEKLY, or TIME_SPAN_DAILY.</comment>
        </property>
        <property>
            <name>PlayerRank</name>
            <returntype>long</returntype>
            <comment>Retrieves the viewing player's rank for this variant, if any. Note that this value is only accurate if hasPlayerInfo() returns true. The long representation of the viewing player's rank, or PLAYER_RANK_UNKNOWN if the player has no rank for this variant.</comment>
        </property>
        <property>
            <name>PlayerScoreTag</name>
            <returntype>java.lang.String</returntype>
            <comment>Retrieves the viewing player's score tag for this variant, if any. Note that this value is only accurate if hasPlayerInfo() returns true. The score tag associated with the viewing player's score, or null if the player has no score for this variant.</comment>
        </property>
        <property>
            <name>DisplayPlayerScore</name>
            <returntype>java.lang.String</returntype>
            <comment>Retrieves the viewing player's score for this variant, if any. Note that this value is only accurate if hasPlayerInfo() returns true.</comment>
        </property>
        <property>
            <name>NumScores</name>
            <returntype>long</returntype>
            <comment>Retrieves the total number of scores for this variant. Not all of these scores will always be present on the local device. Note that if scores for this variant have not been loaded, this method will return NUM_SCORES_UNKNOWN.</comment>
        </property>
        <property>
            <name>DisplayPlayerRank</name>
            <returntype>java.lang.String</returntype>
            <comment>Retrieves the viewing player's formatted rank for this variant, if any. Note that this value is only accurate if hasPlayerInfo() returns true.</comment>
        </property>
        <property>
            <name>RawPlayerScore</name>
            <returntype>long</returntype>
            <comment>Retrieves the viewing player's score for this variant, if any. Note that this value is only accurate if hasPlayerInfo() returns true. The long representation of the viewing player's score, or PLAYER_SCORE_UNKNOWN if the player has no score for this variant.</comment>
        </property>
        <property>
            <name>Collection</name>
            <returntype>int</returntype>
            <comment>Retrieves the collection of scores contained by this variant. Possible values are COLLECTION_PUBLIC or COLLECTION_FRIENDS.</comment>
        </property>
        <field>
            <name>TIME_SPAN_DAILY</name>
            <comment>Scores are reset every day. The reset occurs at 11:59PM PST.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>TIME_SPAN_ALL_TIME</name>
            <comment>Scores are never reset.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>COLLECTION_PUBLIC</name>
            <comment>Collection constant for public leaderboards. Public leaderboards contain the scores of players who are sharing their gameplay activity publicly.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PLAYER_SCORE_UNKNOWN</name>
            <comment>Constant returned when a player's score for this variant is unknown.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>NUM_TIME_SPANS</name>
            <comment>Number of time spans that exist. Needs to be updated if we ever have more.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>TIME_SPAN_WEEKLY</name>
            <comment>Scores are reset once per week. The reset occurs at 11:59PM PST on Sunday.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>COLLECTION_FRIENDS</name>
            <comment>Collection constant for friends leaderboards. These leaderboards contain the scores of players in the viewing player's friends list.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PLAYER_RANK_UNKNOWN</name>
            <comment>Constant returned when a player's rank for this variant is unknown.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>NUM_SCORES_UNKNOWN</name>
            <comment>Constant returned when the total number of scores for this variant is unknown.</comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>com.biswajit.gpgservicenew.LeaderboardWrapper</name>
        <shortname>GPGSLeaderboard</shortname>
        <owner>process</owner>
        <event>LeaderboardIconImageLoaded(uri as String, isBitmap as Boolean)</event>
        <method>
            <name>GetIconImageUri</name>
            <comment>Retrieves an image URI that can be used to load the leaderboard's icon image. Returns null if leaderboard has no icon image.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>SetIconImage</name>
            <comment>Set the leaderboard's icon image to the give image view.
 &lt;b&gt;LeaderboardIconImageLoaded&lt;/b&gt; event will be raised.
IV: ImageView on which you want to load the icon.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>IV</name>
                <type>anywheresoftware.b4a.objects.ImageViewWrapper</type>
            </parameter>
        </method>
        <method>
            <name>GetLeaderboardId</name>
            <comment>Retrieves the ID of this leaderboard.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>GetScoreOrder</name>
            <comment>Retrieves the sort order of scores for this leaderboard. Possible values are SCORE_ORDER_LARGER_IS_BETTER or SCORE_ORDER_SMALLER_IS_BETTER.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetVariants</name>
            <comment>Retrieves a list of GPGSLeaderboardVariants for this leaderboard. These will be returned sorted by time span first, then by variant type. Note that these variants are volatile, and are tied to the lifetime of the original buffer.</comment>
            <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
        </method>
        <method>
            <name>GetDisplayName</name>
            <comment>Retrieves the display name of this leaderboard.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <field>
            <name>SCORE_ORDER_LARGER_IS_BETTER</name>
            <comment>Score order constant for leaderboards where scores are sorted in descending order.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>SCORE_ORDER_SMALLER_IS_BETTER</name>
            <comment>Score order constant for leaderboards where scores are sorted in ascending order.</comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>com.biswajit.gpgservicenew.NearbyConnectionsWrapper</name>
        <shortname>GPGSNearbyConnections</shortname>
        <owner>process</owner>
        <event>StartAdvertising(success as boolean)</event>
        <event>ConnectionRequestReceived(endpointId as String, endpointName as Sring)</event>
        <event>ConnectionEstablished(success as boolean, endpointId as String)</event>
        <event>ConnectionRejected(endpointId as String)</event>
        <event>ConnectionBroke(endpointId as String)</event>
        <event>ConnectionError(endpointId as String)</event>
        <event>Disconnected(endpointId as String)</event>
        <event>StartDiscovery(success as boolean)</event>
        <event>EndpointFound(endpointId as String, endpointName as Sring, serviceId as Sring)</event>
        <event>EndpointLost(endpointId as String)</event>
        <event>ConnectionRequested(success as boolean, endpointId as String)</event>
        <event>PayloadReceived(endpointId as String, payload() as byte, payloadId as long)</event>
        <event>RejectedConnectionRequest(success as boolean, endpointId as String)</event>
        <event>PayloadSend(success as boolean, endpointId as String, payload() as byte, payloadId as long)</event>
        <event>PayloadCancelled(success as boolean, payloadId as long)</event>
        <method>
            <name>StartDiscovery</name>
            <comment>Starts discovery for remote endpoints with the specified service ID.
 &lt;b&gt;StartDiscovery&lt;/b&gt; event will be raised for both case success and failure with result.
 &lt;b&gt;EndpointFound&lt;/b&gt; event will be raised when an endpoint was found. You can request a connection to it.
 &lt;b&gt;EndpointLost&lt;/b&gt; event will be raised when a previously discovered endpoint has gone away.
strategy: Strategy to be used. More info: https://developers.google.com/nearby/connections/strategies</comment>
            <returntype>void</returntype>
            <parameter>
                <name>strategy</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>StartAdvertising</name>
            <comment>Starts advertising an endpoint for a local app.
 &lt;b&gt;StartAdvertising&lt;/b&gt; event will be raised for both case success and failure with result.
 &lt;b&gt;ConnectionRequestReceived&lt;/b&gt; event will be raised when someone sends you connection request.
 &lt;b&gt;ConnectionEstablished&lt;/b&gt; event will be raised on successful connection. Means you can now start sending and receiving data.
 &lt;b&gt;ConnectionBroke&lt;/b&gt; event will be raised if the connection broke before it was able to be accepted.
 &lt;b&gt;ConnectionError&lt;/b&gt; event will be raised for other connection issues.
 &lt;b&gt;Disconnected&lt;/b&gt; event will be raised when disconnected from this endpoint. Means no more data can be sent or received.
strategy: Strategy to be used. More info: https://developers.google.com/nearby/connections/strategies
endpointName: A human readable name for this endpoint, to appear on other devices.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>strategy</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>endpointName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>StopDiscovery</name>
            <comment>Stops discovery for remote endpoints, after a previous call to startDiscovery,
 when the client no longer needs to discover endpoints or goes inactive.
 Payloads can still be sent to connected endpoints after discovery ends.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>StopAdvertising</name>
            <comment>Stops advertising a local endpoint.
 Should be called after calling startAdvertising as soon as the application no longer needs to advertise itself or goes inactive.
 Payloads can still be sent to connected endpoints after advertising ends.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>RejectConnectionRequest</name>
            <comment>Rejects a connection to a remote endpoint.
 &lt;b&gt;RejectedConnectionRequest&lt;/b&gt; event will be raised for both case success and failure with result.
remoteEndpointId: The identifier for the remote endpoint. Should match the value provided in ConnectionRequestReceived event.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>remoteEndpointId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SendPayload</name>
            <comment>Sends a Payload to a remote endpoint. Payloads can only be sent to remote endpoints once a notice of connection acceptance has been delivered
 Byte payloads are the simplest type of payloads. They are suitable for sending simple data like messages or metadata up to a maximum size of MAX_BYTES_DATA_SIZE.
 It returns the payload ID that can be used to cancel a payload transfer.
 &lt;b&gt;PayloadSend&lt;/b&gt; event will be raised for both case success and failure with result.
remoteEndpointId: The identifier for the remote endpoint to which the payload should be sent.
payload: The Payload to be sent.</comment>
            <returntype>long</returntype>
            <parameter>
                <name>remoteEndpointId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>payload</name>
                <type>byte[]</type>
            </parameter>
        </method>
        <method>
            <name>StopAllEndpoints</name>
            <comment>Disconnects from, and removes all traces of, all connected and/or discovered endpoints.
 This call is expected to be preceded by a call to stopAdvertising() or startDiscovery as needed.
 After calling stopAllEndpoints(), no further operations with remote endpoints will be possible until
 a new call to one of startAdvertising or startDiscovery.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>DisconnectFromEndpoint</name>
            <comment>Disconnects from a remote endpoint. Payloads can no longer be sent to or received from the endpoint after this method is called.
remoteEndpointId: The identifier for the remote endpoint to disconnect from.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>remoteEndpointId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SendConnectionRequest</name>
            <comment>Sends a request to connect to a remote endpoint.
 &lt;b&gt;ConnectionRequested&lt;/b&gt; event will be raised for both case success and failure with result.
 &lt;b&gt;ConnectionEstablished&lt;/b&gt; event will be raised on successful connection. Means you can now start sending and receiving data.
 &lt;b&gt;ConnectionRejected&lt;/b&gt; event will be raised if the other user rejects your connection.
 &lt;b&gt;ConnectionBroke&lt;/b&gt; event will be raised if the connection broke before it was able to be accepted.
 &lt;b&gt;ConnectionError&lt;/b&gt; event will be raised for other connection issues.
 &lt;b&gt;Disconnected&lt;/b&gt; event will be raised when disconnected from this endpoint. Means no more data can be sent or received.
remoteEndpointId: The identifier for the remote endpoint to which a connection request will be sent. Should match the value provided in the EndpointFound event.
endpointName: A human readable name for this endpoint, to appear on other devices.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>remoteEndpointId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>endpointName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initialize the object.
EventName: The event name prefix.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>CancelPayload</name>
            <comment>Cancels a Payload currently in-flight to or from remote endpoint(s).
 &lt;b&gt;PayloadCancelled&lt;/b&gt; event will be raised for both case success and failure with result.
payloadId: The identifier for the Payload to be canceled.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>payloadId</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>AcceptConnectionRequest</name>
            <comment>Accepts a connection to a remote endpoint. This method must be called before Payloads can be exchanged with the remote endpoint.
 &lt;b&gt;ConnectionEstablished&lt;/b&gt; event will be raised for both case success and failure with result.
 &lt;b&gt;PayloadReceived&lt;/b&gt; event will be called on receiving a payload after successful connection.
remoteEndpointId: The identifier for the remote endpoint. Should match the value provided in ConnectionRequestReceived event.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>remoteEndpointId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <field>
            <name>STRATEGY_P2P_STAR</name>
            <comment>Peer-to-peer strategy that supports a 1-to-N, or star-shaped, connection topology.</comment>
            <returntype>java.lang.Object</returntype>
        </field>
        <field>
            <name>MAX_BYTES_DATA_SIZE</name>
            <comment>This specifies the maximum allowed size of BYTES Payloads sent via the sendBytesPayload method.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>STRATEGY_P2P_POINT_TO_POINT</name>
            <comment>Peer-to-peer strategy that supports a 1-to-1 connection topology.</comment>
            <returntype>java.lang.Object</returntype>
        </field>
        <field>
            <name>STRATEGY_P2P_CLUSTER</name>
            <comment>Peer-to-peer strategy that supports an M-to-N, or cluster-shaped, connection topology.</comment>
            <returntype>java.lang.Object</returntype>
        </field>
    </class>
    <class>
        <name>com.biswajit.gpgservicenew.NetworkInfoWrapper</name>
        <shortname>GPGSNetworkInfo</shortname>
        <owner>process</owner>
        <event>NetworkAvailable(networkType As Int)</event>
        <event>NetworkBlockedStatusChanged(networkType As Int, blocked as Boolean)</event>
        <event>NetworkLosing(networkType As Int, maxMsToLive as Int)</event>
        <event>NetworkLost(networkType As Int)</event>
        <event>NoNetworkAvailable</event>
        <permission>android.permission.ACCESS_NETWORK_STATE</permission>
        <method>
            <name>IsRoaming</name>
            <comment>Indicates whether the device is currently roaming on the given network.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>NetworkType</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetConnectedNetwork</name>
            <comment>Returns the type of the connected network (one of the NETWORK constants).</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>GetAllNetworkInfo</name>
            <comment>Returns a map of all available networks. In the map, key = type of network (one of the NETWORK constants), value = whether it is connected.</comment>
            <returntype>anywheresoftware.b4a.objects.collections.Map</returntype>
        </method>
        <method>
            <name>RegisterConnectivityChangeListener</name>
            <comment>Registers a listener to be notified of connectivity changes.
&lt;b&gt;NetworkAvailable&lt;/b&gt; Called when the framework connects and has declared a new network ready for use.
&lt;b&gt;NetworkBlockedStatusChanged&lt;/b&gt; Called when access to the specified network is blocked or unblocked.
&lt;b&gt;NetworkLosing&lt;/b&gt; Called when the network is about to be lost, typically because there are no outstanding requests left for it.
&lt;b&gt;NetworkLost&lt;/b&gt; Called when a network disconnects or otherwise no longer satisfies this request or callback.
&lt;b&gt;NoNetworkAvailable&lt;/b&gt; Called if no network is found.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>UnregisterConnectivityChangeListener</name>
            <comment>Stops the notification of connectivity changes.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>getNetworkType</name>
            <comment></comment>
            <returntype>int</returntype>
            <parameter>
                <name>ni</name>
                <type>android.net.Network</type>
            </parameter>
        </method>
        <method>
            <name>GetActiveNetwork</name>
            <comment>Returns the type of the currently active default data network (one of the NETWORK constants).</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initialize the object.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>IsConnected</name>
            <comment>Returns whether the currently active default data network is connected.</comment>
            <returntype>boolean</returntype>
        </method>
        <field>
            <name>NETWORK_MOBILE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>NETWORK_ETHERNET</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>NETWORK_BLUETOOTH</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>NETWORK_VPN</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>NETWORK_WIFIAWARE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>NETWORK_WIFI</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>NETWORK_LOWPAN</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>NETWORK_NONE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>com.biswajit.gpgservicenew.PlayerLevelInfoWrapper</name>
        <shortname>GPGSPlayerLevelInfo</shortname>
        <owner>process</owner>
        <method>
            <name>IsMaxLevel</name>
            <comment>Returns true if the player reached the maximum level (getCurrentLevel() is the same as getNextLevel().</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetCurrentLevel</name>
            <comment>Getter for the player's current level object. This object will be the same as the one returned from getNextLevel() if the player reached the maximum level.</comment>
            <returntype>com.biswajit.gpgservicenew.PlayerLevelWrapper</returntype>
        </method>
        <method>
            <name>Equals</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>obj</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>GetNextLevel</name>
            <comment>Getter for the player's next level object. This object will be the same as the one returned from getCurrentLevel() if the player reached the maximum level.</comment>
            <returntype>com.biswajit.gpgservicenew.PlayerLevelWrapper</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetLastLevelUpTimestamp</name>
            <comment>Returns the timestamp of the player's last level-up.</comment>
            <returntype>long</returntype>
        </method>
        <method>
            <name>GetCurrentXpTotal</name>
            <comment>Returns the player's current XP value.</comment>
            <returntype>long</returntype>
        </method>
    </class>
    <class>
        <name>com.biswajit.gpgservicenew.PlayerLevelWrapper</name>
        <shortname>GPGSPlayerLevel</shortname>
        <owner>process</owner>
        <method>
            <name>Equals</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>obj</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>GetMaxXP</name>
            <comment>The maximum XP value represented by this level, exclusive.</comment>
            <returntype>long</returntype>
        </method>
        <method>
            <name>GetLevelNumber</name>
            <comment>Returns the number for this level, e.g. "level 10".
For a player to be considered as being of this level, the value given by GPGSPlayerLevelInfo.GetCurrentXpTotal must fall in the range getMinXp(), getMaxXp().</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetMinXP</name>
            <comment>The minimum XP value needed to attain this level, inclusive.</comment>
            <returntype>long</returntype>
        </method>
    </class>
    <class>
        <name>com.biswajit.gpgservicenew.PlayersClientWrapper</name>
        <shortname>GPGSPlayersClient</shortname>
        <owner>process</owner>
        <event>ReceivedCompareProfileIntent(intent as Intent, statusCode as int)</event>
        <event>ReceivedCurrentPlayerData(currentPlayer as GPGSPlayer, statusCode as int)</event>
        <event>ReceivedCurrentPlayerID(currentPlayerID as String, statusCode as int)</event>
        <event>ReceivedPlayerSearchIntent(intent as Intent, statusCode as int)</event>
        <event>FriendsLoaded(count as int)</event>
        <event>FriendsLoadFailed(showingConsent as Boolean, statusCode as int)</event>
        <event>FriendsAccessPermissionGranted(granted as Boolean)</event>
        <event>PlayerLoaded(player as GPGSPlayer, statusCode as int)</event>
        <method>
            <name>GetFriendFromBuffer</name>
            <comment>Get the player object of the friend from the buffer.
 If the buffer is not loaded yet it will return null. Call LoadFriends to populate the buffer.
position: Position of the item.</comment>
            <returntype>com.biswajit.gpgservicenew.PlayerWrapper</returntype>
            <parameter>
                <name>position</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetCompareProfileIntent2</name>
            <comment>Asynchronously loads an Intent that will display a screen where the user can see a comparison of their own profile against another player's profile.
 Note that the Intent returned from the Task must be invoked with GPGSGames.StartActivityForResult, so that the identity of the calling package can be established.
 &lt;b&gt;ReceivedCompareProfileIntent&lt;/b&gt; event will be raised.
player: The player object of the player to compare with.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>player</name>
                <type>com.biswajit.gpgservicenew.PlayerWrapper</type>
            </parameter>
        </method>
        <method>
            <name>GetCurrentPlayerId</name>
            <comment>Asynchronously loads the current signed-in player ID, if available.
 &lt;b&gt;ReceivedCurrentPlayerID&lt;/b&gt; event will be raised.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>GetCurrentPlayer</name>
            <comment>Asynchronously loads the current signed-in Player, if available.
 &lt;b&gt;ReceivedCurrentPlayerData&lt;/b&gt; event will be raised.
forceReload: If true, this call will clear any locally-cached data and attempt to fetch the latest data from the server. This would commonly be used for something like a user-initiated refresh. Normally, this should be set to false to gain advantages of data caching.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>forceReload</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>LoadMoreFriends</name>
            <comment>Asynchronously loads an annotated PlayerBuffer that represents friends the user has.
 The PlayerBuffer will contain an extra page of results.
 This call will fail if the user has not granted the game access to their friends list.
 &lt;b&gt;Note: You can't store the returned buffer to any list or array. Use GetFriendFromBuffer to retrieve the items.&lt;/b&gt;
 &lt;b&gt;Important: Remember to close the buffer by calling Release after you finish working with the buffer data.&lt;/b&gt;
 &lt;b&gt;FriendsLoaded&lt;/b&gt; event will be raised if the task completes successfully.
 &lt;b&gt;FriendsLoadFailed&lt;/b&gt; event will be raised if the task failed.
 &lt;b&gt;FriendsAccessPermissionGranted&lt;/b&gt; event will be raised when user grant/deny from consent screen.
pageSize: The number of additional entries to request.
askConsentIfFailed: If true, this will show a consent screen asking for permission to access the list.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>pageSize</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>askConsentIfFailed</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>GetCompareProfileIntent</name>
            <comment>Asynchronously loads an Intent that will display a screen where the user can see a comparison of their own profile against another player's profile.
 Note that the Intent returned from the Task must be invoked with GPGSGames.StartActivityForResult, so that the identity of the calling package can be established.
 &lt;b&gt;ReceivedCompareProfileIntent&lt;/b&gt; event will be raised.
otherPlayerId: The player ID of the player to compare with.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>otherPlayerId</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>LoadPlayer</name>
            <comment>Asynchronously loads an annotated Player profile specified by playerId.
 &lt;b&gt;PlayerLoaded&lt;/b&gt; event will be raised.
playerId: The player ID to get full profile data for.
forceReload: If true, this call will clear any locally-cached data and attempt to fetch the latest data from the server. This would commonly be used for something like a user-initiated refresh. Normally, this should be set to false to gain advantages of data caching.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>playerId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>forceReload</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>GetPlayerSearchIntent</name>
            <comment>Asynchronously loads an Intent that will display a screen where the user can search for players.
 Note that this must be invoked with GPGSGames.StartActivityForResult, so that the identity of the calling package can be established.
 If the user canceled, the result will be RESULT_CANCELED. If the user selected any players from the search results list, the result will be RESULT_OK, and the data intent will contain a list of parceled Player objects in EXTRA_PLAYER_SEARCH_RESULTS
 Note that the current Player Search UI only allows a single selection, so the returned list of parceled Player objects will currently contain at most one Player.
 &lt;b&gt;ReceivedPlayerSearchIntent&lt;/b&gt; event will be raised.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>GetFriendsBuffer</name>
            <comment>Returns the friends buffer.
 If the buffer is not loaded yet it will return null. Call LoadFriends to populate the buffer.</comment>
            <returntype>com.biswajit.gpgservicenew.AbstractDataBufferWrapper</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetCompareProfileIntentWithAlternativeNameHints</name>
            <comment>Asynchronously loads an Intent that will display a screen where the user can see a comparison of their own profile against another player's profile.
 Note that the Intent returned from the Task must be invoked with GPGSGames.StartActivityForResult, so that the identity of the calling package can be established.
 Note that PGS gamer tags should not be provided as the "alternative" name. This form of #getCompareProfileIntent should be used when the game has its own player names separate
 from the Play Games Services gamer tag. These names will be used in the profile display and only sent to the server if the player initiates a friend invitation to the profile being viewed,
 so that the sender and recipient have context relevant to their game experience.
 &lt;b&gt;ReceivedCompareProfileIntent&lt;/b&gt; event will be raised.
otherPlayerId: The player ID of the player to compare with.
otherPlayerInGameName: The game's own display name of the player referred to by otherPlayerId.
currentPlayerInGameName: The game's own display name of the current player.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>otherPlayerId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>otherPlayerInGameName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>currentPlayerInGameName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>LoadFriends</name>
            <comment>Asynchronously loads an annotated PlayerBuffer that represents friends the user has.
 This call will fail if the user has not granted the game access to their friends list.
 &lt;b&gt;Note: You can't store the returned buffer to any list or array. Use GetFriendFromBuffer to retrieve the items.&lt;/b&gt;
 &lt;b&gt;Important: Remember to close the buffer by calling Release after you finish working with the buffer data.&lt;/b&gt;
 &lt;b&gt;FriendsLoaded&lt;/b&gt; event will be raised if the task completes successfully.
 &lt;b&gt;FriendsLoadFailed&lt;/b&gt; event will be raised if the task failed.
 &lt;b&gt;FriendsAccessPermissionGranted&lt;/b&gt; event will be raised when user grant/deny from consent screen.
pageSize: The number of entries to request for this initial page. Note that if cached data already exists, the returned buffer may contain more than this size, but it is guaranteed to contain at least this many if the collection contains enough records.
forceReload: If true, this call will clear any locally-cached data and attempt to fetch the latest data from the server. This would commonly be used for something like a user-initiated refresh. Normally, this should be set to false to gain advantages of data caching.
askConsentIfFailed: If true, this will show a consent screen asking for permission to access the list.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>pageSize</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>forceReload</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>askConsentIfFailed</name>
                <type>boolean</type>
            </parameter>
        </method>
        <field>
            <name>EXTRA_PLAYER_SEARCH_RESULTS</name>
            <comment>Used by the Player Search UI to return a list of parceled Player objects.</comment>
            <returntype>java.lang.String</returntype>
        </field>
    </class>
    <class>
        <name>com.biswajit.gpgservicenew.PlayerStatsClientWrapper</name>
        <shortname>GPGSPlayerStatsClient</shortname>
        <owner>process</owner>
        <event>PlayerStatsLoaded(stats as GPGSPlayerStats, statusCode as int)</event>
        <method>
            <name>LoadPlayerStats</name>
            <comment>Asynchronously loads an annotated PlayerStats for the currently signed-in player and game into a single result.
 &lt;b&gt;PlayerStatsLoaded&lt;/b&gt; event will be raised.
forceReload: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>forceReload</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
    </class>
    <class>
        <name>com.biswajit.gpgservicenew.PlayerStatsWrapper</name>
        <shortname>GPGSPlayerStats</shortname>
        <owner>process</owner>
        <method>
            <name>GetAverageSessionLength</name>
            <comment>The average session length of the player in minutes. Session length is determined by the time that a player is signed in to Google Play Games services.</comment>
            <returntype>float</returntype>
        </method>
        <method>
            <name>GetDaysSinceLastPlayed</name>
            <comment>The approximate number of days since the player last played.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetNumberOfSessions</name>
            <comment>The approximate number of sessions of the player. Sessions are determined by the number of times that a player signs in to Google Play Games services.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>GetSessionPercentile</name>
            <comment>The approximation of sessions percentile for the player. This value indicates how many sessions the current player has played in comparison to the rest of this game's player base. Higher numbers indicate that this player has played more sessions.</comment>
            <returntype>float</returntype>
        </method>
        <method>
            <name>GetNumberOfPurchases</name>
            <comment>The approximate number of in-app purchases for the player.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>GetSpendPercentile</name>
            <comment>The approximate spend percentile of the player. This value indicates how much the current player has spent in comparison to the rest of this game's player base. Higher numbers indicate that this player has spent more.</comment>
            <returntype>float</returntype>
        </method>
        <field>
            <name>UNSET_VALUE</name>
            <comment>The default value for each field when there isn't enough data to calculate. Please check the value against this before using it.</comment>
            <returntype>float</returntype>
        </field>
    </class>
    <class>
        <name>com.biswajit.gpgservicenew.PlayerWrapper</name>
        <shortname>GPGSPlayer</shortname>
        <owner>process</owner>
        <event>PlayerBannerImageLoaded(uri as String, isBitmap as Boolean)</event>
        <event>PlayerProfileImageLoaded(uri as String, isBitmap as Boolean)</event>
        <method>
            <name>GetBannerImageUri</name>
            <comment>Retrieves the URI for loading this player's banner image. Returns null if the player has no banner image.
landscape: If true it will load landscape banner else portrait banner.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>landscape</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>GetProfileImageUri</name>
            <comment>Retrieves the URI for loading this player's profile image. Returns null if the player has no profile image.
hiRes: If true will load HD image else icon-size image.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>hiRes</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>GetLevelInfo</name>
            <comment>Retrieves the player level associated information if any exists. If no level information exists for this player, this method will return null.</comment>
            <returntype>com.biswajit.gpgservicenew.PlayerLevelInfoWrapper</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>SetBannerImage</name>
            <comment>Set player's banner image to the give image view.
 &lt;b&gt;PlayerBannerImageLoaded&lt;/b&gt; event will be raised.
landscape: If true it will load landscape banner else portrait banner.
IV: ImageView on which you want to load the image.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>landscape</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>IV</name>
                <type>anywheresoftware.b4a.objects.ImageViewWrapper</type>
            </parameter>
        </method>
        <method>
            <name>GetTitle</name>
            <comment>Retrieves the title of the player. This is based on the player's gameplay activity in apps using Google Play Games services. Note that not all players have titles, and that a player's title may change over time.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>GetPlayerId</name>
            <comment>Retrieves the ID of this player.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>GetFriendsListVisibilityStatus</name>
            <comment>Retrieves if the user has shared the friends list with the game. Only available for the signed-in user. The method will return FRIEND_LIST_VISIBILITY_UNKNOWN for other players.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>SetProfileImage</name>
            <comment>Set player's profile image to the give image view.
 &lt;b&gt;PlayerProfileImageLoaded&lt;/b&gt; event will be raised.
hiRes: If true will load HD image else icon-size image.
IV: ImageView on which you want to load the image.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>hiRes</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>IV</name>
                <type>anywheresoftware.b4a.objects.ImageViewWrapper</type>
            </parameter>
        </method>
        <method>
            <name>GetPlayerFriendStatus</name>
            <comment>Retrieves this player's friend status relative to the currently signed-in player. If no relationship information exists for this player, this method will return FRIEND_STATUS_UNKNOWN.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>GetRetrievedTimestamp</name>
            <comment>Retrieves the timestamp at which this player record was last updated locally.</comment>
            <returntype>long</returntype>
        </method>
        <method>
            <name>HasIconImage</name>
            <comment>Indicates whether this player has an icon-size profile image to display.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetDisplayName</name>
            <comment>Retrieves the display name for this player.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>HasHiResImage</name>
            <comment>Indicates whether this player has a hi-res profile image to display.</comment>
            <returntype>boolean</returntype>
        </method>
        <field>
            <name>FRIEND_STATUS_UNKNOWN</name>
            <comment>Constant indicating that the currently signed-in player's friend status with this player is unknown.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FRIEND_LIST_VISIBILITY_UNKNOWN</name>
            <comment>Constant indicating that currently it's unknown if the friends list is visible to the game, or whether the game can ask for access from the user.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FRIEND_LIST_VISIBILITY_REQUEST_REQUIRED</name>
            <comment>Constant indicating that the friends list is not visible to the game, but the game can ask for access.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FRIEND_LIST_VISIBILITY_FEATURE_UNAVAILABLE</name>
            <comment>onstant indicating that the friends list is currently unavailable for the game. You cannot request access at this time, either because the user has permanently declined or the friends feature is not available to them. In this state, any attempts to request access to the friends list will be unsuccessful.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FRIEND_STATUS_FRIEND</name>
            <comment>Constant indicating that the currently signed-in player and this player are friends.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>CURRENT_XP_UNKNOWN</name>
            <comment>Constant indicating that the current XP total for a player is not known.</comment>
            <returntype>long</returntype>
        </field>
        <field>
            <name>TIMESTAMP_UNKNOWN</name>
            <comment>Constant indicating that a timestamp for a player is not known.</comment>
            <returntype>long</returntype>
        </field>
        <field>
            <name>FRIEND_LIST_VISIBILITY_VISIBLE</name>
            <comment>Constant indicating that the friends list is currently visible to the game.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FRIEND_STATUS_NO_RELATIONSHIP</name>
            <comment>Constant indicating that the currently signed-in player is not a friend of this player, and there are no pending invitations between them.</comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>com.biswajit.gpgservicenew.ScoreSubmissionDataResultWrapper</name>
        <shortname>GPGSScoreSubmissionDataResult</shortname>
        <owner>process</owner>
        <method>
            <name>ScoreTag</name>
            <comment>The score tag associated with this result, if any.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>RawScore</name>
            <comment>The raw score value of this score result.</comment>
            <returntype>long</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>ToString</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>FormattedScore</name>
            <comment>String containing the score data in a display-appropriate format.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>NewBest</name>
            <comment>Boolean indicating whether or not this score was the player's new best score for this time span.</comment>
            <returntype>boolean</returntype>
        </method>
    </class>
    <class>
        <name>com.biswajit.gpgservicenew.ScoreSubmissionDataWrapper</name>
        <shortname>GPGSScoreSubmissionData</shortname>
        <owner>process</owner>
        <method>
            <name>GetScoreResult</name>
            <comment>Retrieves the ScoreSubmissionData.Result object for the given time span, if any.
timeSpan: Time span to retrieve result for. Valid values are TIME_SPAN_DAILY, TIME_SPAN_WEEKLY, or TIME_SPAN_ALL_TIME.</comment>
            <returntype>com.biswajit.gpgservicenew.ScoreSubmissionDataResultWrapper</returntype>
            <parameter>
                <name>timeSpan</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetLeaderboardId</name>
            <comment>Retrieves the ID of the leaderboard the score was submitted to.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>GetPlayerId</name>
            <comment>Retrieves the ID of the player the score was submitted for.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>ToString</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <field>
            <name>TIME_SPAN_DAILY</name>
            <comment>Scores are reset every day. The reset occurs at 11:59PM PST.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>TIME_SPAN_ALL_TIME</name>
            <comment>Scores are never reset.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>TIME_SPAN_WEEKLY</name>
            <comment>Scores are reset once per week. The reset occurs at 11:59PM PST on Sunday.</comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>com.biswajit.gpgservicenew.SignInManager</name>
        <shortname>GPGSPlayGamesService</shortname>
        <owner>activity</owner>
        <event>ServiceUnavailable(userResolveable as Boolean)</event>
        <event>Connected</event>
        <event>SignInFailed(code as int, status as String)</event>
        <event>ResolutionResult(result as string)</event>
        <event>SignOutComplete</event>
        <method>
            <name>ShowServiceUnavailableDialog</name>
            <comment>Show service unavailable dialog if ServiceUnavailable event returns true on library initialization (means its user resolvable error)</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>ManualSignIn</name>
            <comment>Performing interactive sign-in. Setup OAuth 2.0 client before using this method.
 The Google Sign-In API will display a user interface that prompts the player to enter their credentials to sign in.
 This approach simplifies your app development, since the sign-in activity handles scenarios such as needing to update Google Play services or showing consent prompts, on your app’s behalf.
 &lt;b&gt;Connected&lt;/b&gt; event will be raised if the task completes successfully.
 &lt;b&gt;SignInFailed&lt;/b&gt; event will be raised if the task failed.
accountName: Account name on the device that should be used. If this is empty, the client will use the current default account for Google Play services for this application.
useSnapshotAPI: Whether you want to use snapshot api or not.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>accountName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>useSnapshotAPI</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>SignOut</name>
            <comment>Sign out the current user.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>StartResolutionForResult</name>
            <comment>Resolve any pending resolution</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>IsSignedIn</name>
            <comment>Check if the user is signed in or not.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>SilentSignIn</name>
            <comment>Performing silent sign-in
 You can call SilentSignIn() to retrieve the currently signed-in player’s account, and try to sign players in without
 displaying a user interface if they have successfully signed in to your app on a different device.
 &lt;b&gt;Connected&lt;/b&gt; event will be raised if the task completes successfully.
 &lt;b&gt;SignInFailed&lt;/b&gt; event will be raised if the task failed.
accountName: Account name on the device that should be used. If this is empty, the client will use the current default account for Google Play services for this application.
useSnapshotAPI: Whether you want to use snapshot api or not.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>accountName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>useSnapshotAPI</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>GetStatusCodeString</name>
            <comment>Get untranslated debug (not user-friendly!) string based on the current status code.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>statusCode</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetLastSignedInAccount</name>
            <comment>Gets the last account that the user signed in with.</comment>
            <returntype>com.biswajit.gpgservicenew.GoogleSignInAccountWrapper</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initialize the object.
eventName: The event name prefix. This will be used for all other classes.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>eventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>HasResolution</name>
            <comment>Check if there is any pending resolution</comment>
            <returntype>boolean</returntype>
        </method>
        <field>
            <name>RESULT_ERROR</name>
            <comment>The operation failed with no more detailed information.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_CANCELED</name>
            <comment>The result was canceled either due to client disconnect or</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_ACHIEVEMENT_UNKNOWN</name>
            <comment>Could not find the achievement, so the operation to update the achievement failed.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_VIDEO_OUT_OF_DISK_SPACE</name>
            <comment>Request could not complete because the device is out of disk space.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_NETWORK_ERROR</name>
            <comment>A network error occurred. Retrying should resolve the problem.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_SNAPSHOT_CREATION_FAILED</name>
            <comment>The attempt to create a snapshot failed. See the device logs for more details.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_REMOTE_EXCEPTION</name>
            <comment>This signifies that an API was able to connect to Google Play services and received an instance, but that when calling an individual method, a RemoteException was thrown.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_CONSENT_REQUIRED</name>
            <comment>The player needs to provide consent to allow the request.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_VIDEO_NOT_ACTIVE</name>
            <comment>Request could not complete because there is no active screencast capture session.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_INTERNAL_ERROR</name>
            <comment>An internal error occurred. Retrying should resolve the problem.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_ACHIEVEMENT_UNLOCK_FAILURE</name>
            <comment>An incremental achievement cannot be unlocked directly, so the call to unlock achievement failed.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_OPERATION_IN_FLIGHT</name>
            <comment>Trying to start a join/create operation while another is already in flight.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_VIDEO_STORAGE_ERROR</name>
            <comment>Request could not complete due to a storage I/O error.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_NETWORK_ERROR_OPERATION_FAILED</name>
            <comment>A network error occurred while attempting to perform an operation that requires network access. The operation may be retried later.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_SNAPSHOT_FOLDER_UNAVAILABLE</name>
            <comment>The root folder for snapshots could not be found or created. See the device logs for more details on the failure.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_VIDEO_PERMISSION_ERROR</name>
            <comment>Request could not complete due to permission problems.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_RECONNECTION_TIMED_OUT_DURING_UPDATE</name>
            <comment>The connection timed-out while waiting for Google Play services to update.
 This failure indicates a connection to Google Play services was successfully established, however it was disconnected because Google Play services was updated, and the update took far longer than expected.
 Any API calls failed with this status would have been initiated after the disconnection for the update.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_SNAPSHOT_NOT_FOUND</name>
            <comment>The specified snapshot does not exist on the server.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_DEVELOPER_ERROR</name>
            <comment>The application is misconfigured. This error is not recoverable and will be treated as fatal. The developer should look at the logs after this to determine more actionable information.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_ACHIEVEMENT_UNLOCKED</name>
            <comment>Indicates that the incremental achievement was also unlocked when the call was made to increment the achievement.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_SNAPSHOT_COMMIT_FAILED</name>
            <comment>The attempt to commit the snapshot change failed. See the device logs for more details.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_SNAPSHOT_CONTENTS_UNAVAILABLE</name>
            <comment>An error occurred while attempting to open the contents of the snapshot. See the device logs for more details.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_VIDEO_UNEXPECTED_CAPTURE_ERROR</name>
            <comment>Request could not complete because something unrecoverable happened in the capture service.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_INTERRUPTED</name>
            <comment>A blocking call was interrupted while waiting and did not run to completion.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_VIDEO_UNSUPPORTED</name>
            <comment>Request could not complete because the request or its options are not supported.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_ACHIEVEMENT_NOT_INCREMENTAL</name>
            <comment>Indicates that the call to increment achievement failed since the achievement is not an incremental achievement.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_TIMEOUT</name>
            <comment>Timed out while awaiting the result.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_GAME_NOT_FOUND</name>
            <comment>The specified game ID was not recognized by the server.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_SNAPSHOT_CONFLICT_MISSING</name>
            <comment>The conflict that was being resolved doesn't exist. This could occur if another device resolved this conflict first, or if an inappropriate conflict ID was provided to resolveConflict.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_RECONNECTION_TIMED_OUT</name>
            <comment>The connection timed-out while attempting to re-connect.
 This failure indicates a connection to Google Play services was successfully established, however it was disconnected for some reason (for example, Google Play services crashed), and re-connecting took longer than expected.
 Any API calls failed with this status would have been initiated after the connection was disconnected.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_SIGN_IN_REQUIRED</name>
            <comment>The client attempted to connect to the service but the user is not signed in.
 The client may choose to continue without using the API. Alternately, if HasResolution() returns true the client may call StartResolutionForResult() to prompt the user to sign in.
 If the result returned is OK, then further attempts should either complete or continue on to the next issue that needs to be resolved.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_VIDEO_ALREADY_CAPTURING</name>
            <comment>Request could not complete because we were already capturing.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_SUCCESS</name>
            <comment>The operation was successful.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_CONNECTION_SUSPENDED_DURING_CALL</name>
            <comment>The connection was suspended while the call was in-flight. It is possible this failure could be resolved by retrying.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_LICENSE_CHECK_FAILED</name>
            <comment>The game is not licensed to the user. Further calls will return the same code.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_RESOLUTION_REQUIRED</name>
            <comment>Completing the operation requires some form of resolution.
 A resolution will be available to be started with StartResolutionForResult().
 If the result returned is OK, then further attempts should either complete or continue on to the next issue that needs to be resolved.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_NETWORK_ERROR_NO_DATA</name>
            <comment>A network error occurred while attempting to retrieve fresh data, and no data was available locally.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_SUCCESS_CACHE</name>
            <comment>The operation was successful, but was used the device's cache. If this is a write, the data will be written when the device is online; errors will be written to the logs. If this is a read, the data was read from a device cache and may be stale.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_APP_MISCONFIGURED</name>
            <comment>The developer has misconfigured their application in some way. The logs will contain more data about the error and the appropriate resolution.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_API_NOT_CONNECTED</name>
            <comment>The client attempted to call a method from an API that failed to connect. Possible reasons include:
 1. The API previously failed to connect with a resolvable error, but the user declined the resolution.
 2. The device does not support GmsCore.
 3. The specific API cannot connect on this device.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_RECONNECT_REQUIRED</name>
            <comment>Result code sent back to the calling Activity when a reconnect is required.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESULT_INVALID_ACCOUNT</name>
            <comment>The client attempted to connect to the service with an invalid account name specified.</comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>com.biswajit.gpgservicenew.SnapshotContentsWrapper</name>
        <shortname>GPGSSnapshotContents</shortname>
        <owner>process</owner>
        <method>
            <name>ReadFully</name>
            <comment>Reads bytes of the snapshot contents.
 If the snapshot was not opened via GPGSSnapshotsClient.open, or if the contents have already been committed via commitAndClose, this method will throw an exception.</comment>
            <returntype>byte[]</returntype>
        </method>
        <method>
            <name>ModifyBytes</name>
            <comment>Write the specified data into the snapshot. The contents of the snapshot will be replaced with the data provided in content. The data will be persisted on disk, but is not uploaded to the server until the snapshot is committed via commitAndClose.
 Note that this form of the API does not necessarily overwrite the entire contents of the file. If you are writing less data than was previously stored in the snapshot, the excess data will remain. Use writeBytes(byte[]) to fully overwrite the file.
 If the snapshot was not opened via GPGSSnapshotsClient.open, or if the contents have already been committed via GPGSSnapshotsClient.commitAndClose, this method will throw an exception.
 Returns whether or not the data was successfully written to disk.
dstOffset: Position in the snapshot file to start writing data to. 0 indicates the head of the file.
content: The data to write.
srcOffset: Position in content to start writing from.
count: Number of bytes from content to write to this snapshot.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>dstOffset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>content</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>srcOffset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>count</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>IsClosed</name>
            <comment>Returns whether this snapshot contents has been closed.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>WriteBytes</name>
            <comment>Write the specified data into the snapshot. The contents of the snapshot will be replaced with the data provided in content. The data will be persisted on disk, but is not uploaded to the server until the snapshot is committed via GPGSSnapshotsClient.commitAndClose.
 Note that this form of the API will fully overwrite the contents of the file. No previous data will be retained. Use modifyBytes to overwrite parts of the file.
content: The data to write.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>content</name>
                <type>byte[]</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>com.biswajit.gpgservicenew.SnapshotMetadataChangeWrapper</name>
        <shortname>GPGSSnapshotMetadataChange</shortname>
        <owner>process</owner>
        <method>
            <name>GetProgressValue</name>
            <comment>The new progress value to set for the snapshot.</comment>
            <returntype>java.lang.Long</returntype>
        </method>
        <method>
            <name>GetDescription</name>
            <comment>The new description to set for the snapshot.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>Builder</name>
            <comment>Build the object with the changes that need to be applied to a snapshot.
cover: The bitmap to use for the snapshot's cover image. Null is not needed.
description: The description of the snapshot.
playedTimeMillis: The played time of the snapshot in milliseconds. Can be set to PLAYED_TIME_UNKNOWN if unknown.
progressValue: The progress value of the snapshot. Can be set to PROGRESS_VALUE_UNKNOWN if unknown.</comment>
            <returntype>com.biswajit.gpgservicenew.SnapshotMetadataChangeWrapper</returntype>
            <parameter>
                <name>cover</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper.BitmapWrapper</type>
            </parameter>
            <parameter>
                <name>description</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>playedTimeMillis</name>
                <type>long</type>
            </parameter>
            <parameter>
                <name>progressValue</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>GetCoverImage</name>
            <comment>The new cover image to set for the snapshot.</comment>
            <returntype>anywheresoftware.b4a.objects.drawable.CanvasWrapper.BitmapWrapper</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetPlayedTimeMillis</name>
            <comment>The new played time to set for the snapshot.</comment>
            <returntype>java.lang.Long</returntype>
        </method>
        <field>
            <name>EMPTY_CHANGE</name>
            <comment>Sentinel object to use to commit a change without modifying the metadata.</comment>
            <returntype>com.biswajit.gpgservicenew.SnapshotMetadataChangeWrapper</returntype>
        </field>
        <field>
            <name>PLAYED_TIME_UNKNOWN</name>
            <comment>Constant indicating that the played time of a snapshot is unknown.</comment>
            <returntype>long</returntype>
        </field>
        <field>
            <name>PROGRESS_VALUE_UNKNOWN</name>
            <comment>Constant indicating that the progress value of a snapshot is unknown.</comment>
            <returntype>long</returntype>
        </field>
    </class>
    <class>
        <name>com.biswajit.gpgservicenew.SnapshotMetadataWrapper</name>
        <shortname>GPGSSnapshotMetadata</shortname>
        <owner>process</owner>
        <event>SnapshotCoverImageLoaded(uri as String, isBitmap as Boolean)</event>
        <method>
            <name>GetProgressValue</name>
            <comment>Retrieves the progress value for this snapshot. Can be used to provide automatic conflict resolution (see RESOLUTION_POLICY_HIGHEST_PROGRESS). If not known, returns PROGRESS_VALUE_UNKNOWN.</comment>
            <returntype>long</returntype>
        </method>
        <method>
            <name>GetCoverImageUri</name>
            <comment>Retrieves an image URI that can be used to load the snapshot's cover image. Returns null if the snapshot has no cover image.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>GetSnapshotId</name>
            <comment>Retrieves the ID of this snapshot.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetGame</name>
            <comment>Retrieves the game associated with this snapshot.</comment>
            <returntype>com.biswajit.gpgservicenew.GameWrapper</returntype>
        </method>
        <method>
            <name>GetPlayedTime</name>
            <comment>Retrieves the played time of this snapshot in milliseconds. This value is specified during the update operation. If not known, returns PLAYED_TIME_UNKNOWN.</comment>
            <returntype>long</returntype>
        </method>
        <method>
            <name>SetCoverImage</name>
            <comment>Set the snapshot's cover image to the give image view.
 &lt;b&gt;SnapshotCoverImageLoaded&lt;/b&gt; event will be raised.
IV: ImageView on which you want to load the icon.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>IV</name>
                <type>anywheresoftware.b4a.objects.ImageViewWrapper</type>
            </parameter>
        </method>
        <method>
            <name>GetLastModifiedTimestamp</name>
            <comment>Retrieves the last time this snapshot was modified, in millis since epoch.</comment>
            <returntype>long</returntype>
        </method>
        <method>
            <name>HasChangePending</name>
            <comment>Indicates whether or not this snapshot has any changes pending that have not been uploaded to the server. Once all changes have been flushed to the server, this will return false.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetDescription</name>
            <comment>Retrieves the description of this snapshot.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>GetOwner</name>
            <comment>Retrieves the player that owns this snapshot.</comment>
            <returntype>com.biswajit.gpgservicenew.PlayerWrapper</returntype>
        </method>
        <method>
            <name>GetDeviceName</name>
            <comment>Retrieves the name of the device that wrote this snapshot, if known.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>GetUniqueName</name>
            <comment>Retrieves the unique identifier of this snapshot. This name should be unique within the scope of the application.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>GetCoverImageAspectRatio</name>
            <comment>Retrieves the aspect ratio of the cover image for this snapshot, if any. This is the ratio of width to height, so a value &gt; 1.0f indicates a landscape image while a value &lt; 1.0f indicates a portrait image. If the snapshot has no cover image, this will return 0.0f.</comment>
            <returntype>float</returntype>
        </method>
        <field>
            <name>PLAYED_TIME_UNKNOWN</name>
            <comment>Constant indicating that the played time of a snapshot is unknown.</comment>
            <returntype>long</returntype>
        </field>
        <field>
            <name>PROGRESS_VALUE_UNKNOWN</name>
            <comment>Constant indicating that the progress value of a snapshot is unknown.</comment>
            <returntype>long</returntype>
        </field>
    </class>
    <class>
        <name>com.biswajit.gpgservicenew.SnapshotsClientWrapper</name>
        <shortname>GPGSSnapshotsClient</shortname>
        <owner>process</owner>
        <event>SnapshotCommittedAndClosed(metadata as GPGSSnapshotMetadata, statusCode as int)</event>
        <event>SnapshotDeleted(snapshotID as String, statusCode as int)</event>
        <event>SnapshotDiscardedAndClosed(statusCode as int)</event>
        <event>SnapshotMaxCoverImageSizeReveived(size as int, statusCode as int)</event>
        <event>SelectSnapshotIntentReveived(intent as Intent, statusCode as int)</event>
        <event>SnapshotMetadataLoaded(count as int, statusCode as int)</event>
        <event>SnapshotOpened(snapshot as GPGSSnapshot)</event>
        <event>SnapshotConflictOccurred(conflictingWith as GPGSSnapshot, conflictId as String)</event>
        <event>SnapshotContentUnavailable</event>
        <method>
            <name>Delete</name>
            <comment>Asynchronously deletes the specified by GPGSSnapshotMetadata snapshot and loads the deleted snapshot ID. This will delete the data of the snapshot locally and on the server.
 &lt;b&gt;SnapshotDeleted&lt;/b&gt; event will be raised.
metadata: The metadata of the snapshot to delete.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>metadata</name>
                <type>com.biswajit.gpgservicenew.SnapshotMetadataWrapper</type>
            </parameter>
        </method>
        <method>
            <name>GetSelectSnapshotIntent</name>
            <comment>Asynchronously loads an Intent that will let the user select a snapshot. Note that the Intent returned from the Task must be invoked with GPGSGames.StartActivityForResult, so that the identity of the calling package can be established.
 If the user canceled without selecting a snapshot, the result will be RESULT_CANCELED. If the user selected a snapshot from the list, the result will be RESULT_OK and the data intent will contain the selected Snapshot as a parcelable object in EXTRA_SNAPSHOT_METADATA. If the user pressed the add button, the result will be RESULT_OK and the data intent will contain a true boolean value in EXTRA_SNAPSHOT_NEW.
 Note that if you have modified an open snapshot, the changes will not appear in this UI until you call commitAndClose on the snapshot.
 &lt;b&gt;SelectSnapshotIntentReveived&lt;/b&gt; event will be raised.
title: The title to display in the action bar of the returned Activity.
allowAddButton: Whether or not to display a "create new snapshot" option in the selection UI.
allowDelete: Whether or not to provide a delete overflow menu option for each snapshot in the selection UI.
maxSnapshots: The maximum number of snapshots to display in the UI. Use DISPLAY_LIMIT_NONE to display all snapshots.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>title</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>allowAddButton</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>allowDelete</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>maxSnapshots</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetMaxCoverImageSize</name>
            <comment>Asynchronously loads the maximum data size per snapshot cover image in bytes. Guaranteed to be at least 800 KB. May increase in the future.
 &lt;b&gt;SnapshotMaxCoverImageSizeReveived&lt;/b&gt; event will be raised.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>Load</name>
            <comment>Asynchronously loads a list of GPGSSnapshotMetadata that represents the snapshot data for the currently signed-in player.
 &lt;b&gt;Note: You can't store the returned buffer to any list or array. Use GetSnapshotFromBuffer to retrieve the items.&lt;/b&gt;
 &lt;b&gt;Important: Remember to close the buffer by calling Release after you finish working with the buffer data.&lt;/b&gt;
 &lt;b&gt;SnapshotMetadataLoaded&lt;/b&gt; event will be raised.
forceReload: If true, this call will clear any locally cached data and attempt to fetch the latest data from the server. This would commonly be used for something like a user-initiated refresh. Normally, this should be set to false to gain advantages of data caching.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>forceReload</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>GetSnapshotMetadataFromIntentExtra</name>
            <comment>Retrieves the GPGSSnapshotMetadata of a snapshot from the given intent.
Intent: The intent from which you want to fetch the snapshot metadata.</comment>
            <returntype>com.biswajit.gpgservicenew.SnapshotMetadataWrapper</returntype>
            <parameter>
                <name>Intent</name>
                <type>anywheresoftware.b4a.objects.IntentWrapper</type>
            </parameter>
        </method>
        <method>
            <name>OpenWithConflictPolicy</name>
            <comment>Asynchronously opens a snapshot with the given SnapshotMetadata (usually returned from Load().
 To succeed, the snapshot must exist; i.e. this call will fail if the snapshot was deleted between the load and open calls.
 If a conflict occurred the conflict will need to be resolved using resolveConflict to continue with opening the snapshot.
 If the snapshot's contents are unavailable, the Task will fail.
 &lt;b&gt;SnapshotOpened&lt;/b&gt; event will be raised if the task completes successfully.
 &lt;b&gt;SnapshotContentUnavailable&lt;/b&gt; event will be raised if the task failed.
 &lt;b&gt;SnapshotConflictOccurred&lt;/b&gt; event will be raised if a conflict occurred. The conflict will need to be resolved using resolveConflict to continue with opening the snapshot.
metadata: The metadata of the existing snapshot to load.
conflictPolicy: The conflict resolution policy to use for this snapshot.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>metadata</name>
                <type>com.biswajit.gpgservicenew.SnapshotMetadataWrapper</type>
            </parameter>
            <parameter>
                <name>conflictPolicy</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetSnapshotFromBuffer</name>
            <comment>Get the snapshot object from the buffer.
 If the buffer is not loaded yet it will return null. Call Load to populate the buffer.
position: Position of the item.</comment>
            <returntype>com.biswajit.gpgservicenew.SnapshotWrapper</returntype>
            <parameter>
                <name>position</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>ResolveConflictWithData</name>
            <comment>Asynchronously resolves a conflict using the data from the provided Snapshot. This will replace the data on the server with the specified Snapshot. Note that it is possible for this operation to result in a conflict itself, in which case resolution should be repeated.
 If a conflict occurred the conflict will need to be resolved again using resolveConflict to continue with opening the snapshot.
 Note that the total size of the contents of snapshot may not exceed the size provided by getMaxDataSize().
 This method fails when called with a snapshot that was not opened or has already been committed/discarded.
 If the resolved snapshot's contents are unavailable, the task will fail.
 &lt;b&gt;SnapshotOpened&lt;/b&gt; event will be raised if the task completes successfully.
 &lt;b&gt;SnapshotContentUnavailable&lt;/b&gt; event will be raised if the task failed.
 &lt;b&gt;SnapshotConflictOccurred&lt;/b&gt; event will be raised if a conflict occurred. The conflict will need to be resolved using resolveConflict to continue with opening the snapshot.
conflictId: The ID of the conflict to resolve.
snapshotId: The ID of the snapshot to resolve the conflict for.
metadataChange: The set of changes to apply to the metadata for the snapshot.
snapshotContents: The SnapshotContents to replace the snapshot data with.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>conflictId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>snapshotId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>metadataChange</name>
                <type>com.biswajit.gpgservicenew.SnapshotMetadataChangeWrapper</type>
            </parameter>
            <parameter>
                <name>snapshotContents</name>
                <type>com.biswajit.gpgservicenew.SnapshotContentsWrapper</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetSnapshotsBuffer</name>
            <comment>Returns the snapshots buffer.
 If the buffer is not loaded yet it will return null. Call Load to populate the buffer.</comment>
            <returntype>com.biswajit.gpgservicenew.AbstractDataBufferWrapper</returntype>
        </method>
        <method>
            <name>Open</name>
            <comment>Asynchronously opens a snapshot with the given SnapshotMetadata (usually returned from Load().
 To succeed, the snapshot must exist; i.e. this call will fail if the snapshot was deleted between the load and open calls.
 This will open the snapshot using RESOLUTION_POLICY_MANUAL as a conflict policy. If a conflict occurred, an event will raise, and the conflict will need to be resolved using resolveConflict to continue with opening the snapshot.
 If the snapshot's contents are unavailable, the Task will fail.
 &lt;b&gt;SnapshotOpened&lt;/b&gt; event will be raised if the task completes successfully.
 &lt;b&gt;SnapshotContentUnavailable&lt;/b&gt; event will be raised if the task failed.
 &lt;b&gt;SnapshotConflictOccurred&lt;/b&gt; event will be raised if a conflict occurred. The conflict will need to be resolved using resolveConflict to continue with opening the snapshot.
metadata: The metadata of the existing snapshot to load.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>metadata</name>
                <type>com.biswajit.gpgservicenew.SnapshotMetadataWrapper</type>
            </parameter>
        </method>
        <method>
            <name>OpenWithNameAndConflictPolicy</name>
            <comment>Asynchronously opens a snapshot with the given SnapshotMetadata (usually returned from Load().
 To succeed, the snapshot must exist; i.e. this call will fail if the snapshot was deleted between the load and open calls.
 If a conflict occurred the conflict will need to be resolved using resolveConflict to continue with opening the snapshot.
 If the snapshot's contents are unavailable, the Task will fail.
 &lt;b&gt;SnapshotOpened&lt;/b&gt; event will be raised if the task completes successfully.
 &lt;b&gt;SnapshotContentUnavailable&lt;/b&gt; event will be raised if the task failed.
 &lt;b&gt;SnapshotConflictOccurred&lt;/b&gt; event will be raised if a conflict occurred. The conflict will need to be resolved using resolveConflict to continue with opening the snapshot.
fileName: The name of the snapshot file to open. Must be between 1 and 100 non-URL-reserved characters (a-z, A-Z, 0-9, or the symbols "-", ".", "_", or "~").
createIfNotFound: If true, the snapshot will be created if one cannot be found.
conflictPolicy: The conflict resolution policy to use for this snapshot.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>fileName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>createIfNotFound</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>conflictPolicy</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>ResolveConflict</name>
            <comment>Asynchronously resolves a conflict using the provided data. This will replace the data on the server with the specified GPGSSnapshotMetadataChange and GPGSSnapshotContents. Note that it is possible for this operation to result in a conflict itself, in which case resolution should be repeated.
 Values which are not included in the metadata change will be resolved to the version currently on the server.
 If a conflict occurred the conflict will need to be resolved again using resolveConflict to continue with opening the snapshot.
 Note that the total size of the contents of snapshot may not exceed the size provided by getMaxDataSize().
 This method fails when called with a snapshot that was not opened or has already been committed/discarded.
 If the resolved snapshot's contents are unavailable, the task will fail.
 &lt;b&gt;SnapshotOpened&lt;/b&gt; event will be raised if the task completes successfully.
 &lt;b&gt;SnapshotContentUnavailable&lt;/b&gt; event will be raised if the task failed.
 &lt;b&gt;SnapshotConflictOccurred&lt;/b&gt; event will be raised if a conflict occurred. The conflict will need to be resolved using resolveConflict to continue with opening the snapshot.
conflictId: The ID of the conflict to resolve.
snapshot: The snapshot to use to resolve the conflict.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>conflictId</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>snapshot</name>
                <type>com.biswajit.gpgservicenew.SnapshotWrapper</type>
            </parameter>
        </method>
        <method>
            <name>DiscardAndClose</name>
            <comment>Asynchronously discards the contents of the Snapshot and closes it. This will discard all changes made to the file, and close the snapshot to future changes until it is re-opened. The file will not be modified on the server.
 This method fails when called with a snapshot that was not opened or has already been committed/discarded.
 &lt;b&gt;SnapshotDiscardedAndClosed&lt;/b&gt; event will be raised.
snapshot: The snapshot to discard the data for.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>snapshot</name>
                <type>com.biswajit.gpgservicenew.SnapshotWrapper</type>
            </parameter>
        </method>
        <method>
            <name>GetMaxDataSize</name>
            <comment>Asynchronously loads the maximum data size per snapshot in bytes. Guaranteed to be at least 3 MB. May increase in the future.
 &lt;b&gt;SnapshotMaxDataSizeReveived&lt;/b&gt; event will be raised.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>CommitAndClose</name>
            <comment>Asynchronously commits any modifications in GPGSSnapshotMetadataChange made to the GPGSSnapshot and loads a GPGSSnapshotMetadata. The Task returned by this method is complete once the changes are synced locally and the background sync request for this data has been requested.
 This method fails when called with a snapshot that was not opened or has already been committed/discarded.
 Note that the total size of the contents of snapshot may not exceed the size provided by getMaxDataSize().
 &lt;b&gt;SnapshotCommittedAndClosed&lt;/b&gt; event will be raised.
snapshot: The snapshot to commit the data for.
metadataChange: The set of changes to apply to the metadata for the snapshot. Use EMPTY_CHANGE to preserve the existing metadata.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>snapshot</name>
                <type>com.biswajit.gpgservicenew.SnapshotWrapper</type>
            </parameter>
            <parameter>
                <name>metadataChange</name>
                <type>com.biswajit.gpgservicenew.SnapshotMetadataChangeWrapper</type>
            </parameter>
        </method>
        <method>
            <name>OpenWithName</name>
            <comment>Asynchronously opens a snapshot with the given fileName. If createIfNotFound is set to true, the specified snapshot will be created if it does not already exist.
 This will open the snapshot using RESOLUTION_POLICY_MANUAL as a conflict policy. If a conflict occurred the conflict will need to be resolved using resolveConflict to continue with opening the snapshot.
 If the snapshot's contents are unavailable, the Task will fail.
 &lt;b&gt;SnapshotOpened&lt;/b&gt; event will be raised if the task completes successfully.
 &lt;b&gt;SnapshotContentUnavailable&lt;/b&gt; event will be raised if the task failed.
 &lt;b&gt;SnapshotConflictOccurred&lt;/b&gt; event will be raised if a conflict occurred. The conflict will need to be resolved using resolveConflict to continue with opening the snapshot.
fileName: The name of the snapshot file to open. Must be between 1 and 100 non-URL-reserved characters (a-z, A-Z, 0-9, or the symbols "-", ".", "_", or "~").
createIfNotFound: If true, the snapshot will be created if one cannot be found.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>fileName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>createIfNotFound</name>
                <type>boolean</type>
            </parameter>
        </method>
        <field>
            <name>EXTRA_SNAPSHOT_NEW</name>
            <comment>Intent extra used to indicate the user wants to create a new snapshot.</comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>RESOLUTION_POLICY_LAST_KNOWN_GOOD</name>
            <comment>In the case of a conflict, the last known good version of this snapshot will be used. This corresponds to the data that would be returned from getSnapshot() in a custom merge.This policy is a reasonable choice if your game requires stability from the snapshot data. This policy ensures that only writes which are not contested are seen by the player, which guarantees that all clients converge.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESOLUTION_POLICY_LONGEST_PLAYTIME</name>
            <comment>In the case of a conflict, the snapshot with the longest played time will be used. In the case of a tie, the last known good snapshot will be chosen instead. This policy is a good choice if the length of play time is a reasonable proxy for the "best" save game. Note that you must use setPlayedTimeMillis(long) when saving games for this policy to be meaningful.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>EXTRA_SNAPSHOT_METADATA</name>
            <comment>Intent extra used to pass a SnapshotMetadata.</comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>RESOLUTION_POLICY_HIGHEST_PROGRESS</name>
            <comment>In the case of a conflict, the snapshot with the highest progress value will be used. In the case of a tie, the last known good snapshot will be chosen instead. This policy is a good choice if your game uses the progress value of the snapshot to determine the best saved game. Note that you must use setProgressValue(long) when saving games for this policy to be meaningful.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESOLUTION_POLICY_MOST_RECENTLY_MODIFIED</name>
            <comment>In the case of a conflict, the most recently modified version of this snapshot will be used. This corresponds to the data that would be returned from getConflictingSnapshot() in a custom merge. This policy is a reasonable choice if your game can tolerate players on multiple devices clobbering their own changes. Because this policy blindly chooses the most recent data, it is possible that a player's changes may get lost.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>DISPLAY_LIMIT_NONE</name>
            <comment>Constant indicating that the UI should not cap the number of displayed snapshots.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RESOLUTION_POLICY_MANUAL</name>
            <comment>In the case of a conflict, the result will be returned to the app for resolution. No automatic resolution will be performed. This policy ensures that no user changes to the state of the save game will ever be lost.</comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>com.biswajit.gpgservicenew.SnapshotWrapper</name>
        <shortname>GPGSSnapshot</shortname>
        <owner>process</owner>
        <method>
            <name>GetMetadata</name>
            <comment>Retrieves the metadata for this snapshot.</comment>
            <returntype>com.biswajit.gpgservicenew.SnapshotMetadataWrapper</returntype>
        </method>
        <method>
            <name>GetSnapshotContents</name>
            <comment>Retrieve the GPGSSnapshotContents associated with this snapshot.
 This object can be used to update the data of a snapshot.
 Note that this will return null if this snapshot was not obtained via GPGSSnapshotsClient.open method.</comment>
            <returntype>com.biswajit.gpgservicenew.SnapshotContentsWrapper</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
    </class>
    <class>
        <name>com.biswajit.gpgservicenew.VideoCapabilitiesWrapper</name>
        <shortname>GPGSVideoCapabilities</shortname>
        <owner>process</owner>
        <method>
            <name>GetSupportedQualityLevels</name>
            <comment>Returns a collection of all supported capture qualities.</comment>
            <returntype>boolean[]</returntype>
        </method>
        <method>
            <name>IsMicSupported</name>
            <comment>Returns whether the device has a microphone and we can use it.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Equals</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>obj</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>GetSupportedCaptureModes</name>
            <comment>Returns a collection of all supported capture modes.</comment>
            <returntype>boolean[]</returntype>
        </method>
        <method>
            <name>IsCameraSupported</name>
            <comment>Returns whether the device has a front-facing camera and we can use it.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>IsFullySupported</name>
            <comment>Checks if the capture mode and quality level are support, and camera, mic, and storage write.
captureMode: One of these values: CAPTURE_MODE_FILE or CAPTURE_MODE_STREAM.
qualityLevel: One of these values: QUALITY_LEVEL_SD, QUALITY_LEVEL_HD, QUALITY_LEVEL_FULLHD, or QUALITY_LEVEL_XHD.
Return type: @return:</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>captureMode</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>qualityLevel</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsWriteStorageSupported</name>
            <comment>Returns whether the device has an external storage device and we can use it.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>SupportsCaptureMode</name>
            <comment>Returns whether the device supports the given capture mode.
captureMode: One of these values: CAPTURE_MODE_FILE or CAPTURE_MODE_STREAM.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>captureMode</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SupportsQualityLevel</name>
            <comment>Returns whether the device supports the given quality level.
qualityLevel: One of these values: QUALITY_LEVEL_SD, QUALITY_LEVEL_HD, QUALITY_LEVEL_FULLHD, or QUALITY_LEVEL_XHD.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>qualityLevel</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <field>
            <name>QUALITY_LEVEL_XHD</name>
            <comment>Extreme HD quality: BluRay HD resolution (i.e. 1080p) and a high bit rate (e.g. 6-8Mbps).</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>CAPTURE_MODE_STREAM</name>
            <comment>Capture device audio and video, and stream it live.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>QUALITY_LEVEL_HD</name>
            <comment>HD quality: DVD HD resolution (i.e. 720p) and a medium bit rate (e.g. 3-4Mbps).</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>CAPTURE_MODE_FILE</name>
            <comment>Capture device audio and video to a local file.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>QUALITY_LEVEL_FULLHD</name>
            <comment>Full HD quality: 2160P resolution and high bit rate, e.g. 10-12Mbps.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>QUALITY_LEVEL_SD</name>
            <comment>SD quality: Standard def resolution (e.g. 480p) and a low bit rate (e.g. 1-2Mbps).</comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>com.biswajit.gpgservicenew.VideoCaptureStateWrapper</name>
        <shortname>GPGSVideoCaptureState</shortname>
        <owner>process</owner>
        <method>
            <name>GetCaptureMode</name>
            <comment>Returns the capture mode of the current capture. One of CAPTURE_MODE_FILE, CAPTURE_MODE_STREAM, or CAPTURE_MODE_STREAM when not capturing.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>IsOverlayVisible</name>
            <comment>Returns whether the capture overlay is currently visible or not. This also indicates the capture overlay is being used by the user and background capture will fail.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetCaptureQuality</name>
            <comment>Returns the quality level of the current capture. One of QUALITY_LEVEL_FULLHD, QUALITY_LEVEL_XHD, QUALITY_LEVEL_HD, QUALITY_LEVEL_SD, or QUALITY_LEVEL_UNKNOWN when not capturing.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>IsCapturing</name>
            <comment>Returns whether the service is currently capturing or not.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>IsPaused</name>
            <comment>Returns whether the capture is currently paused or not. Will always be false if isCapturing() if false.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>ToString</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <field>
            <name>QUALITY_LEVEL_UNKNOWN</name>
            <comment>An unknown value to return when quality level is not available.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>QUALITY_LEVEL_XHD</name>
            <comment>Extreme HD quality: BluRay HD resolution (i.e. 1080p) and a high bit rate (e.g. 6-8Mbps).</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>CAPTURE_MODE_UNKNOWN</name>
            <comment>An unknown value to return when capture mode is not available.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>CAPTURE_MODE_STREAM</name>
            <comment>Capture device audio and video, and stream it live.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>QUALITY_LEVEL_HD</name>
            <comment>HD quality: DVD HD resolution (i.e. 720p) and a medium bit rate (e.g. 3-4Mbps).</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>QUALITY_LEVEL_FULLHD</name>
            <comment>Full HD quality: 2160P resolution and high bit rate, e.g. 10-12Mbps.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>CAPTURE_MODE_FILE</name>
            <comment>Capture device audio and video to a local file.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>QUALITY_LEVEL_SD</name>
            <comment>SD quality: Standard def resolution (e.g. 480p) and a low bit rate (e.g. 1-2Mbps).</comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>com.biswajit.gpgservicenew.VideosClientWrapper</name>
        <shortname>GPGSVideosClient</shortname>
        <owner>process</owner>
        <event>VideoCaptureCapabilitiesReceived(capabilities as GPGSVideoCapabilities, statusCode as int)</event>
        <event>VideoCaptureOverlayIntentReceived(intent as Intent, statusCode as int)</event>
        <event>VideoCaptureStateReceived(status as GPGSVideoCaptureState, statusCode as int)</event>
        <event>VideoCaptureAvailable(available as Boolean, statusCode as int)</event>
        <event>VideoCaptureSupported(supported as Boolean, statusCode as int)</event>
        <event>VideoCaptureOverlayStateChanged(state as int)</event>
        <event>VideoCaptureOverlayStateChangedListenerRemoved(statusCode as int)</event>
        <method>
            <name>UnregisterOnCaptureOverlayStateChangedListener</name>
            <comment>Asynchronously unregisters this client's overlay state update listener, if any, and loads the result. The result will be true if the callback was unregistered and false if this callback wasn't registered previously or is already unregistered.
 &lt;b&gt;VideoCaptureOverlayStateChangedListenerRemoved&lt;/b&gt; event will be raised if the callback was unregistered successfully.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>GetCaptureState</name>
            <comment>Asynchronously fetches the current CaptureState of the capture service. This will inform about whether the capture overlay is visible, if the overlay is actively being used to capture, and a much more. See CaptureState for more details.
 &lt;b&gt;VideoCaptureStateReceived&lt;/b&gt; event will be raised.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>IsCaptureSupported</name>
            <comment>Asynchronously checks whether the device supports capture. If the Task result is true then capture is supported.
 &lt;b&gt;VideoCaptureSupported&lt;/b&gt; event will be raised.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>IsCaptureAvailable</name>
            <comment>Asynchronously fetches whether the capture service is already in use. Use this call to check if a start capture API call will return VIDEO_ALREADY_CAPTURING.
 If the Task result is true, then it's safe to start capturing. If it's already in use then the result is false.
 Do not use this call to check if capture is supported, instead use isCaptureSupported() or getCaptureCapabilities().
 &lt;b&gt;VideoCaptureAvailable&lt;/b&gt; event will be raised.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>captureMode</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>RegisterOnCaptureOverlayStateChangedListener</name>
            <comment>Asynchronously registers a OnCaptureOverlayStateListener to listen for changes to the overlay state launched by getCaptureOverlayIntent().
 Note that only one overlay state listener may be active at a time. Calling this method while another overlay state listener was previously registered will replace the original listener with the new one.
 Possible return values include: CAPTURE_OVERLAY_STATE_SHOWN, CAPTURE_OVERLAY_STATE_CAPTURE_STARTED, CAPTURE_OVERLAY_STATE_CAPTURE_STOPPED, CAPTURE_OVERLAY_STATE_DISMISSED.
 &lt;b&gt;VideoCaptureOverlayStateChanged&lt;/b&gt; event will be raised.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetCaptureOverlayIntent</name>
            <comment>Asynchronously loads an Intent to launch the capture overlay. This will automatically handle any necessary resolution intents.
 &lt;b&gt;VideoCaptureOverlayIntentReceived&lt;/b&gt; event will be raised.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>GetCaptureCapabilities</name>
            <comment>Returns a Task which asynchronously fetches the VideoCapabilities of the service, whether the mic or front-facing camera are supported,
 if the service can write to external storage, and what capture modes and quality levels are available.
 &lt;b&gt;VideoCaptureCapabilitiesReceived&lt;/b&gt; event will be raised.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <field>
            <name>CAPTURE_OVERLAY_STATE_DISMISSED</name>
            <comment>State used to indicate that the user has dismissed the capture overlay and it is no longer visible.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>CAPTURE_OVERLAY_STATE_SHOWN</name>
            <comment>State used to indicate that the capture overlay is drawn on the screen and visible to the user.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>CAPTURE_OVERLAY_STATE_CAPTURE_STARTED</name>
            <comment>State used to indicate that the user has initiated capture via the capture overlay.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>CAPTURE_OVERLAY_STATE_CAPTURE_STOPPED</name>
            <comment>State used to indicate that the user has stopped capturing via the capture overlay.</comment>
            <returntype>int</returntype>
        </field>
    </class>
    <version>1.05</version>
    <author>Biswajit Sarkar</author>
    <dependsOn>com.google.android.gms:play-services-auth</dependsOn>
    <dependsOn>com.google.android.gms:play-services-auth-base</dependsOn>
    <dependsOn>com.google.android.gms:play-services-base</dependsOn>
    <dependsOn>com.google.android.gms:play-services-basement</dependsOn>
    <dependsOn>com.google.android.gms:play-services-games</dependsOn>
    <dependsOn>com.google.android.gms:play-services-nearby</dependsOn>
    <dependsOn>com.google.android.gms:play-services-tasks</dependsOn>
</root>
