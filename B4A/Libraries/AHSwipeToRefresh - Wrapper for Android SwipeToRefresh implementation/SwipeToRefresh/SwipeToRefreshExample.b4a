Version=4.3
IconFile=
NumberOfModules=0
Build1=Default,de.amberhome.swiperefreshexample
DoNotOverwriteManifest=False
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: http://www.basic4ppc.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="4" android:targetSdkVersion="21"/>~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~'End of default text.~\n~
NumberOfFiles=1
File1=l1.bal
NumberOfLibraries=3
Library1=ahswipetorefresh
Library2=core
Library3=compatactionbar
@EndOfDesignText@
#Region  Project Attributes 
	#ApplicationLabel: SwipeToRefresh Example
	#VersionCode: 1
	#VersionName: 
	'SupportedOrientations possible values: unspecified, landscape or portrait.
	#SupportedOrientations: unspecified
	#CanInstallToExternalStorage: False
#End Region

#Region  Activity Attributes 
	#FullScreen: False
	#IncludeTitle: True
#End Region

Sub Process_Globals
	'These global variables will be declared once when the application starts.
	'These variables can be accessed from all modules.

	'A timer to simulate some background work
	Dim tm As Timer
End Sub

Sub Globals
	'These global variables will be redeclared each time the activity is created.
	'These variables can only be accessed from this module.

	Dim STR As AHSwipeToRefresh
	Dim ListView1 As ListView

End Sub

Sub Activity_Create(FirstTime As Boolean)
	'Since AHSwipeToRefresh is a custom view it can be added to the designer.
	'The view that should have the STR feature should be the only view added to the AHSwipeToRefresh view.
	Activity.LoadLayout("l1")

	'This would be the manual method to add the AHSwipeToRefresh object to the Activity
	'STR.Initialize("STR")
	'Activity.AddView(STR, 0, 0, 100%x, 100%y)

	'It is not possible to add child objects to custom views in the designer.
	'So we have to add the listview manually here.
	ListView1.Initialize("")
	STR.AddView(ListView1)

	'Set a color scheme for the progress bar. There are no default colors so you have to specify a color scheme.
	'Otherwise only black is used.
	'STR.SetColorScheme(Colors.Red, Colors.Green, Colors.Blue, Colors.Yellow)
	STR.SetColorScheme2(Array As Int (Colors.Red, Colors.Blue, Colors.Green, Colors.Cyan, Colors.Magenta, Colors.Yellow))
	
	'optionally set the offset where the spinning disc should appear. This is useful if a Toolbar overlaps the ListView.
	'STR.SetProgressViewOffset(True, -20dip, 10dip)
	
	'optionally set a larger spinning disc
	'STR.Size = STR.SIZE_LARGE
	
	'optionally you can define your own background color for the spinning disc
	'STR.ProgressBackgroundColor = Colors.Magenta
	
	'Add a menu for manual refresh
	Activity.AddMenuItem3("Refresh", "Menu", Null, True)
	
	'Refresh the Listview to show initially data
	RefreshListView
End Sub

Sub Activity_Resume

End Sub

Sub Activity_Pause (UserClosed As Boolean)

End Sub

'Manually start a refresh from menu button
Sub Menu_Click
	Log("Manual Refresh")
	STR.Refreshing = True
	STR_Refresh
End Sub

'When a refresh is triggered we start a timer to simulate a running task. The job should be started asynchronously.
Sub STR_Refresh
	Log("Refresh started")

	'Start the timer. Normally you will start your asynchronous job here
	tm.Initialize("Timer", 5000)
	tm.Enabled = True
	
	'Disable the STR object so we can not start a new refresh process
	STR.Enabled = False
End Sub

'The timer tick simulates the end of the refreshing process
Sub Timer_Tick
	Log("Refresh stopped")
	
	'Stop Timer and refresh the listview data
	tm.Enabled = False
	RefreshListView

	'Stop the spinning disc and enable the STR object again.
	STR.Refreshing = False
	STR.Enabled = True
End Sub

'Refresh the Listview data
Sub RefreshListView
	ListView1.Clear

	For i = 0 To 20
		ListView1.AddSingleLine("Entry " & Rnd(0, 100))
	Next
End Sub

'For custom views you can decide, when your custom view can still scroll up or not.
'If it can not scroll up any further you should return false. In this case the swipe to refresh action starts.
'If you return true the SwipeToRefresh object will not start the refresh action.
'
'For ListView and ScrollView (and all views based on them like CustomListView class etc. you don't need to implement
'this Sub because the SwipeToRefresh object has automatic handling for ListViews and ScrollViews.
'
'Sub STR_CanChildScrollUp As Boolean
'	If myCustomViewCanStillScrollUp Then
'		Return True
'	Else
'		Return False
'	End If
'End Sub

