Build1=Default,gpb.example
File1=Layout.bal
FileGroup1=Default Group
Group=Default Group
Library1=core
Library2=gpbilling_je
Library3=xui
Library4=googleplaybilling
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: https://www.b4x.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="21" android:targetSdkVersion="33"/>~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~CreateResourceFromFile(Macro, Themes.LightTheme)~\n~'End of default text.~\n~~\n~CreateResourceFromFile(Macro, GooglePlayBilling.GooglePlayBilling)~\n~
Module1=Starter
NumberOfFiles=1
NumberOfLibraries=4
NumberOfModules=1
Version=12.8
@EndOfDesignText@
#Region  Project Attributes 
	#ApplicationLabel: GPBilling Example
	#VersionCode: 1
	#VersionName: 
	'SupportedOrientations possible values: unspecified, landscape or portrait.
	#SupportedOrientations: unspecified
	#CanInstallToExternalStorage: False
#End Region

#Region  Activity Attributes 
	#FullScreen: False
	#IncludeTitle: True
#End Region


Sub Process_Globals
	'These global variables will be declared once when the application starts.
	'These variables can be accessed from all modules.
	Private xui As XUI
	Private br As BillingResult
	Private gpb As GPBilling
	
	Public LICENSE_KEY As String
	Private lSKU_INAPP As List
	Private lSKU_SUBS As List
End Sub

Sub Globals
	'These global variables will be redeclared each time the activity is created.
End Sub

Sub Activity_Create(FirstTime As Boolean)
	Activity.LoadLayout("Layout")
	lSKU_INAPP.Initialize
	lSKU_SUBS.Initialize
	
	LICENSE_KEY = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqt9Is4LyBX0dIXPEerR6fvbFGy0e/oyrXbcDDQ+Xfq2O+r+dv6F5AINrTesFDZ4csW1q16TXTptHQ1WoyS/1g9VOPwlJ+ZrVpuGQ2ezanSFrrNSa71smJWKi6D3sXnaMiYfopsxP0bwge37YoeeI18cYN/eeW+uzYRTvh6MpyEmjalHUGCsH6GY6D5D2tqaWJSE14rgAkzwulVhpwWjwNb0RYdCmoAKJPTRSQLPoUlnrvx9TSq5CnMM09IIUR9xbkkHrPBv72+Xzp546ytE1rFT/f/T9+cVpfrxCHJ8zi1FEG86+7TQeOpb527vn2pbVFv/xOVq9M9W2cpdSa+SY/wIDAQAB"

'	LICENSE_KEY = "MIIBIjAN......................"    
	lSKU_INAPP.Add("pro.gpbtest2")
	lSKU_INAPP.Add("pro.gpbtest3")
	lSKU_SUBS.Add("silver.gpbtest")
	lSKU_SUBS.Add("gold.gpbtest")

	gpb.Initialize(Me, "gpb", LICENSE_KEY)
End Sub

Sub Activity_Resume

End Sub

Sub Activity_Pause (UserClosed As Boolean)

End Sub

Private Sub btnGetInAppProducts_Click
	Wait For (gpb.GetInAppProducts(lSKU_INAPP)) Complete (iar As ProductResult)
	If iar.ResponseCode = br.CODE_OK Then
		Dim lProducts As List
		lProducts.Initialize
		lProducts.AddAll(iar.ProductsList)
		For i = 0 To lProducts.Size - 1
			Dim iap As InAppProduct
			iap.Initialize
			iap = lProducts.Get(i)
			
			Wait For(gpb.IsPurchased("inapp",iap.ProductId)) Complete (pResult As PurchasedResult)
			Log (pResult.ItemPurchased)
			Log(iap.Name)
			Log(iap.Description)
			Log(iap.FormattedPrice)
'			ect
		Next
	Else
		Log(iar.ResponseCode)
		Log(gpb.ReturnResponseMessage(iar.ResponseCode))
	End If
End Sub

Private Sub btnGetSubscriptions_Click
	Wait For (gpb.GetSubscriptions(lSKU_SUBS)) Complete (sur As ProductResult)
	If sur.ResponseCode = br.CODE_OK Then
		Dim lProducts As List
		lProducts.Initialize
		lProducts.AddAll(sur.ProductsList)
		For i = 0 To lProducts.Size - 1
			Dim sup As SubsProduct
			sup.Initialize
			sup = lProducts.Get(i)
			
			Wait For(gpb.IsPurchased("subs",sup.ProductId)) Complete (pResult As PurchasedResult)
			Log (pResult.ItemPurchased)
			Log (sup.Name)
			Log (sup.ProductId)
'			etc

			Dim ldet As List
			ldet.Initialize
			ldet.AddAll(sup.SubscriptionOfferDetails)
			For j = 0 To ldet.Size - 1
				Dim so As SubsOffer = ldet.Get(j)
				LogColor(so.BasePlanId,Colors.Blue)
				LogColor(so.OfferId,Colors.Blue)
				LogColor(so.OfferToken,Colors.Blue)
				
				Dim phases As List
				phases.Initialize
				phases = so.PricingPhaseList
				For k = 0 To phases.Size - 1
					Dim prph As PricingPhase
					prph = phases.Get(k)
					LogColor(prph.BillingCycleCount, Colors.Green)
					LogColor(prph.BillingPeriod, Colors.Green)
					LogColor(prph.FormattedPrice, Colors.Green)
'					etc
				Next
			Next
		Next
	Else
		Log(sur.ResponseCode)
		Log(gpb.ReturnResponseMessage(sur.ResponseCode))
	End If

End Sub

Private Sub btnPurchaseInAppProducts_Click
	Dim lSKUs As List
	lSKUs.Initialize
	lSKUs.Add("pro.gpbtest3")
	Wait For(gpb.PurchaseInAppProducts(lSKUs)) Complete (Result2 As BillingResult)
'	event will be raised
		
End Sub

Private Sub	 gpb_PurchaseCompleted(p As Purchase)
	Log("purchased")
'	SetUserEntitlement (p.sku, True)
End Sub

Private Sub	 gpb_PurchaseError(Result As BillingResult)
	Log(gpb.ReturnResponseMessage(Result.ResponseCode))
End Sub


Private Sub btnConsumeProducts_Click
	Dim sku As String = "pro.gpbtest3"
	Wait For(gpb.ConsumeProducts("inapp", sku)) Complete (Result1 As BillingResult)
	If Result1.IsSuccess Then
		Log("consumed")
'		SetUserEntitlement (sku, False)
	End If
End Sub